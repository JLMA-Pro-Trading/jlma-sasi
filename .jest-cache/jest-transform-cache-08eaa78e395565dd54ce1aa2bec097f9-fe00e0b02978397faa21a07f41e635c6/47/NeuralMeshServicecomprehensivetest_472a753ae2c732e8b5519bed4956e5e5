71a8fb7071e7dbf42e118e402387bbb5
"use strict";
/**
 * Comprehensive TDD Tests for NeuralMeshService - Additional Coverage
 * Target: Push coverage from 75% to >95% using systematic TDD approach
 * Focus: Edge cases, error paths, and uncovered methods
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NeuralMeshService_1 = require("../../../src/services/NeuralMeshService");
// Mock all external dependencies
global.WebSocket = jest.fn().mockImplementation(() => ({
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    close: jest.fn(),
    send: jest.fn(),
    readyState: 1,
    onopen: null,
    onmessage: null,
    onerror: null,
    onclose: null
}));
global.fetch = jest.fn().mockResolvedValue({
    json: jest.fn().mockResolvedValue({ success: true, data: {} })
});
describe('NeuralMeshService - Comprehensive Coverage Tests', () => {
    let service;
    beforeEach(() => {
        jest.clearAllMocks();
        service = new NeuralMeshService_1.NeuralMeshService({
            serverUrl: 'ws://localhost:3000',
            transport: 'websocket',
            enableWasm: true,
            enableRealtime: true,
            debugMode: true
        });
    });
    afterEach(async () => {
        if (service) {
            await service.shutdown();
        }
    });
    describe('Configuration Edge Cases', () => {
        test('should handle empty configuration object', () => {
            const emptyService = new NeuralMeshService_1.NeuralMeshService({});
            expect(emptyService).toBeDefined();
            expect(emptyService.getConnectionStatus()).toBeNull();
        });
        test('should handle undefined configuration', () => {
            const undefinedService = new NeuralMeshService_1.NeuralMeshService();
            expect(undefinedService).toBeDefined();
            expect(undefinedService.isWasmEnabled()).toBe(false);
        });
        test('should handle partial configuration with all transports', () => {
            const httpService = new NeuralMeshService_1.NeuralMeshService({ transport: 'http' });
            const stdioService = new NeuralMeshService_1.NeuralMeshService({ transport: 'stdio' });
            const wsService = new NeuralMeshService_1.NeuralMeshService({ transport: 'websocket' });
            expect(httpService).toBeDefined();
            expect(stdioService).toBeDefined();
            expect(wsService).toBeDefined();
        });
    });
    describe('Transport Layer Coverage', () => {
        test('should initialize HTTP transport successfully', async () => {
            const httpService = new NeuralMeshService_1.NeuralMeshService({
                serverUrl: 'http://localhost:3000',
                transport: 'http',
                enableWasm: false,
                debugMode: true
            });
            const connected = await httpService.initialize();
            expect(connected).toBe(true);
            expect(httpService.getConnectionStatus()?.status).toBe('connected');
            await httpService.shutdown();
        });
        test('should initialize STDIO transport successfully', async () => {
            const stdioService = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                enableWasm: true,
                debugMode: false
            });
            const connected = await stdioService.initialize();
            expect(connected).toBe(true);
            expect(stdioService.isWasmEnabled()).toBe(true);
            await stdioService.shutdown();
        });
        test('should handle unsupported transport type', async () => {
            const badService = new NeuralMeshService_1.NeuralMeshService({
                transport: 'invalid',
                debugMode: true
            });
            const connected = await badService.initialize();
            expect(connected).toBe(false);
            expect(badService.getConnectionStatus()?.status).toBe('error');
        });
    });
    describe('WebSocket Connection Edge Cases', () => {
        test('should handle WebSocket connection timeout', async () => {
            let eventCallback;
            const mockWS = {
                addEventListener: jest.fn((event, callback) => {
                    eventCallback = callback;
                    // Don't trigger any events to simulate timeout
                }),
                close: jest.fn(),
                send: jest.fn(),
                readyState: 0 // CONNECTING
            };
            global.WebSocket.mockImplementation(() => mockWS);
            const connected = await service.initialize();
            expect(connected).toBe(false);
        });
        test('should handle WebSocket with immediate error', async () => {
            const mockWS = {
                addEventListener: jest.fn((event, callback) => {
                    if (event === 'error') {
                        // Immediate error
                        callback({ type: 'error', message: 'Connection refused' });
                    }
                }),
                close: jest.fn(),
                send: jest.fn(),
                readyState: 3 // CLOSED
            };
            global.WebSocket.mockImplementation(() => mockWS);
            const connected = await service.initialize();
            expect(connected).toBe(false);
            expect(service.getConnectionStatus()?.status).toBe('error');
        });
        test('should handle message processing', async () => {
            const mockWS = {
                addEventListener: jest.fn((event, callback) => {
                    if (event === 'open') {
                        setTimeout(() => callback({ type: 'open' }), 1);
                    }
                    else if (event === 'message') {
                        setTimeout(() => {
                            callback({
                                data: JSON.stringify({
                                    type: 'test',
                                    payload: { message: 'Hello from neural mesh' }
                                })
                            });
                        }, 5);
                    }
                }),
                close: jest.fn(),
                send: jest.fn(),
                readyState: 1
            };
            global.WebSocket.mockImplementation(() => mockWS);
            const connected = await service.initialize();
            expect(connected).toBe(true);
            // Trigger message event
            const messageCallback = mockWS.addEventListener.mock.calls.find(call => call[0] === 'message')?.[1];
            if (messageCallback) {
                messageCallback({
                    data: JSON.stringify({ type: 'neural_update', data: { activity: 0.75 } })
                });
            }
        });
    });
    describe('WASM Integration Coverage', () => {
        test('should handle WASM initialization failure gracefully', async () => {
            const wasmService = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                enableWasm: true,
                debugMode: true
            });
            // Mock WASM failure by overriding the private method
            const originalInitWasm = wasmService.initializeWasm;
            wasmService.initializeWasm = jest.fn().mockRejectedValue(new Error('WASM failed'));
            const connected = await wasmService.initialize();
            expect(connected).toBe(true); // Should still connect without WASM
            expect(wasmService.isWasmEnabled()).toBe(false); // But WASM should be disabled
            await wasmService.shutdown();
        });
        test('should process inference with WASM disabled', async () => {
            const jsService = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                enableWasm: false,
                debugMode: true
            });
            await jsService.initialize();
            const input = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5]);
            const result = await jsService.processInference(input);
            expect(result.output).toBeInstanceOf(Float32Array);
            expect(result.output.length).toBe(input.length);
            expect(result.metrics.simdAccelerated).toBe(false);
            expect(result.metrics.executionTime).toBeGreaterThan(0);
            await jsService.shutdown();
        });
        test('should handle different input sizes for inference', async () => {
            const wasmService = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                enableWasm: true,
                debugMode: false
            });
            await wasmService.initialize();
            // Test various input sizes
            const testSizes = [1, 10, 100, 1000];
            for (const size of testSizes) {
                const input = new Float32Array(size).fill(0.5);
                const result = await wasmService.processInference(input);
                expect(result.output.length).toBe(size);
                expect(result.metrics.inputSize).toBe(size);
                expect(result.metrics.outputSize).toBe(size);
            }
            await wasmService.shutdown();
        });
    });
    describe('Agent Lifecycle Coverage', () => {
        test('should handle agent creation with minimal config', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService({ transport: 'stdio' });
            await service.initialize();
            const agent = await service.spawnAgent({});
            expect(agent.id).toBeDefined();
            expect(agent.type).toBe('worker');
            expect(agent.neuralProperties.nodeType).toBe('inter');
            expect(agent.neuralProperties.layer).toBe(1);
            expect(agent.neuralProperties.threshold).toBe(0.5);
            await service.shutdown();
        });
        test('should handle agent creation with full config', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService({ transport: 'stdio' });
            await service.initialize();
            const fullConfig = {
                id: 'test-agent-full',
                type: 'coordinator',
                capabilities: ['planning', 'coordination'],
                metadata: { role: 'leader', priority: 'high' },
                neuralProperties: {
                    neuronId: 'neuron-123',
                    meshId: 'mesh-456',
                    nodeType: 'pyramidal',
                    layer: 3,
                    threshold: 0.8,
                    activation: 0.2,
                    connections: ['neuron-1', 'neuron-2'],
                    spikeHistory: [0.1, 0.3, 0.7],
                    lastSpike: new Date()
                },
                wasmMetrics: {
                    executionTime: 5.5,
                    memoryUsage: 2.1,
                    simdAcceleration: true,
                    performanceScore: 0.95
                }
            };
            const agent = await service.spawnAgent(fullConfig);
            expect(agent.id).toBe('test-agent-full');
            expect(agent.type).toBe('coordinator');
            expect(agent.neuralProperties.nodeType).toBe('pyramidal');
            expect(agent.neuralProperties.layer).toBe(3);
            expect(agent.neuralProperties.threshold).toBe(0.8);
            await service.shutdown();
        });
        test('should update connection stats when spawning agents', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService({ transport: 'stdio', debugMode: true });
            await service.initialize();
            const initialStatus = service.getConnectionStatus();
            expect(initialStatus?.nodeCount).toBe(0);
            await service.spawnAgent({ id: 'agent-1' });
            await service.spawnAgent({ id: 'agent-2' });
            const updatedStatus = service.getConnectionStatus();
            expect(updatedStatus?.nodeCount).toBe(2);
            await service.shutdown();
        });
    });
    describe('Error Handling Coverage', () => {
        test('should throw error when spawning agent without connection', async () => {
            const disconnectedService = new NeuralMeshService_1.NeuralMeshService();
            await expect(disconnectedService.spawnAgent({ id: 'test' }))
                .rejects.toThrow('Neural mesh not connected');
        });
        test('should throw error when processing inference without connection', async () => {
            const disconnectedService = new NeuralMeshService_1.NeuralMeshService();
            await expect(disconnectedService.processInference(new Float32Array([1, 2, 3])))
                .rejects.toThrow('Neural mesh not connected');
        });
        test('should handle initialization error with WASM enabled', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService({
                transport: 'invalid',
                enableWasm: true,
                debugMode: true
            });
            const connected = await service.initialize();
            expect(connected).toBe(false);
            expect(service.getConnectionStatus()?.status).toBe('error');
        });
    });
    describe('Shutdown and Cleanup Coverage', () => {
        test('should cleanup all resources on shutdown', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                enableWasm: true,
                enableRealtime: true,
                debugMode: true
            });
            await service.initialize();
            expect(service.getConnectionStatus()).not.toBeNull();
            expect(service.isWasmEnabled()).toBe(true);
            await service.shutdown();
            expect(service.getConnectionStatus()).toBeNull();
        });
        test('should handle shutdown when not initialized', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService();
            // Should not throw error
            await expect(service.shutdown()).resolves.not.toThrow();
        });
        test('should handle multiple shutdown calls', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService({ transport: 'stdio' });
            await service.initialize();
            await service.shutdown();
            await service.shutdown(); // Second call should be safe
            await service.shutdown(); // Third call should be safe
        });
    });
    describe('Performance Edge Cases', () => {
        test('should handle very large inference batches', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                enableWasm: true,
                debugMode: false
            });
            await service.initialize();
            const largeInput = new Float32Array(10000).fill(0.5);
            const result = await service.processInference(largeInput);
            expect(result.output.length).toBe(10000);
            expect(result.metrics.executionTime).toBeGreaterThan(0);
            expect(result.metrics.memoryUsage).toBeGreaterThan(0);
            await service.shutdown();
        });
        test('should handle rapid agent spawning', async () => {
            const service = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                debugMode: false
            });
            await service.initialize();
            const agents = [];
            const spawnPromises = [];
            for (let i = 0; i < 50; i++) {
                spawnPromises.push(service.spawnAgent({ id: `rapid-agent-${i}` }));
            }
            const spawnedAgents = await Promise.all(spawnPromises);
            expect(spawnedAgents).toHaveLength(50);
            expect(service.getConnectionStatus()?.nodeCount).toBe(50);
            await service.shutdown();
        });
    });
    describe('Debug Mode Coverage', () => {
        test('should log debug messages when debug mode enabled', async () => {
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            const debugService = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                enableWasm: true,
                debugMode: true
            });
            await debugService.initialize();
            await debugService.spawnAgent({ id: 'debug-agent' });
            await debugService.processInference(new Float32Array([0.5]));
            await debugService.shutdown();
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
        });
        test('should not log debug messages when debug mode disabled', async () => {
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            const silentService = new NeuralMeshService_1.NeuralMeshService({
                transport: 'stdio',
                enableWasm: false,
                debugMode: false
            });
            await silentService.initialize();
            await silentService.shutdown();
            // Should have minimal or no console output
            const debugCalls = consoleSpy.mock.calls.filter(call => call.some(arg => typeof arg === 'string' && arg.includes('🧠')));
            expect(debugCalls.length).toBe(0);
            consoleSpy.mockRestore();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,