f0120e75c2b70bd8968445825896594a
"use strict";
/**
 * Integration Tests for Neural-SASI Coordination
 * Tests interaction between SASI frontend and neural mesh backend
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const neural_test_utils_1 = require("../utils/neural-test-utils");
(0, globals_1.describe)('Neural-SASI Coordination Integration Tests', () => {
    let neuralService;
    let memoryDetector;
    (0, globals_1.beforeEach)(async () => {
        neuralService = new neural_test_utils_1.MockNeuralMeshService();
        await neuralService.initialize();
        memoryDetector = neural_test_utils_1.PerformanceTestUtils.createMemoryLeakDetector();
    });
    (0, globals_1.afterEach)(async () => {
        await neuralService.disconnect();
        neural_test_utils_1.NeuralAssertions.assertNoMemoryLeaks(memoryDetector);
    });
    (0, globals_1.describe)('Service Initialization', () => {
        (0, globals_1.test)('should initialize neural mesh service successfully', async () => {
            const service = new neural_test_utils_1.MockNeuralMeshService();
            const initialized = await service.initialize();
            (0, globals_1.expect)(initialized).toBe(true);
            const status = service.getConnectionStatus();
            neural_test_utils_1.NeuralAssertions.assertValidMeshConnection(status);
            (0, globals_1.expect)(status.status).toBe('connected');
            await service.disconnect();
        });
        (0, globals_1.test)('should establish mesh connection with proper topology', async () => {
            const status = neuralService.getConnectionStatus();
            (0, globals_1.expect)(status).not.toBeNull();
            (0, globals_1.expect)(status.nodeCount).toBeGreaterThan(0);
            (0, globals_1.expect)(status.synapseCount).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(status.meshId).toMatch(/^mesh_/);
        });
        (0, globals_1.test)('should emit connection events during initialization', (done) => {
            const service = new neural_test_utils_1.MockNeuralMeshService();
            service.on('connected', (connection) => {
                (0, globals_1.expect)(connection).toBeDefined();
                neural_test_utils_1.NeuralAssertions.assertValidMeshConnection(connection);
                done();
            });
            service.initialize();
        });
        (0, globals_1.test)('should handle initialization failure gracefully', async () => {
            const service = new neural_test_utils_1.MockNeuralMeshService();
            // Mock initialization failure
            globals_1.jest.spyOn(service, 'initialize').mockResolvedValue(false);
            const result = await service.initialize();
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('Multi-Agent Coordination', () => {
        (0, globals_1.test)('should coordinate multiple agents working on same mesh', async () => {
            const agentTypes = ['researcher', 'coder', 'tester', 'reviewer'];
            const agents = [];
            // Create diverse agent team
            for (const type of agentTypes) {
                const agent = await neuralService.createNeuralAgent(type);
                (0, globals_1.expect)(agent).not.toBeNull();
                agents.push(agent);
            }
            // Verify all agents are connected to same mesh
            const meshIds = agents.map(agent => agent.meshConnection?.meshId);
            const uniqueMeshIds = new Set(meshIds);
            (0, globals_1.expect)(uniqueMeshIds.size).toBe(1);
            // Coordinate simultaneous updates
            const updatePromises = agents.map(agent => neuralService.updateNeuralAgent(agent));
            const updatedAgents = await Promise.all(updatePromises);
            (0, globals_1.expect)(updatedAgents).toHaveLength(agents.length);
            updatedAgents.forEach(agent => {
                neural_test_utils_1.NeuralAssertions.assertValidNeuralAgent(agent);
            });
        });
        (0, globals_1.test)('should handle agent interactions through mesh', async () => {
            const agent1 = await neuralService.createNeuralAgent('researcher');
            const agent2 = await neuralService.createNeuralAgent('coder');
            (0, globals_1.expect)(agent1).not.toBeNull();
            (0, globals_1.expect)(agent2).not.toBeNull();
            // Simulate interaction through neural activation
            agent1.neuralProperties.activation = 0.8;
            agent2.neuralProperties.activation = 0.3;
            await neuralService.updateNeuralAgent(agent1);
            await neuralService.updateNeuralAgent(agent2);
            // Verify both agents maintained their neural state
            (0, globals_1.expect)(agent1.neuralProperties.spikeHistory.length).toBeGreaterThan(0);
            (0, globals_1.expect)(agent2.neuralProperties.spikeHistory.length).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should maintain coordination under high load', async () => {
            const agentCount = 20;
            const agents = [];
            // Create many agents
            for (let i = 0; i < agentCount; i++) {
                const type = ['researcher', 'coder', 'tester', 'reviewer'][i % 4];
                const agent = await neuralService.createNeuralAgent(type);
                if (agent)
                    agents.push(agent);
            }
            (0, globals_1.expect)(agents).toHaveLength(agentCount);
            // Perform coordinated updates
            const startTime = performance.now();
            await Promise.all(agents.map(agent => neuralService.updateNeuralAgent(agent)));
            const endTime = performance.now();
            const totalTime = endTime - startTime;
            const averageTime = totalTime / agentCount;
            (0, globals_1.expect)(averageTime).toBeLessThan(50); // 50ms per agent max
            (0, globals_1.expect)(totalTime).toBeLessThan(1000); // 1 second total max
        });
    });
    (0, globals_1.describe)('Mesh Status and Monitoring', () => {
        (0, globals_1.test)('should provide real-time mesh status', async () => {
            const status = await neuralService.getMeshStatus();
            (0, globals_1.expect)(status).toBeDefined();
            (0, globals_1.expect)(status.nodeCount).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(status.synapseCount).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(status.activity).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(status.activity).toBeLessThanOrEqual(1);
            (0, globals_1.expect)(status.connectivity).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(status.connectivity).toBeLessThanOrEqual(1);
            (0, globals_1.expect)(status.efficiency).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(status.efficiency).toBeLessThanOrEqual(1);
        });
        (0, globals_1.test)('should track mesh activity changes', async () => {
            const initialStatus = await neuralService.getMeshStatus();
            // Create some agents to increase activity
            await neuralService.createNeuralAgent('neural');
            await neuralService.createNeuralAgent('neural');
            const updatedStatus = await neuralService.getMeshStatus();
            (0, globals_1.expect)(updatedStatus).toBeDefined();
            // Activity levels may change (in a real system)
            (0, globals_1.expect)(updatedStatus.activity).toBeGreaterThanOrEqual(0);
        });
        (0, globals_1.test)('should emit status update events', (done) => {
            neuralService.on('status_update', (status) => {
                (0, globals_1.expect)(status).toBeDefined();
                (0, globals_1.expect)(status.activity).toBeGreaterThanOrEqual(0);
                done();
            });
            // Trigger status update (in mock service, we'd need to simulate this)
            neuralService.createNeuralAgent('neural');
        });
    });
    (0, globals_1.describe)('Neural Training Integration', () => {
        (0, globals_1.test)('should train mesh with pattern data', async () => {
            const patterns = neural_test_utils_1.TestDataGenerator.generateTrainingPatterns(50);
            const trained = await neuralService.trainMesh(patterns);
            (0, globals_1.expect)(trained).toBe(true);
        });
        (0, globals_1.test)('should emit training completion events', (done) => {
            const patterns = neural_test_utils_1.TestDataGenerator.generateTrainingPatterns(10);
            neuralService.on('mesh_trained', (result) => {
                (0, globals_1.expect)(result).toBeDefined();
                (0, globals_1.expect)(result.patterns).toBe(10);
                (0, globals_1.expect)(result.accuracy).toBeGreaterThan(0);
                (0, globals_1.expect)(result.accuracy).toBeLessThanOrEqual(1);
                done();
            });
            neuralService.trainMesh(patterns);
        });
        (0, globals_1.test)('should improve agent performance after training', async () => {
            const agent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(agent).not.toBeNull();
            const initialEfficiency = agent.efficiency;
            // Train the mesh
            const patterns = neural_test_utils_1.TestDataGenerator.generateTrainingPatterns(20);
            await neuralService.trainMesh(patterns);
            // Update agent (in real system, this might show improvement)
            await neuralService.updateNeuralAgent(agent);
            // Performance may improve (depends on implementation)
            (0, globals_1.expect)(agent.efficiency).toBeGreaterThanOrEqual(0);
        });
    });
    (0, globals_1.describe)('Data Flow and Synchronization', () => {
        (0, globals_1.test)('should synchronize agent state across updates', async () => {
            const agent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(agent).not.toBeNull();
            const originalId = agent.id;
            const originalNeuralId = agent.neuralProperties.neuronId;
            // Multiple updates should maintain identity
            for (let i = 0; i < 5; i++) {
                await neuralService.updateNeuralAgent(agent);
                (0, globals_1.expect)(agent.id).toBe(originalId);
                (0, globals_1.expect)(agent.neuralProperties.neuronId).toBe(originalNeuralId);
            }
        });
        (0, globals_1.test)('should handle concurrent agent operations', async () => {
            const agents = await Promise.all([
                neuralService.createNeuralAgent('researcher'),
                neuralService.createNeuralAgent('coder'),
                neuralService.createNeuralAgent('tester')
            ]);
            (0, globals_1.expect)(agents.every(agent => agent !== null)).toBe(true);
            // Concurrent updates
            const updatePromises = agents.map(agent => neuralService.updateNeuralAgent(agent));
            const results = await Promise.all(updatePromises);
            (0, globals_1.expect)(results).toHaveLength(3);
            results.forEach(agent => {
                neural_test_utils_1.NeuralAssertions.assertValidNeuralAgent(agent);
            });
        });
        (0, globals_1.test)('should maintain data consistency during operations', async () => {
            const agent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(agent).not.toBeNull();
            // Verify initial consistency
            (0, globals_1.expect)(agent.neuralId).toBe(agent.neuralProperties.neuronId);
            (0, globals_1.expect)(agent.meshConnection.meshId).toBe(agent.neuralProperties.meshId);
            // Update and verify consistency maintained
            await neuralService.updateNeuralAgent(agent);
            (0, globals_1.expect)(agent.neuralId).toBe(agent.neuralProperties.neuronId);
            (0, globals_1.expect)(agent.meshConnection.meshId).toBe(agent.neuralProperties.meshId);
        });
    });
    (0, globals_1.describe)('Error Recovery and Resilience', () => {
        (0, globals_1.test)('should recover from temporary disconnections', async () => {
            const agent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(agent).not.toBeNull();
            // Simulate disconnect and reconnect
            await neuralService.disconnect();
            (0, globals_1.expect)(neuralService.getConnectionStatus()?.status).toBe('disconnected');
            // Reinitialize
            await neuralService.initialize();
            (0, globals_1.expect)(neuralService.getConnectionStatus()?.status).toBe('connected');
            // Should be able to create new agents
            const newAgent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(newAgent).not.toBeNull();
        });
        (0, globals_1.test)('should handle mesh failures gracefully', async () => {
            // Mock mesh status failure
            globals_1.jest.spyOn(neuralService, 'getMeshStatus').mockResolvedValue(null);
            const status = await neuralService.getMeshStatus();
            (0, globals_1.expect)(status).toBeNull();
            // Should still be able to create agents
            const agent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(agent).not.toBeNull();
        });
        (0, globals_1.test)('should maintain partial functionality during degraded mode', async () => {
            const agent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(agent).not.toBeNull();
            // Even with potential issues, basic operations should work
            const updated = await neuralService.updateNeuralAgent(agent);
            (0, globals_1.expect)(updated).toBeDefined();
            neural_test_utils_1.NeuralAssertions.assertValidNeuralAgent(updated);
        });
    });
    (0, globals_1.describe)('Performance Integration', () => {
        (0, globals_1.test)('should meet end-to-end performance requirements', async () => {
            const results = await neural_test_utils_1.PerformanceTestUtils.testNeuralPerformance(neuralService, 100, // iterations
            50 // max time in ms
            );
            (0, globals_1.expect)(results.passed).toBe(true);
            neural_test_utils_1.NeuralAssertions.assertPerformanceThresholds({ averageTime: results.averageTime, maxTime: results.maxTime }, { averageMs: 25, maxMs: 50 });
        });
        (0, globals_1.test)('should scale with multiple agents', async () => {
            const results = await neural_test_utils_1.PerformanceTestUtils.testMeshCoordination(neuralService, 10, // agent count
            100 // max time in ms
            );
            (0, globals_1.expect)(results.passed).toBe(true);
            (0, globals_1.expect)(results.setupTime).toBeLessThan(100);
            (0, globals_1.expect)(results.updateTime).toBeLessThan(100);
        });
        (0, globals_1.test)('should maintain performance under sustained load', async () => {
            const iterations = 50;
            const times = [];
            for (let i = 0; i < iterations; i++) {
                const start = performance.now();
                const agent = await neuralService.createNeuralAgent('neural');
                if (agent) {
                    await neuralService.updateNeuralAgent(agent);
                }
                const end = performance.now();
                times.push(end - start);
            }
            const averageTime = times.reduce((a, b) => a + b, 0) / times.length;
            const maxTime = Math.max(...times);
            (0, globals_1.expect)(averageTime).toBeLessThan(50);
            (0, globals_1.expect)(maxTime).toBeLessThan(100);
            // Performance should not degrade significantly over time
            const firstHalf = times.slice(0, iterations / 2);
            const secondHalf = times.slice(iterations / 2);
            const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;
            const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;
            // Second half should not be more than 50% slower than first half
            (0, globals_1.expect)(secondAvg).toBeLessThan(firstAvg * 1.5);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,