d81034f333d3ef414d8f5063fb4cd9ac
"use strict";
/**
 * WASM Test Setup
 * Provides WASM module mocking and testing utilities for Jest
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.wasmTestUtils = exports.mockWasmModule = void 0;
const globals_1 = require("@jest/globals");
// Mock WASM module for testing
exports.mockWasmModule = {
    initialized: true,
    simdSupported: true,
    performanceMultiplier: 2.8,
    memoryPool: new ArrayBuffer(1024 * 1024),
    calculateNeuralActivation: globals_1.jest.fn((inputs) => {
        const result = new Float32Array(inputs.length);
        for (let i = 0; i < inputs.length; i++) {
            result[i] = Math.tanh(inputs[i] * 0.5);
        }
        return result;
    }),
    optimizeConnections: globals_1.jest.fn((connections) => {
        return connections.map(w => Math.min(1, Math.max(0, w + (Math.random() - 0.5) * 0.1)));
    }),
    benchmark: globals_1.jest.fn(() => ({
        operations_per_second: 1000000,
        memory_usage: 1024 * 1024,
        simd_acceleration: true
    }))
};
// Global WASM utilities
exports.wasmTestUtils = {
    /**
     * Create performance test data
     */
    createPerformanceData: (size = 1000) => {
        return new Float32Array(Array.from({ length: size }, () => Math.random()));
    },
    /**
     * Benchmark function execution time
     */
    benchmarkFunction: async (fn, iterations = 100) => {
        const start = performance.now();
        for (let i = 0; i < iterations; i++) {
            await fn();
        }
        const end = performance.now();
        return (end - start) / iterations;
    },
    /**
     * Assert performance threshold
     */
    assertPerformanceThreshold: (actualTime, thresholdMs) => {
        if (actualTime > thresholdMs) {
            throw new Error(`Performance threshold exceeded: ${actualTime}ms > ${thresholdMs}ms`);
        }
    },
    /**
     * Mock WASM memory management
     */
    mockMemoryManager: () => ({
        allocate: globals_1.jest.fn((size) => new ArrayBuffer(size)),
        deallocate: globals_1.jest.fn(),
        getUsage: globals_1.jest.fn(() => ({ used: 1024, available: 1024 * 1024 }))
    })
};
// Setup WASM environment for tests
beforeAll(() => {
    // Mock WebAssembly global if not available
    if (typeof WebAssembly === 'undefined') {
        global.WebAssembly = {
            instantiate: globals_1.jest.fn().mockResolvedValue({
                instance: {
                    exports: exports.mockWasmModule
                }
            }),
            compile: globals_1.jest.fn().mockResolvedValue({}),
            Module: globals_1.jest.fn()
        };
    }
    // Mock performance API
    if (typeof performance === 'undefined') {
        global.performance = {
            now: globals_1.jest.fn(() => Date.now()),
            mark: globals_1.jest.fn(),
            measure: globals_1.jest.fn()
        };
    }
});
// Cleanup after tests
afterEach(() => {
    globals_1.jest.clearAllMocks();
});
exports.default = exports.mockWasmModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL3dvcmtzcGFjZXMvYWdlbnRpc3RzLXF1aWNrc3RhcnQtd29ya3NwYWNlLWJhc2ljL3Nhc2kvdGVzdHMvd2FzbS1zZXR1cC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCwyQ0FBcUM7QUFFckMsK0JBQStCO0FBQ2xCLFFBQUEsY0FBYyxHQUFHO0lBQzVCLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLGFBQWEsRUFBRSxJQUFJO0lBQ25CLHFCQUFxQixFQUFFLEdBQUc7SUFDMUIsVUFBVSxFQUFFLElBQUksV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFFeEMseUJBQXlCLEVBQUUsY0FBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQW9CLEVBQUUsRUFBRTtRQUMxRCxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN2QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztJQUVGLG1CQUFtQixFQUFFLGNBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFxQixFQUFFLEVBQUU7UUFDckQsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RixDQUFDLENBQUM7SUFFRixTQUFTLEVBQUUsY0FB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QyxDQUFDO0FBRUgsc0JBQXNCO0FBQ3RCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixjQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBZSxzQkFBYyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2FnZW50aXN0cy1xdWlja3N0YXJ0LXdvcmtzcGFjZS1iYXNpYy9zYXNpL3Rlc3RzL3dhc20tc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXQVNNIFRlc3QgU2V0dXBcbiAqIFByb3ZpZGVzIFdBU00gbW9kdWxlIG1vY2tpbmcgYW5kIHRlc3RpbmcgdXRpbGl0aWVzIGZvciBKZXN0XG4gKi9cblxuaW1wb3J0IHsgamVzdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuXG4vLyBNb2NrIFdBU00gbW9kdWxlIGZvciB0ZXN0aW5nXG5leHBvcnQgY29uc3QgbW9ja1dhc21Nb2R1bGUgPSB7XG4gIGluaXRpYWxpemVkOiB0cnVlLFxuICBzaW1kU3VwcG9ydGVkOiB0cnVlLFxuICBwZXJmb3JtYW5jZU11bHRpcGxpZXI6IDIuOCxcbiAgbWVtb3J5UG9vbDogbmV3IEFycmF5QnVmZmVyKDEwMjQgKiAxMDI0KSxcbiAgXG4gIGNhbGN1bGF0ZU5ldXJhbEFjdGl2YXRpb246IGplc3QuZm4oKGlucHV0czogRmxvYXQzMkFycmF5KSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheShpbnB1dHMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gTWF0aC50YW5oKGlucHV0c1tpXSAqIDAuNSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pLFxuICBcbiAgb3B0aW1pemVDb25uZWN0aW9uczogamVzdC5mbigoY29ubmVjdGlvbnM6IG51bWJlcltdKSA9PiB7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb25zLm1hcCh3ID0+IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHcgKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjEpKSk7XG4gIH0pLFxuICBcbiAgYmVuY2htYXJrOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgb3BlcmF0aW9uc19wZXJfc2Vjb25kOiAxMDAwMDAwLFxuICAgIG1lbW9yeV91c2FnZTogMTAyNCAqIDEwMjQsXG4gICAgc2ltZF9hY2NlbGVyYXRpb246IHRydWVcbiAgfSkpXG59O1xuXG4vLyBHbG9iYWwgV0FTTSB1dGlsaXRpZXNcbmV4cG9ydCBjb25zdCB3YXNtVGVzdFV0aWxzID0ge1xuICAvKipcbiAgICogQ3JlYXRlIHBlcmZvcm1hbmNlIHRlc3QgZGF0YVxuICAgKi9cbiAgY3JlYXRlUGVyZm9ybWFuY2VEYXRhOiAoc2l6ZTogbnVtYmVyID0gMTAwMCkgPT4ge1xuICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KEFycmF5LmZyb20oeyBsZW5ndGg6IHNpemUgfSwgKCkgPT4gTWF0aC5yYW5kb20oKSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCZW5jaG1hcmsgZnVuY3Rpb24gZXhlY3V0aW9uIHRpbWVcbiAgICovXG4gIGJlbmNobWFya0Z1bmN0aW9uOiBhc3luYyAoZm46IEZ1bmN0aW9uLCBpdGVyYXRpb25zOiBudW1iZXIgPSAxMDApOiBQcm9taXNlPG51bWJlcj4gPT4ge1xuICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgIGF3YWl0IGZuKCk7XG4gICAgfVxuICAgIGNvbnN0IGVuZCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaXRlcmF0aW9ucztcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHBlcmZvcm1hbmNlIHRocmVzaG9sZFxuICAgKi9cbiAgYXNzZXJ0UGVyZm9ybWFuY2VUaHJlc2hvbGQ6IChhY3R1YWxUaW1lOiBudW1iZXIsIHRocmVzaG9sZE1zOiBudW1iZXIpID0+IHtcbiAgICBpZiAoYWN0dWFsVGltZSA+IHRocmVzaG9sZE1zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFBlcmZvcm1hbmNlIHRocmVzaG9sZCBleGNlZWRlZDogJHthY3R1YWxUaW1lfW1zID4gJHt0aHJlc2hvbGRNc31tc2ApO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTW9jayBXQVNNIG1lbW9yeSBtYW5hZ2VtZW50XG4gICAqL1xuICBtb2NrTWVtb3J5TWFuYWdlcjogKCkgPT4gKHtcbiAgICBhbGxvY2F0ZTogamVzdC5mbigoc2l6ZTogbnVtYmVyKSA9PiBuZXcgQXJyYXlCdWZmZXIoc2l6ZSkpLFxuICAgIGRlYWxsb2NhdGU6IGplc3QuZm4oKSxcbiAgICBnZXRVc2FnZTogamVzdC5mbigoKSA9PiAoeyB1c2VkOiAxMDI0LCBhdmFpbGFibGU6IDEwMjQgKiAxMDI0IH0pKVxuICB9KVxufTtcblxuLy8gU2V0dXAgV0FTTSBlbnZpcm9ubWVudCBmb3IgdGVzdHNcbmJlZm9yZUFsbCgoKSA9PiB7XG4gIC8vIE1vY2sgV2ViQXNzZW1ibHkgZ2xvYmFsIGlmIG5vdCBhdmFpbGFibGVcbiAgaWYgKHR5cGVvZiBXZWJBc3NlbWJseSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAoZ2xvYmFsIGFzIGFueSkuV2ViQXNzZW1ibHkgPSB7XG4gICAgICBpbnN0YW50aWF0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgaW5zdGFuY2U6IHtcbiAgICAgICAgICBleHBvcnRzOiBtb2NrV2FzbU1vZHVsZVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGNvbXBpbGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7fSksXG4gICAgICBNb2R1bGU6IGplc3QuZm4oKVxuICAgIH07XG4gIH1cblxuICAvLyBNb2NrIHBlcmZvcm1hbmNlIEFQSVxuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIChnbG9iYWwgYXMgYW55KS5wZXJmb3JtYW5jZSA9IHtcbiAgICAgIG5vdzogamVzdC5mbigoKSA9PiBEYXRlLm5vdygpKSxcbiAgICAgIG1hcms6IGplc3QuZm4oKSxcbiAgICAgIG1lYXN1cmU6IGplc3QuZm4oKVxuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBDbGVhbnVwIGFmdGVyIHRlc3RzXG5hZnRlckVhY2goKCkgPT4ge1xuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb2NrV2FzbU1vZHVsZTsiXSwidmVyc2lvbiI6M30=