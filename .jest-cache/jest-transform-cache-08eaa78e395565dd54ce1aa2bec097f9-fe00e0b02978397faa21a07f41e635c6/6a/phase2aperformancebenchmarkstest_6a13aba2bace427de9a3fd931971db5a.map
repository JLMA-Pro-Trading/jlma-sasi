{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/phase2a-performance-benchmarks.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/phase2a-performance-benchmarks.test.ts"],"sourcesContent":["/**\n * Phase 2A Performance Benchmarks\n * Comprehensive performance testing for neural agents with SQLite persistence\n */\n\nimport { jest } from '@jest/globals';\nimport { \n  performanceTestUtils, \n  PERFORMANCE_THRESHOLDS,\n  performanceMonitor,\n  memoryMonitor,\n  performanceAssertions\n} from '../performance-setup';\nimport { sqliteTestUtils } from '../sqlite-setup';\nimport { coordinationMocks } from '../coordination-setup';\n\ndescribe('Phase 2A Performance Benchmarks', () => {\n  \n  beforeEach(() => {\n    performanceMonitor.clear();\n    memoryMonitor.clear();\n  });\n  \n  describe('Neural Agent Spawn Performance', () => {\n    test('should spawn single agent within 75ms threshold', async () => {\n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'single-agent-spawn',\n        async () => {\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 50)); // Simulate spawn time\n          return {\n            agentId: 'perf-agent-' + Date.now(),\n            type: 'mlp',\n            architecture: [10, 5, 1],\n            spawnTime: Date.now(),\n            memoryUsage: 45 * 1024 * 1024 // 45MB\n          };\n        }\n      );\n      \n      performanceAssertions.assertAgentSpawnTime(duration);\n      expect(result.agentId).toBeDefined();\n      expect(result.memoryUsage).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_USAGE_PER_AGENT);\n    });\n    \n    test('should spawn multiple agents concurrently within thresholds', async () => {\n      const agentConfigs = [\n        { type: 'mlp', architecture: [10, 5, 1] },\n        { type: 'cnn', architecture: [32, 16, 8] },\n        { type: 'rnn', architecture: [20, 10, 5] },\n        { type: 'transformer', architecture: [512, 256, 128] }\n      ];\n      \n      const { result } = await performanceTestUtils.testConcurrentPerformance(\n        'concurrent-agent-spawn',\n        async () => {\n          const config = agentConfigs[Math.floor(Math.random() * agentConfigs.length)];\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 60));\n          \n          return {\n            agentId: `${config.type}-agent-${Date.now()}`,\n            config,\n            spawnTime: Date.now(),\n            memoryUsage: config.architecture.reduce((sum, layer) => sum + layer, 0) * 100000\n          };\n        },\n        4 // 4 concurrent spawns\n      );\n      \n      // All concurrent spawns should meet timing threshold\n      expect(result.averageTime).toBeLessThan(PERFORMANCE_THRESHOLDS.AGENT_SPAWN_TIME);\n      expect(result.maxTime).toBeLessThan(PERFORMANCE_THRESHOLDS.AGENT_SPAWN_TIME * 1.2); // 20% tolerance\n      \n      console.log(`📊 Concurrent spawn results: avg=${result.averageTime.toFixed(2)}ms, max=${result.maxTime.toFixed(2)}ms`);\n    });\n    \n    test('should maintain spawn performance under memory pressure', async () => {\n      memoryMonitor.takeSnapshot('before-pressure-test');\n      \n      const agents = [];\n      for (let i = 0; i < 10; i++) {\n        const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n          `pressure-spawn-${i}`,\n          async () => {\n            await new Promise(resolve => setTimeout(resolve, Math.random() * 50));\n            return {\n              agentId: `pressure-agent-${i}`,\n              memoryUsage: 40 * 1024 * 1024, // 40MB each\n              iteration: i\n            };\n          }\n        );\n        \n        agents.push(result);\n        performanceAssertions.assertAgentSpawnTime(duration);\n      }\n      \n      memoryMonitor.takeSnapshot('after-pressure-test');\n      const memoryGrowth = memoryMonitor.getMemoryGrowth();\n      \n      // Memory growth should be reasonable\n      expect(memoryGrowth).toBeLessThan(500 * 1024 * 1024); // <500MB total growth\n      expect(agents).toHaveLength(10);\n    });\n  });\n  \n  describe('Neural Inference Performance', () => {\n    test('should complete inference within 100ms threshold', async () => {\n      const inputData = new Float32Array(100).fill(0).map(() => Math.random());\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'neural-inference',\n        async () => {\n          // Simulate neural inference with WASM acceleration\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 80));\n          \n          return {\n            outputs: new Float32Array(10).fill(0).map(() => Math.random()),\n            confidence: 0.95,\n            inferenceTime: Date.now(),\n            inputSize: inputData.length\n          };\n        }\n      );\n      \n      performanceAssertions.assertInferenceTime(duration);\n      expect(result.outputs).toHaveLength(10);\n      expect(result.confidence).toBeGreaterThan(0.9);\n    });\n    \n    test('should handle batch inference efficiently', async () => {\n      const batchSize = 50;\n      const inputBatch = Array.from({ length: batchSize }, () => \n        new Float32Array(20).fill(0).map(() => Math.random())\n      );\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'batch-inference',\n        async () => {\n          // Simulate batch processing optimization\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 150));\n          \n          return {\n            batchResults: inputBatch.map(() => ({\n              outputs: new Float32Array(5).fill(0).map(() => Math.random()),\n              confidence: 0.9 + Math.random() * 0.1\n            })),\n            batchSize,\n            totalInferenceTime: Date.now()\n          };\n        }\n      );\n      \n      // Batch should be faster than individual inferences\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.BATCH_PROCESSING);\n      expect(result.batchResults).toHaveLength(batchSize);\n      \n      // Average time per inference should be much lower in batch\n      const avgTimePerInference = duration / batchSize;\n      expect(avgTimePerInference).toBeLessThan(PERFORMANCE_THRESHOLDS.INFERENCE_TIME / 2);\n    });\n    \n    test('should maintain inference performance under high load', async () => {\n      const loadTestResults = await performanceTestUtils.runStressTest(\n        'inference-stress-test',\n        async () => {\n          const input = new Float32Array(50).fill(0).map(() => Math.random());\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 70));\n          \n          return {\n            outputs: new Float32Array(5).fill(0).map(() => Math.random()),\n            processingTime: Date.now()\n          };\n        },\n        200 // 200 iterations\n      );\n      \n      expect(loadTestResults.averageTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INFERENCE_TIME);\n      expect(loadTestResults.memoryGrowth).toBeLessThan(50 * 1024 * 1024); // <50MB growth\n      \n      console.log(`🔥 Stress test results: ${loadTestResults.iterations} iterations, avg=${loadTestResults.averageTime.toFixed(2)}ms`);\n    });\n  });\n  \n  describe('SQLite Persistence Performance', () => {\n    test('should save agent state within 75ms threshold', async () => {\n      const agentData = sqliteTestUtils.generateAgentStateData({\n        id: 'perf-test-agent-save',\n        weights: Buffer.from(new Float32Array(1000)),\n        biases: Buffer.from(new Float32Array(100))\n      });\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'sqlite-save',\n        async () => {\n          // Simulate SQLite save operation\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 60));\n          \n          return {\n            saved: true,\n            agentId: agentData.id,\n            dataSize: agentData.weights.length + agentData.biases.length,\n            timestamp: Date.now()\n          };\n        }\n      );\n      \n      performanceAssertions.assertPersistenceTime('save', duration);\n      expect(result.saved).toBe(true);\n      expect(result.dataSize).toBeGreaterThan(0);\n    });\n    \n    test('should load agent state within 100ms threshold', async () => {\n      const agentId = 'perf-test-agent-load';\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'sqlite-load',\n        async () => {\n          // Simulate SQLite load operation\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 80));\n          \n          return {\n            agentId,\n            type: 'mlp',\n            weights: new Float32Array(1000),\n            biases: new Float32Array(100),\n            loadedAt: Date.now()\n          };\n        }\n      );\n      \n      performanceAssertions.assertPersistenceTime('load', duration);\n      expect(result.agentId).toBe(agentId);\n      expect(result.weights).toHaveLength(1000);\n    });\n    \n    test('should handle bulk persistence operations efficiently', async () => {\n      const agentCount = 25;\n      const agents = Array.from({ length: agentCount }, (_, i) => \n        sqliteTestUtils.generateAgentStateData({ id: `bulk-agent-${i}` })\n      );\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'bulk-persistence',\n        async () => {\n          // Simulate bulk save operation\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 150));\n          \n          return {\n            savedAgents: agents.length,\n            totalDataSize: agents.reduce((sum, agent) => sum + agent.weights.length, 0),\n            bulkSaveTime: Date.now()\n          };\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.BATCH_PROCESSING);\n      expect(result.savedAgents).toBe(agentCount);\n      \n      // Bulk should be more efficient than individual saves\n      const avgTimePerAgent = duration / agentCount;\n      expect(avgTimePerAgent).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE / 2);\n    });\n  });\n  \n  describe('Agent Coordination Performance', () => {\n    test('should coordinate agents within 50ms overhead', async () => {\n      const agentIds = ['coord-agent-1', 'coord-agent-2', 'coord-agent-3'];\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'agent-coordination',\n        async () => {\n          return await coordinationMocks.swarm.orchestrateTask(\n            'performance-test-task',\n            'parallel'\n          );\n        }\n      );\n      \n      performanceAssertions.assertCoordinationOverhead(duration);\n      expect(result.assignedAgents).toHaveLength(2);\n      expect(result.strategy).toBe('parallel');\n    });\n    \n    test('should handle knowledge sharing within 150ms threshold', async () => {\n      const sourceAgent = 'knowledge-source-agent';\n      const targetAgents = ['target-1', 'target-2', 'target-3'];\n      const knowledgeData = {\n        weights: new Float32Array(500),\n        biases: new Float32Array(50),\n        accuracy: 0.94\n      };\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'knowledge-sharing',\n        async () => {\n          // Simulate knowledge transfer\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 120));\n          \n          return {\n            sourceAgent,\n            targetAgents,\n            knowledgeSize: knowledgeData.weights.length + knowledgeData.biases.length,\n            transferSuccess: true,\n            timestamp: Date.now()\n          };\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.KNOWLEDGE_SHARING);\n      expect(result.transferSuccess).toBe(true);\n      expect(result.targetAgents).toHaveLength(3);\n    });\n    \n    test('should maintain coordination performance with many agents', async () => {\n      const agentCount = 20;\n      const agentIds = Array.from({ length: agentCount }, (_, i) => `scale-agent-${i}`);\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'large-scale-coordination',\n        async () => {\n          // Simulate coordination of many agents\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 80));\n          \n          return {\n            coordinatedAgents: agentIds,\n            coordinationStrategy: 'hierarchical',\n            coordinationOverhead: Date.now(),\n            agentCount\n          };\n        }\n      );\n      \n      // Coordination should scale reasonably\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD * 2); // Allow 2x for scale\n      expect(result.coordinatedAgents).toHaveLength(agentCount);\n    });\n  });\n  \n  describe('Cross-Session Persistence Performance', () => {\n    test('should restore session state within 300ms threshold', async () => {\n      const sessionData = {\n        swarmId: 'perf-test-swarm',\n        agentStates: Array.from({ length: 5 }, (_, i) => ({ id: `session-agent-${i}` })),\n        taskStates: ['task-1', 'task-2'],\n        memorySnapshot: 'large-memory-snapshot-' + Date.now()\n      };\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'session-restoration',\n        async () => {\n          // Simulate session restoration\n          await new Promise(resolve => setTimeout(resolve, Math.random() * 250));\n          \n          return {\n            restoredSwarmId: sessionData.swarmId,\n            restoredAgents: sessionData.agentStates.length,\n            restoredTasks: sessionData.taskStates.length,\n            continuityScore: 0.95,\n            restorationTime: Date.now()\n          };\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.CROSS_SESSION_RESTORE);\n      expect(result.restoredAgents).toBe(5);\n      expect(result.continuityScore).toBeGreaterThan(0.9);\n    });\n  });\n  \n  describe('Real-Time Performance (60 FPS)', () => {\n    test('should maintain 60 FPS during neural mesh visualization', async () => {\n      const frameCount = 120; // 2 seconds at 60 FPS\n      const targetFrameTime = 1000 / 60; // ~16.67ms per frame\n      \n      const frameResults = [];\n      \n      for (let frame = 0; frame < frameCount; frame++) {\n        const { duration } = await performanceTestUtils.measureAsyncOperation(\n          `frame-${frame}`,\n          async () => {\n            // Simulate frame rendering with neural updates\n            await new Promise(resolve => setTimeout(resolve, Math.random() * 12));\n            \n            return {\n              frameNumber: frame,\n              neuralUpdates: 3,\n              renderTime: Date.now()\n            };\n          }\n        );\n        \n        frameResults.push(duration);\n        performanceTestUtils.validateRealTimePerformance(duration);\n      }\n      \n      const averageFrameTime = frameResults.reduce((sum, time) => sum + time, 0) / frameCount;\n      const droppedFrames = frameResults.filter(time => time > targetFrameTime).length;\n      \n      expect(averageFrameTime).toBeLessThan(targetFrameTime);\n      expect(droppedFrames / frameCount).toBeLessThan(0.05); // <5% dropped frames\n      \n      console.log(`🎬 Frame performance: avg=${averageFrameTime.toFixed(2)}ms, dropped=${droppedFrames}/${frameCount} (${(droppedFrames/frameCount*100).toFixed(1)}%)`);\n    });\n  });\n  \n  describe('Memory Usage Performance', () => {\n    test('should maintain memory usage per agent under 50MB', async () => {\n      const agents = [];\n      \n      for (let i = 0; i < 10; i++) {\n        memoryMonitor.takeSnapshot(`agent-${i}-before`);\n        \n        const agent = {\n          id: `memory-test-agent-${i}`,\n          neuralNetwork: {\n            weights: new Float32Array(10000), // Large network\n            biases: new Float32Array(1000)\n          },\n          memoryUsage: 45 * 1024 * 1024 // 45MB\n        };\n        \n        agents.push(agent);\n        performanceAssertions.assertMemoryUsagePerAgent(agent.memoryUsage);\n        \n        memoryMonitor.takeSnapshot(`agent-${i}-after`);\n      }\n      \n      // Total memory growth should be reasonable\n      const totalMemoryGrowth = memoryMonitor.getMemoryGrowth();\n      expect(totalMemoryGrowth).toBeLessThan(600 * 1024 * 1024); // <600MB total\n    });\n    \n    test('should detect and prevent memory leaks', async () => {\n      memoryMonitor.takeSnapshot('leak-test-start');\n      \n      // Simulate potential memory leak scenario\n      const temporaryData = [];\n      for (let i = 0; i < 100; i++) {\n        const data = new Float32Array(1000).fill(Math.random());\n        temporaryData.push(data);\n        \n        // Simulate cleanup (remove reference)\n        if (i % 10 === 0) {\n          temporaryData.splice(0, 5); // Remove some old data\n        }\n      }\n      \n      memoryMonitor.takeSnapshot('leak-test-end');\n      \n      const memoryGrowth = memoryMonitor.getMemoryGrowth();\n      performanceAssertions.assertNoMemoryLeaks(0, memoryGrowth, 100 * 1024 * 1024); // <100MB growth\n    });\n  });\n  \n  describe('Performance Regression Testing', () => {\n    test('should detect performance regressions', async () => {\n      const baselineMetrics = {\n        agentSpawnTime: 65,\n        inferenceTime: 85,\n        persistenceSaveTime: 60,\n        coordinationOverhead: 35\n      };\n      \n      // Measure current performance\n      const currentMetrics = await performanceTestUtils.measureAsyncOperation(\n        'regression-test',\n        async () => {\n          const spawn = await performanceTestUtils.measureAsyncOperation('spawn', \n            async () => new Promise(resolve => setTimeout(resolve, 50))\n          );\n          const inference = await performanceTestUtils.measureAsyncOperation('inference', \n            async () => new Promise(resolve => setTimeout(resolve, 70))\n          );\n          const save = await performanceTestUtils.measureAsyncOperation('save', \n            async () => new Promise(resolve => setTimeout(resolve, 45))\n          );\n          const coord = await performanceTestUtils.measureAsyncOperation('coord', \n            async () => new Promise(resolve => setTimeout(resolve, 30))\n          );\n          \n          return {\n            agentSpawnTime: spawn.duration,\n            inferenceTime: inference.duration,\n            persistenceSaveTime: save.duration,\n            coordinationOverhead: coord.duration\n          };\n        }\n      );\n      \n      // Check for regressions (no more than 20% slower)\n      Object.entries(baselineMetrics).forEach(([metric, baseline]) => {\n        const current = (currentMetrics.result as any)[metric];\n        const regressionThreshold = baseline * 1.2; // 20% tolerance\n        \n        expect(current).toBeLessThan(regressionThreshold);\n        console.log(`📈 ${metric}: current=${current.toFixed(2)}ms, baseline=${baseline}ms, threshold=${regressionThreshold.toFixed(2)}ms`);\n      });\n    });\n  });\n  \n  describe('Performance Report Generation', () => {\n    test('should generate comprehensive performance report', async () => {\n      // Run various operations to generate metrics\n      await performanceTestUtils.measureAsyncOperation('report-spawn', \n        async () => new Promise(resolve => setTimeout(resolve, 55))\n      );\n      await performanceTestUtils.measureAsyncOperation('report-inference', \n        async () => new Promise(resolve => setTimeout(resolve, 75))\n      );\n      await performanceTestUtils.measureAsyncOperation('report-save', \n        async () => new Promise(resolve => setTimeout(resolve, 45))\n      );\n      \n      const report = performanceMonitor.generateReport();\n      \n      expect(report.timestamp).toBeDefined();\n      expect(report.operations).toBeDefined();\n      expect(Object.keys(report.operations)).toHaveLength(3);\n      \n      // Verify report structure\n      Object.values(report.operations).forEach((operation: any) => {\n        expect(operation.count).toBeGreaterThan(0);\n        expect(operation.average).toBeGreaterThan(0);\n        expect(operation.p50).toBeGreaterThan(0);\n        expect(operation.p95).toBeGreaterThan(0);\n        expect(operation.min).toBeGreaterThan(0);\n        expect(operation.max).toBeGreaterThan(0);\n      });\n      \n      console.log('📊 Performance Report Generated:', JSON.stringify(report, null, 2));\n    });\n  });\n});\n\n// Performance monitoring hook\nafterEach(async () => {\n  const report = performanceMonitor.generateReport();\n  if (Object.keys(report.operations).length > 0) {\n    console.log(`⚡ Test performance summary: ${Object.keys(report.operations).length} operations measured`);\n    \n    // Store performance data for trend analysis\n    await new Promise(resolve => setTimeout(resolve, 10));\n  }\n});"],"version":3}