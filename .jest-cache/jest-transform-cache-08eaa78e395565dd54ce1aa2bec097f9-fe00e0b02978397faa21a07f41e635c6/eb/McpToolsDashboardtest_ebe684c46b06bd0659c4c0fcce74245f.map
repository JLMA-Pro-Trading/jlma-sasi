{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/components/McpToolsDashboard.test.tsx","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/components/McpToolsDashboard.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { jest } from '@jest/globals'\nimport McpToolsDashboard from '../../../src/components/McpToolsDashboard'\nimport { mcpService } from '../../../src/services/McpService'\n\n// Mock the MCP service\njest.mock('../../../src/services/McpService', () => ({\n  mcpService: {\n    initialize: jest.fn(),\n    getServers: jest.fn(),\n    getMetrics: jest.fn(),\n    executeTool: jest.fn(),\n    refreshServers: jest.fn()\n  }\n}))\n\nconst mockServers = [\n  {\n    id: 'claude-flow',\n    name: 'Claude Flow',\n    status: 'connected' as const,\n    version: '2.0.0-alpha.43',\n    healthScore: 95,\n    lastPing: Date.now(),\n    type: 'stdio' as const,\n    tools: [\n      {\n        name: 'mcp__claude-flow__swarm_init',\n        description: 'Initialize swarm with topology and configuration',\n        parameters: { topology: 'string', maxAgents: 'number', strategy: 'string' },\n        usageCount: 23,\n        averageResponseTime: 145,\n        successRate: 96.5,\n        category: 'coordination'\n      },\n      {\n        name: 'mcp__claude-flow__agent_spawn',\n        description: 'Create specialized AI agents',\n        parameters: { type: 'string', name: 'string', capabilities: 'array' },\n        usageCount: 18,\n        averageResponseTime: 89,\n        successRate: 98.2,\n        category: 'agents'\n      }\n    ]\n  }\n]\n\nconst mockMetrics = {\n  totalRequests: 1247,\n  successfulRequests: 1189,\n  failedRequests: 58,\n  averageResponseTime: 143,\n  uptime: 98.4,\n  memoryUsage: 156.8,\n  tokenUsage: 23847,\n  serverMetrics: new Map()\n}\n\ndescribe('McpToolsDashboard', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    ;(mcpService.initialize as jest.Mock).mockResolvedValue(undefined)\n    ;(mcpService.getServers as jest.Mock).mockReturnValue(mockServers)\n    ;(mcpService.getMetrics as jest.Mock).mockReturnValue(mockMetrics)\n    ;(mcpService.executeTool as jest.Mock).mockResolvedValue({\n      toolName: 'mcp__claude-flow__swarm_init',\n      parameters: { topology: 'mesh' },\n      timestamp: new Date(),\n      success: true,\n      response: { success: true, swarmId: 'test-swarm' },\n      duration: 150\n    })\n  })\n\n  test('renders loading state initially', () => {\n    render(<McpToolsDashboard />)\n    \n    expect(screen.getByText('Discovering MCP servers...')).toBeInTheDocument()\n    expect(screen.getByRole('progressbar')).toBeInTheDocument()\n  })\n\n  test('renders dashboard after loading', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      expect(screen.getByText('MCP Tools Dashboard')).toBeInTheDocument()\n      expect(screen.getByText('Claude Flow')).toBeInTheDocument()\n    })\n  })\n\n  test('displays server metrics correctly', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      expect(screen.getByText('1')).toBeInTheDocument() // Server count\n      expect(screen.getByText('2')).toBeInTheDocument() // Tool count\n      expect(screen.getByText('95.4%')).toBeInTheDocument() // Success rate\n      expect(screen.getByText('143ms')).toBeInTheDocument() // Average response time\n    })\n  })\n\n  test('displays server list with status indicators', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      expect(screen.getByText('Claude Flow')).toBeInTheDocument()\n      expect(screen.getByText('v2.0.0-alpha.43')).toBeInTheDocument()\n      expect(screen.getByText('stdio')).toBeInTheDocument()\n      expect(screen.getByText('2 tools')).toBeInTheDocument()\n    })\n  })\n\n  test('allows server selection', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      const serverItem = screen.getByText('Claude Flow').closest('.server-item')\n      expect(serverItem).toBeInTheDocument()\n      \n      fireEvent.click(serverItem!)\n      \n      expect(screen.getByText('Tools for Claude Flow')).toBeInTheDocument()\n    })\n  })\n\n  test('displays tools for selected server', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      const serverItem = screen.getByText('Claude Flow').closest('.server-item')\n      fireEvent.click(serverItem!)\n      \n      expect(screen.getByText('mcp__claude-flow__swarm_init')).toBeInTheDocument()\n      expect(screen.getByText('mcp__claude-flow__agent_spawn')).toBeInTheDocument()\n      expect(screen.getByText('Initialize swarm with topology and configuration')).toBeInTheDocument()\n    })\n  })\n\n  test('filters tools based on search input', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      const serverItem = screen.getByText('Claude Flow').closest('.server-item')\n      fireEvent.click(serverItem!)\n      \n      const filterInput = screen.getByPlaceholderText('Filter tools...')\n      fireEvent.change(filterInput, { target: { value: 'swarm' } })\n      \n      expect(screen.getByText('mcp__claude-flow__swarm_init')).toBeInTheDocument()\n      expect(screen.queryByText('mcp__claude-flow__agent_spawn')).not.toBeInTheDocument()\n    })\n  })\n\n  test('allows tool selection and shows execution panel', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      const serverItem = screen.getByText('Claude Flow').closest('.server-item')\n      fireEvent.click(serverItem!)\n      \n      const toolCard = screen.getByText('mcp__claude-flow__swarm_init').closest('.tool-card')\n      fireEvent.click(toolCard!)\n      \n      expect(screen.getByText('Execute Tool: mcp__claude-flow__swarm_init')).toBeInTheDocument()\n      expect(screen.getByText('Parameters')).toBeInTheDocument()\n    })\n  })\n\n  test('executes tools with parameters', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      const serverItem = screen.getByText('Claude Flow').closest('.server-item')\n      fireEvent.click(serverItem!)\n      \n      const toolCard = screen.getByText('mcp__claude-flow__swarm_init').closest('.tool-card')\n      fireEvent.click(toolCard!)\n      \n      const executeButton = screen.getByText('Execute Tool')\n      fireEvent.click(executeButton)\n      \n      expect(mcpService.executeTool).toHaveBeenCalledWith(\n        'claude-flow',\n        'mcp__claude-flow__swarm_init',\n        {}\n      )\n    })\n  })\n\n  test('displays execution results', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      const serverItem = screen.getByText('Claude Flow').closest('.server-item')\n      fireEvent.click(serverItem!)\n      \n      const toolCard = screen.getByText('mcp__claude-flow__swarm_init').closest('.tool-card')\n      fireEvent.click(toolCard!)\n      \n      const executeButton = screen.getByText('Execute Tool')\n      fireEvent.click(executeButton)\n    })\n    \n    await waitFor(() => {\n      expect(screen.getByText('Recent Executions')).toBeInTheDocument()\n      expect(screen.getByText('mcp__claude-flow__swarm_init')).toBeInTheDocument()\n    })\n  })\n\n  test('handles execution errors gracefully', async () => {\n    const mockError = new Error('Tool execution failed')\n    ;(mcpService.executeTool as jest.Mock).mockRejectedValue(mockError)\n    \n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      const serverItem = screen.getByText('Claude Flow').closest('.server-item')\n      fireEvent.click(serverItem!)\n      \n      const toolCard = screen.getByText('mcp__claude-flow__swarm_init').closest('.tool-card')\n      fireEvent.click(toolCard!)\n      \n      const executeButton = screen.getByText('Execute Tool')\n      fireEvent.click(executeButton)\n    })\n    \n    await waitFor(() => {\n      expect(screen.getByText('Recent Executions')).toBeInTheDocument()\n      // Error result should be displayed\n      expect(screen.getByText('mcp__claude-flow__swarm_init')).toBeInTheDocument()\n    })\n  })\n\n  test('updates health scores periodically', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      expect(screen.getByText('Claude Flow')).toBeInTheDocument()\n    })\n    \n    // Wait for health check interval\n    await waitFor(() => {\n      expect(mcpService.getServers).toHaveBeenCalledTimes(2) // Once on init, once on health check\n    }, { timeout: 35000 })\n  })\n\n  test('displays server health scores with appropriate colors', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      const healthScore = screen.getByText('95%')\n      expect(healthScore).toBeInTheDocument()\n      \n      // Check that health score has appropriate color styling\n      expect(healthScore).toHaveStyle({ color: '#4CAF50' })\n    })\n  })\n\n  test('shows no server selected message initially', async () => {\n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      expect(screen.getByText('Select a server to view its tools')).toBeInTheDocument()\n      expect(screen.getByText('Choose an MCP server from the sidebar to explore its available tools and performance metrics.')).toBeInTheDocument()\n    })\n  })\n\n  test('handles initialization errors gracefully', async () => {\n    const mockError = new Error('Failed to initialize')\n    ;(mcpService.initialize as jest.Mock).mockRejectedValue(mockError)\n    \n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {})\n    \n    render(<McpToolsDashboard />)\n    \n    await waitFor(() => {\n      expect(consoleSpy).toHaveBeenCalledWith('Failed to initialize MCP discovery:', mockError)\n    })\n    \n    consoleSpy.mockRestore()\n  })\n})"],"version":3}