01f257e4f35bf8ea34794f3144bc7cf3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
// Mock the MCP service
globals_1.jest.mock('../../../src/services/McpService', () => ({
    mcpService: {
        initialize: globals_1.jest.fn(),
        getServers: globals_1.jest.fn(),
        getMetrics: globals_1.jest.fn(),
        executeTool: globals_1.jest.fn(),
        refreshServers: globals_1.jest.fn()
    }
}));
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const McpToolsDashboard_1 = __importDefault(require("../../../src/components/McpToolsDashboard"));
const McpService_1 = require("../../../src/services/McpService");
const mockServers = [
    {
        id: 'claude-flow',
        name: 'Claude Flow',
        status: 'connected',
        version: '2.0.0-alpha.43',
        healthScore: 95,
        lastPing: Date.now(),
        type: 'stdio',
        tools: [
            {
                name: 'mcp__claude-flow__swarm_init',
                description: 'Initialize swarm with topology and configuration',
                parameters: { topology: 'string', maxAgents: 'number', strategy: 'string' },
                usageCount: 23,
                averageResponseTime: 145,
                successRate: 96.5,
                category: 'coordination'
            },
            {
                name: 'mcp__claude-flow__agent_spawn',
                description: 'Create specialized AI agents',
                parameters: { type: 'string', name: 'string', capabilities: 'array' },
                usageCount: 18,
                averageResponseTime: 89,
                successRate: 98.2,
                category: 'agents'
            }
        ]
    }
];
const mockMetrics = {
    totalRequests: 1247,
    successfulRequests: 1189,
    failedRequests: 58,
    averageResponseTime: 143,
    uptime: 98.4,
    memoryUsage: 156.8,
    tokenUsage: 23847,
    serverMetrics: new Map()
};
describe('McpToolsDashboard', () => {
    beforeEach(() => {
        globals_1.jest.clearAllMocks();
        McpService_1.mcpService.initialize.mockResolvedValue(undefined);
        McpService_1.mcpService.getServers.mockReturnValue(mockServers);
        McpService_1.mcpService.getMetrics.mockReturnValue(mockMetrics);
        McpService_1.mcpService.executeTool.mockResolvedValue({
            toolName: 'mcp__claude-flow__swarm_init',
            parameters: { topology: 'mesh' },
            timestamp: new Date(),
            success: true,
            response: { success: true, swarmId: 'test-swarm' },
            duration: 150
        });
    });
    test('renders loading state initially', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        expect(react_2.screen.getByText('Discovering MCP servers...')).toBeInTheDocument();
        expect(react_2.screen.getByRole('progressbar')).toBeInTheDocument();
    });
    test('renders dashboard after loading', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('MCP Tools Dashboard')).toBeInTheDocument();
            expect(react_2.screen.getByText('Claude Flow')).toBeInTheDocument();
        });
    });
    test('displays server metrics correctly', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('1')).toBeInTheDocument(); // Server count
            expect(react_2.screen.getByText('2')).toBeInTheDocument(); // Tool count
            expect(react_2.screen.getByText('95.4%')).toBeInTheDocument(); // Success rate
            expect(react_2.screen.getByText('143ms')).toBeInTheDocument(); // Average response time
        });
    });
    test('displays server list with status indicators', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Claude Flow')).toBeInTheDocument();
            expect(react_2.screen.getByText('v2.0.0-alpha.43')).toBeInTheDocument();
            expect(react_2.screen.getByText('stdio')).toBeInTheDocument();
            expect(react_2.screen.getByText('2 tools')).toBeInTheDocument();
        });
    });
    test('allows server selection', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            const serverItem = react_2.screen.getByText('Claude Flow').closest('.server-item');
            expect(serverItem).toBeInTheDocument();
            react_2.fireEvent.click(serverItem);
            expect(react_2.screen.getByText('Tools for Claude Flow')).toBeInTheDocument();
        });
    });
    test('displays tools for selected server', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            const serverItem = react_2.screen.getByText('Claude Flow').closest('.server-item');
            react_2.fireEvent.click(serverItem);
            expect(react_2.screen.getByText('mcp__claude-flow__swarm_init')).toBeInTheDocument();
            expect(react_2.screen.getByText('mcp__claude-flow__agent_spawn')).toBeInTheDocument();
            expect(react_2.screen.getByText('Initialize swarm with topology and configuration')).toBeInTheDocument();
        });
    });
    test('filters tools based on search input', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            const serverItem = react_2.screen.getByText('Claude Flow').closest('.server-item');
            react_2.fireEvent.click(serverItem);
            const filterInput = react_2.screen.getByPlaceholderText('Filter tools...');
            react_2.fireEvent.change(filterInput, { target: { value: 'swarm' } });
            expect(react_2.screen.getByText('mcp__claude-flow__swarm_init')).toBeInTheDocument();
            expect(react_2.screen.queryByText('mcp__claude-flow__agent_spawn')).not.toBeInTheDocument();
        });
    });
    test('allows tool selection and shows execution panel', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            const serverItem = react_2.screen.getByText('Claude Flow').closest('.server-item');
            react_2.fireEvent.click(serverItem);
            const toolCard = react_2.screen.getByText('mcp__claude-flow__swarm_init').closest('.tool-card');
            react_2.fireEvent.click(toolCard);
            expect(react_2.screen.getByText('Execute Tool: mcp__claude-flow__swarm_init')).toBeInTheDocument();
            expect(react_2.screen.getByText('Parameters')).toBeInTheDocument();
        });
    });
    test('executes tools with parameters', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            const serverItem = react_2.screen.getByText('Claude Flow').closest('.server-item');
            react_2.fireEvent.click(serverItem);
            const toolCard = react_2.screen.getByText('mcp__claude-flow__swarm_init').closest('.tool-card');
            react_2.fireEvent.click(toolCard);
            const executeButton = react_2.screen.getByText('Execute Tool');
            react_2.fireEvent.click(executeButton);
            expect(McpService_1.mcpService.executeTool).toHaveBeenCalledWith('claude-flow', 'mcp__claude-flow__swarm_init', {});
        });
    });
    test('displays execution results', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            const serverItem = react_2.screen.getByText('Claude Flow').closest('.server-item');
            react_2.fireEvent.click(serverItem);
            const toolCard = react_2.screen.getByText('mcp__claude-flow__swarm_init').closest('.tool-card');
            react_2.fireEvent.click(toolCard);
            const executeButton = react_2.screen.getByText('Execute Tool');
            react_2.fireEvent.click(executeButton);
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Recent Executions')).toBeInTheDocument();
            expect(react_2.screen.getByText('mcp__claude-flow__swarm_init')).toBeInTheDocument();
        });
    });
    test('handles execution errors gracefully', async () => {
        const mockError = new Error('Tool execution failed');
        McpService_1.mcpService.executeTool.mockRejectedValue(mockError);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            const serverItem = react_2.screen.getByText('Claude Flow').closest('.server-item');
            react_2.fireEvent.click(serverItem);
            const toolCard = react_2.screen.getByText('mcp__claude-flow__swarm_init').closest('.tool-card');
            react_2.fireEvent.click(toolCard);
            const executeButton = react_2.screen.getByText('Execute Tool');
            react_2.fireEvent.click(executeButton);
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Recent Executions')).toBeInTheDocument();
            // Error result should be displayed
            expect(react_2.screen.getByText('mcp__claude-flow__swarm_init')).toBeInTheDocument();
        });
    });
    test('updates health scores periodically', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Claude Flow')).toBeInTheDocument();
        });
        // Wait for health check interval
        await (0, react_2.waitFor)(() => {
            expect(McpService_1.mcpService.getServers).toHaveBeenCalledTimes(2); // Once on init, once on health check
        }, { timeout: 35000 });
    });
    test('displays server health scores with appropriate colors', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            const healthScore = react_2.screen.getByText('95%');
            expect(healthScore).toBeInTheDocument();
            // Check that health score has appropriate color styling
            expect(healthScore).toHaveStyle({ color: '#4CAF50' });
        });
    });
    test('shows no server selected message initially', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Select a server to view its tools')).toBeInTheDocument();
            expect(react_2.screen.getByText('Choose an MCP server from the sidebar to explore its available tools and performance metrics.')).toBeInTheDocument();
        });
    });
    test('handles initialization errors gracefully', async () => {
        const mockError = new Error('Failed to initialize');
        McpService_1.mcpService.initialize.mockRejectedValue(mockError);
        const consoleSpy = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
        (0, react_2.render)((0, jsx_runtime_1.jsx)(McpToolsDashboard_1.default, {}));
        await (0, react_2.waitFor)(() => {
            expect(consoleSpy).toHaveBeenCalledWith('Failed to initialize MCP discovery:', mockError);
        });
        consoleSpy.mockRestore();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,