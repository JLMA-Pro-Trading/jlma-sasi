{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/coordination-setup.ts","mappings":";AAAA;;;GAGG;;;AAEH,2CAAqC;AAErC,sCAAsC;AACtC,MAAM,qBAAqB,GAAG;IAC5B,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;IACrB,WAAW,EAAE,cAAI,CAAC,EAAE,EAAE;IACtB,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;IACrB,WAAW,EAAE,cAAI,CAAC,EAAE,EAAE;IACtB,eAAe,EAAE,cAAI,CAAC,EAAE,EAAE;IAC1B,mBAAmB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC9B,gBAAgB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC3B,aAAa,EAAE,cAAI,CAAC,EAAE,EAAE;IACxB,QAAQ,EAAE,cAAI,CAAC,EAAE,EAAE;CACpB,CAAC;AAEF,oCAAoC;AACvB,QAAA,qBAAqB,GAAG;IACnC,eAAe,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;QAC3C,OAAO,EAAE,gBAAgB;QACzB,QAAQ,EAAE,MAAM;QAChB,SAAS,EAAE,CAAC;QACZ,MAAM,EAAE,QAAQ;KACjB,CAAC;IAEF,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAY,EAAE,YAAsB,EAAE,EAAE;QACtF,MAAM,OAAO,GAAG,GAAG,IAAI,UAAU,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;QAC3E,OAAO;YACL,OAAO;YACP,IAAI;YACJ,YAAY;YACZ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,MAAM,EAAE,QAAQ;SACjB,CAAC;IACJ,CAAC,CAAC;IAEF,eAAe,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAY,EAAE,QAAgB,EAAE,EAAE;QACrF,OAAO;YACL,MAAM,EAAE,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACzD,IAAI;YACJ,QAAQ;YACR,cAAc,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;YAC1C,MAAM,EAAE,aAAa;YACrB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC,CAAC;IAEF,cAAc,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;QACxC,OAAO,EAAE,gBAAgB;QACzB,YAAY,EAAE,CAAC;QACf,cAAc,EAAE,CAAC;QACjB,eAAe,EAAE,GAAG;QACpB,sBAAsB,EAAE,IAAI;KAC7B,CAAC;IAEF,cAAc,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;CACvD,CAAC;AAEF,kCAAkC;AACrB,QAAA,sBAAsB,GAAG;IACpC,gBAAgB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC3B,iBAAiB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC5B,kBAAkB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC7B,sBAAsB,EAAE,cAAI,CAAC,EAAE,EAAE;IAEjC,4BAA4B;IAC5B,YAAY,EAAE;QACZ,eAAe,EAAE,iBAAiB;QAClC,eAAe,EAAE,iBAAiB;QAClC,aAAa,EAAE,eAAe;QAC9B,oBAAoB,EAAE,sBAAsB;QAC5C,kBAAkB,EAAE,oBAAoB;KACzC;IAED,wBAAwB;IACxB,aAAa,EAAE,CAAC,IAAY,EAAE,OAAY,EAAE,IAAY,EAAE,EAAW,EAAE,EAAE,CAAC,CAAC;QACzE,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACpD,IAAI;QACJ,OAAO;QACP,IAAI;QACJ,EAAE;QACF,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;KACtB,CAAC;CACH,CAAC;AAEF,kCAAkC;AACrB,QAAA,sBAAsB,GAAG;IACpC,iBAAiB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAW,EAAE,KAAU,EAAE,EAAE;QAChF,OAAO;YACL,GAAG;YACH,KAAK;YACL,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE;YACpB,OAAO,EAAE,IAAI;SACd,CAAC;IACJ,CAAC,CAAC;IAEF,oBAAoB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAW,EAAE,EAAE;QACvE,OAAO;YACL,GAAG;YACH,KAAK,EAAE,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI;YAClC,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;SACxB,CAAC;IACJ,CAAC,CAAC;IAEF,sBAAsB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;QAClD,YAAY,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC;QACrD,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE;QACpB,OAAO,EAAE,IAAI;KACd,CAAC;IAEF,cAAc,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;QACxC,WAAW,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,EAAE,QAAQ;QACxC,UAAU,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,EAAG,QAAQ;QACxC,YAAY,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAG,OAAO;QACxC,cAAc,EAAE;YACd,WAAW,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;YAC7B,WAAW,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;YAC7B,WAAW,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;SAC9B;KACF,CAAC;CACH,CAAC;AAEF,+BAA+B;AAC/B,MAAM,cAAc,GAAwB,EAAE,CAAC;AAE/C,gCAAgC;AACnB,QAAA,oBAAoB,GAAG;IAClC,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAe,EAAE,IAAS,EAAE,EAAE;QAC5E,OAAO;YACL,YAAY,EAAE,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACjE,OAAO;YACP,IAAI;YACJ,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE;YACtB,MAAM,EAAE,UAAU;SACnB,CAAC;IACJ,CAAC,CAAC;IAEF,eAAe,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,MAAc,EAAE,EAAE;QAC/D,OAAO;YACL,MAAM;YACN,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;YAC7B,MAAM,EAAE,aAAa;YACrB,cAAc,EAAE,CAAC;YACjB,iBAAiB,EAAE,CAAC;YACpB,aAAa,EAAE,CAAC;YAChB,mBAAmB,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK;SACxC,CAAC;IACJ,CAAC,CAAC;IAEF,uBAAuB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAY,EAAE,EAAE;QAC3E,OAAO;YACL,cAAc,EAAE,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YAClE,KAAK;YACL,QAAQ,EAAE,UAAU;YACpB,cAAc,EAAE,KAAK,CAAC,MAAM;YAC5B,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC,CAAC;IAEF,sBAAsB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,YAAmB,EAAE,EAAE;QACjF,OAAO;YACL,QAAQ,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC;YAC5D,OAAO,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC;YACzD,cAAc,EAAE,sBAAsB;SACvC,CAAC;IACJ,CAAC,CAAC;CACH,CAAC;AAEF,gCAAgC;AACnB,QAAA,2BAA2B,GAAG;IACzC,uBAAuB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;QACjD,OAAO,EAAE,gBAAgB;QACzB,yBAAyB,EAAE,GAAG;QAC9B,oBAAoB,EAAE,EAAE;QACxB,mBAAmB,EAAE,IAAI;QACzB,qBAAqB,EAAE;YACrB,WAAW,EAAE,IAAI;YACjB,WAAW,EAAE,IAAI;YACjB,WAAW,EAAE,IAAI;SAClB;QACD,WAAW,EAAE,EAAE;KAChB,CAAC;IAEF,0BAA0B,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;QAClE,OAAO;YACL,cAAc,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YAChE,YAAY,EAAE;gBACZ,EAAE,IAAI,EAAE,qBAAqB,EAAE,WAAW,EAAE,qBAAqB,EAAE;gBACnE,EAAE,IAAI,EAAE,qBAAqB,EAAE,WAAW,EAAE,sBAAsB,EAAE;aACrE;YACD,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC,CAAC;IAEF,6BAA6B,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;QACvD;YACE,IAAI,EAAE,qBAAqB;YAC3B,QAAQ,EAAE,QAAQ;YAClB,cAAc,EAAE,CAAC,WAAW,CAAC;YAC7B,YAAY,EAAE,+BAA+B;SAC9C;KACF,CAAC;CACH,CAAC;AAEF,gCAAgC;AACnB,QAAA,0BAA0B,GAAG;IACxC,uBAAuB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAgB,EAAE,EAAE;QAC/E,OAAO;YACL,MAAM,EAAE,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACzD,eAAe,EAAE,MAAM;YACvB,QAAQ,EAAE,WAAW;YACrB,kBAAkB,EAAE,IAAI;YACxB,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE;SAC1B,CAAC;IACJ,CAAC,CAAC;IAEF,sBAAsB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,SAAiB,EAAE,OAAY,EAAE,EAAE;QAC7F,OAAO;YACL,aAAa,EAAE,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YAChE,WAAW,EAAE,SAAS;YACtB,YAAY,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;YACxC,cAAc,EAAE,OAAO,CAAC,MAAM;YAC9B,eAAe,EAAE,EAAE,CAAC,KAAK;SAC1B,CAAC;IACJ,CAAC,CAAC;IAEF,uBAAuB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAgB,EAAE,EAAE;QAC/E,OAAO;YACL,MAAM,EAAE,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACzD,kBAAkB,EAAE,MAAM;YAC1B,gBAAgB,EAAE,IAAI;YACtB,QAAQ,EAAE,EAAE,CAAC,KAAK;SACnB,CAAC;IACJ,CAAC,CAAC;IAEF,eAAe,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;QACzC,KAAK,EAAE;YACL,EAAE,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE;YAC5D,EAAE,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE;YAC5D,EAAE,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE;SAC7D;QACD,KAAK,EAAE;YACL,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE;YACpD,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE;YACpD,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE;SACrD;QACD,OAAO,EAAE,GAAG,EAAE,kBAAkB;QAChC,iBAAiB,EAAE,GAAG;KACvB,CAAC;CACH,CAAC;AAEF,8BAA8B;AACjB,QAAA,qBAAqB,GAAG;IACnC;;OAEG;IACH,eAAe,EAAE,KAAK,EAAE,SAIpB,EAAE,EAAE,EAAE;QACR,MAAM,EACJ,UAAU,GAAG,CAAC,EACd,QAAQ,GAAG,MAAM,EACjB,YAAY,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,cAAc,CAAC,EACxD,GAAG,MAAM,CAAC;QAEX,MAAM,KAAK,GAAG,MAAM,6BAAqB,CAAC,eAAe,EAAE,CAAC;QAC5D,MAAM,MAAM,GAAG,EAAE,CAAC;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,MAAM,KAAK,GAAG,MAAM,6BAAqB,CAAC,UAAU,CAClD,MAAM,EACN,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAC3E,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,4BAA4B,EAAE,KAAK,EAAE,QAIpC,EAAE,EAAE;QACH,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,6BAAqB,CAAC,eAAe,CAAC;YACpE,UAAU,EAAE,QAAQ,CAAC,UAAU;SAChC,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,MAAM,4BAAoB,CAAC,UAAU,CAChD,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EACjB,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,mBAAmB,EAAE,CACnE,CAAC;QAEF,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,8BAA8B,EAAE,KAAK,EAAE,SAA6B,EAAE,EAAE;QACtE,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QACpC,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAE1C,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAC;QAEjC,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAClC,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAExC,OAAO;YACL,MAAM;YACN,WAAW,EAAE;gBACX,QAAQ,EAAE,OAAO,GAAG,SAAS;gBAC7B,WAAW,EAAE;oBACX,GAAG,EAAE,SAAS,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG;oBACpC,QAAQ,EAAE,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;oBACnD,SAAS,EAAE,SAAS,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS;iBACvD;aACF;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,8BAA8B,EAAE,CAAC,OAAY,EAAE,EAAE;QAC/C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,+BAA+B;QAC3E,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,wBAAwB;IAC/F,CAAC;IAED;;OAEG;IACH,6BAA6B,EAAE,GAAG,EAAE,CAAC;QACnC;YACE,IAAI,EAAE,0BAA0B;YAChC,QAAQ,EAAE,UAAU;YACpB,UAAU,EAAE,CAAC;YACb,mBAAmB,EAAE,UAAU;SAChC;QACD;YACE,IAAI,EAAE,8BAA8B;YACpC,QAAQ,EAAE,UAAU;YACpB,UAAU,EAAE,CAAC;YACb,mBAAmB,EAAE,YAAY;SAClC;QACD;YACE,IAAI,EAAE,4BAA4B;YAClC,QAAQ,EAAE,kBAAkB;YAC5B,UAAU,EAAE,CAAC;YACb,mBAAmB,EAAE,UAAU;SAChC;QACD;YACE,IAAI,EAAE,2BAA2B;YACjC,QAAQ,EAAE,UAAU;YACpB,UAAU,EAAE,CAAC;YACb,mBAAmB,EAAE,MAAM;SAC5B;KACF;IAED;;OAEG;IACH,kBAAkB,EAAE,KAAK,EAAE,QAAgB,EAAE,SAAc,EAAE,EAAE,EAAE;QAC/D,MAAM,IAAI,GAAG,qBAAqB,CAAC,QAA8C,CAAC,CAAC;QACnF,IAAI,IAAI,EAAE,CAAC;YACT,IAAI,CAAC,MAAM,CAAC,CAAC;YACb,OAAO;gBACL,QAAQ;gBACR,QAAQ,EAAE,IAAI;gBACd,MAAM;gBACN,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;QACJ,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,iBAAiB,QAAQ,EAAE,CAAC,CAAC;IAC/C,CAAC;CACF,CAAC;AAEF,kCAAkC;AACrB,QAAA,4BAA4B,GAAG;IAC1C,qBAAqB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAe,EAAE,EAAE;QAC5E,OAAO;YACL,OAAO;YACP,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE;YACnB,WAAW,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC;YACpD,UAAU,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;YACpC,cAAc,EAAE,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE;SAC5C,CAAC;IACJ,CAAC,CAAC;IAEF,wBAAwB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAe,EAAE,EAAE;QAC/E,OAAO;YACL,OAAO;YACP,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE;YACtB,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,CAAC;YAChB,eAAe,EAAE,IAAI;SACtB,CAAC;IACJ,CAAC,CAAC;IAEF,yBAAyB,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAgB,EAAE,UAAe,EAAE,EAAE;QAClG,OAAO;YACL,eAAe,EAAE,IAAI;YACrB,aAAa,EAAE,CAAC,cAAc,EAAE,eAAe,EAAE,cAAc,CAAC;YAChE,QAAQ,EAAE,EAAE;YACZ,YAAY,EAAE,GAAG,CAAC,KAAK;SACxB,CAAC;IACJ,CAAC,CAAC;CACH,CAAC;AAEF,iCAAiC;AACjC,UAAU,CAAC,GAAG,EAAE;IACd,cAAI,CAAC,aAAa,EAAE,CAAC;IACrB,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAChD,qBAAqB,CAAC,IAA0C,CAAC,CAAC,SAAS,EAAE,CAAC;IAChF,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,GAAG,EAAE;IACb,iCAAiC;IACjC,cAAI,CAAC,aAAa,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,+BAA+B;AAClB,QAAA,iBAAiB,GAAG;IAC/B,KAAK,EAAE,6BAAqB;IAC5B,aAAa,EAAE,8BAAsB;IACrC,MAAM,EAAE,8BAAsB;IAC9B,KAAK,EAAE,4BAAoB;IAC3B,WAAW,EAAE,mCAA2B;IACxC,UAAU,EAAE,kCAA0B;IACtC,YAAY,EAAE,oCAA4B;IAC1C,KAAK,EAAE,qBAAqB;CAC7B,CAAC;AAEF,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;AAC5D,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;AACtD,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;AACjD,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;AAChE,OAAO,CAAC,GAAG,CAAC,sEAAsE,CAAC,CAAC","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/coordination-setup.ts"],"sourcesContent":["/**\n * Agent Coordination Test Setup for Phase 2A\n * Specialized setup for testing agent coordination, swarm behavior, and neural mesh interactions\n */\n\nimport { jest } from '@jest/globals';\n\n// Mock Claude Flow coordination hooks\nconst mockCoordinationHooks = {\n  'pre-task': jest.fn(),\n  'post-task': jest.fn(),\n  'pre-edit': jest.fn(),\n  'post-edit': jest.fn(),\n  'agent-spawned': jest.fn(),\n  'task-orchestrated': jest.fn(),\n  'neural-trained': jest.fn(),\n  'session-end': jest.fn(),\n  'notify': jest.fn()\n};\n\n// Mock Swarm Coordination Interface\nexport const mockSwarmCoordination = {\n  initializeSwarm: jest.fn().mockResolvedValue({\n    swarmId: 'test-swarm-001',\n    topology: 'mesh',\n    maxAgents: 8,\n    status: 'active'\n  }),\n  \n  spawnAgent: jest.fn().mockImplementation(async (type: string, capabilities: string[]) => {\n    const agentId = `${type}-agent-${Math.random().toString(36).substr(2, 6)}`;\n    return {\n      agentId,\n      type,\n      capabilities,\n      spawnTime: Date.now(),\n      status: 'active'\n    };\n  }),\n  \n  orchestrateTask: jest.fn().mockImplementation(async (task: string, strategy: string) => {\n    return {\n      taskId: 'task-' + Math.random().toString(36).substr(2, 9),\n      task,\n      strategy,\n      assignedAgents: ['agent-001', 'agent-002'],\n      status: 'in_progress',\n      startTime: Date.now()\n    };\n  }),\n  \n  getSwarmStatus: jest.fn().mockReturnValue({\n    swarmId: 'test-swarm-001',\n    activeAgents: 3,\n    completedTasks: 5,\n    averageTaskTime: 250,\n    coordinationEfficiency: 0.92\n  }),\n  \n  terminateSwarm: jest.fn().mockResolvedValue(undefined)\n};\n\n// Mock Agent Communication System\nexport const mockAgentCommunication = {\n  broadcastMessage: jest.fn(),\n  sendDirectMessage: jest.fn(),\n  subscribeToChannel: jest.fn(),\n  unsubscribeFromChannel: jest.fn(),\n  \n  // Message types for testing\n  messageTypes: {\n    TASK_ASSIGNMENT: 'task_assignment',\n    KNOWLEDGE_SHARE: 'knowledge_share',\n    STATUS_UPDATE: 'status_update',\n    COORDINATION_REQUEST: 'coordination_request',\n    PERFORMANCE_REPORT: 'performance_report'\n  },\n  \n  // Mock message creation\n  createMessage: (type: string, payload: any, from: string, to?: string) => ({\n    id: 'msg-' + Math.random().toString(36).substr(2, 9),\n    type,\n    payload,\n    from,\n    to,\n    timestamp: Date.now()\n  })\n};\n\n// Mock Memory Coordination System\nexport const mockMemoryCoordination = {\n  storeSharedMemory: jest.fn().mockImplementation(async (key: string, value: any) => {\n    return {\n      key,\n      value,\n      storedAt: Date.now(),\n      success: true\n    };\n  }),\n  \n  retrieveSharedMemory: jest.fn().mockImplementation(async (key: string) => {\n    return {\n      key,\n      value: mockMemoryData[key] || null,\n      retrievedAt: Date.now()\n    };\n  }),\n  \n  syncMemoryAcrossAgents: jest.fn().mockResolvedValue({\n    syncedAgents: ['agent-001', 'agent-002', 'agent-003'],\n    syncTime: Date.now(),\n    success: true\n  }),\n  \n  getMemoryUsage: jest.fn().mockReturnValue({\n    totalMemory: 512 * 1024 * 1024, // 512MB\n    usedMemory: 128 * 1024 * 1024,  // 128MB\n    sharedMemory: 32 * 1024 * 1024,  // 32MB\n    agentMemoryMap: {\n      'agent-001': 45 * 1024 * 1024,\n      'agent-002': 38 * 1024 * 1024,\n      'agent-003': 45 * 1024 * 1024\n    }\n  })\n};\n\n// Mock memory data for testing\nconst mockMemoryData: Record<string, any> = {};\n\n// Mock Task Coordination System\nexport const mockTaskCoordination = {\n  assignTask: jest.fn().mockImplementation(async (agentId: string, task: any) => {\n    return {\n      assignmentId: 'assign-' + Math.random().toString(36).substr(2, 9),\n      agentId,\n      task,\n      assignedAt: Date.now(),\n      status: 'assigned'\n    };\n  }),\n  \n  getTaskProgress: jest.fn().mockImplementation((taskId: string) => {\n    return {\n      taskId,\n      progress: Math.random() * 100,\n      status: 'in_progress',\n      assignedAgents: 2,\n      completedSubtasks: 3,\n      totalSubtasks: 5,\n      estimatedCompletion: Date.now() + 30000\n    };\n  }),\n  \n  coordinateParallelTasks: jest.fn().mockImplementation(async (tasks: any[]) => {\n    return {\n      coordinationId: 'coord-' + Math.random().toString(36).substr(2, 9),\n      tasks,\n      strategy: 'parallel',\n      assignedAgents: tasks.length,\n      startTime: Date.now()\n    };\n  }),\n  \n  handleTaskDependencies: jest.fn().mockImplementation(async (dependencies: any[]) => {\n    return {\n      resolved: dependencies.filter(d => d.status === 'completed'),\n      pending: dependencies.filter(d => d.status === 'pending'),\n      resolutionPlan: 'sequential_execution'\n    };\n  })\n};\n\n// Mock Performance Coordination\nexport const mockPerformanceCoordination = {\n  monitorSwarmPerformance: jest.fn().mockReturnValue({\n    swarmId: 'test-swarm-001',\n    averageTaskCompletionTime: 245,\n    coordinationOverhead: 15,\n    resourceUtilization: 0.78,\n    agentEfficiencyScores: {\n      'agent-001': 0.92,\n      'agent-002': 0.88,\n      'agent-003': 0.95\n    },\n    bottlenecks: []\n  }),\n  \n  optimizeResourceAllocation: jest.fn().mockImplementation(async () => {\n    return {\n      optimizationId: 'opt-' + Math.random().toString(36).substr(2, 9),\n      improvements: [\n        { type: 'memory_reallocation', improvement: '12% efficiency gain' },\n        { type: 'task_redistribution', improvement: '8% faster completion' }\n      ],\n      appliedAt: Date.now()\n    };\n  }),\n  \n  detectCoordinationBottlenecks: jest.fn().mockReturnValue([\n    {\n      type: 'communication_delay',\n      severity: 'medium',\n      affectedAgents: ['agent-002'],\n      suggestedFix: 'increase communication buffer'\n    }\n  ])\n};\n\n// Mock Neural Mesh Coordination\nexport const mockNeuralMeshCoordination = {\n  establishMeshConnection: jest.fn().mockImplementation(async (agents: string[]) => {\n    return {\n      meshId: 'mesh-' + Math.random().toString(36).substr(2, 9),\n      connectedAgents: agents,\n      topology: 'full_mesh',\n      connectionStrength: 0.94,\n      establishedAt: Date.now()\n    };\n  }),\n  \n  propagateNeuralUpdates: jest.fn().mockImplementation(async (fromAgent: string, updates: any) => {\n    return {\n      propagationId: 'prop-' + Math.random().toString(36).substr(2, 9),\n      sourceAgent: fromAgent,\n      targetAgents: ['agent-002', 'agent-003'],\n      updatesApplied: updates.length,\n      propagationTime: 25 // ms\n    };\n  }),\n  \n  synchronizeNeuralStates: jest.fn().mockImplementation(async (agents: string[]) => {\n    return {\n      syncId: 'sync-' + Math.random().toString(36).substr(2, 9),\n      synchronizedAgents: agents,\n      convergenceScore: 0.87,\n      syncTime: 45 // ms\n    };\n  }),\n  \n  getMeshTopology: jest.fn().mockReturnValue({\n    nodes: [\n      { id: 'agent-001', connections: ['agent-002', 'agent-003'] },\n      { id: 'agent-002', connections: ['agent-001', 'agent-003'] },\n      { id: 'agent-003', connections: ['agent-001', 'agent-002'] }\n    ],\n    edges: [\n      { from: 'agent-001', to: 'agent-002', weight: 0.92 },\n      { from: 'agent-001', to: 'agent-003', weight: 0.89 },\n      { from: 'agent-002', to: 'agent-003', weight: 0.94 }\n    ],\n    density: 1.0, // Fully connected\n    averagePathLength: 1.0\n  })\n};\n\n// Coordination Test Utilities\nexport const coordinationTestUtils = {\n  /**\n   * Create a test swarm with specified configuration\n   */\n  createTestSwarm: async (config: {\n    agentCount?: number;\n    topology?: string;\n    capabilities?: string[];\n  } = {}) => {\n    const {\n      agentCount = 3,\n      topology = 'mesh',\n      capabilities = ['research', 'analysis', 'coordination']\n    } = config;\n    \n    const swarm = await mockSwarmCoordination.initializeSwarm();\n    const agents = [];\n    \n    for (let i = 0; i < agentCount; i++) {\n      const agent = await mockSwarmCoordination.spawnAgent(\n        'test',\n        capabilities.slice(0, Math.floor(Math.random() * capabilities.length) + 1)\n      );\n      agents.push(agent);\n    }\n    \n    return { swarm, agents };\n  },\n  \n  /**\n   * Simulate agent coordination scenario\n   */\n  simulateCoordinationScenario: async (scenario: {\n    taskType: string;\n    agentCount: number;\n    coordinationPattern: string;\n  }) => {\n    const { swarm, agents } = await coordinationTestUtils.createTestSwarm({\n      agentCount: scenario.agentCount\n    });\n    \n    const task = await mockTaskCoordination.assignTask(\n      agents[0].agentId,\n      { type: scenario.taskType, pattern: scenario.coordinationPattern }\n    );\n    \n    return { swarm, agents, task };\n  },\n  \n  /**\n   * Measure coordination performance\n   */\n  measureCoordinationPerformance: async (operation: () => Promise<any>) => {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    \n    const result = await operation();\n    \n    const endTime = performance.now();\n    const endMemory = process.memoryUsage();\n    \n    return {\n      result,\n      performance: {\n        duration: endTime - startTime,\n        memoryDelta: {\n          rss: endMemory.rss - startMemory.rss,\n          heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n          heapTotal: endMemory.heapTotal - startMemory.heapTotal\n        }\n      }\n    };\n  },\n  \n  /**\n   * Validate coordination thresholds\n   */\n  validateCoordinationThresholds: (metrics: any) => {\n    expect(metrics.duration).toBeLessThan(100); // <100ms coordination overhead\n    expect(metrics.memoryDelta.heapUsed).toBeLessThan(10 * 1024 * 1024); // <10MB memory overhead\n  },\n  \n  /**\n   * Generate coordination test scenarios\n   */\n  generateCoordinationScenarios: () => [\n    {\n      name: 'Simple Task Distribution',\n      taskType: 'analysis',\n      agentCount: 3,\n      coordinationPattern: 'parallel'\n    },\n    {\n      name: 'Complex Multi-Stage Workflow',\n      taskType: 'research',\n      agentCount: 5,\n      coordinationPattern: 'sequential'\n    },\n    {\n      name: 'High-Throughput Processing',\n      taskType: 'batch_processing',\n      agentCount: 8,\n      coordinationPattern: 'pipeline'\n    },\n    {\n      name: 'Knowledge Sharing Network',\n      taskType: 'learning',\n      agentCount: 4,\n      coordinationPattern: 'mesh'\n    }\n  ],\n  \n  /**\n   * Mock agent coordination hooks execution\n   */\n  mockHooksExecution: async (hookName: string, params: any = {}) => {\n    const hook = mockCoordinationHooks[hookName as keyof typeof mockCoordinationHooks];\n    if (hook) {\n      hook(params);\n      return {\n        hookName,\n        executed: true,\n        params,\n        timestamp: Date.now()\n      };\n    }\n    throw new Error(`Unknown hook: ${hookName}`);\n  }\n};\n\n// Mock Cross-Session Coordination\nexport const mockCrossSessionCoordination = {\n  saveCoordinationState: jest.fn().mockImplementation(async (swarmId: string) => {\n    return {\n      swarmId,\n      savedAt: Date.now(),\n      agentStates: ['agent-001', 'agent-002', 'agent-003'],\n      taskStates: ['task-001', 'task-002'],\n      memorySnapshot: 'snapshot-id-' + Date.now()\n    };\n  }),\n  \n  restoreCoordinationState: jest.fn().mockImplementation(async (swarmId: string) => {\n    return {\n      swarmId,\n      restoredAt: Date.now(),\n      restoredAgents: 3,\n      restoredTasks: 2,\n      continuityScore: 0.95\n    };\n  }),\n  \n  validateSessionContinuity: jest.fn().mockImplementation(async (beforeState: any, afterState: any) => {\n    return {\n      continuityScore: 0.95,\n      preservedData: ['agent_states', 'task_progress', 'memory_banks'],\n      lostData: [],\n      recoveryTime: 150 // ms\n    };\n  })\n};\n\n// Global coordination test hooks\nbeforeEach(() => {\n  jest.clearAllMocks();\n  Object.keys(mockCoordinationHooks).forEach(hook => {\n    mockCoordinationHooks[hook as keyof typeof mockCoordinationHooks].mockClear();\n  });\n  Object.keys(mockMemoryData).forEach(key => delete mockMemoryData[key]);\n});\n\nafterEach(() => {\n  // Cleanup coordination resources\n  jest.clearAllMocks();\n});\n\n// Global test utilities export\nexport const coordinationMocks = {\n  swarm: mockSwarmCoordination,\n  communication: mockAgentCommunication,\n  memory: mockMemoryCoordination,\n  tasks: mockTaskCoordination,\n  performance: mockPerformanceCoordination,\n  neuralMesh: mockNeuralMeshCoordination,\n  crossSession: mockCrossSessionCoordination,\n  hooks: mockCoordinationHooks\n};\n\nconsole.log('🤝 Agent coordination test setup initialized');\nconsole.log('🐝 Swarm coordination mocks configured');\nconsole.log('🧠 Neural mesh coordination ready');\nconsole.log('🔄 Cross-session coordination validation enabled');\nconsole.log('⚡ Performance thresholds: <100ms coordination, <10MB memory overhead');"],"version":3}