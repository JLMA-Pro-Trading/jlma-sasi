{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/persistence/simple-agent-persistence.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/persistence/simple-agent-persistence.test.ts"],"sourcesContent":["/**\n * Simplified TDD Unit Tests for Agent Persistence Manager\n * Tests SQLite database operations with Phase 2A performance requirements\n * Focus: Red-Green-Refactor TDD methodology\n */\n\nimport { performance } from 'perf_hooks';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\n// Import our implementation\nimport { AgentPersistenceManager } from '../../../src/persistence/AgentPersistenceManager';\n\n// Simple types for testing\ninterface SimpleAgentConfig {\n  id: string;\n  type: string;\n  cognitivePattern: string;\n  networkLayers: number[];\n  status: string;\n  createdAt: number;\n  lastActive: number;\n}\n\ndescribe('AgentPersistenceManager - TDD Red-Green-Refactor', () => {\n  let persistenceManager: AgentPersistenceManager;\n  let testDbPath: string;\n\n  beforeEach(async () => {\n    // Create unique test database for each test\n    testDbPath = path.join(__dirname, `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}.db`);\n    persistenceManager = new AgentPersistenceManager(testDbPath);\n    await persistenceManager.initialize();\n  });\n\n  afterEach(async () => {\n    // Clean up test database\n    if (persistenceManager) {\n      await persistenceManager.close();\n    }\n    if (fs.existsSync(testDbPath)) {\n      fs.unlinkSync(testDbPath);\n    }\n  });\n\n  describe('TDD Red Phase - Database Schema', () => {\n    test('should create all required tables', async () => {\n      // TDD: This will initially fail until we implement schema creation\n      const tables = await persistenceManager.getTables();\n      \n      expect(tables).toContain('agents');\n      expect(tables).toContain('neural_weights');\n      expect(tables).toContain('agent_memory');\n      expect(tables).toContain('agent_metrics');\n      expect(tables).toContain('session_state');\n    });\n\n    test('should create performance indexes', async () => {\n      // TDD: This will initially fail until we implement index creation\n      const indexes = await persistenceManager.getIndexes();\n      \n      expect(indexes.length).toBeGreaterThan(0);\n      expect(indexes).toContain('idx_agents_status');\n      expect(indexes).toContain('idx_agents_type');\n    });\n\n    test('should enable WAL mode for concurrent access', async () => {\n      // TDD: This will initially fail until we configure SQLite properly\n      const journalMode = await persistenceManager.getJournalMode();\n      expect(journalMode).toBe('wal');\n    });\n  });\n\n  describe('TDD Red Phase - Agent CRUD Operations', () => {\n    test('should save agent within 50ms performance target', async () => {\n      // TDD Red: This test should fail initially\n      const agentConfig: SimpleAgentConfig = {\n        id: 'test-agent-001',\n        type: 'researcher',\n        cognitivePattern: 'divergent',\n        networkLayers: [64, 128, 64, 32],\n        status: 'spawning',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      };\n\n      const startTime = performance.now();\n      const savedAgent = await persistenceManager.saveAgent(agentConfig as any);\n      const saveTime = performance.now() - startTime;\n\n      // Phase 2A requirement: database operations <50ms\n      expect(saveTime).toBeLessThan(50);\n      expect(savedAgent.id).toBe(agentConfig.id);\n      expect(savedAgent.type).toBe(agentConfig.type);\n    });\n\n    test('should retrieve agent by ID within 50ms', async () => {\n      // TDD Red: This test should fail initially\n      const agentConfig: SimpleAgentConfig = {\n        id: 'test-agent-002',\n        type: 'coder',\n        cognitivePattern: 'convergent',\n        networkLayers: [128, 256, 128, 64],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      };\n\n      await persistenceManager.saveAgent(agentConfig as any);\n\n      const startTime = performance.now();\n      const retrievedAgent = await persistenceManager.getAgent(agentConfig.id);\n      const retrieveTime = performance.now() - startTime;\n\n      // Phase 2A requirement: database operations <50ms\n      expect(retrieveTime).toBeLessThan(50);\n      expect(retrievedAgent).toBeDefined();\n      expect(retrievedAgent!.id).toBe(agentConfig.id);\n      expect(retrievedAgent!.type).toBe(agentConfig.type);\n    });\n\n    test('should update agent status atomically within 50ms', async () => {\n      // TDD Red: This test should fail initially\n      const agentId = 'test-agent-003';\n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'analyst',\n        cognitivePattern: 'critical',\n        networkLayers: [96, 192, 96, 48],\n        status: 'spawning',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      } as any);\n\n      const startTime = performance.now();\n      await persistenceManager.updateAgentStatus(agentId, 'active');\n      const updateTime = performance.now() - startTime;\n\n      // Phase 2A requirement: database operations <50ms\n      expect(updateTime).toBeLessThan(50);\n\n      // Validate status change\n      const updatedAgent = await persistenceManager.getAgent(agentId);\n      expect(updatedAgent!.status).toBe('active');\n    });\n\n    test('should prevent duplicate agent IDs', async () => {\n      // TDD Red: This test should fail initially\n      const agentConfig: SimpleAgentConfig = {\n        id: 'duplicate-test',\n        type: 'coordinator',\n        cognitivePattern: 'adaptive',\n        networkLayers: [112, 224, 112, 56],\n        status: 'spawning',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      };\n\n      // First save should succeed\n      await persistenceManager.saveAgent(agentConfig as any);\n\n      // Second save should fail with unique constraint\n      await expect(persistenceManager.saveAgent(agentConfig as any))\n        .rejects.toThrow(/UNIQUE constraint failed/);\n    });\n  });\n\n  describe('TDD Red Phase - Performance Testing', () => {\n    test('should handle concurrent operations efficiently', async () => {\n      // TDD Red: This test should fail initially\n      const concurrentSaves = Array.from({ length: 10 }, (_, i) => \n        persistenceManager.saveAgent({\n          id: `concurrent-agent-${i}`,\n          type: 'optimizer',\n          cognitivePattern: 'systems',\n          networkLayers: [80, 160, 80, 40],\n          status: 'spawning',\n          createdAt: Date.now(),\n          lastActive: Date.now()\n        } as any)\n      );\n\n      const startTime = performance.now();\n      const results = await Promise.all(concurrentSaves);\n      const totalTime = performance.now() - startTime;\n\n      // All saves should succeed\n      expect(results).toHaveLength(10);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n        expect(result.id).toMatch(/concurrent-agent-\\d/);\n      });\n\n      // Average save time should be reasonable for concurrent operations\n      const avgSaveTime = totalTime / 10;\n      expect(avgSaveTime).toBeLessThan(75); // Slightly higher threshold for concurrent ops\n    });\n\n    test('should efficiently batch save multiple agents', async () => {\n      // TDD Red: This test should fail initially\n      const agents: SimpleAgentConfig[] = Array.from({ length: 20 }, (_, i) => ({\n        id: `batch-agent-${i}`,\n        type: ['researcher', 'coder', 'analyst', 'optimizer', 'coordinator'][i % 5],\n        cognitivePattern: ['convergent', 'divergent', 'critical', 'systems', 'adaptive'][i % 5],\n        networkLayers: [64, 128, 64, 32],\n        status: 'spawning',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      }));\n\n      const startTime = performance.now();\n      await persistenceManager.batchSaveAgents(agents as any[]);\n      const batchTime = performance.now() - startTime;\n\n      // Batch operation should be efficient\n      expect(batchTime).toBeLessThan(100); // 100ms for 20 agents = 5ms per agent\n\n      // Verify all agents were saved\n      const savedAgents = await persistenceManager.getAllAgents();\n      expect(savedAgents).toHaveLength(20);\n    });\n  });\n\n  describe('TDD Red Phase - Metrics Recording', () => {\n    test('should record performance metrics', async () => {\n      // TDD Red: This test should fail initially\n      const agentId = 'metrics-test-agent';\n      const spawnTime = 65; // ms\n\n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'researcher',\n        cognitivePattern: 'divergent',\n        networkLayers: [64, 128, 64],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        spawnTimeMs: spawnTime\n      } as any);\n\n      await persistenceManager.recordMetric({\n        agentId,\n        metricType: 'spawn_time',\n        value: spawnTime,\n        unit: 'ms',\n        recordedAt: Date.now(),\n        context: { target: 75, status: 'pass' }\n      } as any);\n\n      const metrics = await persistenceManager.getAgentMetrics(agentId, 'spawn_time');\n      expect(metrics).toHaveLength(1);\n      expect(metrics[0].value).toBe(spawnTime);\n      expect(metrics[0].unit).toBe('ms');\n    });\n  });\n\n  describe('TDD Red Phase - Error Handling', () => {\n    test('should handle missing agent gracefully', async () => {\n      // TDD Red: This test should fail initially\n      const nonExistentAgent = await persistenceManager.getAgent('non-existent-id');\n      expect(nonExistentAgent).toBeNull();\n    });\n\n    test('should validate required fields', async () => {\n      // TDD Red: This test should fail initially\n      \n      // Missing required fields should fail\n      await expect(persistenceManager.saveAgent({} as any))\n        .rejects.toThrow();\n\n      await expect(persistenceManager.saveAgent({ \n        id: 'test'\n      } as any))\n        .rejects.toThrow();\n    });\n  });\n});"],"version":3}