{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/contexts/SwarmContext.tsx","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/contexts/SwarmContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'\nimport { useNeuralMesh } from '../hooks/useNeuralMesh'\nimport { NeuralAgent } from '../services/NeuralMeshService'\nimport { Agent } from '../types/agent'\nimport { neuralSwarmIntegration } from '../services/SwarmContextIntegration'\n\nexport type { Agent } from '../types/agent'\n\nexport interface SwarmStats {\n  totalAgents: number\n  activeAgents: number\n  totalRepositories: number\n  tasksCompleted: number\n  asiProgress: number\n  networkEfficiency: number\n  globalContributors: number\n  processingUnits: number\n  neuralMeshStats?: {\n    totalNeurons: number\n    totalSynapses: number\n    meshConnectivity: number\n    neuralActivity: number\n    wasmAcceleration: boolean\n    averageLatency: number\n  }\n}\n\nexport interface Repository {\n  id: string\n  name: string\n  owner: string\n  description: string\n  activeAgents: number\n  totalIssues: number\n  completedIssues: number\n  openPullRequests: number\n  lastActivity: Date\n  techStack: string[]\n  votes: number\n  userVoted: boolean\n}\n\n\ninterface SwarmContextType {\n  agents: Agent[]\n  repositories: Repository[]\n  stats: SwarmStats\n  isSwarmActive: boolean\n  startSwarm: () => void\n  stopSwarm: () => void\n  addAgent: (type: Agent['type']) => void\n  removeAgent: (id: string) => void\n  voteForProject: (repositoryId: string) => void\n  addRepository: (repository: Repository) => void\n  // Neural mesh integration\n  neuralMesh: {\n    isConnected: boolean\n    isInitializing: boolean\n    error: string | null\n    metrics: {\n      totalNeurons: number\n      totalSynapses: number\n      averageActivity: number\n      networkEfficiency: number\n      wasmAcceleration: boolean\n    }\n    connection: any\n    trainMesh: (patterns: any[]) => Promise<boolean>\n    getMeshStatus: () => Promise<any>\n    clearError: () => void\n    reconnect: () => Promise<void>\n    toggleNeuralMesh: (enabled: boolean) => void\n  }\n}\n\nconst SwarmContext = createContext<SwarmContextType | undefined>(undefined)\n\nexport const useSwarm = () => {\n  const context = useContext(SwarmContext)\n  if (context === undefined) {\n    throw new Error('useSwarm must be used within a SwarmProvider')\n  }\n  return context\n}\n\ninterface SwarmProviderProps {\n  children: ReactNode\n}\n\nexport const SwarmProvider: React.FC<SwarmProviderProps> = ({ children }) => {\n  const [agents, setAgents] = useState<Agent[]>([])\n  const [repositories, setRepositories] = useState<Repository[]>([])\n  const [stats, setStats] = useState<SwarmStats>({\n    totalAgents: 0,\n    activeAgents: 0,\n    totalRepositories: 0,\n    tasksCompleted: 0,\n    asiProgress: 0,\n    networkEfficiency: 0,\n    globalContributors: 0,\n    processingUnits: 0\n  })\n  const [isSwarmActive, setIsSwarmActive] = useState(false)\n  const [enableNeuralMesh, setEnableNeuralMesh] = useState(true)\n  const [neuralIntegrationReady, setNeuralIntegrationReady] = useState(false)\n  \n  // Neural mesh integration\n  const neuralMeshHook = useNeuralMesh({\n    serverUrl: 'ws://localhost:3000',\n    enableWasm: true,\n    enableRealtime: true,\n    debugMode: true\n  })\n\n  // Initialize neural data (replaces mock data)\n  useEffect(() => {\n    initializeNeuralData()\n  }, [])\n  \n  // Initialize neural integration\n  useEffect(() => {\n    const setupNeuralIntegration = async () => {\n      try {\n        await neuralSwarmIntegration.initializeNeuralData(repositories)\n        setNeuralIntegrationReady(true)\n      } catch (error) {\n        console.error('Neural integration setup failed:', error)\n        // Fallback to mock data if neural integration fails\n        initializeMockData()\n      }\n    }\n    setupNeuralIntegration()\n  }, [])\n\n  // Update stats when agents/repositories change\n  useEffect(() => {\n    updateStats()\n  }, [agents, repositories, neuralMeshHook.agents, neuralMeshHook.metrics])\n  \n  // Sync neural mesh agents with regular agents\n  useEffect(() => {\n    if (enableNeuralMesh && neuralMeshHook.agents.length > 0) {\n      const combinedAgents = [...agents.filter(a => !a.neuralId), ...neuralMeshHook.agents]\n      setAgents(combinedAgents)\n    }\n  }, [neuralMeshHook.agents, enableNeuralMesh])\n  \n  // Sync neural integration agents\n  useEffect(() => {\n    if (neuralIntegrationReady && isSwarmActive) {\n      const interval = setInterval(async () => {\n        try {\n          const updatedAgents = await neuralSwarmIntegration.simulateNeuralActivity()\n          setAgents(current => {\n            // Merge neural agents with existing agents\n            const nonNeuralAgents = current.filter(a => !a.neuralId)\n            return [...nonNeuralAgents, ...updatedAgents]\n          })\n        } catch (error) {\n          console.error('Neural activity simulation failed:', error)\n        }\n      }, 2000)\n      \n      return () => clearInterval(interval)\n    }\n  }, [neuralIntegrationReady, isSwarmActive])\n\n  // Simulate swarm activity (fallback when neural integration not available)\n  useEffect(() => {\n    if (!isSwarmActive || neuralIntegrationReady) return\n\n    const interval = setInterval(() => {\n      simulateSwarmActivity()\n    }, 2000)\n\n    return () => clearInterval(interval)\n  }, [isSwarmActive, neuralIntegrationReady])\n\n  const initializeNeuralData = async () => {\n    try {\n      // Enhanced neural repositories\n      const neuralRepos: Repository[] = [\n        {\n          id: 'repo_1',\n          name: 'neural-architecture-search',\n          owner: 'DeepMind',\n          description: 'Automated neural architecture discovery with reinforcement learning',\n          activeAgents: 8,\n          totalIssues: 47,\n          completedIssues: 32,\n          openPullRequests: 3,\n          lastActivity: new Date(),\n          techStack: ['Python', 'TensorFlow', 'JAX', 'CUDA'],\n          votes: 156,\n          userVoted: false\n        },\n        {\n          id: 'repo_2',\n          name: 'synaptic-mesh-framework',\n          owner: 'OpenAI',\n          description: 'Distributed neural mesh computing with WASM acceleration',\n          activeAgents: 12,\n          totalIssues: 73,\n          completedIssues: 51,\n          openPullRequests: 5,\n          lastActivity: new Date(),\n          techStack: ['Rust', 'WebAssembly', 'TypeScript', 'C++'],\n          votes: 289,\n          userVoted: true\n        },\n        {\n          id: 'repo_3',\n          name: 'ruv-fann-enhanced',\n          owner: 'FANN-Community',\n          description: 'Fast Artificial Neural Network library with SIMD optimization',\n          activeAgents: 6,\n          totalIssues: 95,\n          completedIssues: 78,\n          openPullRequests: 2,\n          lastActivity: new Date(),\n          techStack: ['C', 'Rust', 'Python', 'WebAssembly'],\n          votes: 445,\n          userVoted: false\n        }\n      ]\n\n      setRepositories(neuralRepos)\n      \n      // Initialize neural agents if integration is available\n      if (neuralIntegrationReady) {\n        const neuralAgents = neuralSwarmIntegration.generateNeuralAgents(25)\n        setAgents(neuralAgents)\n      } else {\n        // Fallback to enhanced mock agents\n        const mockAgents: Agent[] = generateMockAgents(25)\n        setAgents(mockAgents)\n      }\n    } catch (error) {\n      console.error('Neural data initialization failed:', error)\n      // Fallback to original mock data\n      initializeMockData()\n    }\n  }\n  \n  const initializeMockData = () => {\n    // Original mock repositories (fallback)\n    const mockRepos: Repository[] = [\n      {\n        id: 'repo_1',\n        name: 'quantum-compiler',\n        owner: 'QuantumSoft',\n        description: 'Next-generation quantum computing compiler',\n        activeAgents: 5,\n        totalIssues: 47,\n        completedIssues: 32,\n        openPullRequests: 3,\n        lastActivity: new Date(),\n        techStack: ['Rust', 'Python', 'CUDA'],\n        votes: 42,\n        userVoted: false\n      },\n      {\n        id: 'repo_2',\n        name: 'neural-mesh',\n        owner: 'DeepMind',\n        description: 'Distributed neural network framework',\n        activeAgents: 8,\n        totalIssues: 73,\n        completedIssues: 51,\n        openPullRequests: 5,\n        lastActivity: new Date(),\n        techStack: ['Python', 'TensorFlow', 'C++'],\n        votes: 28,\n        userVoted: true\n      },\n      {\n        id: 'repo_3',\n        name: 'swarm-intelligence',\n        owner: 'MIT-CSAIL',\n        description: 'Collective AI decision-making system',\n        activeAgents: 12,\n        totalIssues: 95,\n        completedIssues: 67,\n        openPullRequests: 7,\n        lastActivity: new Date(),\n        techStack: ['Go', 'React', 'PostgreSQL'],\n        votes: 73,\n        userVoted: false\n      }\n    ]\n\n    // Mock agents\n    const mockAgents: Agent[] = generateMockAgents(25)\n\n    setRepositories(mockRepos)\n    setAgents(mockAgents)\n  }\n\n  const generateMockAgents = (count: number): Agent[] => {\n    const agentTypes: Agent['type'][] = ['researcher', 'coder', 'tester', 'reviewer', 'debugger']\n    const tasks = [\n      'Optimizing quantum algorithms',\n      'Implementing neural pathways',\n      'Testing distributed systems',\n      'Reviewing security protocols',\n      'Debugging memory leaks',\n      'Analyzing performance metrics',\n      'Refactoring legacy code',\n      'Writing unit tests',\n      'Documenting APIs',\n      'Optimizing database queries'\n    ]\n\n    const owners = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank', 'Grace', 'Henry', 'Ivy', 'Jack']\n\n    return Array.from({ length: count }, (_, i) => ({\n      id: `agent_${i}`,\n      name: `${agentTypes[Math.floor(Math.random() * agentTypes.length)].charAt(0).toUpperCase() + agentTypes[Math.floor(Math.random() * agentTypes.length)].slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n      type: agentTypes[Math.floor(Math.random() * agentTypes.length)],\n      status: Math.random() > 0.7 ? 'active' : Math.random() > 0.5 ? 'processing' : 'idle',\n      currentTask: tasks[Math.floor(Math.random() * tasks.length)],\n      repository: repositories[Math.floor(Math.random() * repositories.length)]?.name || 'quantum-compiler',\n      branch: `feature/agent-${i}-${Math.random().toString(36).substr(2, 6)}`,\n      completedTasks: Math.floor(Math.random() * 50),\n      efficiency: Math.random() * 100,\n      progress: Math.random(),\n      position: {\n        x: (Math.random() - 0.5) * 100,\n        y: (Math.random() - 0.5) * 100,\n        z: (Math.random() - 0.5) * 100\n      },\n      owner: owners[Math.floor(Math.random() * owners.length)]\n    }))\n  }\n\n  const updateStats = () => {\n    const activeAgents = agents.filter(agent => agent.status === 'active' || agent.status === 'processing').length\n    const totalTasks = agents.reduce((sum, agent) => sum + agent.completedTasks, 0)\n    const avgEfficiency = agents.reduce((sum, agent) => sum + agent.efficiency, 0) / agents.length\n    \n    // Include neural mesh metrics\n    const neuralMeshStats = enableNeuralMesh ? {\n      totalNeurons: neuralMeshHook.metrics.totalNeurons,\n      totalSynapses: neuralMeshHook.metrics.totalSynapses,\n      meshConnectivity: neuralMeshHook.metrics.networkEfficiency,\n      neuralActivity: neuralMeshHook.metrics.averageActivity,\n      wasmAcceleration: neuralMeshHook.metrics.wasmAcceleration,\n      averageLatency: neuralMeshHook.agents.reduce((sum: number, agent: any) => \n        sum + (agent.realtime?.networkLatency || 0), 0) / (neuralMeshHook.agents.length || 1)\n    } : undefined\n\n    // Get enhanced stats from neural integration if available\n    const baseStats = {\n      totalAgents: agents.length,\n      activeAgents,\n      totalRepositories: repositories.length,\n      tasksCompleted: totalTasks,\n      asiProgress: Math.min(95, (totalTasks / 1000) * 100),\n      networkEfficiency: enableNeuralMesh ? neuralMeshHook.metrics.networkEfficiency : avgEfficiency || 0,\n      globalContributors: Math.floor(Math.random() * 5000) + 15000,\n      processingUnits: Math.floor(agents.length * 42.5) + Math.floor(Math.random() * 200) + 1200,\n      ...(neuralMeshStats && { neuralMeshStats })\n    }\n    \n    const enhancedStats = neuralIntegrationReady ? \n      neuralSwarmIntegration.getEnhancedStats(baseStats) : \n      baseStats\n    \n    setStats(enhancedStats)\n  }\n\n  const simulateSwarmActivity = () => {\n    setAgents(currentAgents => \n      currentAgents.map(agent => {\n        const shouldUpdate = Math.random() > 0.7\n        if (!shouldUpdate) return agent\n\n        const newStatus = Math.random() > 0.8 ? 'active' : \n                         Math.random() > 0.6 ? 'processing' : \n                         Math.random() > 0.4 ? 'idle' : 'completed'\n\n        const completedTasks = newStatus === 'completed' ? \n                              agent.completedTasks + 1 : \n                              agent.completedTasks\n\n        return {\n          ...agent,\n          status: newStatus,\n          completedTasks,\n          efficiency: Math.max(0, Math.min(100, agent.efficiency + (Math.random() - 0.5) * 10)),\n          progress: Math.max(0, Math.min(1, agent.progress + (Math.random() - 0.4) * 0.1)),\n          position: {\n            x: agent.position.x + (Math.random() - 0.5) * 2,\n            y: agent.position.y + (Math.random() - 0.5) * 2,\n            z: agent.position.z + (Math.random() - 0.5) * 2\n          }\n        }\n      })\n    )\n  }\n\n  const startSwarm = () => {\n    setIsSwarmActive(true)\n  }\n\n  const stopSwarm = () => {\n    setIsSwarmActive(false)\n  }\n\n  const addAgent = async (type: Agent['type']) => {\n    // Try neural integration first\n    if (neuralIntegrationReady) {\n      try {\n        const neuralAgent = await neuralSwarmIntegration.addNeuralAgent(type)\n        if (neuralAgent) {\n          setAgents(current => [...current, neuralAgent])\n          return\n        }\n      } catch (error) {\n        console.error('Neural agent creation failed:', error)\n      }\n    }\n    \n    // Try neural mesh service\n    if (enableNeuralMesh && neuralMeshHook.isConnected) {\n      try {\n        const neuralAgent = await neuralMeshHook.createAgent(type, {\n          layer: Math.floor(Math.random() * 6) + 1,\n          threshold: 0.5\n        })\n        \n        if (neuralAgent) {\n          // Agent will be added automatically via useEffect hook\n          return\n        }\n      } catch (error) {\n        console.error('Neural mesh agent creation failed:', error)\n      }\n    }\n    \n    // Fallback to regular agent creation\n    const newAgent: Agent = {\n      id: `agent_${Date.now()}`,\n      name: `${type.charAt(0).toUpperCase() + type.slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n      type,\n      status: 'idle',\n      currentTask: 'Initializing...',\n      repository: repositories[0]?.name || 'quantum-compiler',\n      branch: `feature/new-agent-${Math.random().toString(36).substr(2, 6)}`,\n      completedTasks: 0,\n      efficiency: 50,\n      progress: 0,\n      position: {\n        x: (Math.random() - 0.5) * 100,\n        y: (Math.random() - 0.5) * 100,\n        z: (Math.random() - 0.5) * 100\n      },\n      owner: 'Current User'\n    }\n\n    setAgents(current => [...current, newAgent])\n  }\n\n  const removeAgent = async (id: string) => {\n    // Remove from neural integration if available\n    if (neuralIntegrationReady) {\n      try {\n        await neuralSwarmIntegration.removeNeuralAgent(id)\n      } catch (error) {\n        console.error('Neural agent removal failed:', error)\n      }\n    }\n    \n    // Remove from neural mesh if it's a neural agent\n    if (enableNeuralMesh) {\n      neuralMeshHook.removeAgent(id)\n    }\n    \n    setAgents(current => current.filter(agent => agent.id !== id))\n  }\n\n  const voteForProject = (repositoryId: string) => {\n    setRepositories(current => \n      current.map(repo => \n        repo.id === repositoryId \n          ? { \n              ...repo, \n              votes: repo.userVoted ? repo.votes - 1 : repo.votes + 1,\n              userVoted: !repo.userVoted\n            }\n          : repo\n      )\n    )\n  }\n\n  const addRepository = (repository: Repository) => {\n    setRepositories(current => [...current, repository])\n  }\n\n  const value: SwarmContextType = {\n    agents,\n    repositories,\n    stats,\n    isSwarmActive,\n    startSwarm,\n    stopSwarm,\n    addAgent,\n    removeAgent,\n    voteForProject,\n    addRepository,\n    // Neural mesh specific methods\n    neuralMesh: {\n      isConnected: neuralMeshHook.isConnected,\n      isInitializing: neuralMeshHook.isInitializing,\n      error: neuralMeshHook.error,\n      metrics: neuralMeshHook.metrics,\n      connection: neuralMeshHook.connection,\n      trainMesh: neuralMeshHook.trainMesh,\n      getMeshStatus: neuralMeshHook.getMeshStatus,\n      clearError: neuralMeshHook.clearError,\n      reconnect: neuralMeshHook.reconnect,\n      toggleNeuralMesh: (enabled: boolean) => setEnableNeuralMesh(enabled)\n    }\n  }\n\n  // Cleanup neural resources on unmount\n  useEffect(() => {\n    return () => {\n      if (neuralIntegrationReady) {\n        neuralSwarmIntegration.cleanup().catch(error => {\n          console.error('Neural integration cleanup error:', error)\n        })\n      }\n    }\n  }, [neuralIntegrationReady])\n\n  return (\n    <SwarmContext.Provider value={value}>\n      {children}\n    </SwarmContext.Provider>\n  )\n}"],"version":3}