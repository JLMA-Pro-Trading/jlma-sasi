0b902fe5b7f061a386e796eae1f146ea
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwarmProvider = exports.useSwarm = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const useNeuralMesh_1 = require("../hooks/useNeuralMesh");
const SwarmContextIntegration_1 = require("../services/SwarmContextIntegration");
const SwarmContext = (0, react_1.createContext)(undefined);
const useSwarm = () => {
    const context = (0, react_1.useContext)(SwarmContext);
    if (context === undefined) {
        throw new Error('useSwarm must be used within a SwarmProvider');
    }
    return context;
};
exports.useSwarm = useSwarm;
const SwarmProvider = ({ children }) => {
    const [agents, setAgents] = (0, react_1.useState)([]);
    const [repositories, setRepositories] = (0, react_1.useState)([]);
    const [stats, setStats] = (0, react_1.useState)({
        totalAgents: 0,
        activeAgents: 0,
        totalRepositories: 0,
        tasksCompleted: 0,
        asiProgress: 0,
        networkEfficiency: 0,
        globalContributors: 0,
        processingUnits: 0
    });
    const [isSwarmActive, setIsSwarmActive] = (0, react_1.useState)(false);
    const [enableNeuralMesh, setEnableNeuralMesh] = (0, react_1.useState)(true);
    const [neuralIntegrationReady, setNeuralIntegrationReady] = (0, react_1.useState)(false);
    // Neural mesh integration
    const neuralMeshHook = (0, useNeuralMesh_1.useNeuralMesh)({
        serverUrl: 'ws://localhost:3000',
        enableWasm: true,
        enableRealtime: true,
        debugMode: true
    });
    // Initialize neural data (replaces mock data)
    (0, react_1.useEffect)(() => {
        initializeNeuralData();
    }, []);
    // Initialize neural integration
    (0, react_1.useEffect)(() => {
        const setupNeuralIntegration = async () => {
            try {
                await SwarmContextIntegration_1.neuralSwarmIntegration.initializeNeuralData(repositories);
                setNeuralIntegrationReady(true);
            }
            catch (error) {
                console.error('Neural integration setup failed:', error);
                // Fallback to mock data if neural integration fails
                initializeMockData();
            }
        };
        setupNeuralIntegration();
    }, []);
    // Update stats when agents/repositories change
    (0, react_1.useEffect)(() => {
        updateStats();
    }, [agents, repositories, neuralMeshHook.agents, neuralMeshHook.metrics]);
    // Sync neural mesh agents with regular agents
    (0, react_1.useEffect)(() => {
        if (enableNeuralMesh && neuralMeshHook.agents.length > 0) {
            const combinedAgents = [...agents.filter(a => !a.neuralId), ...neuralMeshHook.agents];
            setAgents(combinedAgents);
        }
    }, [neuralMeshHook.agents, enableNeuralMesh]);
    // Sync neural integration agents
    (0, react_1.useEffect)(() => {
        if (neuralIntegrationReady && isSwarmActive) {
            const interval = setInterval(async () => {
                try {
                    const updatedAgents = await SwarmContextIntegration_1.neuralSwarmIntegration.simulateNeuralActivity();
                    setAgents(current => {
                        // Merge neural agents with existing agents
                        const nonNeuralAgents = current.filter(a => !a.neuralId);
                        return [...nonNeuralAgents, ...updatedAgents];
                    });
                }
                catch (error) {
                    console.error('Neural activity simulation failed:', error);
                }
            }, 2000);
            return () => clearInterval(interval);
        }
    }, [neuralIntegrationReady, isSwarmActive]);
    // Simulate swarm activity (fallback when neural integration not available)
    (0, react_1.useEffect)(() => {
        if (!isSwarmActive || neuralIntegrationReady)
            return;
        const interval = setInterval(() => {
            simulateSwarmActivity();
        }, 2000);
        return () => clearInterval(interval);
    }, [isSwarmActive, neuralIntegrationReady]);
    const initializeNeuralData = async () => {
        try {
            // Enhanced neural repositories
            const neuralRepos = [
                {
                    id: 'repo_1',
                    name: 'neural-architecture-search',
                    owner: 'DeepMind',
                    description: 'Automated neural architecture discovery with reinforcement learning',
                    activeAgents: 8,
                    totalIssues: 47,
                    completedIssues: 32,
                    openPullRequests: 3,
                    lastActivity: new Date(),
                    techStack: ['Python', 'TensorFlow', 'JAX', 'CUDA'],
                    votes: 156,
                    userVoted: false
                },
                {
                    id: 'repo_2',
                    name: 'synaptic-mesh-framework',
                    owner: 'OpenAI',
                    description: 'Distributed neural mesh computing with WASM acceleration',
                    activeAgents: 12,
                    totalIssues: 73,
                    completedIssues: 51,
                    openPullRequests: 5,
                    lastActivity: new Date(),
                    techStack: ['Rust', 'WebAssembly', 'TypeScript', 'C++'],
                    votes: 289,
                    userVoted: true
                },
                {
                    id: 'repo_3',
                    name: 'ruv-fann-enhanced',
                    owner: 'FANN-Community',
                    description: 'Fast Artificial Neural Network library with SIMD optimization',
                    activeAgents: 6,
                    totalIssues: 95,
                    completedIssues: 78,
                    openPullRequests: 2,
                    lastActivity: new Date(),
                    techStack: ['C', 'Rust', 'Python', 'WebAssembly'],
                    votes: 445,
                    userVoted: false
                }
            ];
            setRepositories(neuralRepos);
            // Initialize neural agents if integration is available
            if (neuralIntegrationReady) {
                const neuralAgents = SwarmContextIntegration_1.neuralSwarmIntegration.generateNeuralAgents(25);
                setAgents(neuralAgents);
            }
            else {
                // Fallback to enhanced mock agents
                const mockAgents = generateMockAgents(25);
                setAgents(mockAgents);
            }
        }
        catch (error) {
            console.error('Neural data initialization failed:', error);
            // Fallback to original mock data
            initializeMockData();
        }
    };
    const initializeMockData = () => {
        // Original mock repositories (fallback)
        const mockRepos = [
            {
                id: 'repo_1',
                name: 'quantum-compiler',
                owner: 'QuantumSoft',
                description: 'Next-generation quantum computing compiler',
                activeAgents: 5,
                totalIssues: 47,
                completedIssues: 32,
                openPullRequests: 3,
                lastActivity: new Date(),
                techStack: ['Rust', 'Python', 'CUDA'],
                votes: 42,
                userVoted: false
            },
            {
                id: 'repo_2',
                name: 'neural-mesh',
                owner: 'DeepMind',
                description: 'Distributed neural network framework',
                activeAgents: 8,
                totalIssues: 73,
                completedIssues: 51,
                openPullRequests: 5,
                lastActivity: new Date(),
                techStack: ['Python', 'TensorFlow', 'C++'],
                votes: 28,
                userVoted: true
            },
            {
                id: 'repo_3',
                name: 'swarm-intelligence',
                owner: 'MIT-CSAIL',
                description: 'Collective AI decision-making system',
                activeAgents: 12,
                totalIssues: 95,
                completedIssues: 67,
                openPullRequests: 7,
                lastActivity: new Date(),
                techStack: ['Go', 'React', 'PostgreSQL'],
                votes: 73,
                userVoted: false
            }
        ];
        // Mock agents
        const mockAgents = generateMockAgents(25);
        setRepositories(mockRepos);
        setAgents(mockAgents);
    };
    const generateMockAgents = (count) => {
        const agentTypes = ['researcher', 'coder', 'tester', 'reviewer', 'debugger'];
        const tasks = [
            'Optimizing quantum algorithms',
            'Implementing neural pathways',
            'Testing distributed systems',
            'Reviewing security protocols',
            'Debugging memory leaks',
            'Analyzing performance metrics',
            'Refactoring legacy code',
            'Writing unit tests',
            'Documenting APIs',
            'Optimizing database queries'
        ];
        const owners = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank', 'Grace', 'Henry', 'Ivy', 'Jack'];
        return Array.from({ length: count }, (_, i) => ({
            id: `agent_${i}`,
            name: `${agentTypes[Math.floor(Math.random() * agentTypes.length)].charAt(0).toUpperCase() + agentTypes[Math.floor(Math.random() * agentTypes.length)].slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,
            type: agentTypes[Math.floor(Math.random() * agentTypes.length)],
            status: Math.random() > 0.7 ? 'active' : Math.random() > 0.5 ? 'processing' : 'idle',
            currentTask: tasks[Math.floor(Math.random() * tasks.length)],
            repository: repositories[Math.floor(Math.random() * repositories.length)]?.name || 'quantum-compiler',
            branch: `feature/agent-${i}-${Math.random().toString(36).substr(2, 6)}`,
            completedTasks: Math.floor(Math.random() * 50),
            efficiency: Math.random() * 100,
            progress: Math.random(),
            position: {
                x: (Math.random() - 0.5) * 100,
                y: (Math.random() - 0.5) * 100,
                z: (Math.random() - 0.5) * 100
            },
            owner: owners[Math.floor(Math.random() * owners.length)]
        }));
    };
    const updateStats = () => {
        const activeAgents = agents.filter(agent => agent.status === 'active' || agent.status === 'processing').length;
        const totalTasks = agents.reduce((sum, agent) => sum + agent.completedTasks, 0);
        const avgEfficiency = agents.reduce((sum, agent) => sum + agent.efficiency, 0) / agents.length;
        // Include neural mesh metrics
        const neuralMeshStats = enableNeuralMesh ? {
            totalNeurons: neuralMeshHook.metrics.totalNeurons,
            totalSynapses: neuralMeshHook.metrics.totalSynapses,
            meshConnectivity: neuralMeshHook.metrics.networkEfficiency,
            neuralActivity: neuralMeshHook.metrics.averageActivity,
            wasmAcceleration: neuralMeshHook.metrics.wasmAcceleration,
            averageLatency: neuralMeshHook.agents.reduce((sum, agent) => sum + (agent.realtime?.networkLatency || 0), 0) / (neuralMeshHook.agents.length || 1)
        } : undefined;
        // Get enhanced stats from neural integration if available
        const baseStats = {
            totalAgents: agents.length,
            activeAgents,
            totalRepositories: repositories.length,
            tasksCompleted: totalTasks,
            asiProgress: Math.min(95, (totalTasks / 1000) * 100),
            networkEfficiency: enableNeuralMesh ? neuralMeshHook.metrics.networkEfficiency : avgEfficiency || 0,
            globalContributors: Math.floor(Math.random() * 5000) + 15000,
            processingUnits: Math.floor(agents.length * 42.5) + Math.floor(Math.random() * 200) + 1200,
            ...(neuralMeshStats && { neuralMeshStats })
        };
        const enhancedStats = neuralIntegrationReady ?
            SwarmContextIntegration_1.neuralSwarmIntegration.getEnhancedStats(baseStats) :
            baseStats;
        setStats(enhancedStats);
    };
    const simulateSwarmActivity = () => {
        setAgents(currentAgents => currentAgents.map(agent => {
            const shouldUpdate = Math.random() > 0.7;
            if (!shouldUpdate)
                return agent;
            const newStatus = Math.random() > 0.8 ? 'active' :
                Math.random() > 0.6 ? 'processing' :
                    Math.random() > 0.4 ? 'idle' : 'completed';
            const completedTasks = newStatus === 'completed' ?
                agent.completedTasks + 1 :
                agent.completedTasks;
            return {
                ...agent,
                status: newStatus,
                completedTasks,
                efficiency: Math.max(0, Math.min(100, agent.efficiency + (Math.random() - 0.5) * 10)),
                progress: Math.max(0, Math.min(1, agent.progress + (Math.random() - 0.4) * 0.1)),
                position: {
                    x: agent.position.x + (Math.random() - 0.5) * 2,
                    y: agent.position.y + (Math.random() - 0.5) * 2,
                    z: agent.position.z + (Math.random() - 0.5) * 2
                }
            };
        }));
    };
    const startSwarm = () => {
        setIsSwarmActive(true);
    };
    const stopSwarm = () => {
        setIsSwarmActive(false);
    };
    const addAgent = async (type) => {
        // Try neural integration first
        if (neuralIntegrationReady) {
            try {
                const neuralAgent = await SwarmContextIntegration_1.neuralSwarmIntegration.addNeuralAgent(type);
                if (neuralAgent) {
                    setAgents(current => [...current, neuralAgent]);
                    return;
                }
            }
            catch (error) {
                console.error('Neural agent creation failed:', error);
            }
        }
        // Try neural mesh service
        if (enableNeuralMesh && neuralMeshHook.isConnected) {
            try {
                const neuralAgent = await neuralMeshHook.createAgent(type, {
                    layer: Math.floor(Math.random() * 6) + 1,
                    threshold: 0.5
                });
                if (neuralAgent) {
                    // Agent will be added automatically via useEffect hook
                    return;
                }
            }
            catch (error) {
                console.error('Neural mesh agent creation failed:', error);
            }
        }
        // Fallback to regular agent creation
        const newAgent = {
            id: `agent_${Date.now()}`,
            name: `${type.charAt(0).toUpperCase() + type.slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,
            type,
            status: 'idle',
            currentTask: 'Initializing...',
            repository: repositories[0]?.name || 'quantum-compiler',
            branch: `feature/new-agent-${Math.random().toString(36).substr(2, 6)}`,
            completedTasks: 0,
            efficiency: 50,
            progress: 0,
            position: {
                x: (Math.random() - 0.5) * 100,
                y: (Math.random() - 0.5) * 100,
                z: (Math.random() - 0.5) * 100
            },
            owner: 'Current User'
        };
        setAgents(current => [...current, newAgent]);
    };
    const removeAgent = async (id) => {
        // Remove from neural integration if available
        if (neuralIntegrationReady) {
            try {
                await SwarmContextIntegration_1.neuralSwarmIntegration.removeNeuralAgent(id);
            }
            catch (error) {
                console.error('Neural agent removal failed:', error);
            }
        }
        // Remove from neural mesh if it's a neural agent
        if (enableNeuralMesh) {
            neuralMeshHook.removeAgent(id);
        }
        setAgents(current => current.filter(agent => agent.id !== id));
    };
    const voteForProject = (repositoryId) => {
        setRepositories(current => current.map(repo => repo.id === repositoryId
            ? {
                ...repo,
                votes: repo.userVoted ? repo.votes - 1 : repo.votes + 1,
                userVoted: !repo.userVoted
            }
            : repo));
    };
    const addRepository = (repository) => {
        setRepositories(current => [...current, repository]);
    };
    const value = {
        agents,
        repositories,
        stats,
        isSwarmActive,
        startSwarm,
        stopSwarm,
        addAgent,
        removeAgent,
        voteForProject,
        addRepository,
        // Neural mesh specific methods
        neuralMesh: {
            isConnected: neuralMeshHook.isConnected,
            isInitializing: neuralMeshHook.isInitializing,
            error: neuralMeshHook.error,
            metrics: neuralMeshHook.metrics,
            connection: neuralMeshHook.connection,
            trainMesh: neuralMeshHook.trainMesh,
            getMeshStatus: neuralMeshHook.getMeshStatus,
            clearError: neuralMeshHook.clearError,
            reconnect: neuralMeshHook.reconnect,
            toggleNeuralMesh: (enabled) => setEnableNeuralMesh(enabled)
        }
    };
    // Cleanup neural resources on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            if (neuralIntegrationReady) {
                SwarmContextIntegration_1.neuralSwarmIntegration.cleanup().catch(error => {
                    console.error('Neural integration cleanup error:', error);
                });
            }
        };
    }, [neuralIntegrationReady]);
    return ((0, jsx_runtime_1.jsx)(SwarmContext.Provider, { value: value, children: children }));
};
exports.SwarmProvider = SwarmProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,