{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/performance/PerformanceOptimizer.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/performance/PerformanceOptimizer.test.ts"],"sourcesContent":["/**\n * Comprehensive Unit Tests for PerformanceOptimizer\n * Target: 95%+ coverage for performance monitoring and optimization\n */\n\nimport { PerformanceOptimizer } from '../../../src/performance/performanceOptimizer';\n\n// Mock global objects for testing\nglobal.fetch = jest.fn();\nglobal.performance = {\n  now: jest.fn(() => Date.now())\n} as any;\n\nglobal.WebAssembly = {\n  Memory: jest.fn(() => ({ buffer: new ArrayBuffer(1024 * 1024) })),\n  compile: jest.fn().mockResolvedValue({}),\n  instantiate: jest.fn().mockResolvedValue({ \n    instance: { exports: {} }, \n    module: {} \n  }),\n  validate: jest.fn(() => true)\n} as any;\n\n// Mock PerformanceObserver\nglobal.PerformanceObserver = jest.fn().mockImplementation((callback) => ({\n  observe: jest.fn(),\n  disconnect: jest.fn()\n})) as any;\n\n// Mock navigator.gpu for GPU testing\nObject.defineProperty(global.navigator, 'gpu', {\n  value: {\n    requestAdapter: jest.fn().mockResolvedValue({ name: 'Mock GPU Adapter' })\n  },\n  configurable: true\n});\n\ndescribe('PerformanceOptimizer - Comprehensive Unit Tests', () => {\n  let optimizer: PerformanceOptimizer;\n  let mockConfig: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Setup fetch mock to return successful responses\n    (global.fetch as jest.Mock).mockResolvedValue({\n      ok: true,\n      arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(1024))\n    });\n\n    mockConfig = {\n      enableSIMD: true,\n      enableWASMCaching: true,\n      enableMemoryPooling: true,\n      enableGPUAcceleration: true,\n      maxMemoryPerAgent: 10 * 1024 * 1024, // 10MB\n      targetFrameTime: 16.67,\n      batchSize: 16,\n      cacheSize: 50 * 1024 * 1024 // 50MB\n    };\n    \n    optimizer = new PerformanceOptimizer(mockConfig);\n  });\n\n  afterEach(() => {\n    if (optimizer) {\n      optimizer.cleanup();\n    }\n  });\n\n  describe('Initialization', () => {\n    test('should initialize with default configuration', () => {\n      const defaultOptimizer = new PerformanceOptimizer();\n      expect(defaultOptimizer).toBeDefined();\n    });\n\n    test('should initialize with custom configuration', () => {\n      const customConfig = {\n        enableSIMD: false,\n        maxMemoryPerAgent: 100 * 1024 * 1024,\n        batchSize: 64\n      };\n      \n      const customOptimizer = new PerformanceOptimizer(customConfig);\n      expect(customOptimizer).toBeDefined();\n    });\n\n    test('should complete initialization successfully', async () => {\n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n\n    test('should handle initialization with missing WebAssembly', async () => {\n      const originalWebAssembly = global.WebAssembly;\n      delete (global as any).WebAssembly;\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n      \n      // Restore WebAssembly\n      global.WebAssembly = originalWebAssembly;\n    });\n\n    test('should handle WASM loading failures', async () => {\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 404\n      });\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n\n    test('should handle fetch errors', async () => {\n      (global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'));\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n  });\n\n  describe('WASM Module Loading', () => {\n    test('should load WASM modules successfully', async () => {\n      await optimizer.initialize();\n      \n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining('ruv_swarm_wasm_bg.wasm')\n      );\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining('ruv_swarm_simd.wasm')\n      );\n    });\n\n    test('should use cached WASM modules when available', async () => {\n      // Initialize once to cache modules\n      await optimizer.initialize();\n      \n      // Clear fetch mock calls\n      jest.clearAllMocks();\n      \n      // Initialize again - should use cache\n      const cachedOptimizer = new PerformanceOptimizer(mockConfig);\n      await cachedOptimizer.initialize();\n      \n      // Should still call fetch for modules that weren't cached\n      expect(global.fetch).toHaveBeenCalled();\n    });\n\n    test('should handle WASM instantiation errors', async () => {\n      global.WebAssembly.instantiate = jest.fn().mockRejectedValue(new Error('Instantiation failed'));\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n  });\n\n  describe('Memory Pool Management', () => {\n    beforeEach(async () => {\n      await optimizer.initialize();\n    });\n\n    test('should get pooled memory successfully', () => {\n      const memory = optimizer.getPooledMemory(1024);\n      \n      expect(memory).toBeInstanceOf(ArrayBuffer);\n      expect(memory!.byteLength).toBe(1024);\n    });\n\n    test('should return null for unavailable pool sizes', () => {\n      const memory = optimizer.getPooledMemory(123456); // Non-standard size\n      \n      expect(memory).toBeNull();\n    });\n\n    test('should handle memory pooling when disabled', () => {\n      const noPoolOptimizer = new PerformanceOptimizer({\n        enableMemoryPooling: false\n      });\n      \n      const memory = noPoolOptimizer.getPooledMemory(1024);\n      expect(memory).toBeNull();\n    });\n  });\n\n  describe('SIMD Support', () => {\n    test('should detect SIMD support correctly', async () => {\n      global.WebAssembly.validate = jest.fn(() => true);\n      \n      await optimizer.initialize();\n      \n      // SIMD support should be detected during initialization\n      expect(global.WebAssembly.validate).toHaveBeenCalled();\n    });\n\n    test('should handle SIMD detection failure', async () => {\n      global.WebAssembly.validate = jest.fn(() => false);\n      \n      await optimizer.initialize();\n      \n      expect(global.WebAssembly.validate).toHaveBeenCalled();\n    });\n\n    test('should handle SIMD validation errors', async () => {\n      global.WebAssembly.validate = jest.fn(() => {\n        throw new Error('SIMD validation error');\n      });\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n  });\n\n  describe('GPU Acceleration', () => {\n    test('should detect GPU support when available', async () => {\n      await optimizer.initialize();\n      \n      expect(navigator.gpu.requestAdapter).toHaveBeenCalled();\n    });\n\n    test('should handle missing GPU support', async () => {\n      delete (navigator as any).gpu;\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n\n    test('should handle GPU adapter request failure', async () => {\n      (navigator as any).gpu = {\n        requestAdapter: jest.fn().mockRejectedValue(new Error('GPU error'))\n      };\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n\n    test('should handle null GPU adapter', async () => {\n      (navigator as any).gpu = {\n        requestAdapter: jest.fn().mockResolvedValue(null)\n      };\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n  });\n\n  describe('Matrix Operations', () => {\n    beforeEach(async () => {\n      await optimizer.initialize();\n    });\n\n    test('should perform matrix multiplication successfully', async () => {\n      const size = 4;\n      const a = new Float32Array(size * size);\n      const b = new Float32Array(size * size);\n      \n      // Fill with test data\n      for (let i = 0; i < a.length; i++) {\n        a[i] = i * 0.1;\n        b[i] = (i + 1) * 0.1;\n      }\n      \n      const result = await optimizer.optimizedMatrixMultiply(a, b, size, size);\n      \n      expect(result).toBeInstanceOf(Float32Array);\n      expect(result.length).toBe(size * size);\n    });\n\n    test('should handle single element matrices', async () => {\n      const a = new Float32Array([0.5]);\n      const b = new Float32Array([0.3]);\n      \n      const result = await optimizer.optimizedMatrixMultiply(a, b, 1, 1);\n      \n      expect(result).toBeInstanceOf(Float32Array);\n      expect(result.length).toBe(1);\n    });\n\n    test('should handle empty matrices', async () => {\n      const a = new Float32Array([]);\n      const b = new Float32Array([]);\n      \n      const result = await optimizer.optimizedMatrixMultiply(a, b, 0, 0);\n      \n      expect(result).toBeInstanceOf(Float32Array);\n      expect(result.length).toBe(0);\n    });\n\n    test('should fallback to CPU when SIMD fails', async () => {\n      // Simulate SIMD failure\n      global.WebAssembly.validate = jest.fn(() => false);\n      \n      const noSIMDOptimizer = new PerformanceOptimizer({\n        enableSIMD: false\n      });\n      await noSIMDOptimizer.initialize();\n      \n      const a = new Float32Array([1, 2, 3, 4]);\n      const b = new Float32Array([5, 6, 7, 8]);\n      \n      const result = await noSIMDOptimizer.optimizedMatrixMultiply(a, b, 2, 2);\n      \n      expect(result).toBeInstanceOf(Float32Array);\n      expect(result.length).toBe(4);\n    });\n\n    test('should handle large matrices', async () => {\n      const size = 100;\n      const a = new Float32Array(size * size);\n      const b = new Float32Array(size * size);\n      \n      a.fill(0.1);\n      b.fill(0.2);\n      \n      const result = await optimizer.optimizedMatrixMultiply(a, b, size, size);\n      \n      expect(result).toBeInstanceOf(Float32Array);\n      expect(result.length).toBe(size * size);\n    });\n  });\n\n  describe('Agent Optimization', () => {\n    beforeEach(async () => {\n      await optimizer.initialize();\n    });\n\n    test('should optimize agent spawning', async () => {\n      const agentConfig = {\n        type: 'neural',\n        layers: [10, 5, 1],\n        learningRate: 0.001\n      };\n      \n      const optimizedAgent = await optimizer.optimizeAgentSpawning(agentConfig);\n      \n      expect(optimizedAgent).toBeDefined();\n      expect(optimizedAgent.id).toBeDefined();\n      expect(optimizedAgent.config).toEqual(agentConfig);\n      expect(optimizedAgent.memory).toBeInstanceOf(ArrayBuffer);\n      expect(optimizedAgent.optimized).toBe(true);\n    });\n\n    test('should use pooled memory for agent spawning', async () => {\n      const agentConfig = { type: 'test' };\n      \n      const optimizedAgent = await optimizer.optimizeAgentSpawning(agentConfig);\n      \n      expect(optimizedAgent.memory).toBeInstanceOf(ArrayBuffer);\n      expect(optimizedAgent.memory.byteLength).toBe(mockConfig.maxMemoryPerAgent);\n    });\n\n    test('should generate unique agent IDs', async () => {\n      const agentConfig = { type: 'test' };\n      \n      const agent1 = await optimizer.optimizeAgentSpawning(agentConfig);\n      const agent2 = await optimizer.optimizeAgentSpawning(agentConfig);\n      \n      expect(agent1.id).toBeDefined();\n      expect(agent2.id).toBeDefined();\n      expect(agent1.id).not.toBe(agent2.id);\n    });\n  });\n\n  describe('Neural Inference Batching', () => {\n    beforeEach(async () => {\n      await optimizer.initialize();\n    });\n\n    test('should process batch inference successfully', async () => {\n      const batchSize = 4;\n      const inputSize = 10;\n      const inputs = Array.from({ length: batchSize }, () => \n        new Float32Array(inputSize).map(() => Math.random())\n      );\n      const model = { weights: new Float32Array(100) };\n      \n      const results = await optimizer.batchNeuralInference(inputs, model);\n      \n      expect(results).toBeDefined();\n      expect(Array.isArray(results)).toBe(true);\n      expect(results.length).toBe(batchSize);\n      results.forEach(result => {\n        expect(result).toBeInstanceOf(Float32Array);\n      });\n    });\n\n    test('should handle single input', async () => {\n      const inputs = [new Float32Array([0.1, 0.2, 0.3])];\n      const model = {};\n      \n      const results = await optimizer.batchNeuralInference(inputs, model);\n      \n      expect(results.length).toBe(1);\n      expect(results[0]).toBeInstanceOf(Float32Array);\n    });\n\n    test('should handle empty input batch', async () => {\n      const inputs: Float32Array[] = [];\n      const model = {};\n      \n      const results = await optimizer.batchNeuralInference(inputs, model);\n      \n      expect(results).toBeDefined();\n      expect(Array.isArray(results)).toBe(true);\n      expect(results.length).toBe(0);\n    });\n\n    test('should process large batches efficiently', async () => {\n      const batchSize = 100;\n      const inputs = Array.from({ length: batchSize }, () => \n        new Float32Array(50).map(() => Math.random())\n      );\n      const model = {};\n      \n      const results = await optimizer.batchNeuralInference(inputs, model);\n      \n      expect(results.length).toBe(batchSize);\n    });\n\n    test('should handle different batch sizes', async () => {\n      const testSizes = [1, 5, 16, 32, 100];\n      \n      for (const size of testSizes) {\n        const inputs = Array.from({ length: size }, () => \n          new Float32Array(10).map(() => Math.random())\n        );\n        const model = {};\n        \n        const results = await optimizer.batchNeuralInference(inputs, model);\n        expect(results.length).toBe(size);\n      }\n    });\n  });\n\n  describe('Performance Monitoring', () => {\n    beforeEach(async () => {\n      await optimizer.initialize();\n    });\n\n    test('should start performance monitoring', () => {\n      expect(() => optimizer.startPerformanceMonitoring()).not.toThrow();\n    });\n\n    test('should generate performance report', () => {\n      const report = optimizer.getPerformanceReport();\n      \n      expect(report).toBeDefined();\n      expect(report.current).toBeDefined();\n      expect(report.config).toBeDefined();\n      expect(report.optimizations).toBeDefined();\n      expect(report.optimizations.simd).toBeDefined();\n      expect(report.optimizations.wasmCaching).toBe(mockConfig.enableWASMCaching);\n      expect(report.optimizations.memoryPooling).toBe(mockConfig.enableMemoryPooling);\n    });\n\n    test('should track performance metrics over time', () => {\n      // Simulate some operations to generate metrics\n      optimizer.startPerformanceMonitoring();\n      \n      const report = optimizer.getPerformanceReport();\n      expect(report.history).toBeDefined();\n      expect(Array.isArray(report.history)).toBe(true);\n    });\n\n    test('should handle PerformanceObserver errors', async () => {\n      // Mock PerformanceObserver to throw error\n      global.PerformanceObserver = jest.fn().mockImplementation(() => ({\n        observe: jest.fn(() => { throw new Error('Observer error'); }),\n        disconnect: jest.fn()\n      }));\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n    });\n  });\n\n  describe('Benchmark Suite', () => {\n    beforeEach(async () => {\n      await optimizer.initialize();\n    });\n\n    test('should run comprehensive benchmarks', async () => {\n      const results = await optimizer.runBenchmarks();\n      \n      expect(results).toBeDefined();\n      expect(Array.isArray(results)).toBe(true);\n      expect(results.length).toBeGreaterThan(0);\n      \n      results.forEach(result => {\n        expect(result.testName).toBeDefined();\n        expect(typeof result.beforeMs).toBe('number');\n        expect(typeof result.afterMs).toBe('number');\n        expect(typeof result.improvement).toBe('number');\n        expect(['pass', 'fail', 'warning']).toContain(result.status);\n      });\n    });\n\n    test('should benchmark WASM loading performance', async () => {\n      const results = await optimizer.runBenchmarks();\n      const wasmBenchmark = results.find(r => r.testName === 'WASM Loading');\n      \n      expect(wasmBenchmark).toBeDefined();\n      expect(wasmBenchmark!.beforeMs).toBeGreaterThan(0);\n      expect(wasmBenchmark!.afterMs).toBeGreaterThan(0);\n    });\n\n    test('should benchmark SIMD operations', async () => {\n      const results = await optimizer.runBenchmarks();\n      const simdBenchmark = results.find(r => r.testName === 'SIMD Matrix Operations');\n      \n      expect(simdBenchmark).toBeDefined();\n      expect(simdBenchmark!.improvement).toBeDefined();\n    });\n\n    test('should benchmark memory operations', async () => {\n      const results = await optimizer.runBenchmarks();\n      const memoryBenchmark = results.find(r => r.testName === 'Memory Pooling');\n      \n      expect(memoryBenchmark).toBeDefined();\n      expect(memoryBenchmark!.improvement).toBeDefined();\n    });\n\n    test('should benchmark neural inference', async () => {\n      const results = await optimizer.runBenchmarks();\n      const inferenceBenchmark = results.find(r => r.testName === 'Neural Inference Batching');\n      \n      expect(inferenceBenchmark).toBeDefined();\n      expect(inferenceBenchmark!.improvement).toBeDefined();\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle initialization errors gracefully', async () => {\n      // Mock all initialization methods to throw errors\n      const errorOptimizer = new PerformanceOptimizer();\n      \n      // Override private methods to throw errors\n      (errorOptimizer as any).initializeWASMModules = jest.fn().mockRejectedValue(new Error('WASM error'));\n      (errorOptimizer as any).initializeMemoryPool = jest.fn().mockRejectedValue(new Error('Memory error'));\n      \n      await expect(errorOptimizer.initialize()).rejects.toThrow();\n    });\n\n    test('should handle missing performance API', async () => {\n      const originalPerformance = global.performance;\n      delete (global as any).performance;\n      \n      await expect(optimizer.initialize()).resolves.not.toThrow();\n      \n      // Restore performance\n      global.performance = originalPerformance;\n    });\n\n    test('should handle invalid matrix dimensions', async () => {\n      await optimizer.initialize();\n      \n      const a = new Float32Array([1, 2]);\n      const b = new Float32Array([3, 4, 5, 6]); // Mismatched size\n      \n      // This should still complete but may not give mathematically correct results\n      const result = await optimizer.optimizedMatrixMultiply(a, b, 2, 2);\n      expect(result).toBeInstanceOf(Float32Array);\n    });\n\n    test('should handle null/undefined inputs', async () => {\n      await optimizer.initialize();\n      \n      await expect(optimizer.batchNeuralInference(null as any, {}))\n        .rejects.toThrow();\n      \n      await expect(optimizer.optimizeAgentSpawning(null as any))\n        .resolves.toBeDefined();\n    });\n  });\n\n  describe('Cleanup', () => {\n    test('should cleanup resources properly', async () => {\n      await optimizer.initialize();\n      optimizer.startPerformanceMonitoring();\n      \n      expect(() => optimizer.cleanup()).not.toThrow();\n    });\n\n    test('should handle cleanup when not initialized', () => {\n      const uninitializedOptimizer = new PerformanceOptimizer();\n      \n      expect(() => uninitializedOptimizer.cleanup()).not.toThrow();\n    });\n\n    test('should clear all caches and intervals', async () => {\n      await optimizer.initialize();\n      optimizer.startPerformanceMonitoring();\n      \n      // Verify some state exists\n      const reportBefore = optimizer.getPerformanceReport();\n      expect(reportBefore.history).toBeDefined();\n      \n      optimizer.cleanup();\n      \n      const reportAfter = optimizer.getPerformanceReport();\n      expect(reportAfter.history.length).toBe(0);\n    });\n\n    test('should disconnect performance observers', async () => {\n      const mockDisconnect = jest.fn();\n      global.PerformanceObserver = jest.fn().mockImplementation(() => ({\n        observe: jest.fn(),\n        disconnect: mockDisconnect\n      }));\n      \n      await optimizer.initialize();\n      optimizer.cleanup();\n      \n      expect(mockDisconnect).toHaveBeenCalled();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    beforeEach(async () => {\n      await optimizer.initialize();\n    });\n\n    test('should handle extremely large numbers', async () => {\n      const a = new Float32Array([Number.MAX_VALUE, -Number.MAX_VALUE]);\n      const b = new Float32Array([1, 1]);\n      \n      const result = await optimizer.optimizedMatrixMultiply(a, b, 2, 1);\n      expect(result).toBeInstanceOf(Float32Array);\n    });\n\n    test('should handle NaN and Infinity values', async () => {\n      const a = new Float32Array([NaN, Infinity, -Infinity, 0]);\n      const b = new Float32Array([1, 1, 1, 1]);\n      \n      const result = await optimizer.optimizedMatrixMultiply(a, b, 2, 2);\n      expect(result).toBeInstanceOf(Float32Array);\n    });\n\n    test('should handle zero-sized batches', async () => {\n      const inputs: Float32Array[] = [];\n      const model = {};\n      \n      const results = await optimizer.batchNeuralInference(inputs, model);\n      expect(results).toEqual([]);\n    });\n\n    test('should handle very small matrices', async () => {\n      const a = new Float32Array([0.001]);\n      const b = new Float32Array([0.001]);\n      \n      const result = await optimizer.optimizedMatrixMultiply(a, b, 1, 1);\n      expect(result).toBeInstanceOf(Float32Array);\n      expect(result.length).toBe(1);\n    });\n\n    test('should handle configuration with all features disabled', () => {\n      const disabledConfig = {\n        enableSIMD: false,\n        enableWASMCaching: false,\n        enableMemoryPooling: false,\n        enableGPUAcceleration: false\n      };\n      \n      const disabledOptimizer = new PerformanceOptimizer(disabledConfig);\n      expect(disabledOptimizer).toBeDefined();\n    });\n  });\n});"],"version":3}