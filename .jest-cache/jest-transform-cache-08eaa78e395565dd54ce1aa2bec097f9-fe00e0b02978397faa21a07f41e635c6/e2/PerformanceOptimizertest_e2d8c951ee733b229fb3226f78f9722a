d12bd8997a86c8a8fe231f0129c2d998
"use strict";
/**
 * Comprehensive Unit Tests for PerformanceOptimizer
 * Target: 95%+ coverage for performance monitoring and optimization
 */
Object.defineProperty(exports, "__esModule", { value: true });
const performanceOptimizer_1 = require("../../../src/performance/performanceOptimizer");
// Mock global objects for testing
global.fetch = jest.fn();
global.performance = {
    now: jest.fn(() => Date.now())
};
global.WebAssembly = {
    Memory: jest.fn(() => ({ buffer: new ArrayBuffer(1024 * 1024) })),
    compile: jest.fn().mockResolvedValue({}),
    instantiate: jest.fn().mockResolvedValue({
        instance: { exports: {} },
        module: {}
    }),
    validate: jest.fn(() => true)
};
// Mock PerformanceObserver
global.PerformanceObserver = jest.fn().mockImplementation((callback) => ({
    observe: jest.fn(),
    disconnect: jest.fn()
}));
// Mock navigator.gpu for GPU testing
Object.defineProperty(global.navigator, 'gpu', {
    value: {
        requestAdapter: jest.fn().mockResolvedValue({ name: 'Mock GPU Adapter' })
    },
    configurable: true
});
describe('PerformanceOptimizer - Comprehensive Unit Tests', () => {
    let optimizer;
    let mockConfig;
    beforeEach(() => {
        jest.clearAllMocks();
        // Setup fetch mock to return successful responses
        global.fetch.mockResolvedValue({
            ok: true,
            arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(1024))
        });
        mockConfig = {
            enableSIMD: true,
            enableWASMCaching: true,
            enableMemoryPooling: true,
            enableGPUAcceleration: true,
            maxMemoryPerAgent: 10 * 1024 * 1024, // 10MB
            targetFrameTime: 16.67,
            batchSize: 16,
            cacheSize: 50 * 1024 * 1024 // 50MB
        };
        optimizer = new performanceOptimizer_1.PerformanceOptimizer(mockConfig);
    });
    afterEach(() => {
        if (optimizer) {
            optimizer.cleanup();
        }
    });
    describe('Initialization', () => {
        test('should initialize with default configuration', () => {
            const defaultOptimizer = new performanceOptimizer_1.PerformanceOptimizer();
            expect(defaultOptimizer).toBeDefined();
        });
        test('should initialize with custom configuration', () => {
            const customConfig = {
                enableSIMD: false,
                maxMemoryPerAgent: 100 * 1024 * 1024,
                batchSize: 64
            };
            const customOptimizer = new performanceOptimizer_1.PerformanceOptimizer(customConfig);
            expect(customOptimizer).toBeDefined();
        });
        test('should complete initialization successfully', async () => {
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
        test('should handle initialization with missing WebAssembly', async () => {
            const originalWebAssembly = global.WebAssembly;
            delete global.WebAssembly;
            await expect(optimizer.initialize()).resolves.not.toThrow();
            // Restore WebAssembly
            global.WebAssembly = originalWebAssembly;
        });
        test('should handle WASM loading failures', async () => {
            global.fetch.mockResolvedValue({
                ok: false,
                status: 404
            });
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
        test('should handle fetch errors', async () => {
            global.fetch.mockRejectedValue(new Error('Network error'));
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
    });
    describe('WASM Module Loading', () => {
        test('should load WASM modules successfully', async () => {
            await optimizer.initialize();
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining('ruv_swarm_wasm_bg.wasm'));
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining('ruv_swarm_simd.wasm'));
        });
        test('should use cached WASM modules when available', async () => {
            // Initialize once to cache modules
            await optimizer.initialize();
            // Clear fetch mock calls
            jest.clearAllMocks();
            // Initialize again - should use cache
            const cachedOptimizer = new performanceOptimizer_1.PerformanceOptimizer(mockConfig);
            await cachedOptimizer.initialize();
            // Should still call fetch for modules that weren't cached
            expect(global.fetch).toHaveBeenCalled();
        });
        test('should handle WASM instantiation errors', async () => {
            global.WebAssembly.instantiate = jest.fn().mockRejectedValue(new Error('Instantiation failed'));
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
    });
    describe('Memory Pool Management', () => {
        beforeEach(async () => {
            await optimizer.initialize();
        });
        test('should get pooled memory successfully', () => {
            const memory = optimizer.getPooledMemory(1024);
            expect(memory).toBeInstanceOf(ArrayBuffer);
            expect(memory.byteLength).toBe(1024);
        });
        test('should return null for unavailable pool sizes', () => {
            const memory = optimizer.getPooledMemory(123456); // Non-standard size
            expect(memory).toBeNull();
        });
        test('should handle memory pooling when disabled', () => {
            const noPoolOptimizer = new performanceOptimizer_1.PerformanceOptimizer({
                enableMemoryPooling: false
            });
            const memory = noPoolOptimizer.getPooledMemory(1024);
            expect(memory).toBeNull();
        });
    });
    describe('SIMD Support', () => {
        test('should detect SIMD support correctly', async () => {
            global.WebAssembly.validate = jest.fn(() => true);
            await optimizer.initialize();
            // SIMD support should be detected during initialization
            expect(global.WebAssembly.validate).toHaveBeenCalled();
        });
        test('should handle SIMD detection failure', async () => {
            global.WebAssembly.validate = jest.fn(() => false);
            await optimizer.initialize();
            expect(global.WebAssembly.validate).toHaveBeenCalled();
        });
        test('should handle SIMD validation errors', async () => {
            global.WebAssembly.validate = jest.fn(() => {
                throw new Error('SIMD validation error');
            });
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
    });
    describe('GPU Acceleration', () => {
        test('should detect GPU support when available', async () => {
            await optimizer.initialize();
            expect(navigator.gpu.requestAdapter).toHaveBeenCalled();
        });
        test('should handle missing GPU support', async () => {
            delete navigator.gpu;
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
        test('should handle GPU adapter request failure', async () => {
            navigator.gpu = {
                requestAdapter: jest.fn().mockRejectedValue(new Error('GPU error'))
            };
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
        test('should handle null GPU adapter', async () => {
            navigator.gpu = {
                requestAdapter: jest.fn().mockResolvedValue(null)
            };
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
    });
    describe('Matrix Operations', () => {
        beforeEach(async () => {
            await optimizer.initialize();
        });
        test('should perform matrix multiplication successfully', async () => {
            const size = 4;
            const a = new Float32Array(size * size);
            const b = new Float32Array(size * size);
            // Fill with test data
            for (let i = 0; i < a.length; i++) {
                a[i] = i * 0.1;
                b[i] = (i + 1) * 0.1;
            }
            const result = await optimizer.optimizedMatrixMultiply(a, b, size, size);
            expect(result).toBeInstanceOf(Float32Array);
            expect(result.length).toBe(size * size);
        });
        test('should handle single element matrices', async () => {
            const a = new Float32Array([0.5]);
            const b = new Float32Array([0.3]);
            const result = await optimizer.optimizedMatrixMultiply(a, b, 1, 1);
            expect(result).toBeInstanceOf(Float32Array);
            expect(result.length).toBe(1);
        });
        test('should handle empty matrices', async () => {
            const a = new Float32Array([]);
            const b = new Float32Array([]);
            const result = await optimizer.optimizedMatrixMultiply(a, b, 0, 0);
            expect(result).toBeInstanceOf(Float32Array);
            expect(result.length).toBe(0);
        });
        test('should fallback to CPU when SIMD fails', async () => {
            // Simulate SIMD failure
            global.WebAssembly.validate = jest.fn(() => false);
            const noSIMDOptimizer = new performanceOptimizer_1.PerformanceOptimizer({
                enableSIMD: false
            });
            await noSIMDOptimizer.initialize();
            const a = new Float32Array([1, 2, 3, 4]);
            const b = new Float32Array([5, 6, 7, 8]);
            const result = await noSIMDOptimizer.optimizedMatrixMultiply(a, b, 2, 2);
            expect(result).toBeInstanceOf(Float32Array);
            expect(result.length).toBe(4);
        });
        test('should handle large matrices', async () => {
            const size = 100;
            const a = new Float32Array(size * size);
            const b = new Float32Array(size * size);
            a.fill(0.1);
            b.fill(0.2);
            const result = await optimizer.optimizedMatrixMultiply(a, b, size, size);
            expect(result).toBeInstanceOf(Float32Array);
            expect(result.length).toBe(size * size);
        });
    });
    describe('Agent Optimization', () => {
        beforeEach(async () => {
            await optimizer.initialize();
        });
        test('should optimize agent spawning', async () => {
            const agentConfig = {
                type: 'neural',
                layers: [10, 5, 1],
                learningRate: 0.001
            };
            const optimizedAgent = await optimizer.optimizeAgentSpawning(agentConfig);
            expect(optimizedAgent).toBeDefined();
            expect(optimizedAgent.id).toBeDefined();
            expect(optimizedAgent.config).toEqual(agentConfig);
            expect(optimizedAgent.memory).toBeInstanceOf(ArrayBuffer);
            expect(optimizedAgent.optimized).toBe(true);
        });
        test('should use pooled memory for agent spawning', async () => {
            const agentConfig = { type: 'test' };
            const optimizedAgent = await optimizer.optimizeAgentSpawning(agentConfig);
            expect(optimizedAgent.memory).toBeInstanceOf(ArrayBuffer);
            expect(optimizedAgent.memory.byteLength).toBe(mockConfig.maxMemoryPerAgent);
        });
        test('should generate unique agent IDs', async () => {
            const agentConfig = { type: 'test' };
            const agent1 = await optimizer.optimizeAgentSpawning(agentConfig);
            const agent2 = await optimizer.optimizeAgentSpawning(agentConfig);
            expect(agent1.id).toBeDefined();
            expect(agent2.id).toBeDefined();
            expect(agent1.id).not.toBe(agent2.id);
        });
    });
    describe('Neural Inference Batching', () => {
        beforeEach(async () => {
            await optimizer.initialize();
        });
        test('should process batch inference successfully', async () => {
            const batchSize = 4;
            const inputSize = 10;
            const inputs = Array.from({ length: batchSize }, () => new Float32Array(inputSize).map(() => Math.random()));
            const model = { weights: new Float32Array(100) };
            const results = await optimizer.batchNeuralInference(inputs, model);
            expect(results).toBeDefined();
            expect(Array.isArray(results)).toBe(true);
            expect(results.length).toBe(batchSize);
            results.forEach(result => {
                expect(result).toBeInstanceOf(Float32Array);
            });
        });
        test('should handle single input', async () => {
            const inputs = [new Float32Array([0.1, 0.2, 0.3])];
            const model = {};
            const results = await optimizer.batchNeuralInference(inputs, model);
            expect(results.length).toBe(1);
            expect(results[0]).toBeInstanceOf(Float32Array);
        });
        test('should handle empty input batch', async () => {
            const inputs = [];
            const model = {};
            const results = await optimizer.batchNeuralInference(inputs, model);
            expect(results).toBeDefined();
            expect(Array.isArray(results)).toBe(true);
            expect(results.length).toBe(0);
        });
        test('should process large batches efficiently', async () => {
            const batchSize = 100;
            const inputs = Array.from({ length: batchSize }, () => new Float32Array(50).map(() => Math.random()));
            const model = {};
            const results = await optimizer.batchNeuralInference(inputs, model);
            expect(results.length).toBe(batchSize);
        });
        test('should handle different batch sizes', async () => {
            const testSizes = [1, 5, 16, 32, 100];
            for (const size of testSizes) {
                const inputs = Array.from({ length: size }, () => new Float32Array(10).map(() => Math.random()));
                const model = {};
                const results = await optimizer.batchNeuralInference(inputs, model);
                expect(results.length).toBe(size);
            }
        });
    });
    describe('Performance Monitoring', () => {
        beforeEach(async () => {
            await optimizer.initialize();
        });
        test('should start performance monitoring', () => {
            expect(() => optimizer.startPerformanceMonitoring()).not.toThrow();
        });
        test('should generate performance report', () => {
            const report = optimizer.getPerformanceReport();
            expect(report).toBeDefined();
            expect(report.current).toBeDefined();
            expect(report.config).toBeDefined();
            expect(report.optimizations).toBeDefined();
            expect(report.optimizations.simd).toBeDefined();
            expect(report.optimizations.wasmCaching).toBe(mockConfig.enableWASMCaching);
            expect(report.optimizations.memoryPooling).toBe(mockConfig.enableMemoryPooling);
        });
        test('should track performance metrics over time', () => {
            // Simulate some operations to generate metrics
            optimizer.startPerformanceMonitoring();
            const report = optimizer.getPerformanceReport();
            expect(report.history).toBeDefined();
            expect(Array.isArray(report.history)).toBe(true);
        });
        test('should handle PerformanceObserver errors', async () => {
            // Mock PerformanceObserver to throw error
            global.PerformanceObserver = jest.fn().mockImplementation(() => ({
                observe: jest.fn(() => { throw new Error('Observer error'); }),
                disconnect: jest.fn()
            }));
            await expect(optimizer.initialize()).resolves.not.toThrow();
        });
    });
    describe('Benchmark Suite', () => {
        beforeEach(async () => {
            await optimizer.initialize();
        });
        test('should run comprehensive benchmarks', async () => {
            const results = await optimizer.runBenchmarks();
            expect(results).toBeDefined();
            expect(Array.isArray(results)).toBe(true);
            expect(results.length).toBeGreaterThan(0);
            results.forEach(result => {
                expect(result.testName).toBeDefined();
                expect(typeof result.beforeMs).toBe('number');
                expect(typeof result.afterMs).toBe('number');
                expect(typeof result.improvement).toBe('number');
                expect(['pass', 'fail', 'warning']).toContain(result.status);
            });
        });
        test('should benchmark WASM loading performance', async () => {
            const results = await optimizer.runBenchmarks();
            const wasmBenchmark = results.find(r => r.testName === 'WASM Loading');
            expect(wasmBenchmark).toBeDefined();
            expect(wasmBenchmark.beforeMs).toBeGreaterThan(0);
            expect(wasmBenchmark.afterMs).toBeGreaterThan(0);
        });
        test('should benchmark SIMD operations', async () => {
            const results = await optimizer.runBenchmarks();
            const simdBenchmark = results.find(r => r.testName === 'SIMD Matrix Operations');
            expect(simdBenchmark).toBeDefined();
            expect(simdBenchmark.improvement).toBeDefined();
        });
        test('should benchmark memory operations', async () => {
            const results = await optimizer.runBenchmarks();
            const memoryBenchmark = results.find(r => r.testName === 'Memory Pooling');
            expect(memoryBenchmark).toBeDefined();
            expect(memoryBenchmark.improvement).toBeDefined();
        });
        test('should benchmark neural inference', async () => {
            const results = await optimizer.runBenchmarks();
            const inferenceBenchmark = results.find(r => r.testName === 'Neural Inference Batching');
            expect(inferenceBenchmark).toBeDefined();
            expect(inferenceBenchmark.improvement).toBeDefined();
        });
    });
    describe('Error Handling', () => {
        test('should handle initialization errors gracefully', async () => {
            // Mock all initialization methods to throw errors
            const errorOptimizer = new performanceOptimizer_1.PerformanceOptimizer();
            // Override private methods to throw errors
            errorOptimizer.initializeWASMModules = jest.fn().mockRejectedValue(new Error('WASM error'));
            errorOptimizer.initializeMemoryPool = jest.fn().mockRejectedValue(new Error('Memory error'));
            await expect(errorOptimizer.initialize()).rejects.toThrow();
        });
        test('should handle missing performance API', async () => {
            const originalPerformance = global.performance;
            delete global.performance;
            await expect(optimizer.initialize()).resolves.not.toThrow();
            // Restore performance
            global.performance = originalPerformance;
        });
        test('should handle invalid matrix dimensions', async () => {
            await optimizer.initialize();
            const a = new Float32Array([1, 2]);
            const b = new Float32Array([3, 4, 5, 6]); // Mismatched size
            // This should still complete but may not give mathematically correct results
            const result = await optimizer.optimizedMatrixMultiply(a, b, 2, 2);
            expect(result).toBeInstanceOf(Float32Array);
        });
        test('should handle null/undefined inputs', async () => {
            await optimizer.initialize();
            await expect(optimizer.batchNeuralInference(null, {}))
                .rejects.toThrow();
            await expect(optimizer.optimizeAgentSpawning(null))
                .resolves.toBeDefined();
        });
    });
    describe('Cleanup', () => {
        test('should cleanup resources properly', async () => {
            await optimizer.initialize();
            optimizer.startPerformanceMonitoring();
            expect(() => optimizer.cleanup()).not.toThrow();
        });
        test('should handle cleanup when not initialized', () => {
            const uninitializedOptimizer = new performanceOptimizer_1.PerformanceOptimizer();
            expect(() => uninitializedOptimizer.cleanup()).not.toThrow();
        });
        test('should clear all caches and intervals', async () => {
            await optimizer.initialize();
            optimizer.startPerformanceMonitoring();
            // Verify some state exists
            const reportBefore = optimizer.getPerformanceReport();
            expect(reportBefore.history).toBeDefined();
            optimizer.cleanup();
            const reportAfter = optimizer.getPerformanceReport();
            expect(reportAfter.history.length).toBe(0);
        });
        test('should disconnect performance observers', async () => {
            const mockDisconnect = jest.fn();
            global.PerformanceObserver = jest.fn().mockImplementation(() => ({
                observe: jest.fn(),
                disconnect: mockDisconnect
            }));
            await optimizer.initialize();
            optimizer.cleanup();
            expect(mockDisconnect).toHaveBeenCalled();
        });
    });
    describe('Edge Cases', () => {
        beforeEach(async () => {
            await optimizer.initialize();
        });
        test('should handle extremely large numbers', async () => {
            const a = new Float32Array([Number.MAX_VALUE, -Number.MAX_VALUE]);
            const b = new Float32Array([1, 1]);
            const result = await optimizer.optimizedMatrixMultiply(a, b, 2, 1);
            expect(result).toBeInstanceOf(Float32Array);
        });
        test('should handle NaN and Infinity values', async () => {
            const a = new Float32Array([NaN, Infinity, -Infinity, 0]);
            const b = new Float32Array([1, 1, 1, 1]);
            const result = await optimizer.optimizedMatrixMultiply(a, b, 2, 2);
            expect(result).toBeInstanceOf(Float32Array);
        });
        test('should handle zero-sized batches', async () => {
            const inputs = [];
            const model = {};
            const results = await optimizer.batchNeuralInference(inputs, model);
            expect(results).toEqual([]);
        });
        test('should handle very small matrices', async () => {
            const a = new Float32Array([0.001]);
            const b = new Float32Array([0.001]);
            const result = await optimizer.optimizedMatrixMultiply(a, b, 1, 1);
            expect(result).toBeInstanceOf(Float32Array);
            expect(result.length).toBe(1);
        });
        test('should handle configuration with all features disabled', () => {
            const disabledConfig = {
                enableSIMD: false,
                enableWASMCaching: false,
                enableMemoryPooling: false,
                enableGPUAcceleration: false
            };
            const disabledOptimizer = new performanceOptimizer_1.PerformanceOptimizer(disabledConfig);
            expect(disabledOptimizer).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,