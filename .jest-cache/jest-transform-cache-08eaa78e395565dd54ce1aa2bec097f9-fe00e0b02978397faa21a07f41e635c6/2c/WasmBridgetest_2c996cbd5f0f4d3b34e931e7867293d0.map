{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/utils/WasmBridge.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/utils/WasmBridge.test.ts"],"sourcesContent":["/**\n * Comprehensive Unit Tests for WasmBridge\n * Target: 95%+ coverage for WASM operations and SIMD acceleration\n */\n\nimport { WasmBridge } from '../../../src/utils/WasmBridge';\n\n// Mock WebAssembly for testing\nconst mockMemory = {\n  buffer: new ArrayBuffer(1024 * 1024) // 1MB\n};\n\nconst mockWasmModule = {\n  memory: mockMemory,\n  calculate_neural_activation: jest.fn(),\n  optimize_connections: jest.fn(),\n  process_spike_train: jest.fn(() => 42.5),\n  calculate_mesh_efficiency: jest.fn(() => 0.85),\n  simd_supported: jest.fn(() => 1),\n  get_memory_usage: jest.fn(() => 1024 * 1024)\n};\n\nglobal.WebAssembly = {\n  Memory: jest.fn(() => mockMemory),\n  compile: jest.fn().mockResolvedValue({}),\n  instantiate: jest.fn().mockResolvedValue({ instance: mockWasmModule }),\n  validate: jest.fn(() => true)\n} as any;\n\n// Mock performance\nglobal.performance = {\n  now: jest.fn(() => Date.now())\n} as any;\n\ndescribe('WasmBridge - Comprehensive Unit Tests', () => {\n  let wasmBridge: WasmBridge;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    wasmBridge = new WasmBridge();\n  });\n\n  afterEach(() => {\n    if (wasmBridge) {\n      wasmBridge.cleanup();\n    }\n  });\n\n  describe('Initialization', () => {\n    test('should initialize successfully with WebAssembly support', async () => {\n      const result = await wasmBridge.initialize();\n      \n      expect(result).toBe(true);\n      expect(wasmBridge.isWasmInitialized()).toBe(true);\n    });\n\n    test('should detect SIMD support correctly', async () => {\n      await wasmBridge.initialize();\n      \n      expect(wasmBridge.isSIMDSupported()).toBe(true);\n    });\n\n    test('should handle missing WebAssembly support', async () => {\n      const originalWebAssembly = global.WebAssembly;\n      delete (global as any).WebAssembly;\n      \n      const result = await wasmBridge.initialize();\n      \n      expect(result).toBe(false);\n      expect(wasmBridge.isWasmInitialized()).toBe(false);\n      \n      // Restore WebAssembly\n      global.WebAssembly = originalWebAssembly;\n    });\n\n    test('should handle WASM compilation errors', async () => {\n      const originalCompile = global.WebAssembly.compile;\n      global.WebAssembly.compile = jest.fn().mockRejectedValue(new Error('Compilation failed'));\n      \n      const result = await wasmBridge.initialize();\n      \n      expect(result).toBe(false);\n      \n      // Restore original\n      global.WebAssembly.compile = originalCompile;\n    });\n\n    test('should detect SIMD support failure', async () => {\n      const originalValidate = global.WebAssembly.validate;\n      global.WebAssembly.validate = jest.fn(() => false);\n      \n      await wasmBridge.initialize();\n      \n      expect(wasmBridge.isSIMDSupported()).toBe(false);\n      \n      // Restore original\n      global.WebAssembly.validate = originalValidate;\n    });\n  });\n\n  describe('Neural Activation Calculation', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize();\n    });\n\n    test('should calculate neural activation successfully', () => {\n      const inputs = new Float32Array([0.1, 0.5, 0.9, -0.2, 0.7]);\n      \n      const outputs = wasmBridge.calculateNeuralActivation(inputs);\n      \n      expect(outputs).toBeInstanceOf(Float32Array);\n      expect(outputs.length).toBe(inputs.length);\n      expect(mockWasmModule.calculate_neural_activation).toHaveBeenCalled();\n    });\n\n    test('should handle empty input array', () => {\n      const inputs = new Float32Array([]);\n      \n      const outputs = wasmBridge.calculateNeuralActivation(inputs);\n      \n      expect(outputs).toBeInstanceOf(Float32Array);\n      expect(outputs.length).toBe(0);\n    });\n\n    test('should handle large input arrays', () => {\n      const largeInputs = new Float32Array(10000);\n      for (let i = 0; i < largeInputs.length; i++) {\n        largeInputs[i] = Math.random() * 2 - 1; // Range [-1, 1]\n      }\n      \n      const outputs = wasmBridge.calculateNeuralActivation(largeInputs);\n      \n      expect(outputs).toBeInstanceOf(Float32Array);\n      expect(outputs.length).toBe(largeInputs.length);\n    });\n\n    test('should update performance metrics', () => {\n      const inputs = new Float32Array([0.1, 0.2, 0.3]);\n      \n      wasmBridge.calculateNeuralActivation(inputs);\n      \n      const metrics = wasmBridge.getPerformanceMetrics();\n      expect(metrics.executionTime).toBeGreaterThanOrEqual(0);\n      expect(metrics.throughput).toBeGreaterThanOrEqual(0);\n      expect(metrics.efficiency).toBeGreaterThan(0);\n    });\n\n    test('should throw error when not initialized', () => {\n      const uninitializedBridge = new WasmBridge();\n      const inputs = new Float32Array([0.1, 0.2]);\n      \n      expect(() => uninitializedBridge.calculateNeuralActivation(inputs))\n        .toThrow('WASM module not initialized');\n    });\n  });\n\n  describe('Connection Optimization', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize();\n    });\n\n    test('should optimize connections successfully', () => {\n      const connections = new Float32Array([0.1, 0.5, 0.8, 0.2, 0.9]);\n      \n      const optimized = wasmBridge.optimizeConnections(connections);\n      \n      expect(optimized).toBeInstanceOf(Float32Array);\n      expect(optimized.length).toBe(connections.length);\n      expect(mockWasmModule.optimize_connections).toHaveBeenCalled();\n    });\n\n    test('should handle single connection', () => {\n      const connections = new Float32Array([0.5]);\n      \n      const optimized = wasmBridge.optimizeConnections(connections);\n      \n      expect(optimized).toBeInstanceOf(Float32Array);\n      expect(optimized.length).toBe(1);\n    });\n\n    test('should handle empty connections array', () => {\n      const connections = new Float32Array([]);\n      \n      const optimized = wasmBridge.optimizeConnections(connections);\n      \n      expect(optimized).toBeInstanceOf(Float32Array);\n      expect(optimized.length).toBe(0);\n    });\n\n    test('should update performance metrics during optimization', () => {\n      const connections = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5]);\n      \n      wasmBridge.optimizeConnections(connections);\n      \n      const metrics = wasmBridge.getPerformanceMetrics();\n      expect(metrics.executionTime).toBeGreaterThanOrEqual(0);\n      expect(metrics.throughput).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should throw error when not initialized', () => {\n      const uninitializedBridge = new WasmBridge();\n      const connections = new Float32Array([0.1, 0.2]);\n      \n      expect(() => uninitializedBridge.optimizeConnections(connections))\n        .toThrow('WASM module not initialized');\n    });\n  });\n\n  describe('Spike Train Processing', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize();\n    });\n\n    test('should process spike train data successfully', () => {\n      const spikes = new Float32Array([0.0, 0.2, 0.8, 0.0, 1.0, 0.3, 0.0, 0.9]);\n      const windowSize = 1000; // 1 second window\n      \n      const spikeRate = wasmBridge.processSpikeTrainData(spikes, windowSize);\n      \n      expect(typeof spikeRate).toBe('number');\n      expect(spikeRate).toBe(42.5); // Mocked return value\n      expect(mockWasmModule.process_spike_train).toHaveBeenCalledWith(\n        spikes.length,\n        expect.any(Number),\n        spikes.length,\n        windowSize\n      );\n    });\n\n    test('should handle empty spike data', () => {\n      const spikes = new Float32Array([]);\n      const windowSize = 1000;\n      \n      const spikeRate = wasmBridge.processSpikeTrainData(spikes, windowSize);\n      \n      expect(typeof spikeRate).toBe('number');\n      expect(spikeRate).toBe(42.5);\n    });\n\n    test('should handle different window sizes', () => {\n      const spikes = new Float32Array([0.1, 0.5, 0.9]);\n      \n      const rates = [100, 500, 1000, 2000].map(windowSize => \n        wasmBridge.processSpikeTrainData(spikes, windowSize)\n      );\n      \n      rates.forEach(rate => {\n        expect(typeof rate).toBe('number');\n        expect(rate).toBe(42.5);\n      });\n    });\n\n    test('should update performance metrics', () => {\n      const spikes = new Float32Array([0.1, 0.2, 0.3]);\n      \n      wasmBridge.processSpikeTrainData(spikes, 1000);\n      \n      const metrics = wasmBridge.getPerformanceMetrics();\n      expect(metrics.executionTime).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should throw error when not initialized', () => {\n      const uninitializedBridge = new WasmBridge();\n      const spikes = new Float32Array([0.1, 0.2]);\n      \n      expect(() => uninitializedBridge.processSpikeTrainData(spikes, 1000))\n        .toThrow('WASM module not initialized');\n    });\n  });\n\n  describe('Mesh Efficiency Calculation', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize();\n    });\n\n    test('should calculate mesh efficiency successfully', () => {\n      const neurons = new Float32Array([0.1, 0.5, 0.8, 0.2]);\n      const synapses = new Float32Array([0.3, 0.7, 0.4, 0.9, 0.1, 0.6]);\n      \n      const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses);\n      \n      expect(typeof efficiency).toBe('number');\n      expect(efficiency).toBe(0.85); // Mocked return value\n      expect(mockWasmModule.calculate_mesh_efficiency).toHaveBeenCalledWith(\n        neurons.length,\n        expect.any(Number),\n        synapses.length,\n        expect.any(Number)\n      );\n    });\n\n    test('should handle single neuron and synapse', () => {\n      const neurons = new Float32Array([0.5]);\n      const synapses = new Float32Array([0.7]);\n      \n      const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses);\n      \n      expect(typeof efficiency).toBe('number');\n      expect(efficiency).toBe(0.85);\n    });\n\n    test('should handle empty arrays', () => {\n      const neurons = new Float32Array([]);\n      const synapses = new Float32Array([]);\n      \n      const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses);\n      \n      expect(typeof efficiency).toBe('number');\n      expect(efficiency).toBe(0.85);\n    });\n\n    test('should handle mismatched array sizes', () => {\n      const neurons = new Float32Array([0.1, 0.2]);\n      const synapses = new Float32Array([0.3, 0.4, 0.5, 0.6, 0.7]);\n      \n      const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses);\n      \n      expect(typeof efficiency).toBe('number');\n      expect(efficiency).toBe(0.85);\n    });\n\n    test('should update performance metrics', () => {\n      const neurons = new Float32Array([0.1, 0.2]);\n      const synapses = new Float32Array([0.3, 0.4]);\n      \n      wasmBridge.calculateMeshEfficiency(neurons, synapses);\n      \n      const metrics = wasmBridge.getPerformanceMetrics();\n      expect(metrics.executionTime).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should throw error when not initialized', () => {\n      const uninitializedBridge = new WasmBridge();\n      const neurons = new Float32Array([0.1]);\n      const synapses = new Float32Array([0.2]);\n      \n      expect(() => uninitializedBridge.calculateMeshEfficiency(neurons, synapses))\n        .toThrow('WASM module not initialized');\n    });\n  });\n\n  describe('Performance Metrics', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize();\n    });\n\n    test('should provide initial performance metrics', () => {\n      const metrics = wasmBridge.getPerformanceMetrics();\n      \n      expect(metrics).toBeDefined();\n      expect(typeof metrics.executionTime).toBe('number');\n      expect(typeof metrics.memoryUsage).toBe('number');\n      expect(typeof metrics.simdAcceleration).toBe('boolean');\n      expect(typeof metrics.throughput).toBe('number');\n      expect(typeof metrics.efficiency).toBe('number');\n    });\n\n    test('should update memory usage from WASM module', () => {\n      const metrics = wasmBridge.getPerformanceMetrics();\n      \n      expect(metrics.memoryUsage).toBe(1024 * 1024); // Mocked value\n      expect(mockWasmModule.get_memory_usage).toHaveBeenCalled();\n    });\n\n    test('should track SIMD acceleration status', () => {\n      const metrics = wasmBridge.getPerformanceMetrics();\n      \n      expect(metrics.simdAcceleration).toBe(true); // Based on initialization\n    });\n\n    test('should track execution time across operations', () => {\n      const inputs = new Float32Array([0.1, 0.2, 0.3]);\n      \n      wasmBridge.calculateNeuralActivation(inputs);\n      \n      const metrics = wasmBridge.getPerformanceMetrics();\n      expect(metrics.executionTime).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Status Checks', () => {\n    test('should report uninitialized state correctly', () => {\n      expect(wasmBridge.isWasmInitialized()).toBe(false);\n      expect(wasmBridge.isSIMDSupported()).toBe(false);\n    });\n\n    test('should report initialized state correctly', async () => {\n      await wasmBridge.initialize();\n      \n      expect(wasmBridge.isWasmInitialized()).toBe(true);\n      expect(wasmBridge.isSIMDSupported()).toBe(true);\n    });\n\n    test('should maintain SIMD status after failed operations', async () => {\n      await wasmBridge.initialize();\n      \n      // Try an operation that might fail\n      try {\n        const invalidInputs = null as any;\n        wasmBridge.calculateNeuralActivation(invalidInputs);\n      } catch (error) {\n        // Expected to fail\n      }\n      \n      expect(wasmBridge.isSIMDSupported()).toBe(true);\n    });\n  });\n\n  describe('Memory Management', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize();\n    });\n\n    test('should handle memory allocation and deallocation', () => {\n      const inputs = new Float32Array([0.1, 0.2, 0.3]);\n      \n      // This should allocate and free memory internally\n      const outputs = wasmBridge.calculateNeuralActivation(inputs);\n      \n      expect(outputs).toBeDefined();\n      // Memory should be freed automatically\n    });\n\n    test('should handle multiple concurrent operations', () => {\n      const inputs1 = new Float32Array([0.1, 0.2]);\n      const inputs2 = new Float32Array([0.3, 0.4]);\n      const connections = new Float32Array([0.5, 0.6]);\n      \n      const outputs1 = wasmBridge.calculateNeuralActivation(inputs1);\n      const outputs2 = wasmBridge.calculateNeuralActivation(inputs2);\n      const optimized = wasmBridge.optimizeConnections(connections);\n      \n      expect(outputs1).toBeDefined();\n      expect(outputs2).toBeDefined();\n      expect(optimized).toBeDefined();\n    });\n\n    test('should handle large memory allocations', () => {\n      const largeInputs = new Float32Array(100000); // 100K elements\n      largeInputs.fill(0.5);\n      \n      const outputs = wasmBridge.calculateNeuralActivation(largeInputs);\n      \n      expect(outputs).toBeDefined();\n      expect(outputs.length).toBe(largeInputs.length);\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize();\n    });\n\n    test('should handle null inputs gracefully', () => {\n      expect(() => wasmBridge.calculateNeuralActivation(null as any))\n        .toThrow();\n    });\n\n    test('should handle undefined inputs gracefully', () => {\n      expect(() => wasmBridge.calculateNeuralActivation(undefined as any))\n        .toThrow();\n    });\n\n    test('should handle invalid Float32Array inputs', () => {\n      const invalidInputs = [1, 2, 3] as any; // Not a Float32Array\n      \n      expect(() => wasmBridge.calculateNeuralActivation(invalidInputs))\n        .toThrow();\n    });\n\n    test('should handle WASM function errors', () => {\n      // Mock WASM function to throw error\n      mockWasmModule.calculate_neural_activation.mockImplementation(() => {\n        throw new Error('WASM function error');\n      });\n      \n      const inputs = new Float32Array([0.1, 0.2]);\n      \n      expect(() => wasmBridge.calculateNeuralActivation(inputs))\n        .toThrow();\n    });\n\n    test('should handle memory allocation failures', () => {\n      // This is harder to test directly, but we can test the error paths\n      const originalAllocate = (wasmBridge as any).allocateMemory;\n      (wasmBridge as any).allocateMemory = jest.fn(() => {\n        throw new Error('Memory allocation failed');\n      });\n      \n      const inputs = new Float32Array([0.1, 0.2]);\n      \n      expect(() => wasmBridge.calculateNeuralActivation(inputs))\n        .toThrow();\n      \n      // Restore original\n      (wasmBridge as any).allocateMemory = originalAllocate;\n    });\n  });\n\n  describe('SIMD Support Detection', () => {\n    test('should detect SIMD support correctly', async () => {\n      // Test with SIMD supported\n      global.WebAssembly.validate = jest.fn(() => true);\n      \n      const simdBridge = new WasmBridge();\n      await simdBridge.initialize();\n      \n      expect(simdBridge.isSIMDSupported()).toBe(true);\n    });\n\n    test('should detect lack of SIMD support', async () => {\n      // Test with SIMD not supported\n      global.WebAssembly.validate = jest.fn(() => false);\n      \n      const noSimdBridge = new WasmBridge();\n      await noSimdBridge.initialize();\n      \n      expect(noSimdBridge.isSIMDSupported()).toBe(false);\n    });\n\n    test('should handle SIMD detection errors', async () => {\n      // Test with SIMD detection throwing error\n      global.WebAssembly.validate = jest.fn(() => {\n        throw new Error('SIMD detection failed');\n      });\n      \n      const errorBridge = new WasmBridge();\n      await errorBridge.initialize();\n      \n      expect(errorBridge.isSIMDSupported()).toBe(false);\n    });\n  });\n\n  describe('Cleanup', () => {\n    test('should cleanup resources properly', async () => {\n      await wasmBridge.initialize();\n      \n      expect(wasmBridge.isWasmInitialized()).toBe(true);\n      \n      wasmBridge.cleanup();\n      \n      expect(wasmBridge.isWasmInitialized()).toBe(false);\n      expect(wasmBridge.isSIMDSupported()).toBe(false);\n    });\n\n    test('should reset performance metrics on cleanup', async () => {\n      await wasmBridge.initialize();\n      \n      // Perform some operations to update metrics\n      const inputs = new Float32Array([0.1, 0.2]);\n      wasmBridge.calculateNeuralActivation(inputs);\n      \n      wasmBridge.cleanup();\n      \n      const metrics = wasmBridge.getPerformanceMetrics();\n      expect(metrics.executionTime).toBe(0);\n      expect(metrics.memoryUsage).toBe(0);\n      expect(metrics.simdAcceleration).toBe(false);\n      expect(metrics.throughput).toBe(0);\n      expect(metrics.efficiency).toBe(0);\n    });\n\n    test('should handle cleanup when not initialized', () => {\n      const uninitializedBridge = new WasmBridge();\n      \n      expect(() => uninitializedBridge.cleanup()).not.toThrow();\n    });\n\n    test('should allow re-initialization after cleanup', async () => {\n      await wasmBridge.initialize();\n      expect(wasmBridge.isWasmInitialized()).toBe(true);\n      \n      wasmBridge.cleanup();\n      expect(wasmBridge.isWasmInitialized()).toBe(false);\n      \n      const result = await wasmBridge.initialize();\n      expect(result).toBe(true);\n      expect(wasmBridge.isWasmInitialized()).toBe(true);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize();\n    });\n\n    test('should handle very small numbers', () => {\n      const inputs = new Float32Array([1e-10, -1e-10, 0]);\n      \n      const outputs = wasmBridge.calculateNeuralActivation(inputs);\n      \n      expect(outputs).toBeDefined();\n      expect(outputs.length).toBe(inputs.length);\n    });\n\n    test('should handle very large numbers', () => {\n      const inputs = new Float32Array([1e10, -1e10, Number.MAX_VALUE]);\n      \n      const outputs = wasmBridge.calculateNeuralActivation(inputs);\n      \n      expect(outputs).toBeDefined();\n      expect(outputs.length).toBe(inputs.length);\n    });\n\n    test('should handle special float values', () => {\n      const inputs = new Float32Array([NaN, Infinity, -Infinity]);\n      \n      const outputs = wasmBridge.calculateNeuralActivation(inputs);\n      \n      expect(outputs).toBeDefined();\n      expect(outputs.length).toBe(inputs.length);\n    });\n\n    test('should handle maximum array size', () => {\n      // Test with a reasonably large array (not too large to avoid memory issues)\n      const maxSize = 1000000; // 1M elements\n      const inputs = new Float32Array(maxSize);\n      inputs.fill(0.5);\n      \n      const outputs = wasmBridge.calculateNeuralActivation(inputs);\n      \n      expect(outputs).toBeDefined();\n      expect(outputs.length).toBe(maxSize);\n    });\n\n    test('should handle zero window size in spike processing', () => {\n      const spikes = new Float32Array([0.1, 0.2, 0.3]);\n      \n      const spikeRate = wasmBridge.processSpikeTrainData(spikes, 0);\n      \n      expect(typeof spikeRate).toBe('number');\n    });\n  });\n});"],"version":3}