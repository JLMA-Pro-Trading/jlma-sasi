{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/NeuralMeshService.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/NeuralMeshService.test.ts"],"sourcesContent":["/**\n * Comprehensive Unit Tests for NeuralMeshService\n * Target: 95%+ coverage for neural mesh operations\n */\n\nimport { EventEmitter } from 'events';\nimport { NeuralMeshService } from '../../../src/services/NeuralMeshService';\n\n// Mock dependencies\njest.mock('../../../src/utils/WasmBridge');\njest.mock('../../../src/persistence/AgentPersistenceManager');\n\n// Mock performance for testing\nglobal.performance = {\n  now: jest.fn(() => Date.now())\n} as any;\n\ndescribe('NeuralMeshService - Comprehensive Unit Tests', () => {\n  let meshService: NeuralMeshService;\n  let mockConfig: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockConfig = {\n      maxNodes: 100,\n      connectionThreshold: 0.1,\n      learningRate: 0.001,\n      decayRate: 0.99,\n      activationFunction: 'tanh',\n      updateInterval: 100,\n      persistentConnections: true,\n      autoOptimize: true\n    };\n    \n    meshService = new NeuralMeshService(mockConfig);\n  });\n\n  afterEach(async () => {\n    if (meshService) {\n      await meshService.shutdown();\n    }\n  });\n\n  describe('Initialization', () => {\n    test('should initialize with default configuration', () => {\n      const defaultService = new NeuralMeshService();\n      expect(defaultService).toBeDefined();\n      expect(defaultService).toBeInstanceOf(EventEmitter);\n    });\n\n    test('should initialize with custom configuration', () => {\n      const customConfig = {\n        maxNodes: 50,\n        learningRate: 0.002,\n        activationFunction: 'relu'\n      };\n      \n      const customService = new NeuralMeshService(customConfig);\n      expect(customService).toBeDefined();\n    });\n\n    test('should initialize successfully', async () => {\n      await expect(meshService.initialize()).resolves.not.toThrow();\n      expect(meshService.isInitialized()).toBe(true);\n    });\n\n    test('should emit initialized event', (done) => {\n      meshService.on('initialized', (event) => {\n        expect(event.timestamp).toBeDefined();\n        expect(event.config).toBeDefined();\n        done();\n      });\n      \n      meshService.initialize();\n    });\n\n    test('should handle initialization errors', async () => {\n      // Mock initialization failure\n      jest.spyOn(meshService as any, 'initializeWASM').mockRejectedValue(new Error('WASM failed'));\n      \n      await expect(meshService.initialize()).rejects.toThrow();\n    });\n  });\n\n  describe('Node Management', () => {\n    beforeEach(async () => {\n      await meshService.initialize();\n    });\n\n    test('should add nodes successfully', async () => {\n      const nodeConfig = {\n        id: 'node-1',\n        type: 'processor',\n        activationFunction: 'tanh',\n        threshold: 0.5\n      };\n      \n      const nodeId = await meshService.addNode(nodeConfig);\n      \n      expect(nodeId).toBe('node-1');\n      expect(meshService.getNodeCount()).toBe(1);\n    });\n\n    test('should generate node ID when not provided', async () => {\n      const nodeConfig = {\n        type: 'processor',\n        activationFunction: 'relu'\n      };\n      \n      const nodeId = await meshService.addNode(nodeConfig);\n      \n      expect(nodeId).toBeDefined();\n      expect(typeof nodeId).toBe('string');\n      expect(meshService.getNodeCount()).toBe(1);\n    });\n\n    test('should reject duplicate node IDs', async () => {\n      const nodeConfig = {\n        id: 'duplicate-node',\n        type: 'processor'\n      };\n      \n      await meshService.addNode(nodeConfig);\n      \n      await expect(meshService.addNode(nodeConfig))\n        .rejects.toThrow('Node with ID duplicate-node already exists');\n    });\n\n    test('should remove nodes successfully', async () => {\n      const nodeConfig = { id: 'removable-node', type: 'processor' };\n      await meshService.addNode(nodeConfig);\n      \n      expect(meshService.getNodeCount()).toBe(1);\n      \n      await meshService.removeNode('removable-node');\n      \n      expect(meshService.getNodeCount()).toBe(0);\n    });\n\n    test('should handle removing non-existent nodes gracefully', async () => {\n      await expect(meshService.removeNode('non-existent'))\n        .resolves.not.toThrow();\n    });\n\n    test('should reject exceeding max nodes limit', async () => {\n      const smallMeshService = new NeuralMeshService({ maxNodes: 2 });\n      await smallMeshService.initialize();\n      \n      // Add max nodes\n      await smallMeshService.addNode({ id: 'node-1', type: 'processor' });\n      await smallMeshService.addNode({ id: 'node-2', type: 'processor' });\n      \n      // Try to add one more\n      await expect(smallMeshService.addNode({ id: 'node-3', type: 'processor' }))\n        .rejects.toThrow('Maximum nodes limit reached: 2');\n    });\n\n    test('should emit node events', (done) => {\n      let eventsReceived = 0;\n      const expectedEvents = ['nodeAdded', 'nodeRemoved'];\n      \n      meshService.on('nodeAdded', (event) => {\n        expect(event.nodeId).toBeDefined();\n        eventsReceived++;\n        if (eventsReceived === expectedEvents.length) done();\n      });\n      \n      meshService.on('nodeRemoved', (event) => {\n        expect(event.nodeId).toBeDefined();\n        eventsReceived++;\n        if (eventsReceived === expectedEvents.length) done();\n      });\n      \n      meshService.addNode({ id: 'test-node', type: 'processor' })\n        .then(() => meshService.removeNode('test-node'));\n    });\n  });\n\n  describe('Connection Management', () => {\n    beforeEach(async () => {\n      await meshService.initialize();\n      await meshService.addNode({ id: 'node-1', type: 'input' });\n      await meshService.addNode({ id: 'node-2', type: 'hidden' });\n      await meshService.addNode({ id: 'node-3', type: 'output' });\n    });\n\n    test('should create connections between nodes', async () => {\n      await meshService.createConnection('node-1', 'node-2', 0.5);\n      \n      const connections = meshService.getConnections();\n      expect(connections).toHaveLength(1);\n      expect(connections[0].source).toBe('node-1');\n      expect(connections[0].target).toBe('node-2');\n      expect(connections[0].weight).toBe(0.5);\n    });\n\n    test('should update connection weights', async () => {\n      await meshService.createConnection('node-1', 'node-2', 0.3);\n      await meshService.updateConnection('node-1', 'node-2', 0.8);\n      \n      const connections = meshService.getConnections();\n      const connection = connections.find(c => c.source === 'node-1' && c.target === 'node-2');\n      expect(connection!.weight).toBe(0.8);\n    });\n\n    test('should remove connections', async () => {\n      await meshService.createConnection('node-1', 'node-2', 0.5);\n      expect(meshService.getConnections()).toHaveLength(1);\n      \n      await meshService.removeConnection('node-1', 'node-2');\n      expect(meshService.getConnections()).toHaveLength(0);\n    });\n\n    test('should reject connections to non-existent nodes', async () => {\n      await expect(meshService.createConnection('node-1', 'non-existent', 0.5))\n        .rejects.toThrow('Target node non-existent does not exist');\n      \n      await expect(meshService.createConnection('non-existent', 'node-2', 0.5))\n        .rejects.toThrow('Source node non-existent does not exist');\n    });\n\n    test('should handle self-connections', async () => {\n      await expect(meshService.createConnection('node-1', 'node-1', 0.5))\n        .rejects.toThrow('Self-connections are not allowed');\n    });\n\n    test('should prevent duplicate connections', async () => {\n      await meshService.createConnection('node-1', 'node-2', 0.5);\n      \n      await expect(meshService.createConnection('node-1', 'node-2', 0.7))\n        .rejects.toThrow('Connection already exists between node-1 and node-2');\n    });\n\n    test('should emit connection events', (done) => {\n      let eventsReceived = 0;\n      \n      meshService.on('connectionCreated', (event) => {\n        expect(event.source).toBe('node-1');\n        expect(event.target).toBe('node-2');\n        expect(event.weight).toBe(0.5);\n        eventsReceived++;\n        if (eventsReceived === 2) done();\n      });\n      \n      meshService.on('connectionRemoved', (event) => {\n        expect(event.source).toBe('node-1');\n        expect(event.target).toBe('node-2');\n        eventsReceived++;\n        if (eventsReceived === 2) done();\n      });\n      \n      meshService.createConnection('node-1', 'node-2', 0.5)\n        .then(() => meshService.removeConnection('node-1', 'node-2'));\n    });\n  });\n\n  describe('Signal Propagation', () => {\n    beforeEach(async () => {\n      await meshService.initialize();\n      await meshService.addNode({ id: 'input', type: 'input' });\n      await meshService.addNode({ id: 'hidden', type: 'hidden' });\n      await meshService.addNode({ id: 'output', type: 'output' });\n      await meshService.createConnection('input', 'hidden', 0.8);\n      await meshService.createConnection('hidden', 'output', 0.6);\n    });\n\n    test('should propagate signals through the mesh', async () => {\n      const inputSignal = { input: 1.0 };\n      \n      const output = await meshService.propagateSignal(inputSignal);\n      \n      expect(output).toBeDefined();\n      expect(typeof output.output).toBe('number');\n    });\n\n    test('should handle multiple input signals', async () => {\n      await meshService.addNode({ id: 'input2', type: 'input' });\n      await meshService.createConnection('input2', 'hidden', 0.4);\n      \n      const inputSignals = { input: 0.5, input2: 0.8 };\n      \n      const output = await meshService.propagateSignal(inputSignals);\n      \n      expect(output).toBeDefined();\n      expect(typeof output.output).toBe('number');\n    });\n\n    test('should handle empty input signals', async () => {\n      const output = await meshService.propagateSignal({});\n      \n      expect(output).toBeDefined();\n    });\n\n    test('should apply activation functions correctly', async () => {\n      const tanhService = new NeuralMeshService({ activationFunction: 'tanh' });\n      await tanhService.initialize();\n      \n      await tanhService.addNode({ id: 'test-node', type: 'hidden' });\n      \n      // Test tanh activation\n      const result = await tanhService.propagateSignal({ 'test-node': 2.0 });\n      expect(result).toBeDefined();\n    });\n\n    test('should handle different activation functions', async () => {\n      const activationFunctions = ['tanh', 'relu', 'sigmoid', 'linear'];\n      \n      for (const func of activationFunctions) {\n        const service = new NeuralMeshService({ activationFunction: func });\n        await service.initialize();\n        \n        await service.addNode({ id: 'test', type: 'hidden', activationFunction: func });\n        const result = await service.propagateSignal({ test: 1.0 });\n        \n        expect(result).toBeDefined();\n        await service.shutdown();\n      }\n    });\n  });\n\n  describe('Learning and Adaptation', () => {\n    beforeEach(async () => {\n      await meshService.initialize();\n      await meshService.addNode({ id: 'input', type: 'input' });\n      await meshService.addNode({ id: 'output', type: 'output' });\n      await meshService.createConnection('input', 'output', 0.5);\n    });\n\n    test('should learn from training data', async () => {\n      const trainingData = [\n        { inputs: { input: 0.0 }, outputs: { output: 0.0 } },\n        { inputs: { input: 1.0 }, outputs: { output: 1.0 } }\n      ];\n      \n      const session = await meshService.learn(trainingData, 10);\n      \n      expect(session).toBeDefined();\n      expect(session.epochs).toBe(10);\n      expect(session.finalError).toBeDefined();\n      expect(session.convergence).toBeDefined();\n    });\n\n    test('should emit learning events', (done) => {\n      const trainingData = [\n        { inputs: { input: 0.5 }, outputs: { output: 0.5 } }\n      ];\n      \n      meshService.on('learningStarted', (event) => {\n        expect(event.epochs).toBe(5);\n        expect(event.dataPoints).toBe(1);\n      });\n      \n      meshService.on('learningComplete', (event) => {\n        expect(event.finalError).toBeDefined();\n        expect(event.convergence).toBeDefined();\n        done();\n      });\n      \n      meshService.learn(trainingData, 5);\n    });\n\n    test('should adapt connection weights during learning', async () => {\n      const initialConnections = meshService.getConnections();\n      const initialWeight = initialConnections[0].weight;\n      \n      const trainingData = [\n        { inputs: { input: 1.0 }, outputs: { output: 0.0 } }\n      ];\n      \n      await meshService.learn(trainingData, 50);\n      \n      const finalConnections = meshService.getConnections();\n      const finalWeight = finalConnections[0].weight;\n      \n      expect(finalWeight).not.toBe(initialWeight);\n    });\n\n    test('should handle empty training data', async () => {\n      await expect(meshService.learn([], 10))\n        .rejects.toThrow('Training data cannot be empty');\n    });\n\n    test('should validate training data structure', async () => {\n      const invalidData = [\n        { inputs: { nonexistent: 1.0 }, outputs: { output: 1.0 } }\n      ];\n      \n      await expect(meshService.learn(invalidData, 10))\n        .rejects.toThrow('Invalid training data: node nonexistent does not exist');\n    });\n  });\n\n  describe('Optimization', () => {\n    beforeEach(async () => {\n      await meshService.initialize();\n      // Create a more complex network for optimization testing\n      await meshService.addNode({ id: 'input1', type: 'input' });\n      await meshService.addNode({ id: 'input2', type: 'input' });\n      await meshService.addNode({ id: 'hidden1', type: 'hidden' });\n      await meshService.addNode({ id: 'hidden2', type: 'hidden' });\n      await meshService.addNode({ id: 'output', type: 'output' });\n      \n      await meshService.createConnection('input1', 'hidden1', 0.3);\n      await meshService.createConnection('input2', 'hidden1', 0.4);\n      await meshService.createConnection('input1', 'hidden2', 0.2);\n      await meshService.createConnection('hidden1', 'output', 0.6);\n      await meshService.createConnection('hidden2', 'output', 0.5);\n    });\n\n    test('should optimize network topology', async () => {\n      const initialConnections = meshService.getConnections().length;\n      \n      await meshService.optimizeTopology();\n      \n      const finalConnections = meshService.getConnections().length;\n      \n      // Optimization might remove weak connections\n      expect(finalConnections).toBeLessThanOrEqual(initialConnections);\n    });\n\n    test('should prune weak connections', async () => {\n      // Add a very weak connection\n      await meshService.createConnection('input2', 'hidden2', 0.01);\n      \n      const initialCount = meshService.getConnections().length;\n      \n      await meshService.pruneWeakConnections(0.1); // Remove connections < 0.1\n      \n      const finalCount = meshService.getConnections().length;\n      expect(finalCount).toBeLessThan(initialCount);\n    });\n\n    test('should balance network load', async () => {\n      await meshService.balanceLoad();\n      \n      // Load balancing should maintain network structure\n      expect(meshService.getNodeCount()).toBe(5);\n    });\n\n    test('should emit optimization events', (done) => {\n      meshService.on('topologyOptimized', (event) => {\n        expect(event.removedConnections).toBeDefined();\n        expect(event.efficiency).toBeDefined();\n        done();\n      });\n      \n      meshService.optimizeTopology();\n    });\n  });\n\n  describe('Performance Monitoring', () => {\n    beforeEach(async () => {\n      await meshService.initialize();\n      await meshService.addNode({ id: 'test-node', type: 'processor' });\n    });\n\n    test('should provide performance metrics', () => {\n      const metrics = meshService.getPerformanceMetrics();\n      \n      expect(metrics).toBeDefined();\n      expect(typeof metrics.propagationTime).toBe('number');\n      expect(typeof metrics.learningRate).toBe('number');\n      expect(typeof metrics.networkEfficiency).toBe('number');\n      expect(typeof metrics.memoryUsage).toBe('number');\n      expect(typeof metrics.nodeUtilization).toBe('number');\n    });\n\n    test('should track propagation performance', async () => {\n      const initialMetrics = meshService.getPerformanceMetrics();\n      \n      // Perform some operations\n      await meshService.propagateSignal({ 'test-node': 1.0 });\n      \n      const updatedMetrics = meshService.getPerformanceMetrics();\n      expect(updatedMetrics.propagationTime).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should calculate network efficiency', () => {\n      const metrics = meshService.getPerformanceMetrics();\n      \n      expect(metrics.networkEfficiency).toBeGreaterThanOrEqual(0);\n      expect(metrics.networkEfficiency).toBeLessThanOrEqual(1);\n    });\n\n    test('should monitor memory usage', () => {\n      const metrics = meshService.getPerformanceMetrics();\n      \n      expect(metrics.memoryUsage).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('State Management', () => {\n    beforeEach(async () => {\n      await meshService.initialize();\n      await meshService.addNode({ id: 'state-node', type: 'processor' });\n      await meshService.createConnection('state-node', 'state-node', 0.5);\n    });\n\n    test('should save mesh state', async () => {\n      const state = await meshService.saveState();\n      \n      expect(state).toBeDefined();\n      expect(state.nodes).toBeDefined();\n      expect(state.connections).toBeDefined();\n      expect(state.config).toBeDefined();\n      expect(state.timestamp).toBeDefined();\n    });\n\n    test('should restore mesh state', async () => {\n      const originalState = await meshService.saveState();\n      \n      // Modify the mesh\n      await meshService.addNode({ id: 'temp-node', type: 'temp' });\n      \n      // Restore original state\n      await meshService.restoreState(originalState);\n      \n      expect(meshService.getNodeCount()).toBe(1);\n      expect(meshService.getNode('temp-node')).toBeNull();\n    });\n\n    test('should handle invalid state restoration', async () => {\n      const invalidState = {\n        nodes: [],\n        connections: [],\n        config: null,\n        timestamp: Date.now()\n      };\n      \n      await expect(meshService.restoreState(invalidState as any))\n        .rejects.toThrow();\n    });\n\n    test('should export mesh data', async () => {\n      const exportData = await meshService.exportMesh('json');\n      \n      expect(exportData).toBeDefined();\n      expect(typeof exportData).toBe('string');\n      \n      const parsed = JSON.parse(exportData);\n      expect(parsed.nodes).toBeDefined();\n      expect(parsed.connections).toBeDefined();\n    });\n\n    test('should support different export formats', async () => {\n      const jsonData = await meshService.exportMesh('json');\n      const csvData = await meshService.exportMesh('csv');\n      \n      expect(jsonData).toBeDefined();\n      expect(csvData).toBeDefined();\n      expect(jsonData).not.toBe(csvData);\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle WASM initialization failures', async () => {\n      const errorService = new NeuralMeshService();\n      \n      // Mock WASM failure\n      jest.spyOn(errorService as any, 'initializeWASM').mockRejectedValue(new Error('WASM failed'));\n      \n      await expect(errorService.initialize()).rejects.toThrow('WASM failed');\n    });\n\n    test('should handle corrupted mesh data gracefully', async () => {\n      await meshService.initialize();\n      \n      // Simulate corrupted internal state\n      (meshService as any).nodes = null;\n      \n      expect(() => meshService.getNodeCount()).not.toThrow();\n    });\n\n    test('should handle memory pressure scenarios', async () => {\n      await meshService.initialize();\n      \n      // Add many nodes to simulate memory pressure\n      const promises = [];\n      for (let i = 0; i < 50; i++) {\n        promises.push(meshService.addNode({ id: `node-${i}`, type: 'processor' }));\n      }\n      \n      await expect(Promise.all(promises)).resolves.toBeDefined();\n    });\n\n    test('should handle concurrent operations safely', async () => {\n      await meshService.initialize();\n      \n      // Perform concurrent operations\n      const operations = [\n        meshService.addNode({ id: 'concurrent-1', type: 'processor' }),\n        meshService.addNode({ id: 'concurrent-2', type: 'processor' }),\n        meshService.propagateSignal({ input: 1.0 }),\n        meshService.getPerformanceMetrics()\n      ];\n      \n      await expect(Promise.all(operations)).resolves.toBeDefined();\n    });\n  });\n\n  describe('Cleanup and Shutdown', () => {\n    test('should shutdown cleanly', async () => {\n      await meshService.initialize();\n      await meshService.addNode({ id: 'cleanup-test', type: 'processor' });\n      \n      await expect(meshService.shutdown()).resolves.not.toThrow();\n      expect(meshService.isInitialized()).toBe(false);\n    });\n\n    test('should emit shutdown event', (done) => {\n      meshService.on('shutdown', (event) => {\n        expect(event.timestamp).toBeDefined();\n        done();\n      });\n      \n      meshService.initialize().then(() => meshService.shutdown());\n    });\n\n    test('should handle shutdown when not initialized', async () => {\n      const uninitializedService = new NeuralMeshService();\n      \n      await expect(uninitializedService.shutdown()).resolves.not.toThrow();\n    });\n\n    test('should clean up all resources on shutdown', async () => {\n      await meshService.initialize();\n      await meshService.addNode({ id: 'resource-test', type: 'processor' });\n      \n      await meshService.shutdown();\n      \n      expect(meshService.getNodeCount()).toBe(0);\n      expect(meshService.getConnections()).toHaveLength(0);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    beforeEach(async () => {\n      await meshService.initialize();\n    });\n\n    test('should handle nodes with special characters', async () => {\n      const specialId = 'node-with-special-chars-@#$%';\n      \n      await meshService.addNode({ id: specialId, type: 'processor' });\n      \n      expect(meshService.getNode(specialId)).toBeDefined();\n    });\n\n    test('should handle very large weight values', async () => {\n      await meshService.addNode({ id: 'node-1', type: 'input' });\n      await meshService.addNode({ id: 'node-2', type: 'output' });\n      \n      await meshService.createConnection('node-1', 'node-2', Number.MAX_VALUE);\n      \n      const connections = meshService.getConnections();\n      expect(connections[0].weight).toBe(Number.MAX_VALUE);\n    });\n\n    test('should handle negative weight values', async () => {\n      await meshService.addNode({ id: 'node-1', type: 'input' });\n      await meshService.addNode({ id: 'node-2', type: 'output' });\n      \n      await meshService.createConnection('node-1', 'node-2', -0.5);\n      \n      const connections = meshService.getConnections();\n      expect(connections[0].weight).toBe(-0.5);\n    });\n\n    test('should handle NaN and Infinity weight values', async () => {\n      await meshService.addNode({ id: 'node-1', type: 'input' });\n      await meshService.addNode({ id: 'node-2', type: 'output' });\n      \n      await expect(meshService.createConnection('node-1', 'node-2', NaN))\n        .rejects.toThrow('Invalid weight value');\n      \n      await expect(meshService.createConnection('node-1', 'node-2', Infinity))\n        .rejects.toThrow('Invalid weight value');\n    });\n\n    test('should handle empty node types', async () => {\n      await expect(meshService.addNode({ id: 'empty-type', type: '' }))\n        .rejects.toThrow('Node type cannot be empty');\n    });\n  });\n});"],"version":3}