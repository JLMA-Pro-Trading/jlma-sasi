1c7bde56bd4028c66bb0784a864197a1
"use strict";
/**
 * Comprehensive Unit Tests for NeuralMeshService
 * Target: 95%+ coverage for neural mesh operations
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('../../../src/utils/WasmBridge');
jest.mock('../../../src/persistence/AgentPersistenceManager');
const events_1 = require("events");
const NeuralMeshService_1 = require("../../../src/services/NeuralMeshService");
// Mock performance for testing
global.performance = {
    now: jest.fn(() => Date.now())
};
describe('NeuralMeshService - Comprehensive Unit Tests', () => {
    let meshService;
    let mockConfig;
    beforeEach(() => {
        jest.clearAllMocks();
        mockConfig = {
            maxNodes: 100,
            connectionThreshold: 0.1,
            learningRate: 0.001,
            decayRate: 0.99,
            activationFunction: 'tanh',
            updateInterval: 100,
            persistentConnections: true,
            autoOptimize: true
        };
        meshService = new NeuralMeshService_1.NeuralMeshService(mockConfig);
    });
    afterEach(async () => {
        if (meshService) {
            await meshService.shutdown();
        }
    });
    describe('Initialization', () => {
        test('should initialize with default configuration', () => {
            const defaultService = new NeuralMeshService_1.NeuralMeshService();
            expect(defaultService).toBeDefined();
            expect(defaultService).toBeInstanceOf(events_1.EventEmitter);
        });
        test('should initialize with custom configuration', () => {
            const customConfig = {
                maxNodes: 50,
                learningRate: 0.002,
                activationFunction: 'relu'
            };
            const customService = new NeuralMeshService_1.NeuralMeshService(customConfig);
            expect(customService).toBeDefined();
        });
        test('should initialize successfully', async () => {
            await expect(meshService.initialize()).resolves.not.toThrow();
            expect(meshService.isInitialized()).toBe(true);
        });
        test('should emit initialized event', (done) => {
            meshService.on('initialized', (event) => {
                expect(event.timestamp).toBeDefined();
                expect(event.config).toBeDefined();
                done();
            });
            meshService.initialize();
        });
        test('should handle initialization errors', async () => {
            // Mock initialization failure
            jest.spyOn(meshService, 'initializeWASM').mockRejectedValue(new Error('WASM failed'));
            await expect(meshService.initialize()).rejects.toThrow();
        });
    });
    describe('Node Management', () => {
        beforeEach(async () => {
            await meshService.initialize();
        });
        test('should add nodes successfully', async () => {
            const nodeConfig = {
                id: 'node-1',
                type: 'processor',
                activationFunction: 'tanh',
                threshold: 0.5
            };
            const nodeId = await meshService.addNode(nodeConfig);
            expect(nodeId).toBe('node-1');
            expect(meshService.getNodeCount()).toBe(1);
        });
        test('should generate node ID when not provided', async () => {
            const nodeConfig = {
                type: 'processor',
                activationFunction: 'relu'
            };
            const nodeId = await meshService.addNode(nodeConfig);
            expect(nodeId).toBeDefined();
            expect(typeof nodeId).toBe('string');
            expect(meshService.getNodeCount()).toBe(1);
        });
        test('should reject duplicate node IDs', async () => {
            const nodeConfig = {
                id: 'duplicate-node',
                type: 'processor'
            };
            await meshService.addNode(nodeConfig);
            await expect(meshService.addNode(nodeConfig))
                .rejects.toThrow('Node with ID duplicate-node already exists');
        });
        test('should remove nodes successfully', async () => {
            const nodeConfig = { id: 'removable-node', type: 'processor' };
            await meshService.addNode(nodeConfig);
            expect(meshService.getNodeCount()).toBe(1);
            await meshService.removeNode('removable-node');
            expect(meshService.getNodeCount()).toBe(0);
        });
        test('should handle removing non-existent nodes gracefully', async () => {
            await expect(meshService.removeNode('non-existent'))
                .resolves.not.toThrow();
        });
        test('should reject exceeding max nodes limit', async () => {
            const smallMeshService = new NeuralMeshService_1.NeuralMeshService({ maxNodes: 2 });
            await smallMeshService.initialize();
            // Add max nodes
            await smallMeshService.addNode({ id: 'node-1', type: 'processor' });
            await smallMeshService.addNode({ id: 'node-2', type: 'processor' });
            // Try to add one more
            await expect(smallMeshService.addNode({ id: 'node-3', type: 'processor' }))
                .rejects.toThrow('Maximum nodes limit reached: 2');
        });
        test('should emit node events', (done) => {
            let eventsReceived = 0;
            const expectedEvents = ['nodeAdded', 'nodeRemoved'];
            meshService.on('nodeAdded', (event) => {
                expect(event.nodeId).toBeDefined();
                eventsReceived++;
                if (eventsReceived === expectedEvents.length)
                    done();
            });
            meshService.on('nodeRemoved', (event) => {
                expect(event.nodeId).toBeDefined();
                eventsReceived++;
                if (eventsReceived === expectedEvents.length)
                    done();
            });
            meshService.addNode({ id: 'test-node', type: 'processor' })
                .then(() => meshService.removeNode('test-node'));
        });
    });
    describe('Connection Management', () => {
        beforeEach(async () => {
            await meshService.initialize();
            await meshService.addNode({ id: 'node-1', type: 'input' });
            await meshService.addNode({ id: 'node-2', type: 'hidden' });
            await meshService.addNode({ id: 'node-3', type: 'output' });
        });
        test('should create connections between nodes', async () => {
            await meshService.createConnection('node-1', 'node-2', 0.5);
            const connections = meshService.getConnections();
            expect(connections).toHaveLength(1);
            expect(connections[0].source).toBe('node-1');
            expect(connections[0].target).toBe('node-2');
            expect(connections[0].weight).toBe(0.5);
        });
        test('should update connection weights', async () => {
            await meshService.createConnection('node-1', 'node-2', 0.3);
            await meshService.updateConnection('node-1', 'node-2', 0.8);
            const connections = meshService.getConnections();
            const connection = connections.find(c => c.source === 'node-1' && c.target === 'node-2');
            expect(connection.weight).toBe(0.8);
        });
        test('should remove connections', async () => {
            await meshService.createConnection('node-1', 'node-2', 0.5);
            expect(meshService.getConnections()).toHaveLength(1);
            await meshService.removeConnection('node-1', 'node-2');
            expect(meshService.getConnections()).toHaveLength(0);
        });
        test('should reject connections to non-existent nodes', async () => {
            await expect(meshService.createConnection('node-1', 'non-existent', 0.5))
                .rejects.toThrow('Target node non-existent does not exist');
            await expect(meshService.createConnection('non-existent', 'node-2', 0.5))
                .rejects.toThrow('Source node non-existent does not exist');
        });
        test('should handle self-connections', async () => {
            await expect(meshService.createConnection('node-1', 'node-1', 0.5))
                .rejects.toThrow('Self-connections are not allowed');
        });
        test('should prevent duplicate connections', async () => {
            await meshService.createConnection('node-1', 'node-2', 0.5);
            await expect(meshService.createConnection('node-1', 'node-2', 0.7))
                .rejects.toThrow('Connection already exists between node-1 and node-2');
        });
        test('should emit connection events', (done) => {
            let eventsReceived = 0;
            meshService.on('connectionCreated', (event) => {
                expect(event.source).toBe('node-1');
                expect(event.target).toBe('node-2');
                expect(event.weight).toBe(0.5);
                eventsReceived++;
                if (eventsReceived === 2)
                    done();
            });
            meshService.on('connectionRemoved', (event) => {
                expect(event.source).toBe('node-1');
                expect(event.target).toBe('node-2');
                eventsReceived++;
                if (eventsReceived === 2)
                    done();
            });
            meshService.createConnection('node-1', 'node-2', 0.5)
                .then(() => meshService.removeConnection('node-1', 'node-2'));
        });
    });
    describe('Signal Propagation', () => {
        beforeEach(async () => {
            await meshService.initialize();
            await meshService.addNode({ id: 'input', type: 'input' });
            await meshService.addNode({ id: 'hidden', type: 'hidden' });
            await meshService.addNode({ id: 'output', type: 'output' });
            await meshService.createConnection('input', 'hidden', 0.8);
            await meshService.createConnection('hidden', 'output', 0.6);
        });
        test('should propagate signals through the mesh', async () => {
            const inputSignal = { input: 1.0 };
            const output = await meshService.propagateSignal(inputSignal);
            expect(output).toBeDefined();
            expect(typeof output.output).toBe('number');
        });
        test('should handle multiple input signals', async () => {
            await meshService.addNode({ id: 'input2', type: 'input' });
            await meshService.createConnection('input2', 'hidden', 0.4);
            const inputSignals = { input: 0.5, input2: 0.8 };
            const output = await meshService.propagateSignal(inputSignals);
            expect(output).toBeDefined();
            expect(typeof output.output).toBe('number');
        });
        test('should handle empty input signals', async () => {
            const output = await meshService.propagateSignal({});
            expect(output).toBeDefined();
        });
        test('should apply activation functions correctly', async () => {
            const tanhService = new NeuralMeshService_1.NeuralMeshService({ activationFunction: 'tanh' });
            await tanhService.initialize();
            await tanhService.addNode({ id: 'test-node', type: 'hidden' });
            // Test tanh activation
            const result = await tanhService.propagateSignal({ 'test-node': 2.0 });
            expect(result).toBeDefined();
        });
        test('should handle different activation functions', async () => {
            const activationFunctions = ['tanh', 'relu', 'sigmoid', 'linear'];
            for (const func of activationFunctions) {
                const service = new NeuralMeshService_1.NeuralMeshService({ activationFunction: func });
                await service.initialize();
                await service.addNode({ id: 'test', type: 'hidden', activationFunction: func });
                const result = await service.propagateSignal({ test: 1.0 });
                expect(result).toBeDefined();
                await service.shutdown();
            }
        });
    });
    describe('Learning and Adaptation', () => {
        beforeEach(async () => {
            await meshService.initialize();
            await meshService.addNode({ id: 'input', type: 'input' });
            await meshService.addNode({ id: 'output', type: 'output' });
            await meshService.createConnection('input', 'output', 0.5);
        });
        test('should learn from training data', async () => {
            const trainingData = [
                { inputs: { input: 0.0 }, outputs: { output: 0.0 } },
                { inputs: { input: 1.0 }, outputs: { output: 1.0 } }
            ];
            const session = await meshService.learn(trainingData, 10);
            expect(session).toBeDefined();
            expect(session.epochs).toBe(10);
            expect(session.finalError).toBeDefined();
            expect(session.convergence).toBeDefined();
        });
        test('should emit learning events', (done) => {
            const trainingData = [
                { inputs: { input: 0.5 }, outputs: { output: 0.5 } }
            ];
            meshService.on('learningStarted', (event) => {
                expect(event.epochs).toBe(5);
                expect(event.dataPoints).toBe(1);
            });
            meshService.on('learningComplete', (event) => {
                expect(event.finalError).toBeDefined();
                expect(event.convergence).toBeDefined();
                done();
            });
            meshService.learn(trainingData, 5);
        });
        test('should adapt connection weights during learning', async () => {
            const initialConnections = meshService.getConnections();
            const initialWeight = initialConnections[0].weight;
            const trainingData = [
                { inputs: { input: 1.0 }, outputs: { output: 0.0 } }
            ];
            await meshService.learn(trainingData, 50);
            const finalConnections = meshService.getConnections();
            const finalWeight = finalConnections[0].weight;
            expect(finalWeight).not.toBe(initialWeight);
        });
        test('should handle empty training data', async () => {
            await expect(meshService.learn([], 10))
                .rejects.toThrow('Training data cannot be empty');
        });
        test('should validate training data structure', async () => {
            const invalidData = [
                { inputs: { nonexistent: 1.0 }, outputs: { output: 1.0 } }
            ];
            await expect(meshService.learn(invalidData, 10))
                .rejects.toThrow('Invalid training data: node nonexistent does not exist');
        });
    });
    describe('Optimization', () => {
        beforeEach(async () => {
            await meshService.initialize();
            // Create a more complex network for optimization testing
            await meshService.addNode({ id: 'input1', type: 'input' });
            await meshService.addNode({ id: 'input2', type: 'input' });
            await meshService.addNode({ id: 'hidden1', type: 'hidden' });
            await meshService.addNode({ id: 'hidden2', type: 'hidden' });
            await meshService.addNode({ id: 'output', type: 'output' });
            await meshService.createConnection('input1', 'hidden1', 0.3);
            await meshService.createConnection('input2', 'hidden1', 0.4);
            await meshService.createConnection('input1', 'hidden2', 0.2);
            await meshService.createConnection('hidden1', 'output', 0.6);
            await meshService.createConnection('hidden2', 'output', 0.5);
        });
        test('should optimize network topology', async () => {
            const initialConnections = meshService.getConnections().length;
            await meshService.optimizeTopology();
            const finalConnections = meshService.getConnections().length;
            // Optimization might remove weak connections
            expect(finalConnections).toBeLessThanOrEqual(initialConnections);
        });
        test('should prune weak connections', async () => {
            // Add a very weak connection
            await meshService.createConnection('input2', 'hidden2', 0.01);
            const initialCount = meshService.getConnections().length;
            await meshService.pruneWeakConnections(0.1); // Remove connections < 0.1
            const finalCount = meshService.getConnections().length;
            expect(finalCount).toBeLessThan(initialCount);
        });
        test('should balance network load', async () => {
            await meshService.balanceLoad();
            // Load balancing should maintain network structure
            expect(meshService.getNodeCount()).toBe(5);
        });
        test('should emit optimization events', (done) => {
            meshService.on('topologyOptimized', (event) => {
                expect(event.removedConnections).toBeDefined();
                expect(event.efficiency).toBeDefined();
                done();
            });
            meshService.optimizeTopology();
        });
    });
    describe('Performance Monitoring', () => {
        beforeEach(async () => {
            await meshService.initialize();
            await meshService.addNode({ id: 'test-node', type: 'processor' });
        });
        test('should provide performance metrics', () => {
            const metrics = meshService.getPerformanceMetrics();
            expect(metrics).toBeDefined();
            expect(typeof metrics.propagationTime).toBe('number');
            expect(typeof metrics.learningRate).toBe('number');
            expect(typeof metrics.networkEfficiency).toBe('number');
            expect(typeof metrics.memoryUsage).toBe('number');
            expect(typeof metrics.nodeUtilization).toBe('number');
        });
        test('should track propagation performance', async () => {
            const initialMetrics = meshService.getPerformanceMetrics();
            // Perform some operations
            await meshService.propagateSignal({ 'test-node': 1.0 });
            const updatedMetrics = meshService.getPerformanceMetrics();
            expect(updatedMetrics.propagationTime).toBeGreaterThanOrEqual(0);
        });
        test('should calculate network efficiency', () => {
            const metrics = meshService.getPerformanceMetrics();
            expect(metrics.networkEfficiency).toBeGreaterThanOrEqual(0);
            expect(metrics.networkEfficiency).toBeLessThanOrEqual(1);
        });
        test('should monitor memory usage', () => {
            const metrics = meshService.getPerformanceMetrics();
            expect(metrics.memoryUsage).toBeGreaterThanOrEqual(0);
        });
    });
    describe('State Management', () => {
        beforeEach(async () => {
            await meshService.initialize();
            await meshService.addNode({ id: 'state-node', type: 'processor' });
            await meshService.createConnection('state-node', 'state-node', 0.5);
        });
        test('should save mesh state', async () => {
            const state = await meshService.saveState();
            expect(state).toBeDefined();
            expect(state.nodes).toBeDefined();
            expect(state.connections).toBeDefined();
            expect(state.config).toBeDefined();
            expect(state.timestamp).toBeDefined();
        });
        test('should restore mesh state', async () => {
            const originalState = await meshService.saveState();
            // Modify the mesh
            await meshService.addNode({ id: 'temp-node', type: 'temp' });
            // Restore original state
            await meshService.restoreState(originalState);
            expect(meshService.getNodeCount()).toBe(1);
            expect(meshService.getNode('temp-node')).toBeNull();
        });
        test('should handle invalid state restoration', async () => {
            const invalidState = {
                nodes: [],
                connections: [],
                config: null,
                timestamp: Date.now()
            };
            await expect(meshService.restoreState(invalidState))
                .rejects.toThrow();
        });
        test('should export mesh data', async () => {
            const exportData = await meshService.exportMesh('json');
            expect(exportData).toBeDefined();
            expect(typeof exportData).toBe('string');
            const parsed = JSON.parse(exportData);
            expect(parsed.nodes).toBeDefined();
            expect(parsed.connections).toBeDefined();
        });
        test('should support different export formats', async () => {
            const jsonData = await meshService.exportMesh('json');
            const csvData = await meshService.exportMesh('csv');
            expect(jsonData).toBeDefined();
            expect(csvData).toBeDefined();
            expect(jsonData).not.toBe(csvData);
        });
    });
    describe('Error Handling', () => {
        test('should handle WASM initialization failures', async () => {
            const errorService = new NeuralMeshService_1.NeuralMeshService();
            // Mock WASM failure
            jest.spyOn(errorService, 'initializeWASM').mockRejectedValue(new Error('WASM failed'));
            await expect(errorService.initialize()).rejects.toThrow('WASM failed');
        });
        test('should handle corrupted mesh data gracefully', async () => {
            await meshService.initialize();
            // Simulate corrupted internal state
            meshService.nodes = null;
            expect(() => meshService.getNodeCount()).not.toThrow();
        });
        test('should handle memory pressure scenarios', async () => {
            await meshService.initialize();
            // Add many nodes to simulate memory pressure
            const promises = [];
            for (let i = 0; i < 50; i++) {
                promises.push(meshService.addNode({ id: `node-${i}`, type: 'processor' }));
            }
            await expect(Promise.all(promises)).resolves.toBeDefined();
        });
        test('should handle concurrent operations safely', async () => {
            await meshService.initialize();
            // Perform concurrent operations
            const operations = [
                meshService.addNode({ id: 'concurrent-1', type: 'processor' }),
                meshService.addNode({ id: 'concurrent-2', type: 'processor' }),
                meshService.propagateSignal({ input: 1.0 }),
                meshService.getPerformanceMetrics()
            ];
            await expect(Promise.all(operations)).resolves.toBeDefined();
        });
    });
    describe('Cleanup and Shutdown', () => {
        test('should shutdown cleanly', async () => {
            await meshService.initialize();
            await meshService.addNode({ id: 'cleanup-test', type: 'processor' });
            await expect(meshService.shutdown()).resolves.not.toThrow();
            expect(meshService.isInitialized()).toBe(false);
        });
        test('should emit shutdown event', (done) => {
            meshService.on('shutdown', (event) => {
                expect(event.timestamp).toBeDefined();
                done();
            });
            meshService.initialize().then(() => meshService.shutdown());
        });
        test('should handle shutdown when not initialized', async () => {
            const uninitializedService = new NeuralMeshService_1.NeuralMeshService();
            await expect(uninitializedService.shutdown()).resolves.not.toThrow();
        });
        test('should clean up all resources on shutdown', async () => {
            await meshService.initialize();
            await meshService.addNode({ id: 'resource-test', type: 'processor' });
            await meshService.shutdown();
            expect(meshService.getNodeCount()).toBe(0);
            expect(meshService.getConnections()).toHaveLength(0);
        });
    });
    describe('Edge Cases', () => {
        beforeEach(async () => {
            await meshService.initialize();
        });
        test('should handle nodes with special characters', async () => {
            const specialId = 'node-with-special-chars-@#$%';
            await meshService.addNode({ id: specialId, type: 'processor' });
            expect(meshService.getNode(specialId)).toBeDefined();
        });
        test('should handle very large weight values', async () => {
            await meshService.addNode({ id: 'node-1', type: 'input' });
            await meshService.addNode({ id: 'node-2', type: 'output' });
            await meshService.createConnection('node-1', 'node-2', Number.MAX_VALUE);
            const connections = meshService.getConnections();
            expect(connections[0].weight).toBe(Number.MAX_VALUE);
        });
        test('should handle negative weight values', async () => {
            await meshService.addNode({ id: 'node-1', type: 'input' });
            await meshService.addNode({ id: 'node-2', type: 'output' });
            await meshService.createConnection('node-1', 'node-2', -0.5);
            const connections = meshService.getConnections();
            expect(connections[0].weight).toBe(-0.5);
        });
        test('should handle NaN and Infinity weight values', async () => {
            await meshService.addNode({ id: 'node-1', type: 'input' });
            await meshService.addNode({ id: 'node-2', type: 'output' });
            await expect(meshService.createConnection('node-1', 'node-2', NaN))
                .rejects.toThrow('Invalid weight value');
            await expect(meshService.createConnection('node-1', 'node-2', Infinity))
                .rejects.toThrow('Invalid weight value');
        });
        test('should handle empty node types', async () => {
            await expect(meshService.addNode({ id: 'empty-type', type: '' }))
                .rejects.toThrow('Node type cannot be empty');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,