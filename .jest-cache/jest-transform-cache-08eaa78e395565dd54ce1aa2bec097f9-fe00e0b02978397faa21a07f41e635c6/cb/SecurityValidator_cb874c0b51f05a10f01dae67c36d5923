151b96afabe4a35fda21efae1896bac7
/* istanbul ignore next */
function cov_uep23md2() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityValidator.ts";
  var hash = "14e5695363bd0fcb356c38681c3ab68931205dd8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityValidator.ts",
    statementMap: {
      "0": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "1": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "2": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "3": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "4": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "5": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 37
        }
      },
      "6": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 25
        }
      },
      "7": {
        start: {
          line: 59,
          column: 28
        },
        end: {
          line: 59,
          column: 31
        }
      },
      "8": {
        start: {
          line: 61,
          column: 37
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "9": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "10": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "11": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 75,
          column: 17
        }
      },
      "12": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 74,
          column: 21
        }
      },
      "13": {
        start: {
          line: 72,
          column: 24
        },
        end: {
          line: 72,
          column: 115
        }
      },
      "14": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 73,
          column: 44
        }
      },
      "15": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 80,
          column: 17
        }
      },
      "16": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 85
        }
      },
      "17": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 40
        }
      },
      "18": {
        start: {
          line: 84,
          column: 32
        },
        end: {
          line: 92,
          column: 10
        }
      },
      "19": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "20": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 89,
          column: 60
        }
      },
      "21": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 25
        }
      },
      "22": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 98,
          column: 47
        }
      },
      "23": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 104,
          column: 10
        }
      },
      "24": {
        start: {
          line: 111,
          column: 23
        },
        end: {
          line: 111,
          column: 25
        }
      },
      "25": {
        start: {
          line: 112,
          column: 28
        },
        end: {
          line: 112,
          column: 31
        }
      },
      "26": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "27": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 77
        }
      },
      "28": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 32
        }
      },
      "29": {
        start: {
          line: 119,
          column: 30
        },
        end: {
          line: 119,
          column: 78
        }
      },
      "30": {
        start: {
          line: 119,
          column: 63
        },
        end: {
          line: 119,
          column: 77
        }
      },
      "31": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "32": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 96
        }
      },
      "33": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 32
        }
      },
      "34": {
        start: {
          line: 125,
          column: 30
        },
        end: {
          line: 125,
          column: 84
        }
      },
      "35": {
        start: {
          line: 125,
          column: 63
        },
        end: {
          line: 125,
          column: 83
        }
      },
      "36": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "37": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 90
        }
      },
      "38": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 32
        }
      },
      "39": {
        start: {
          line: 131,
          column: 32
        },
        end: {
          line: 135,
          column: 10
        }
      },
      "40": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 133,
          column: 25
        }
      },
      "41": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 25
        }
      },
      "42": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 56
        }
      },
      "43": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 141,
          column: 56
        }
      },
      "44": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 147,
          column: 10
        }
      },
      "45": {
        start: {
          line: 154,
          column: 23
        },
        end: {
          line: 154,
          column: 25
        }
      },
      "46": {
        start: {
          line: 155,
          column: 28
        },
        end: {
          line: 155,
          column: 31
        }
      },
      "47": {
        start: {
          line: 157,
          column: 31
        },
        end: {
          line: 157,
          column: 88
        }
      },
      "48": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "49": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 100
        }
      },
      "50": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 30
        }
      },
      "51": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "52": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 77
        }
      },
      "53": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 32
        }
      },
      "54": {
        start: {
          line: 169,
          column: 35
        },
        end: {
          line: 169,
          column: 79
        }
      },
      "55": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "56": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 97
        }
      },
      "57": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 32
        }
      },
      "58": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 179,
          column: 69
        }
      },
      "59": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 184,
          column: 10
        }
      },
      "60": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "61": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 69
        }
      },
      "62": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 194,
          column: 30
        }
      },
      "63": {
        start: {
          line: 195,
          column: 28
        },
        end: {
          line: 195,
          column: 70
        }
      },
      "64": {
        start: {
          line: 196,
          column: 28
        },
        end: {
          line: 196,
          column: 62
        }
      },
      "65": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "66": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 79
        }
      },
      "67": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 69
        }
      },
      "68": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 28
        }
      },
      "69": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "70": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 208,
          column: 23
        }
      },
      "71": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 213,
          column: 14
        }
      },
      "72": {
        start: {
          line: 215,
          column: 30
        },
        end: {
          line: 215,
          column: 108
        }
      },
      "73": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 220,
          column: 10
        }
      },
      "74": {
        start: {
          line: 226,
          column: 19
        },
        end: {
          line: 226,
          column: 41
        }
      },
      "75": {
        start: {
          line: 227,
          column: 23
        },
        end: {
          line: 227,
          column: 77
        }
      },
      "76": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 56
        }
      },
      "77": {
        start: {
          line: 229,
          column: 24
        },
        end: {
          line: 229,
          column: 58
        }
      },
      "78": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 41
        }
      },
      "79": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 231,
          column: 43
        }
      },
      "80": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 84
        }
      },
      "81": {
        start: {
          line: 238,
          column: 22
        },
        end: {
          line: 238,
          column: 46
        }
      },
      "82": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "83": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 61
        }
      },
      "84": {
        start: {
          line: 242,
          column: 19
        },
        end: {
          line: 242,
          column: 47
        }
      },
      "85": {
        start: {
          line: 243,
          column: 24
        },
        end: {
          line: 243,
          column: 52
        }
      },
      "86": {
        start: {
          line: 244,
          column: 26
        },
        end: {
          line: 244,
          column: 34
        }
      },
      "87": {
        start: {
          line: 245,
          column: 25
        },
        end: {
          line: 245,
          column: 81
        }
      },
      "88": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 58
        }
      },
      "89": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 37
        }
      },
      "90": {
        start: {
          line: 248,
          column: 24
        },
        end: {
          line: 248,
          column: 65
        }
      },
      "91": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 44
        }
      },
      "92": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 25
        }
      },
      "93": {
        start: {
          line: 256,
          column: 22
        },
        end: {
          line: 256,
          column: 51
        }
      },
      "94": {
        start: {
          line: 257,
          column: 29
        },
        end: {
          line: 257,
          column: 52
        }
      },
      "95": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "96": {
        start: {
          line: 258,
          column: 21
        },
        end: {
          line: 258,
          column: 22
        }
      },
      "97": {
        start: {
          line: 259,
          column: 27
        },
        end: {
          line: 259,
          column: 52
        }
      },
      "98": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 58
        }
      },
      "99": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 28
        }
      },
      "100": {
        start: {
          line: 268,
          column: 25
        },
        end: {
          line: 268,
          column: 27
        }
      },
      "101": {
        start: {
          line: 269,
          column: 23
        },
        end: {
          line: 269,
          column: 55
        }
      },
      "102": {
        start: {
          line: 271,
          column: 26
        },
        end: {
          line: 271,
          column: 60
        }
      },
      "103": {
        start: {
          line: 271,
          column: 45
        },
        end: {
          line: 271,
          column: 52
        }
      },
      "104": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "105": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 45
        }
      },
      "106": {
        start: {
          line: 276,
          column: 27
        },
        end: {
          line: 276,
          column: 36
        }
      },
      "107": {
        start: {
          line: 277,
          column: 31
        },
        end: {
          line: 277,
          column: 74
        }
      },
      "108": {
        start: {
          line: 277,
          column: 50
        },
        end: {
          line: 277,
          column: 66
        }
      },
      "109": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "110": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 44
        }
      },
      "111": {
        start: {
          line: 282,
          column: 29
        },
        end: {
          line: 282,
          column: 74
        }
      },
      "112": {
        start: {
          line: 282,
          column: 48
        },
        end: {
          line: 282,
          column: 66
        }
      },
      "113": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "114": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 44
        }
      },
      "115": {
        start: {
          line: 287,
          column: 29
        },
        end: {
          line: 287,
          column: 68
        }
      },
      "116": {
        start: {
          line: 287,
          column: 48
        },
        end: {
          line: 287,
          column: 60
        }
      },
      "117": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "118": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 44
        }
      },
      "119": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 24
        }
      },
      "120": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 298,
          column: 19
        }
      },
      "121": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 19
        }
      },
      "122": {
        start: {
          line: 299,
          column: 25
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "123": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 38
        }
      },
      "124": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "125": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 43
        }
      },
      "126": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "127": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 67
        }
      },
      "128": {
        start: {
          line: 314,
          column: 13
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "129": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 62
        }
      },
      "130": {
        start: {
          line: 322,
          column: 19
        },
        end: {
          line: 322,
          column: 38
        }
      },
      "131": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "132": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 326,
          column: 13
        }
      },
      "133": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 72
        }
      },
      "134": {
        start: {
          line: 325,
          column: 42
        },
        end: {
          line: 325,
          column: 70
        }
      },
      "135": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 329,
          column: 13
        }
      },
      "136": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 86
        }
      },
      "137": {
        start: {
          line: 328,
          column: 42
        },
        end: {
          line: 328,
          column: 84
        }
      },
      "138": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "139": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 77
        }
      },
      "140": {
        start: {
          line: 331,
          column: 42
        },
        end: {
          line: 331,
          column: 75
        }
      },
      "141": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "142": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 75
        }
      },
      "143": {
        start: {
          line: 334,
          column: 42
        },
        end: {
          line: 334,
          column: 73
        }
      },
      "144": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 62
        }
      },
      "145": {
        start: {
          line: 337,
          column: 35
        },
        end: {
          line: 337,
          column: 60
        }
      },
      "146": {
        start: {
          line: 343,
          column: 31
        },
        end: {
          line: 343,
          column: 100
        }
      },
      "147": {
        start: {
          line: 343,
          column: 60
        },
        end: {
          line: 343,
          column: 92
        }
      },
      "148": {
        start: {
          line: 344,
          column: 31
        },
        end: {
          line: 344,
          column: 96
        }
      },
      "149": {
        start: {
          line: 344,
          column: 60
        },
        end: {
          line: 344,
          column: 88
        }
      },
      "150": {
        start: {
          line: 345,
          column: 29
        },
        end: {
          line: 347,
          column: 90
        }
      },
      "151": {
        start: {
          line: 347,
          column: 25
        },
        end: {
          line: 347,
          column: 89
        }
      },
      "152": {
        start: {
          line: 348,
          column: 32
        },
        end: {
          line: 349,
          column: 55
        }
      },
      "153": {
        start: {
          line: 349,
          column: 35
        },
        end: {
          line: 349,
          column: 51
        }
      },
      "154": {
        start: {
          line: 350,
          column: 32
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "155": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 376,
          column: 10
        }
      },
      "156": {
        start: {
          line: 382,
          column: 20
        },
        end: {
          line: 382,
          column: 30
        }
      },
      "157": {
        start: {
          line: 383,
          column: 30
        },
        end: {
          line: 383,
          column: 61
        }
      },
      "158": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 85
        }
      },
      "159": {
        start: {
          line: 385,
          column: 54
        },
        end: {
          line: 385,
          column: 83
        }
      },
      "160": {
        start: {
          line: 387,
          column: 28
        },
        end: {
          line: 387,
          column: 70
        }
      },
      "161": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "162": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 391,
          column: 13
        }
      },
      "163": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 47
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 29
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 41
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 57
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 84,
            column: 43
          },
          end: {
            line: 84,
            column: 44
          }
        },
        loc: {
          start: {
            line: 84,
            column: 52
          },
          end: {
            line: 92,
            column: 9
          }
        },
        line: 84
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 32
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 110
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 119,
            column: 56
          },
          end: {
            line: 119,
            column: 57
          }
        },
        loc: {
          start: {
            line: 119,
            column: 63
          },
          end: {
            line: 119,
            column: 77
          }
        },
        line: 119
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 125,
            column: 56
          },
          end: {
            line: 125,
            column: 57
          }
        },
        loc: {
          start: {
            line: 125,
            column: 63
          },
          end: {
            line: 125,
            column: 83
          }
        },
        line: 125
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 131,
            column: 55
          },
          end: {
            line: 131,
            column: 56
          }
        },
        loc: {
          start: {
            line: 131,
            column: 62
          },
          end: {
            line: 135,
            column: 9
          }
        },
        line: 131
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 53
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 153
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 31
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 190
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 22
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 225
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 31
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 237
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 32
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 255
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 44
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 267
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 271,
            column: 40
          },
          end: {
            line: 271,
            column: 41
          }
        },
        loc: {
          start: {
            line: 271,
            column: 45
          },
          end: {
            line: 271,
            column: 52
          }
        },
        line: 271
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 277,
            column: 45
          },
          end: {
            line: 277,
            column: 46
          }
        },
        loc: {
          start: {
            line: 277,
            column: 50
          },
          end: {
            line: 277,
            column: 66
          }
        },
        line: 277
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 282,
            column: 43
          },
          end: {
            line: 282,
            column: 44
          }
        },
        loc: {
          start: {
            line: 282,
            column: 48
          },
          end: {
            line: 282,
            column: 66
          }
        },
        line: 282
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 287,
            column: 43
          },
          end: {
            line: 287,
            column: 44
          }
        },
        loc: {
          start: {
            line: 287,
            column: 48
          },
          end: {
            line: 287,
            column: 60
          }
        },
        line: 287
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 53
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 296
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 25
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 321
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 325,
            column: 35
          },
          end: {
            line: 325,
            column: 36
          }
        },
        loc: {
          start: {
            line: 325,
            column: 42
          },
          end: {
            line: 325,
            column: 70
          }
        },
        line: 325
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 328,
            column: 35
          },
          end: {
            line: 328,
            column: 36
          }
        },
        loc: {
          start: {
            line: 328,
            column: 42
          },
          end: {
            line: 328,
            column: 84
          }
        },
        line: 328
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 331,
            column: 35
          },
          end: {
            line: 331,
            column: 36
          }
        },
        loc: {
          start: {
            line: 331,
            column: 42
          },
          end: {
            line: 331,
            column: 75
          }
        },
        line: 331
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 334,
            column: 35
          },
          end: {
            line: 334,
            column: 36
          }
        },
        loc: {
          start: {
            line: 334,
            column: 42
          },
          end: {
            line: 334,
            column: 73
          }
        },
        line: 334
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 337,
            column: 25
          },
          end: {
            line: 337,
            column: 26
          }
        },
        loc: {
          start: {
            line: 337,
            column: 35
          },
          end: {
            line: 337,
            column: 60
          }
        },
        line: 337
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 29
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 342
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 343,
            column: 53
          },
          end: {
            line: 343,
            column: 54
          }
        },
        loc: {
          start: {
            line: 343,
            column: 60
          },
          end: {
            line: 343,
            column: 92
          }
        },
        line: 343
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 344,
            column: 53
          },
          end: {
            line: 344,
            column: 54
          }
        },
        loc: {
          start: {
            line: 344,
            column: 60
          },
          end: {
            line: 344,
            column: 88
          }
        },
        line: 344
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 347,
            column: 18
          },
          end: {
            line: 347,
            column: 19
          }
        },
        loc: {
          start: {
            line: 347,
            column: 25
          },
          end: {
            line: 347,
            column: 89
          }
        },
        line: 347
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 349,
            column: 20
          },
          end: {
            line: 349,
            column: 21
          }
        },
        loc: {
          start: {
            line: 349,
            column: 35
          },
          end: {
            line: 349,
            column: 51
          }
        },
        line: 349
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 381,
            column: 14
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 381
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 385,
            column: 47
          },
          end: {
            line: 385,
            column: 48
          }
        },
        loc: {
          start: {
            line: 385,
            column: 54
          },
          end: {
            line: 385,
            column: 83
          }
        },
        line: 385
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 27
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 49,
            column: 29
          },
          end: {
            line: 51,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 14
          },
          end: {
            line: 50,
            column: 59
          }
        }, {
          start: {
            line: 51,
            column: 14
          },
          end: {
            line: 51,
            column: 36
          }
        }],
        line: 49
      },
      "2": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 20
          },
          end: {
            line: 74,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 20
          },
          end: {
            line: 74,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 11
          },
          end: {
            line: 98,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 31
          },
          end: {
            line: 98,
            column: 37
          }
        }, {
          start: {
            line: 98,
            column: 40
          },
          end: {
            line: 98,
            column: 45
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "9": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "10": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 133,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 133,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "11": {
        loc: {
          start: {
            line: 141,
            column: 11
          },
          end: {
            line: 141,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 38
          },
          end: {
            line: 141,
            column: 46
          }
        }, {
          start: {
            line: 141,
            column: 49
          },
          end: {
            line: 141,
            column: 54
          }
        }],
        line: 141
      },
      "12": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "13": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "14": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "15": {
        loc: {
          start: {
            line: 179,
            column: 11
          },
          end: {
            line: 179,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 49
          },
          end: {
            line: 179,
            column: 59
          }
        }, {
          start: {
            line: 179,
            column: 62
          },
          end: {
            line: 179,
            column: 67
          }
        }],
        line: 179
      },
      "16": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "17": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "18": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 197,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 197,
            column: 24
          }
        }, {
          start: {
            line: 197,
            column: 28
          },
          end: {
            line: 197,
            column: 65
          }
        }],
        line: 197
      },
      "19": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "20": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "21": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "22": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "23": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "24": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "25": {
        loc: {
          start: {
            line: 296,
            column: 30
          },
          end: {
            line: 296,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 296,
            column: 46
          },
          end: {
            line: 296,
            column: 51
          }
        }],
        line: 296
      },
      "26": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 298,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 298,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "27": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "28": {
        loc: {
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: 314,
            column: 13
          },
          end: {
            line: 316,
            column: 9
          }
        }],
        line: 311
      },
      "29": {
        loc: {
          start: {
            line: 314,
            column: 13
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 13
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "30": {
        loc: {
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "31": {
        loc: {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 326,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 326,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "32": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "33": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "34": {
        loc: {
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "35": {
        loc: {
          start: {
            line: 347,
            column: 25
          },
          end: {
            line: 347,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 25
          },
          end: {
            line: 347,
            column: 53
          }
        }, {
          start: {
            line: 347,
            column: 57
          },
          end: {
            line: 347,
            column: 89
          }
        }],
        line: 347
      },
      "36": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityValidator.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityValidator.ts"],
      sourcesContent: ["/**\n * Security Validator - Input Validation and Security Hardening\n * Implements comprehensive security measures for neural agent system\n * \n * Security Features:\n * - Input validation and sanitization\n * - SQL injection prevention\n * - Neural weight integrity validation\n * - Rate limiting and DDoS protection\n * - Audit logging and monitoring\n */\n\nimport * as crypto from 'crypto';\nimport { performance } from 'perf_hooks';\n\nexport interface SecurityConfig {\n  enableInputValidation: boolean;\n  enableRateLimiting: boolean;\n  enableAuditLogging: boolean;\n  maxInputSize: number;\n  rateLimitWindow: number; // seconds\n  rateLimitMaxRequests: number;\n  encryptionKey?: string;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  sanitizedInput?: any;\n  securityScore: number;\n}\n\nexport interface AuditLog {\n  timestamp: number;\n  action: string;\n  userId?: string;\n  agentId?: string;\n  ipAddress?: string;\n  details: any;\n  securityLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport class SecurityValidator {\n  private config: SecurityConfig;\n  private requestCounts: Map<string, { count: number; windowStart: number }> = new Map();\n  private auditLogs: AuditLog[] = [];\n  private encryptionKey: Buffer;\n\n  constructor(config: Partial<SecurityConfig> = {}) {\n    this.config = {\n      enableInputValidation: true,\n      enableRateLimiting: true,\n      enableAuditLogging: true,\n      maxInputSize: 1024 * 1024, // 1MB\n      rateLimitWindow: 60, // 1 minute\n      rateLimitMaxRequests: 100,\n      ...config\n    };\n\n    // Initialize encryption key\n    this.encryptionKey = this.config.encryptionKey \n      ? Buffer.from(this.config.encryptionKey, 'hex')\n      : crypto.randomBytes(32);\n  }\n\n  /**\n   * Validate and sanitize SQL query parameters\n   * Prevents SQL injection attacks\n   */\n  validateSQLParameters(query: string, params: any[]): ValidationResult {\n    const errors: string[] = [];\n    let securityScore = 100;\n\n    // Check for SQL injection patterns\n    const sqlInjectionPatterns = [\n      /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)/i,\n      /('|(--|\\/\\*|\\*\\/|;))/,\n      /((\\%27)|(\\')|(--)|(\\%23)|(#))/i,\n      /((\\%3D)|(=))[^\\n]*((\\%27)|(\\')|(--)|(\\%3B)|(;))/i,\n      /\\w*((\\%27)|(\\'))((\\%6F)|o|(\\%4F))((\\%72)|r|(\\%52))/i\n    ];\n\n    for (const param of params) {\n      if (typeof param === 'string') {\n        for (const pattern of sqlInjectionPatterns) {\n          if (pattern.test(param)) {\n            errors.push(`Potential SQL injection detected in parameter: ${param.substring(0, 50)}...`);\n            securityScore -= 20;\n          }\n        }\n\n        // Check for excessive length\n        if (param.length > this.config.maxInputSize) {\n          errors.push(`Parameter exceeds maximum length: ${param.length}`);\n          securityScore -= 10;\n        }\n      }\n    }\n\n    // Sanitize parameters\n    const sanitizedParams = params.map(param => {\n      if (typeof param === 'string') {\n        return param\n          .replace(/['\"]/g, '') // Remove quotes\n          .replace(/[-;]/g, '') // Remove dangerous characters\n          .substring(0, this.config.maxInputSize); // Truncate\n      }\n      return param;\n    });\n\n    this.auditLog('sql_validation', {\n      query: query.substring(0, 100),\n      paramCount: params.length,\n      securityScore,\n      errors: errors.length\n    }, errors.length > 0 ? 'high' : 'low');\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedInput: sanitizedParams,\n      securityScore\n    };\n  }\n\n  /**\n   * Validate neural network input data\n   * Prevents malicious neural inputs\n   */\n  validateNeuralInput(inputs: Float32Array | number[]): ValidationResult {\n    const errors: string[] = [];\n    let securityScore = 100;\n\n    // Check input size\n    if (inputs.length > 10000) {\n      errors.push(`Neural input too large: ${inputs.length} elements`);\n      securityScore -= 30;\n    }\n\n    // Check for NaN or Infinity values\n    const invalidValues = Array.from(inputs).filter(val => !isFinite(val));\n    if (invalidValues.length > 0) {\n      errors.push(`Invalid values detected: ${invalidValues.length} NaN/Infinity values`);\n      securityScore -= 20;\n    }\n\n    // Check for extreme values that could cause overflow\n    const extremeValues = Array.from(inputs).filter(val => Math.abs(val) > 1000);\n    if (extremeValues.length > 0) {\n      errors.push(`Extreme values detected: ${extremeValues.length} values > 1000`);\n      securityScore -= 10;\n    }\n\n    // Sanitize inputs\n    const sanitizedInputs = Array.from(inputs).map(val => {\n      if (!isFinite(val)) return 0;\n      return Math.max(-1000, Math.min(1000, val)); // Clamp to safe range\n    });\n\n    this.auditLog('neural_input_validation', {\n      inputSize: inputs.length,\n      invalidValues: invalidValues.length,\n      extremeValues: extremeValues.length,\n      securityScore\n    }, extremeValues.length > 0 ? 'medium' : 'low');\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedInput: new Float32Array(sanitizedInputs),\n      securityScore\n    };\n  }\n\n  /**\n   * Validate neural weight integrity with checksums\n   * Prevents weight tampering\n   */\n  validateNeuralWeights(weights: Buffer, expectedChecksum: string): ValidationResult {\n    const errors: string[] = [];\n    let securityScore = 100;\n\n    // Calculate actual checksum\n    const actualChecksum = crypto.createHash('sha256').update(weights).digest('hex');\n\n    // Verify integrity\n    if (actualChecksum !== expectedChecksum) {\n      errors.push('Neural weight integrity check failed - data may be corrupted or tampered');\n      securityScore = 0;\n    }\n\n    // Check weight size\n    if (weights.length > 100 * 1024 * 1024) { // 100MB limit\n      errors.push(`Neural weights too large: ${weights.length} bytes`);\n      securityScore -= 20;\n    }\n\n    // Check for patterns that might indicate malicious weights\n    const suspiciousPatterns = this.detectSuspiciousWeightPatterns(weights);\n    if (suspiciousPatterns.length > 0) {\n      errors.push(`Suspicious weight patterns detected: ${suspiciousPatterns.join(', ')}`);\n      securityScore -= 30;\n    }\n\n    this.auditLog('weight_validation', {\n      weightSize: weights.length,\n      checksumMatch: actualChecksum === expectedChecksum,\n      suspiciousPatterns: suspiciousPatterns.length,\n      securityScore\n    }, actualChecksum !== expectedChecksum ? 'critical' : 'low');\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      securityScore\n    };\n  }\n\n  /**\n   * Implement rate limiting for API endpoints\n   * Prevents DDoS and brute force attacks\n   */\n  checkRateLimit(identifier: string): ValidationResult {\n    if (!this.config.enableRateLimiting) {\n      return { isValid: true, errors: [], securityScore: 100 };\n    }\n\n    const now = Date.now();\n    const windowStart = now - (this.config.rateLimitWindow * 1000);\n    \n    const requestData = this.requestCounts.get(identifier);\n    \n    if (!requestData || requestData.windowStart < windowStart) {\n      // New window or identifier\n      this.requestCounts.set(identifier, { count: 1, windowStart: now });\n      return { isValid: true, errors: [], securityScore: 100 };\n    }\n\n    requestData.count++;\n\n    if (requestData.count > this.config.rateLimitMaxRequests) {\n      this.auditLog('rate_limit_exceeded', {\n        identifier,\n        requestCount: requestData.count,\n        timeWindow: this.config.rateLimitWindow\n      }, 'high');\n\n      return {\n        isValid: false,\n        errors: [`Rate limit exceeded: ${requestData.count} requests in ${this.config.rateLimitWindow}s`],\n        securityScore: 0\n      };\n    }\n\n    const securityScore = Math.max(0, 100 - (requestData.count / this.config.rateLimitMaxRequests) * 50);\n\n    return {\n      isValid: true,\n      errors: [],\n      securityScore\n    };\n  }\n\n  /**\n   * Encrypt sensitive data\n   */\n  encryptData(data: string): string {\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipher('aes-256-gcm', this.encryptionKey);\n    cipher.setAAD(Buffer.from('neural-agent-data'));\n    \n    let encrypted = cipher.update(data, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    const authTag = cipher.getAuthTag();\n    \n    return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;\n  }\n\n  /**\n   * Decrypt sensitive data\n   */\n  decryptData(encryptedData: string): string {\n    const parts = encryptedData.split(':');\n    if (parts.length !== 3) {\n      throw new Error('Invalid encrypted data format');\n    }\n\n    const iv = Buffer.from(parts[0], 'hex');\n    const authTag = Buffer.from(parts[1], 'hex');\n    const encrypted = parts[2];\n\n    const decipher = crypto.createDecipher('aes-256-gcm', this.encryptionKey);\n    decipher.setAAD(Buffer.from('neural-agent-data'));\n    decipher.setAuthTag(authTag);\n\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  }\n\n  /**\n   * Generate secure random numbers for neural operations\n   */\n  generateSecureRandom(count: number): Float32Array {\n    const bytes = crypto.randomBytes(count * 4);\n    const randomValues = new Float32Array(count);\n    \n    for (let i = 0; i < count; i++) {\n      const uint32 = bytes.readUInt32BE(i * 4);\n      randomValues[i] = (uint32 / 0xFFFFFFFF) - 0.5; // Convert to [-0.5, 0.5]\n    }\n    \n    return randomValues;\n  }\n\n  /**\n   * Detect suspicious patterns in neural weights\n   */\n  private detectSuspiciousWeightPatterns(weights: Buffer): string[] {\n    const patterns: string[] = [];\n    const floats = new Float32Array(weights.buffer);\n\n    // Check for all zeros (potential memory wipe)\n    const zeroCount = floats.filter(w => w === 0).length;\n    if (zeroCount > floats.length * 0.9) {\n      patterns.push('excessive_zeros');\n    }\n\n    // Check for all same values (potential memory corruption)\n    const firstValue = floats[0];\n    const sameValueCount = floats.filter(w => w === firstValue).length;\n    if (sameValueCount > floats.length * 0.8) {\n      patterns.push('uniform_values');\n    }\n\n    // Check for extreme values (potential overflow attack)\n    const extremeCount = floats.filter(w => Math.abs(w) > 1000).length;\n    if (extremeCount > floats.length * 0.1) {\n      patterns.push('extreme_values');\n    }\n\n    // Check for NaN/Infinity (potential corruption)\n    const invalidCount = floats.filter(w => !isFinite(w)).length;\n    if (invalidCount > 0) {\n      patterns.push('invalid_values');\n    }\n\n    return patterns;\n  }\n\n  /**\n   * Add entry to audit log\n   */\n  private auditLog(action: string, details: any, securityLevel: 'low' | 'medium' | 'high' | 'critical' = 'low'): void {\n    if (!this.config.enableAuditLogging) return;\n\n    const logEntry: AuditLog = {\n      timestamp: Date.now(),\n      action,\n      details,\n      securityLevel\n    };\n\n    this.auditLogs.push(logEntry);\n\n    // Keep only last 10000 entries\n    if (this.auditLogs.length > 10000) {\n      this.auditLogs.splice(0, 1000);\n    }\n\n    // Log critical events immediately\n    if (securityLevel === 'critical') {\n      console.error('\uD83D\uDEA8 CRITICAL SECURITY EVENT:', logEntry);\n    } else if (securityLevel === 'high') {\n      console.warn('\u26A0\uFE0F HIGH SECURITY EVENT:', logEntry);\n    }\n  }\n\n  /**\n   * Get audit logs with optional filtering\n   */\n  getAuditLogs(filter?: {\n    action?: string;\n    securityLevel?: string;\n    startTime?: number;\n    endTime?: number;\n  }): AuditLog[] {\n    let logs = [...this.auditLogs];\n\n    if (filter) {\n      if (filter.action) {\n        logs = logs.filter(log => log.action === filter.action);\n      }\n      if (filter.securityLevel) {\n        logs = logs.filter(log => log.securityLevel === filter.securityLevel);\n      }\n      if (filter.startTime) {\n        logs = logs.filter(log => log.timestamp >= filter.startTime!);\n      }\n      if (filter.endTime) {\n        logs = logs.filter(log => log.timestamp <= filter.endTime!);\n      }\n    }\n\n    return logs.sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  /**\n   * Generate security compliance report\n   */\n  generateSecurityReport(): {\n    summary: {\n      totalAuditEvents: number;\n      criticalEvents: number;\n      highRiskEvents: number;\n      rateLimit: { enabled: boolean; currentRequests: number };\n      encryption: { enabled: boolean; keyLength: number };\n    };\n    recommendations: string[];\n    recentAlerts: AuditLog[];\n  } {\n    const criticalEvents = this.auditLogs.filter(log => log.securityLevel === 'critical').length;\n    const highRiskEvents = this.auditLogs.filter(log => log.securityLevel === 'high').length;\n    const recentAlerts = this.getAuditLogs({\n      startTime: Date.now() - (24 * 60 * 60 * 1000) // Last 24 hours\n    }).filter(log => log.securityLevel === 'high' || log.securityLevel === 'critical');\n\n    const currentRequests = Array.from(this.requestCounts.values())\n      .reduce((sum, data) => sum + data.count, 0);\n\n    const recommendations = [\n      'Implement parameterized SQL queries to prevent injection',\n      'Enable mandatory checksum validation for neural weights',\n      'Use cryptographically secure random number generation',\n      'Implement proper WASM memory bounds checking',\n      'Add input size limits for neural operations',\n      'Enable comprehensive audit logging',\n      'Implement session timeout and authentication',\n      'Add network-level security monitoring'\n    ];\n\n    return {\n      summary: {\n        totalAuditEvents: this.auditLogs.length,\n        criticalEvents,\n        highRiskEvents,\n        rateLimit: {\n          enabled: this.config.enableRateLimiting,\n          currentRequests\n        },\n        encryption: {\n          enabled: true,\n          keyLength: this.encryptionKey.length * 8\n        }\n      },\n      recommendations,\n      recentAlerts\n    };\n  }\n\n  /**\n   * Clean up old audit logs and rate limit data\n   */\n  cleanup(): void {\n    const now = Date.now();\n    const oldestAllowed = now - (7 * 24 * 60 * 60 * 1000); // 7 days\n\n    // Clean audit logs\n    this.auditLogs = this.auditLogs.filter(log => log.timestamp > oldestAllowed);\n\n    // Clean rate limit data\n    const windowStart = now - (this.config.rateLimitWindow * 1000);\n    for (const [key, data] of this.requestCounts.entries()) {\n      if (data.windowStart < windowStart) {\n        this.requestCounts.delete(key);\n      }\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "14e5695363bd0fcb356c38681c3ab68931205dd8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_uep23md2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_uep23md2();
/**
 * Security Validator - Input Validation and Security Hardening
 * Implements comprehensive security measures for neural agent system
 *
 * Security Features:
 * - Input validation and sanitization
 * - SQL injection prevention
 * - Neural weight integrity validation
 * - Rate limiting and DDoS protection
 * - Audit logging and monitoring
 */
import * as crypto from 'crypto';
export class SecurityValidator {
  constructor(config =
  /* istanbul ignore next */
  (cov_uep23md2().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_uep23md2().f[0]++;
    cov_uep23md2().s[0]++;
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_uep23md2().s[1]++;
    Object.defineProperty(this, "requestCounts", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Map()
    });
    /* istanbul ignore next */
    cov_uep23md2().s[2]++;
    Object.defineProperty(this, "auditLogs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    /* istanbul ignore next */
    cov_uep23md2().s[3]++;
    Object.defineProperty(this, "encryptionKey", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_uep23md2().s[4]++;
    this.config = {
      enableInputValidation: true,
      enableRateLimiting: true,
      enableAuditLogging: true,
      maxInputSize: 1024 * 1024,
      // 1MB
      rateLimitWindow: 60,
      // 1 minute
      rateLimitMaxRequests: 100,
      ...config
    };
    // Initialize encryption key
    /* istanbul ignore next */
    cov_uep23md2().s[5]++;
    this.encryptionKey = this.config.encryptionKey ?
    /* istanbul ignore next */
    (cov_uep23md2().b[1][0]++, Buffer.from(this.config.encryptionKey, 'hex')) :
    /* istanbul ignore next */
    (cov_uep23md2().b[1][1]++, crypto.randomBytes(32));
  }
  /**
   * Validate and sanitize SQL query parameters
   * Prevents SQL injection attacks
   */
  validateSQLParameters(query, params) {
    /* istanbul ignore next */
    cov_uep23md2().f[1]++;
    const errors =
    /* istanbul ignore next */
    (cov_uep23md2().s[6]++, []);
    let securityScore =
    /* istanbul ignore next */
    (cov_uep23md2().s[7]++, 100);
    // Check for SQL injection patterns
    const sqlInjectionPatterns =
    /* istanbul ignore next */
    (cov_uep23md2().s[8]++, [/(\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\b)/i, /('|(--|\/\*|\*\/|;))/, /((\%27)|(\')|(--)|(\%23)|(#))/i, /((\%3D)|(=))[^\n]*((\%27)|(\')|(--)|(\%3B)|(;))/i, /\w*((\%27)|(\'))((\%6F)|o|(\%4F))((\%72)|r|(\%52))/i]);
    /* istanbul ignore next */
    cov_uep23md2().s[9]++;
    for (const param of params) {
      /* istanbul ignore next */
      cov_uep23md2().s[10]++;
      if (typeof param === 'string') {
        /* istanbul ignore next */
        cov_uep23md2().b[2][0]++;
        cov_uep23md2().s[11]++;
        for (const pattern of sqlInjectionPatterns) {
          /* istanbul ignore next */
          cov_uep23md2().s[12]++;
          if (pattern.test(param)) {
            /* istanbul ignore next */
            cov_uep23md2().b[3][0]++;
            cov_uep23md2().s[13]++;
            errors.push(`Potential SQL injection detected in parameter: ${param.substring(0, 50)}...`);
            /* istanbul ignore next */
            cov_uep23md2().s[14]++;
            securityScore -= 20;
          } else
          /* istanbul ignore next */
          {
            cov_uep23md2().b[3][1]++;
          }
        }
        // Check for excessive length
        /* istanbul ignore next */
        cov_uep23md2().s[15]++;
        if (param.length > this.config.maxInputSize) {
          /* istanbul ignore next */
          cov_uep23md2().b[4][0]++;
          cov_uep23md2().s[16]++;
          errors.push(`Parameter exceeds maximum length: ${param.length}`);
          /* istanbul ignore next */
          cov_uep23md2().s[17]++;
          securityScore -= 10;
        } else
        /* istanbul ignore next */
        {
          cov_uep23md2().b[4][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[2][1]++;
      }
    }
    // Sanitize parameters
    const sanitizedParams =
    /* istanbul ignore next */
    (cov_uep23md2().s[18]++, params.map(param => {
      /* istanbul ignore next */
      cov_uep23md2().f[2]++;
      cov_uep23md2().s[19]++;
      if (typeof param === 'string') {
        /* istanbul ignore next */
        cov_uep23md2().b[5][0]++;
        cov_uep23md2().s[20]++;
        return param.replace(/['"]/g, '') // Remove quotes
        .replace(/[-;]/g, '') // Remove dangerous characters
        .substring(0, this.config.maxInputSize); // Truncate
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[5][1]++;
      }
      cov_uep23md2().s[21]++;
      return param;
    }));
    /* istanbul ignore next */
    cov_uep23md2().s[22]++;
    this.auditLog('sql_validation', {
      query: query.substring(0, 100),
      paramCount: params.length,
      securityScore,
      errors: errors.length
    }, errors.length > 0 ?
    /* istanbul ignore next */
    (cov_uep23md2().b[6][0]++, 'high') :
    /* istanbul ignore next */
    (cov_uep23md2().b[6][1]++, 'low'));
    /* istanbul ignore next */
    cov_uep23md2().s[23]++;
    return {
      isValid: errors.length === 0,
      errors,
      sanitizedInput: sanitizedParams,
      securityScore
    };
  }
  /**
   * Validate neural network input data
   * Prevents malicious neural inputs
   */
  validateNeuralInput(inputs) {
    /* istanbul ignore next */
    cov_uep23md2().f[3]++;
    const errors =
    /* istanbul ignore next */
    (cov_uep23md2().s[24]++, []);
    let securityScore =
    /* istanbul ignore next */
    (cov_uep23md2().s[25]++, 100);
    // Check input size
    /* istanbul ignore next */
    cov_uep23md2().s[26]++;
    if (inputs.length > 10000) {
      /* istanbul ignore next */
      cov_uep23md2().b[7][0]++;
      cov_uep23md2().s[27]++;
      errors.push(`Neural input too large: ${inputs.length} elements`);
      /* istanbul ignore next */
      cov_uep23md2().s[28]++;
      securityScore -= 30;
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[7][1]++;
    }
    // Check for NaN or Infinity values
    const invalidValues =
    /* istanbul ignore next */
    (cov_uep23md2().s[29]++, Array.from(inputs).filter(val => {
      /* istanbul ignore next */
      cov_uep23md2().f[4]++;
      cov_uep23md2().s[30]++;
      return !isFinite(val);
    }));
    /* istanbul ignore next */
    cov_uep23md2().s[31]++;
    if (invalidValues.length > 0) {
      /* istanbul ignore next */
      cov_uep23md2().b[8][0]++;
      cov_uep23md2().s[32]++;
      errors.push(`Invalid values detected: ${invalidValues.length} NaN/Infinity values`);
      /* istanbul ignore next */
      cov_uep23md2().s[33]++;
      securityScore -= 20;
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[8][1]++;
    }
    // Check for extreme values that could cause overflow
    const extremeValues =
    /* istanbul ignore next */
    (cov_uep23md2().s[34]++, Array.from(inputs).filter(val => {
      /* istanbul ignore next */
      cov_uep23md2().f[5]++;
      cov_uep23md2().s[35]++;
      return Math.abs(val) > 1000;
    }));
    /* istanbul ignore next */
    cov_uep23md2().s[36]++;
    if (extremeValues.length > 0) {
      /* istanbul ignore next */
      cov_uep23md2().b[9][0]++;
      cov_uep23md2().s[37]++;
      errors.push(`Extreme values detected: ${extremeValues.length} values > 1000`);
      /* istanbul ignore next */
      cov_uep23md2().s[38]++;
      securityScore -= 10;
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[9][1]++;
    }
    // Sanitize inputs
    const sanitizedInputs =
    /* istanbul ignore next */
    (cov_uep23md2().s[39]++, Array.from(inputs).map(val => {
      /* istanbul ignore next */
      cov_uep23md2().f[6]++;
      cov_uep23md2().s[40]++;
      if (!isFinite(val)) {
        /* istanbul ignore next */
        cov_uep23md2().b[10][0]++;
        cov_uep23md2().s[41]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[10][1]++;
      }
      cov_uep23md2().s[42]++;
      return Math.max(-1000, Math.min(1000, val)); // Clamp to safe range
    }));
    /* istanbul ignore next */
    cov_uep23md2().s[43]++;
    this.auditLog('neural_input_validation', {
      inputSize: inputs.length,
      invalidValues: invalidValues.length,
      extremeValues: extremeValues.length,
      securityScore
    }, extremeValues.length > 0 ?
    /* istanbul ignore next */
    (cov_uep23md2().b[11][0]++, 'medium') :
    /* istanbul ignore next */
    (cov_uep23md2().b[11][1]++, 'low'));
    /* istanbul ignore next */
    cov_uep23md2().s[44]++;
    return {
      isValid: errors.length === 0,
      errors,
      sanitizedInput: new Float32Array(sanitizedInputs),
      securityScore
    };
  }
  /**
   * Validate neural weight integrity with checksums
   * Prevents weight tampering
   */
  validateNeuralWeights(weights, expectedChecksum) {
    /* istanbul ignore next */
    cov_uep23md2().f[7]++;
    const errors =
    /* istanbul ignore next */
    (cov_uep23md2().s[45]++, []);
    let securityScore =
    /* istanbul ignore next */
    (cov_uep23md2().s[46]++, 100);
    // Calculate actual checksum
    const actualChecksum =
    /* istanbul ignore next */
    (cov_uep23md2().s[47]++, crypto.createHash('sha256').update(weights).digest('hex'));
    // Verify integrity
    /* istanbul ignore next */
    cov_uep23md2().s[48]++;
    if (actualChecksum !== expectedChecksum) {
      /* istanbul ignore next */
      cov_uep23md2().b[12][0]++;
      cov_uep23md2().s[49]++;
      errors.push('Neural weight integrity check failed - data may be corrupted or tampered');
      /* istanbul ignore next */
      cov_uep23md2().s[50]++;
      securityScore = 0;
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[12][1]++;
    }
    // Check weight size
    cov_uep23md2().s[51]++;
    if (weights.length > 100 * 1024 * 1024) {
      /* istanbul ignore next */
      cov_uep23md2().b[13][0]++;
      cov_uep23md2().s[52]++;
      // 100MB limit
      errors.push(`Neural weights too large: ${weights.length} bytes`);
      /* istanbul ignore next */
      cov_uep23md2().s[53]++;
      securityScore -= 20;
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[13][1]++;
    }
    // Check for patterns that might indicate malicious weights
    const suspiciousPatterns =
    /* istanbul ignore next */
    (cov_uep23md2().s[54]++, this.detectSuspiciousWeightPatterns(weights));
    /* istanbul ignore next */
    cov_uep23md2().s[55]++;
    if (suspiciousPatterns.length > 0) {
      /* istanbul ignore next */
      cov_uep23md2().b[14][0]++;
      cov_uep23md2().s[56]++;
      errors.push(`Suspicious weight patterns detected: ${suspiciousPatterns.join(', ')}`);
      /* istanbul ignore next */
      cov_uep23md2().s[57]++;
      securityScore -= 30;
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[14][1]++;
    }
    cov_uep23md2().s[58]++;
    this.auditLog('weight_validation', {
      weightSize: weights.length,
      checksumMatch: actualChecksum === expectedChecksum,
      suspiciousPatterns: suspiciousPatterns.length,
      securityScore
    }, actualChecksum !== expectedChecksum ?
    /* istanbul ignore next */
    (cov_uep23md2().b[15][0]++, 'critical') :
    /* istanbul ignore next */
    (cov_uep23md2().b[15][1]++, 'low'));
    /* istanbul ignore next */
    cov_uep23md2().s[59]++;
    return {
      isValid: errors.length === 0,
      errors,
      securityScore
    };
  }
  /**
   * Implement rate limiting for API endpoints
   * Prevents DDoS and brute force attacks
   */
  checkRateLimit(identifier) {
    /* istanbul ignore next */
    cov_uep23md2().f[8]++;
    cov_uep23md2().s[60]++;
    if (!this.config.enableRateLimiting) {
      /* istanbul ignore next */
      cov_uep23md2().b[16][0]++;
      cov_uep23md2().s[61]++;
      return {
        isValid: true,
        errors: [],
        securityScore: 100
      };
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[16][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_uep23md2().s[62]++, Date.now());
    const windowStart =
    /* istanbul ignore next */
    (cov_uep23md2().s[63]++, now - this.config.rateLimitWindow * 1000);
    const requestData =
    /* istanbul ignore next */
    (cov_uep23md2().s[64]++, this.requestCounts.get(identifier));
    /* istanbul ignore next */
    cov_uep23md2().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_uep23md2().b[18][0]++, !requestData) ||
    /* istanbul ignore next */
    (cov_uep23md2().b[18][1]++, requestData.windowStart < windowStart)) {
      /* istanbul ignore next */
      cov_uep23md2().b[17][0]++;
      cov_uep23md2().s[66]++;
      // New window or identifier
      this.requestCounts.set(identifier, {
        count: 1,
        windowStart: now
      });
      /* istanbul ignore next */
      cov_uep23md2().s[67]++;
      return {
        isValid: true,
        errors: [],
        securityScore: 100
      };
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[17][1]++;
    }
    cov_uep23md2().s[68]++;
    requestData.count++;
    /* istanbul ignore next */
    cov_uep23md2().s[69]++;
    if (requestData.count > this.config.rateLimitMaxRequests) {
      /* istanbul ignore next */
      cov_uep23md2().b[19][0]++;
      cov_uep23md2().s[70]++;
      this.auditLog('rate_limit_exceeded', {
        identifier,
        requestCount: requestData.count,
        timeWindow: this.config.rateLimitWindow
      }, 'high');
      /* istanbul ignore next */
      cov_uep23md2().s[71]++;
      return {
        isValid: false,
        errors: [`Rate limit exceeded: ${requestData.count} requests in ${this.config.rateLimitWindow}s`],
        securityScore: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[19][1]++;
    }
    const securityScore =
    /* istanbul ignore next */
    (cov_uep23md2().s[72]++, Math.max(0, 100 - requestData.count / this.config.rateLimitMaxRequests * 50));
    /* istanbul ignore next */
    cov_uep23md2().s[73]++;
    return {
      isValid: true,
      errors: [],
      securityScore
    };
  }
  /**
   * Encrypt sensitive data
   */
  encryptData(data) {
    /* istanbul ignore next */
    cov_uep23md2().f[9]++;
    const iv =
    /* istanbul ignore next */
    (cov_uep23md2().s[74]++, crypto.randomBytes(16));
    const cipher =
    /* istanbul ignore next */
    (cov_uep23md2().s[75]++, crypto.createCipher('aes-256-gcm', this.encryptionKey));
    /* istanbul ignore next */
    cov_uep23md2().s[76]++;
    cipher.setAAD(Buffer.from('neural-agent-data'));
    let encrypted =
    /* istanbul ignore next */
    (cov_uep23md2().s[77]++, cipher.update(data, 'utf8', 'hex'));
    /* istanbul ignore next */
    cov_uep23md2().s[78]++;
    encrypted += cipher.final('hex');
    const authTag =
    /* istanbul ignore next */
    (cov_uep23md2().s[79]++, cipher.getAuthTag());
    /* istanbul ignore next */
    cov_uep23md2().s[80]++;
    return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;
  }
  /**
   * Decrypt sensitive data
   */
  decryptData(encryptedData) {
    /* istanbul ignore next */
    cov_uep23md2().f[10]++;
    const parts =
    /* istanbul ignore next */
    (cov_uep23md2().s[81]++, encryptedData.split(':'));
    /* istanbul ignore next */
    cov_uep23md2().s[82]++;
    if (parts.length !== 3) {
      /* istanbul ignore next */
      cov_uep23md2().b[20][0]++;
      cov_uep23md2().s[83]++;
      throw new Error('Invalid encrypted data format');
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[20][1]++;
    }
    const iv =
    /* istanbul ignore next */
    (cov_uep23md2().s[84]++, Buffer.from(parts[0], 'hex'));
    const authTag =
    /* istanbul ignore next */
    (cov_uep23md2().s[85]++, Buffer.from(parts[1], 'hex'));
    const encrypted =
    /* istanbul ignore next */
    (cov_uep23md2().s[86]++, parts[2]);
    const decipher =
    /* istanbul ignore next */
    (cov_uep23md2().s[87]++, crypto.createDecipher('aes-256-gcm', this.encryptionKey));
    /* istanbul ignore next */
    cov_uep23md2().s[88]++;
    decipher.setAAD(Buffer.from('neural-agent-data'));
    /* istanbul ignore next */
    cov_uep23md2().s[89]++;
    decipher.setAuthTag(authTag);
    let decrypted =
    /* istanbul ignore next */
    (cov_uep23md2().s[90]++, decipher.update(encrypted, 'hex', 'utf8'));
    /* istanbul ignore next */
    cov_uep23md2().s[91]++;
    decrypted += decipher.final('utf8');
    /* istanbul ignore next */
    cov_uep23md2().s[92]++;
    return decrypted;
  }
  /**
   * Generate secure random numbers for neural operations
   */
  generateSecureRandom(count) {
    /* istanbul ignore next */
    cov_uep23md2().f[11]++;
    const bytes =
    /* istanbul ignore next */
    (cov_uep23md2().s[93]++, crypto.randomBytes(count * 4));
    const randomValues =
    /* istanbul ignore next */
    (cov_uep23md2().s[94]++, new Float32Array(count));
    /* istanbul ignore next */
    cov_uep23md2().s[95]++;
    for (let i =
    /* istanbul ignore next */
    (cov_uep23md2().s[96]++, 0); i < count; i++) {
      const uint32 =
      /* istanbul ignore next */
      (cov_uep23md2().s[97]++, bytes.readUInt32BE(i * 4));
      /* istanbul ignore next */
      cov_uep23md2().s[98]++;
      randomValues[i] = uint32 / 0xFFFFFFFF - 0.5; // Convert to [-0.5, 0.5]
    }
    /* istanbul ignore next */
    cov_uep23md2().s[99]++;
    return randomValues;
  }
  /**
   * Detect suspicious patterns in neural weights
   */
  detectSuspiciousWeightPatterns(weights) {
    /* istanbul ignore next */
    cov_uep23md2().f[12]++;
    const patterns =
    /* istanbul ignore next */
    (cov_uep23md2().s[100]++, []);
    const floats =
    /* istanbul ignore next */
    (cov_uep23md2().s[101]++, new Float32Array(weights.buffer));
    // Check for all zeros (potential memory wipe)
    const zeroCount =
    /* istanbul ignore next */
    (cov_uep23md2().s[102]++, floats.filter(w => {
      /* istanbul ignore next */
      cov_uep23md2().f[13]++;
      cov_uep23md2().s[103]++;
      return w === 0;
    }).length);
    /* istanbul ignore next */
    cov_uep23md2().s[104]++;
    if (zeroCount > floats.length * 0.9) {
      /* istanbul ignore next */
      cov_uep23md2().b[21][0]++;
      cov_uep23md2().s[105]++;
      patterns.push('excessive_zeros');
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[21][1]++;
    }
    // Check for all same values (potential memory corruption)
    const firstValue =
    /* istanbul ignore next */
    (cov_uep23md2().s[106]++, floats[0]);
    const sameValueCount =
    /* istanbul ignore next */
    (cov_uep23md2().s[107]++, floats.filter(w => {
      /* istanbul ignore next */
      cov_uep23md2().f[14]++;
      cov_uep23md2().s[108]++;
      return w === firstValue;
    }).length);
    /* istanbul ignore next */
    cov_uep23md2().s[109]++;
    if (sameValueCount > floats.length * 0.8) {
      /* istanbul ignore next */
      cov_uep23md2().b[22][0]++;
      cov_uep23md2().s[110]++;
      patterns.push('uniform_values');
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[22][1]++;
    }
    // Check for extreme values (potential overflow attack)
    const extremeCount =
    /* istanbul ignore next */
    (cov_uep23md2().s[111]++, floats.filter(w => {
      /* istanbul ignore next */
      cov_uep23md2().f[15]++;
      cov_uep23md2().s[112]++;
      return Math.abs(w) > 1000;
    }).length);
    /* istanbul ignore next */
    cov_uep23md2().s[113]++;
    if (extremeCount > floats.length * 0.1) {
      /* istanbul ignore next */
      cov_uep23md2().b[23][0]++;
      cov_uep23md2().s[114]++;
      patterns.push('extreme_values');
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[23][1]++;
    }
    // Check for NaN/Infinity (potential corruption)
    const invalidCount =
    /* istanbul ignore next */
    (cov_uep23md2().s[115]++, floats.filter(w => {
      /* istanbul ignore next */
      cov_uep23md2().f[16]++;
      cov_uep23md2().s[116]++;
      return !isFinite(w);
    }).length);
    /* istanbul ignore next */
    cov_uep23md2().s[117]++;
    if (invalidCount > 0) {
      /* istanbul ignore next */
      cov_uep23md2().b[24][0]++;
      cov_uep23md2().s[118]++;
      patterns.push('invalid_values');
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[24][1]++;
    }
    cov_uep23md2().s[119]++;
    return patterns;
  }
  /**
   * Add entry to audit log
   */
  auditLog(action, details, securityLevel =
  /* istanbul ignore next */
  (cov_uep23md2().b[25][0]++, 'low')) {
    /* istanbul ignore next */
    cov_uep23md2().f[17]++;
    cov_uep23md2().s[120]++;
    if (!this.config.enableAuditLogging) {
      /* istanbul ignore next */
      cov_uep23md2().b[26][0]++;
      cov_uep23md2().s[121]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[26][1]++;
    }
    const logEntry =
    /* istanbul ignore next */
    (cov_uep23md2().s[122]++, {
      timestamp: Date.now(),
      action,
      details,
      securityLevel
    });
    /* istanbul ignore next */
    cov_uep23md2().s[123]++;
    this.auditLogs.push(logEntry);
    // Keep only last 10000 entries
    /* istanbul ignore next */
    cov_uep23md2().s[124]++;
    if (this.auditLogs.length > 10000) {
      /* istanbul ignore next */
      cov_uep23md2().b[27][0]++;
      cov_uep23md2().s[125]++;
      this.auditLogs.splice(0, 1000);
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[27][1]++;
    }
    // Log critical events immediately
    cov_uep23md2().s[126]++;
    if (securityLevel === 'critical') {
      /* istanbul ignore next */
      cov_uep23md2().b[28][0]++;
      cov_uep23md2().s[127]++;
      console.error('🚨 CRITICAL SECURITY EVENT:', logEntry);
    } else {
      /* istanbul ignore next */
      cov_uep23md2().b[28][1]++;
      cov_uep23md2().s[128]++;
      if (securityLevel === 'high') {
        /* istanbul ignore next */
        cov_uep23md2().b[29][0]++;
        cov_uep23md2().s[129]++;
        console.warn('⚠️ HIGH SECURITY EVENT:', logEntry);
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[29][1]++;
      }
    }
  }
  /**
   * Get audit logs with optional filtering
   */
  getAuditLogs(filter) {
    /* istanbul ignore next */
    cov_uep23md2().f[18]++;
    let logs =
    /* istanbul ignore next */
    (cov_uep23md2().s[130]++, [...this.auditLogs]);
    /* istanbul ignore next */
    cov_uep23md2().s[131]++;
    if (filter) {
      /* istanbul ignore next */
      cov_uep23md2().b[30][0]++;
      cov_uep23md2().s[132]++;
      if (filter.action) {
        /* istanbul ignore next */
        cov_uep23md2().b[31][0]++;
        cov_uep23md2().s[133]++;
        logs = logs.filter(log => {
          /* istanbul ignore next */
          cov_uep23md2().f[19]++;
          cov_uep23md2().s[134]++;
          return log.action === filter.action;
        });
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[31][1]++;
      }
      cov_uep23md2().s[135]++;
      if (filter.securityLevel) {
        /* istanbul ignore next */
        cov_uep23md2().b[32][0]++;
        cov_uep23md2().s[136]++;
        logs = logs.filter(log => {
          /* istanbul ignore next */
          cov_uep23md2().f[20]++;
          cov_uep23md2().s[137]++;
          return log.securityLevel === filter.securityLevel;
        });
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[32][1]++;
      }
      cov_uep23md2().s[138]++;
      if (filter.startTime) {
        /* istanbul ignore next */
        cov_uep23md2().b[33][0]++;
        cov_uep23md2().s[139]++;
        logs = logs.filter(log => {
          /* istanbul ignore next */
          cov_uep23md2().f[21]++;
          cov_uep23md2().s[140]++;
          return log.timestamp >= filter.startTime;
        });
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[33][1]++;
      }
      cov_uep23md2().s[141]++;
      if (filter.endTime) {
        /* istanbul ignore next */
        cov_uep23md2().b[34][0]++;
        cov_uep23md2().s[142]++;
        logs = logs.filter(log => {
          /* istanbul ignore next */
          cov_uep23md2().f[22]++;
          cov_uep23md2().s[143]++;
          return log.timestamp <= filter.endTime;
        });
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[34][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_uep23md2().b[30][1]++;
    }
    cov_uep23md2().s[144]++;
    return logs.sort((a, b) => {
      /* istanbul ignore next */
      cov_uep23md2().f[23]++;
      cov_uep23md2().s[145]++;
      return b.timestamp - a.timestamp;
    });
  }
  /**
   * Generate security compliance report
   */
  generateSecurityReport() {
    /* istanbul ignore next */
    cov_uep23md2().f[24]++;
    const criticalEvents =
    /* istanbul ignore next */
    (cov_uep23md2().s[146]++, this.auditLogs.filter(log => {
      /* istanbul ignore next */
      cov_uep23md2().f[25]++;
      cov_uep23md2().s[147]++;
      return log.securityLevel === 'critical';
    }).length);
    const highRiskEvents =
    /* istanbul ignore next */
    (cov_uep23md2().s[148]++, this.auditLogs.filter(log => {
      /* istanbul ignore next */
      cov_uep23md2().f[26]++;
      cov_uep23md2().s[149]++;
      return log.securityLevel === 'high';
    }).length);
    const recentAlerts =
    /* istanbul ignore next */
    (cov_uep23md2().s[150]++, this.getAuditLogs({
      startTime: Date.now() - 24 * 60 * 60 * 1000 // Last 24 hours
    }).filter(log => {
      /* istanbul ignore next */
      cov_uep23md2().f[27]++;
      cov_uep23md2().s[151]++;
      return /* istanbul ignore next */(cov_uep23md2().b[35][0]++, log.securityLevel === 'high') ||
      /* istanbul ignore next */
      (cov_uep23md2().b[35][1]++, log.securityLevel === 'critical');
    }));
    const currentRequests =
    /* istanbul ignore next */
    (cov_uep23md2().s[152]++, Array.from(this.requestCounts.values()).reduce((sum, data) => {
      /* istanbul ignore next */
      cov_uep23md2().f[28]++;
      cov_uep23md2().s[153]++;
      return sum + data.count;
    }, 0));
    const recommendations =
    /* istanbul ignore next */
    (cov_uep23md2().s[154]++, ['Implement parameterized SQL queries to prevent injection', 'Enable mandatory checksum validation for neural weights', 'Use cryptographically secure random number generation', 'Implement proper WASM memory bounds checking', 'Add input size limits for neural operations', 'Enable comprehensive audit logging', 'Implement session timeout and authentication', 'Add network-level security monitoring']);
    /* istanbul ignore next */
    cov_uep23md2().s[155]++;
    return {
      summary: {
        totalAuditEvents: this.auditLogs.length,
        criticalEvents,
        highRiskEvents,
        rateLimit: {
          enabled: this.config.enableRateLimiting,
          currentRequests
        },
        encryption: {
          enabled: true,
          keyLength: this.encryptionKey.length * 8
        }
      },
      recommendations,
      recentAlerts
    };
  }
  /**
   * Clean up old audit logs and rate limit data
   */
  cleanup() {
    /* istanbul ignore next */
    cov_uep23md2().f[29]++;
    const now =
    /* istanbul ignore next */
    (cov_uep23md2().s[156]++, Date.now());
    const oldestAllowed =
    /* istanbul ignore next */
    (cov_uep23md2().s[157]++, now - 7 * 24 * 60 * 60 * 1000); // 7 days
    // Clean audit logs
    /* istanbul ignore next */
    cov_uep23md2().s[158]++;
    this.auditLogs = this.auditLogs.filter(log => {
      /* istanbul ignore next */
      cov_uep23md2().f[30]++;
      cov_uep23md2().s[159]++;
      return log.timestamp > oldestAllowed;
    });
    // Clean rate limit data
    const windowStart =
    /* istanbul ignore next */
    (cov_uep23md2().s[160]++, now - this.config.rateLimitWindow * 1000);
    /* istanbul ignore next */
    cov_uep23md2().s[161]++;
    for (const [key, data] of this.requestCounts.entries()) {
      /* istanbul ignore next */
      cov_uep23md2().s[162]++;
      if (data.windowStart < windowStart) {
        /* istanbul ignore next */
        cov_uep23md2().b[36][0]++;
        cov_uep23md2().s[163]++;
        this.requestCounts.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_uep23md2().b[36][1]++;
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,