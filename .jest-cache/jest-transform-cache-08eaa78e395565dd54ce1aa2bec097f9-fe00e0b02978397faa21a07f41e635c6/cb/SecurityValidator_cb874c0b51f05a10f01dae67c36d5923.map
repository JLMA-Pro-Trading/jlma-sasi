{"version":3,"names":["crypto","SecurityValidator","constructor","config","cov_uep23md2","b","f","s","Object","defineProperty","Map","enableInputValidation","enableRateLimiting","enableAuditLogging","maxInputSize","rateLimitWindow","rateLimitMaxRequests","encryptionKey","Buffer","from","randomBytes","validateSQLParameters","query","params","errors","securityScore","sqlInjectionPatterns","param","pattern","test","push","substring","length","sanitizedParams","map","replace","auditLog","paramCount","isValid","sanitizedInput","validateNeuralInput","inputs","invalidValues","Array","filter","val","isFinite","extremeValues","Math","abs","sanitizedInputs","max","min","inputSize","Float32Array","validateNeuralWeights","weights","expectedChecksum","actualChecksum","createHash","update","digest","suspiciousPatterns","detectSuspiciousWeightPatterns","join","weightSize","checksumMatch","checkRateLimit","identifier","now","Date","windowStart","requestData","requestCounts","get","set","count","requestCount","timeWindow","encryptData","data","iv","cipher","createCipher","setAAD","encrypted","final","authTag","getAuthTag","toString","decryptData","encryptedData","parts","split","Error","decipher","createDecipher","setAuthTag","decrypted","generateSecureRandom","bytes","randomValues","i","uint32","readUInt32BE","patterns","floats","buffer","zeroCount","w","firstValue","sameValueCount","extremeCount","invalidCount","action","details","securityLevel","logEntry","timestamp","auditLogs","splice","console","error","warn","getAuditLogs","logs","log","startTime","endTime","sort","a","generateSecurityReport","criticalEvents","highRiskEvents","recentAlerts","currentRequests","values","reduce","sum","recommendations","summary","totalAuditEvents","rateLimit","enabled","encryption","keyLength","cleanup","oldestAllowed","key","entries","delete"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityValidator.ts"],"sourcesContent":["/**\n * Security Validator - Input Validation and Security Hardening\n * Implements comprehensive security measures for neural agent system\n * \n * Security Features:\n * - Input validation and sanitization\n * - SQL injection prevention\n * - Neural weight integrity validation\n * - Rate limiting and DDoS protection\n * - Audit logging and monitoring\n */\n\nimport * as crypto from 'crypto';\nimport { performance } from 'perf_hooks';\n\nexport interface SecurityConfig {\n  enableInputValidation: boolean;\n  enableRateLimiting: boolean;\n  enableAuditLogging: boolean;\n  maxInputSize: number;\n  rateLimitWindow: number; // seconds\n  rateLimitMaxRequests: number;\n  encryptionKey?: string;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  sanitizedInput?: any;\n  securityScore: number;\n}\n\nexport interface AuditLog {\n  timestamp: number;\n  action: string;\n  userId?: string;\n  agentId?: string;\n  ipAddress?: string;\n  details: any;\n  securityLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport class SecurityValidator {\n  private config: SecurityConfig;\n  private requestCounts: Map<string, { count: number; windowStart: number }> = new Map();\n  private auditLogs: AuditLog[] = [];\n  private encryptionKey: Buffer;\n\n  constructor(config: Partial<SecurityConfig> = {}) {\n    this.config = {\n      enableInputValidation: true,\n      enableRateLimiting: true,\n      enableAuditLogging: true,\n      maxInputSize: 1024 * 1024, // 1MB\n      rateLimitWindow: 60, // 1 minute\n      rateLimitMaxRequests: 100,\n      ...config\n    };\n\n    // Initialize encryption key\n    this.encryptionKey = this.config.encryptionKey \n      ? Buffer.from(this.config.encryptionKey, 'hex')\n      : crypto.randomBytes(32);\n  }\n\n  /**\n   * Validate and sanitize SQL query parameters\n   * Prevents SQL injection attacks\n   */\n  validateSQLParameters(query: string, params: any[]): ValidationResult {\n    const errors: string[] = [];\n    let securityScore = 100;\n\n    // Check for SQL injection patterns\n    const sqlInjectionPatterns = [\n      /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)/i,\n      /('|(--|\\/\\*|\\*\\/|;))/,\n      /((\\%27)|(\\')|(--)|(\\%23)|(#))/i,\n      /((\\%3D)|(=))[^\\n]*((\\%27)|(\\')|(--)|(\\%3B)|(;))/i,\n      /\\w*((\\%27)|(\\'))((\\%6F)|o|(\\%4F))((\\%72)|r|(\\%52))/i\n    ];\n\n    for (const param of params) {\n      if (typeof param === 'string') {\n        for (const pattern of sqlInjectionPatterns) {\n          if (pattern.test(param)) {\n            errors.push(`Potential SQL injection detected in parameter: ${param.substring(0, 50)}...`);\n            securityScore -= 20;\n          }\n        }\n\n        // Check for excessive length\n        if (param.length > this.config.maxInputSize) {\n          errors.push(`Parameter exceeds maximum length: ${param.length}`);\n          securityScore -= 10;\n        }\n      }\n    }\n\n    // Sanitize parameters\n    const sanitizedParams = params.map(param => {\n      if (typeof param === 'string') {\n        return param\n          .replace(/['\"]/g, '') // Remove quotes\n          .replace(/[-;]/g, '') // Remove dangerous characters\n          .substring(0, this.config.maxInputSize); // Truncate\n      }\n      return param;\n    });\n\n    this.auditLog('sql_validation', {\n      query: query.substring(0, 100),\n      paramCount: params.length,\n      securityScore,\n      errors: errors.length\n    }, errors.length > 0 ? 'high' : 'low');\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedInput: sanitizedParams,\n      securityScore\n    };\n  }\n\n  /**\n   * Validate neural network input data\n   * Prevents malicious neural inputs\n   */\n  validateNeuralInput(inputs: Float32Array | number[]): ValidationResult {\n    const errors: string[] = [];\n    let securityScore = 100;\n\n    // Check input size\n    if (inputs.length > 10000) {\n      errors.push(`Neural input too large: ${inputs.length} elements`);\n      securityScore -= 30;\n    }\n\n    // Check for NaN or Infinity values\n    const invalidValues = Array.from(inputs).filter(val => !isFinite(val));\n    if (invalidValues.length > 0) {\n      errors.push(`Invalid values detected: ${invalidValues.length} NaN/Infinity values`);\n      securityScore -= 20;\n    }\n\n    // Check for extreme values that could cause overflow\n    const extremeValues = Array.from(inputs).filter(val => Math.abs(val) > 1000);\n    if (extremeValues.length > 0) {\n      errors.push(`Extreme values detected: ${extremeValues.length} values > 1000`);\n      securityScore -= 10;\n    }\n\n    // Sanitize inputs\n    const sanitizedInputs = Array.from(inputs).map(val => {\n      if (!isFinite(val)) return 0;\n      return Math.max(-1000, Math.min(1000, val)); // Clamp to safe range\n    });\n\n    this.auditLog('neural_input_validation', {\n      inputSize: inputs.length,\n      invalidValues: invalidValues.length,\n      extremeValues: extremeValues.length,\n      securityScore\n    }, extremeValues.length > 0 ? 'medium' : 'low');\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedInput: new Float32Array(sanitizedInputs),\n      securityScore\n    };\n  }\n\n  /**\n   * Validate neural weight integrity with checksums\n   * Prevents weight tampering\n   */\n  validateNeuralWeights(weights: Buffer, expectedChecksum: string): ValidationResult {\n    const errors: string[] = [];\n    let securityScore = 100;\n\n    // Calculate actual checksum\n    const actualChecksum = crypto.createHash('sha256').update(weights).digest('hex');\n\n    // Verify integrity\n    if (actualChecksum !== expectedChecksum) {\n      errors.push('Neural weight integrity check failed - data may be corrupted or tampered');\n      securityScore = 0;\n    }\n\n    // Check weight size\n    if (weights.length > 100 * 1024 * 1024) { // 100MB limit\n      errors.push(`Neural weights too large: ${weights.length} bytes`);\n      securityScore -= 20;\n    }\n\n    // Check for patterns that might indicate malicious weights\n    const suspiciousPatterns = this.detectSuspiciousWeightPatterns(weights);\n    if (suspiciousPatterns.length > 0) {\n      errors.push(`Suspicious weight patterns detected: ${suspiciousPatterns.join(', ')}`);\n      securityScore -= 30;\n    }\n\n    this.auditLog('weight_validation', {\n      weightSize: weights.length,\n      checksumMatch: actualChecksum === expectedChecksum,\n      suspiciousPatterns: suspiciousPatterns.length,\n      securityScore\n    }, actualChecksum !== expectedChecksum ? 'critical' : 'low');\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      securityScore\n    };\n  }\n\n  /**\n   * Implement rate limiting for API endpoints\n   * Prevents DDoS and brute force attacks\n   */\n  checkRateLimit(identifier: string): ValidationResult {\n    if (!this.config.enableRateLimiting) {\n      return { isValid: true, errors: [], securityScore: 100 };\n    }\n\n    const now = Date.now();\n    const windowStart = now - (this.config.rateLimitWindow * 1000);\n    \n    const requestData = this.requestCounts.get(identifier);\n    \n    if (!requestData || requestData.windowStart < windowStart) {\n      // New window or identifier\n      this.requestCounts.set(identifier, { count: 1, windowStart: now });\n      return { isValid: true, errors: [], securityScore: 100 };\n    }\n\n    requestData.count++;\n\n    if (requestData.count > this.config.rateLimitMaxRequests) {\n      this.auditLog('rate_limit_exceeded', {\n        identifier,\n        requestCount: requestData.count,\n        timeWindow: this.config.rateLimitWindow\n      }, 'high');\n\n      return {\n        isValid: false,\n        errors: [`Rate limit exceeded: ${requestData.count} requests in ${this.config.rateLimitWindow}s`],\n        securityScore: 0\n      };\n    }\n\n    const securityScore = Math.max(0, 100 - (requestData.count / this.config.rateLimitMaxRequests) * 50);\n\n    return {\n      isValid: true,\n      errors: [],\n      securityScore\n    };\n  }\n\n  /**\n   * Encrypt sensitive data\n   */\n  encryptData(data: string): string {\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipher('aes-256-gcm', this.encryptionKey);\n    cipher.setAAD(Buffer.from('neural-agent-data'));\n    \n    let encrypted = cipher.update(data, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    const authTag = cipher.getAuthTag();\n    \n    return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;\n  }\n\n  /**\n   * Decrypt sensitive data\n   */\n  decryptData(encryptedData: string): string {\n    const parts = encryptedData.split(':');\n    if (parts.length !== 3) {\n      throw new Error('Invalid encrypted data format');\n    }\n\n    const iv = Buffer.from(parts[0], 'hex');\n    const authTag = Buffer.from(parts[1], 'hex');\n    const encrypted = parts[2];\n\n    const decipher = crypto.createDecipher('aes-256-gcm', this.encryptionKey);\n    decipher.setAAD(Buffer.from('neural-agent-data'));\n    decipher.setAuthTag(authTag);\n\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  }\n\n  /**\n   * Generate secure random numbers for neural operations\n   */\n  generateSecureRandom(count: number): Float32Array {\n    const bytes = crypto.randomBytes(count * 4);\n    const randomValues = new Float32Array(count);\n    \n    for (let i = 0; i < count; i++) {\n      const uint32 = bytes.readUInt32BE(i * 4);\n      randomValues[i] = (uint32 / 0xFFFFFFFF) - 0.5; // Convert to [-0.5, 0.5]\n    }\n    \n    return randomValues;\n  }\n\n  /**\n   * Detect suspicious patterns in neural weights\n   */\n  private detectSuspiciousWeightPatterns(weights: Buffer): string[] {\n    const patterns: string[] = [];\n    const floats = new Float32Array(weights.buffer);\n\n    // Check for all zeros (potential memory wipe)\n    const zeroCount = floats.filter(w => w === 0).length;\n    if (zeroCount > floats.length * 0.9) {\n      patterns.push('excessive_zeros');\n    }\n\n    // Check for all same values (potential memory corruption)\n    const firstValue = floats[0];\n    const sameValueCount = floats.filter(w => w === firstValue).length;\n    if (sameValueCount > floats.length * 0.8) {\n      patterns.push('uniform_values');\n    }\n\n    // Check for extreme values (potential overflow attack)\n    const extremeCount = floats.filter(w => Math.abs(w) > 1000).length;\n    if (extremeCount > floats.length * 0.1) {\n      patterns.push('extreme_values');\n    }\n\n    // Check for NaN/Infinity (potential corruption)\n    const invalidCount = floats.filter(w => !isFinite(w)).length;\n    if (invalidCount > 0) {\n      patterns.push('invalid_values');\n    }\n\n    return patterns;\n  }\n\n  /**\n   * Add entry to audit log\n   */\n  private auditLog(action: string, details: any, securityLevel: 'low' | 'medium' | 'high' | 'critical' = 'low'): void {\n    if (!this.config.enableAuditLogging) return;\n\n    const logEntry: AuditLog = {\n      timestamp: Date.now(),\n      action,\n      details,\n      securityLevel\n    };\n\n    this.auditLogs.push(logEntry);\n\n    // Keep only last 10000 entries\n    if (this.auditLogs.length > 10000) {\n      this.auditLogs.splice(0, 1000);\n    }\n\n    // Log critical events immediately\n    if (securityLevel === 'critical') {\n      console.error('🚨 CRITICAL SECURITY EVENT:', logEntry);\n    } else if (securityLevel === 'high') {\n      console.warn('⚠️ HIGH SECURITY EVENT:', logEntry);\n    }\n  }\n\n  /**\n   * Get audit logs with optional filtering\n   */\n  getAuditLogs(filter?: {\n    action?: string;\n    securityLevel?: string;\n    startTime?: number;\n    endTime?: number;\n  }): AuditLog[] {\n    let logs = [...this.auditLogs];\n\n    if (filter) {\n      if (filter.action) {\n        logs = logs.filter(log => log.action === filter.action);\n      }\n      if (filter.securityLevel) {\n        logs = logs.filter(log => log.securityLevel === filter.securityLevel);\n      }\n      if (filter.startTime) {\n        logs = logs.filter(log => log.timestamp >= filter.startTime!);\n      }\n      if (filter.endTime) {\n        logs = logs.filter(log => log.timestamp <= filter.endTime!);\n      }\n    }\n\n    return logs.sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  /**\n   * Generate security compliance report\n   */\n  generateSecurityReport(): {\n    summary: {\n      totalAuditEvents: number;\n      criticalEvents: number;\n      highRiskEvents: number;\n      rateLimit: { enabled: boolean; currentRequests: number };\n      encryption: { enabled: boolean; keyLength: number };\n    };\n    recommendations: string[];\n    recentAlerts: AuditLog[];\n  } {\n    const criticalEvents = this.auditLogs.filter(log => log.securityLevel === 'critical').length;\n    const highRiskEvents = this.auditLogs.filter(log => log.securityLevel === 'high').length;\n    const recentAlerts = this.getAuditLogs({\n      startTime: Date.now() - (24 * 60 * 60 * 1000) // Last 24 hours\n    }).filter(log => log.securityLevel === 'high' || log.securityLevel === 'critical');\n\n    const currentRequests = Array.from(this.requestCounts.values())\n      .reduce((sum, data) => sum + data.count, 0);\n\n    const recommendations = [\n      'Implement parameterized SQL queries to prevent injection',\n      'Enable mandatory checksum validation for neural weights',\n      'Use cryptographically secure random number generation',\n      'Implement proper WASM memory bounds checking',\n      'Add input size limits for neural operations',\n      'Enable comprehensive audit logging',\n      'Implement session timeout and authentication',\n      'Add network-level security monitoring'\n    ];\n\n    return {\n      summary: {\n        totalAuditEvents: this.auditLogs.length,\n        criticalEvents,\n        highRiskEvents,\n        rateLimit: {\n          enabled: this.config.enableRateLimiting,\n          currentRequests\n        },\n        encryption: {\n          enabled: true,\n          keyLength: this.encryptionKey.length * 8\n        }\n      },\n      recommendations,\n      recentAlerts\n    };\n  }\n\n  /**\n   * Clean up old audit logs and rate limit data\n   */\n  cleanup(): void {\n    const now = Date.now();\n    const oldestAllowed = now - (7 * 24 * 60 * 60 * 1000); // 7 days\n\n    // Clean audit logs\n    this.auditLogs = this.auditLogs.filter(log => log.timestamp > oldestAllowed);\n\n    // Clean rate limit data\n    const windowStart = now - (this.config.rateLimitWindow * 1000);\n    for (const [key, data] of this.requestCounts.entries()) {\n      if (data.windowStart < windowStart) {\n        this.requestCounts.delete(key);\n      }\n    }\n  }\n}"],"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","ignoreList":[]}