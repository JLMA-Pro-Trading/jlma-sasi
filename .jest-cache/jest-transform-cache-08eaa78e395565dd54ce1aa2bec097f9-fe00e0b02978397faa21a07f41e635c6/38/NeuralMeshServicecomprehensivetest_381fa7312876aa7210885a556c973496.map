{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/NeuralMeshService-comprehensive.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/NeuralMeshService-comprehensive.test.ts"],"sourcesContent":["/**\n * Comprehensive TDD Tests for NeuralMeshService - Additional Coverage\n * Target: Push coverage from 75% to >95% using systematic TDD approach\n * Focus: Edge cases, error paths, and uncovered methods\n */\n\nimport { NeuralMeshService, NeuralMeshConfig, NeuralAgent } from '../../../src/services/NeuralMeshService';\nimport { performance } from 'perf_hooks';\n\n// Mock all external dependencies\nglobal.WebSocket = jest.fn().mockImplementation(() => ({\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n  close: jest.fn(),\n  send: jest.fn(),\n  readyState: 1,\n  onopen: null,\n  onmessage: null,\n  onerror: null,\n  onclose: null\n}));\n\nglobal.fetch = jest.fn().mockResolvedValue({\n  json: jest.fn().mockResolvedValue({ success: true, data: {} })\n});\n\ndescribe('NeuralMeshService - Comprehensive Coverage Tests', () => {\n  let service: NeuralMeshService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    service = new NeuralMeshService({\n      serverUrl: 'ws://localhost:3000',\n      transport: 'websocket',\n      enableWasm: true,\n      enableRealtime: true,\n      debugMode: true\n    });\n  });\n\n  afterEach(async () => {\n    if (service) {\n      await service.shutdown();\n    }\n  });\n\n  describe('Configuration Edge Cases', () => {\n    test('should handle empty configuration object', () => {\n      const emptyService = new NeuralMeshService({});\n      expect(emptyService).toBeDefined();\n      expect(emptyService.getConnectionStatus()).toBeNull();\n    });\n\n    test('should handle undefined configuration', () => {\n      const undefinedService = new NeuralMeshService();\n      expect(undefinedService).toBeDefined();\n      expect(undefinedService.isWasmEnabled()).toBe(false);\n    });\n\n    test('should handle partial configuration with all transports', () => {\n      const httpService = new NeuralMeshService({ transport: 'http' });\n      const stdioService = new NeuralMeshService({ transport: 'stdio' });\n      const wsService = new NeuralMeshService({ transport: 'websocket' });\n      \n      expect(httpService).toBeDefined();\n      expect(stdioService).toBeDefined();\n      expect(wsService).toBeDefined();\n    });\n  });\n\n  describe('Transport Layer Coverage', () => {\n    test('should initialize HTTP transport successfully', async () => {\n      const httpService = new NeuralMeshService({\n        serverUrl: 'http://localhost:3000',\n        transport: 'http',\n        enableWasm: false,\n        debugMode: true\n      });\n\n      const connected = await httpService.initialize();\n      expect(connected).toBe(true);\n      expect(httpService.getConnectionStatus()?.status).toBe('connected');\n      \n      await httpService.shutdown();\n    });\n\n    test('should initialize STDIO transport successfully', async () => {\n      const stdioService = new NeuralMeshService({\n        transport: 'stdio',\n        enableWasm: true,\n        debugMode: false\n      });\n\n      const connected = await stdioService.initialize();\n      expect(connected).toBe(true);\n      expect(stdioService.isWasmEnabled()).toBe(true);\n      \n      await stdioService.shutdown();\n    });\n\n    test('should handle unsupported transport type', async () => {\n      const badService = new NeuralMeshService({\n        transport: 'invalid' as any,\n        debugMode: true\n      });\n\n      const connected = await badService.initialize();\n      expect(connected).toBe(false);\n      expect(badService.getConnectionStatus()?.status).toBe('error');\n    });\n  });\n\n  describe('WebSocket Connection Edge Cases', () => {\n    test('should handle WebSocket connection timeout', async () => {\n      let eventCallback: any;\n      const mockWS = {\n        addEventListener: jest.fn((event, callback) => {\n          eventCallback = callback;\n          // Don't trigger any events to simulate timeout\n        }),\n        close: jest.fn(),\n        send: jest.fn(),\n        readyState: 0 // CONNECTING\n      };\n      \n      (global.WebSocket as jest.Mock).mockImplementation(() => mockWS);\n\n      const connected = await service.initialize();\n      expect(connected).toBe(false);\n    });\n\n    test('should handle WebSocket with immediate error', async () => {\n      const mockWS = {\n        addEventListener: jest.fn((event, callback) => {\n          if (event === 'error') {\n            // Immediate error\n            callback({ type: 'error', message: 'Connection refused' });\n          }\n        }),\n        close: jest.fn(),\n        send: jest.fn(),\n        readyState: 3 // CLOSED\n      };\n      \n      (global.WebSocket as jest.Mock).mockImplementation(() => mockWS);\n\n      const connected = await service.initialize();\n      expect(connected).toBe(false);\n      expect(service.getConnectionStatus()?.status).toBe('error');\n    });\n\n    test('should handle message processing', async () => {\n      const mockWS = {\n        addEventListener: jest.fn((event, callback) => {\n          if (event === 'open') {\n            setTimeout(() => callback({ type: 'open' }), 1);\n          } else if (event === 'message') {\n            setTimeout(() => {\n              callback({ \n                data: JSON.stringify({ \n                  type: 'test',\n                  payload: { message: 'Hello from neural mesh' }\n                })\n              });\n            }, 5);\n          }\n        }),\n        close: jest.fn(),\n        send: jest.fn(),\n        readyState: 1\n      };\n      \n      (global.WebSocket as jest.Mock).mockImplementation(() => mockWS);\n\n      const connected = await service.initialize();\n      expect(connected).toBe(true);\n      \n      // Trigger message event\n      const messageCallback = mockWS.addEventListener.mock.calls.find(call => call[0] === 'message')?.[1];\n      if (messageCallback) {\n        messageCallback({ \n          data: JSON.stringify({ type: 'neural_update', data: { activity: 0.75 } })\n        });\n      }\n    });\n  });\n\n  describe('WASM Integration Coverage', () => {\n    test('should handle WASM initialization failure gracefully', async () => {\n      const wasmService = new NeuralMeshService({\n        transport: 'stdio',\n        enableWasm: true,\n        debugMode: true\n      });\n\n      // Mock WASM failure by overriding the private method\n      const originalInitWasm = (wasmService as any).initializeWasm;\n      (wasmService as any).initializeWasm = jest.fn().mockRejectedValue(new Error('WASM failed'));\n\n      const connected = await wasmService.initialize();\n      expect(connected).toBe(true); // Should still connect without WASM\n      expect(wasmService.isWasmEnabled()).toBe(false); // But WASM should be disabled\n      \n      await wasmService.shutdown();\n    });\n\n    test('should process inference with WASM disabled', async () => {\n      const jsService = new NeuralMeshService({\n        transport: 'stdio',\n        enableWasm: false,\n        debugMode: true\n      });\n\n      await jsService.initialize();\n\n      const input = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5]);\n      const result = await jsService.processInference(input);\n\n      expect(result.output).toBeInstanceOf(Float32Array);\n      expect(result.output.length).toBe(input.length);\n      expect(result.metrics.simdAccelerated).toBe(false);\n      expect(result.metrics.executionTime).toBeGreaterThan(0);\n\n      await jsService.shutdown();\n    });\n\n    test('should handle different input sizes for inference', async () => {\n      const wasmService = new NeuralMeshService({\n        transport: 'stdio',\n        enableWasm: true,\n        debugMode: false\n      });\n\n      await wasmService.initialize();\n\n      // Test various input sizes\n      const testSizes = [1, 10, 100, 1000];\n      \n      for (const size of testSizes) {\n        const input = new Float32Array(size).fill(0.5);\n        const result = await wasmService.processInference(input);\n        \n        expect(result.output.length).toBe(size);\n        expect(result.metrics.inputSize).toBe(size);\n        expect(result.metrics.outputSize).toBe(size);\n      }\n\n      await wasmService.shutdown();\n    });\n  });\n\n  describe('Agent Lifecycle Coverage', () => {\n    test('should handle agent creation with minimal config', async () => {\n      const service = new NeuralMeshService({ transport: 'stdio' });\n      await service.initialize();\n\n      const agent = await service.spawnAgent({});\n      \n      expect(agent.id).toBeDefined();\n      expect(agent.type).toBe('worker');\n      expect(agent.neuralProperties.nodeType).toBe('inter');\n      expect(agent.neuralProperties.layer).toBe(1);\n      expect(agent.neuralProperties.threshold).toBe(0.5);\n\n      await service.shutdown();\n    });\n\n    test('should handle agent creation with full config', async () => {\n      const service = new NeuralMeshService({ transport: 'stdio' });\n      await service.initialize();\n\n      const fullConfig = {\n        id: 'test-agent-full',\n        type: 'coordinator' as const,\n        capabilities: ['planning', 'coordination'],\n        metadata: { role: 'leader', priority: 'high' },\n        neuralProperties: {\n          neuronId: 'neuron-123',\n          meshId: 'mesh-456', \n          nodeType: 'pyramidal' as const,\n          layer: 3,\n          threshold: 0.8,\n          activation: 0.2,\n          connections: ['neuron-1', 'neuron-2'],\n          spikeHistory: [0.1, 0.3, 0.7],\n          lastSpike: new Date()\n        },\n        wasmMetrics: {\n          executionTime: 5.5,\n          memoryUsage: 2.1,\n          simdAcceleration: true,\n          performanceScore: 0.95\n        }\n      };\n\n      const agent = await service.spawnAgent(fullConfig);\n      \n      expect(agent.id).toBe('test-agent-full');\n      expect(agent.type).toBe('coordinator');\n      expect(agent.neuralProperties.nodeType).toBe('pyramidal');\n      expect(agent.neuralProperties.layer).toBe(3);\n      expect(agent.neuralProperties.threshold).toBe(0.8);\n\n      await service.shutdown();\n    });\n\n    test('should update connection stats when spawning agents', async () => {\n      const service = new NeuralMeshService({ transport: 'stdio', debugMode: true });\n      await service.initialize();\n\n      const initialStatus = service.getConnectionStatus();\n      expect(initialStatus?.nodeCount).toBe(0);\n\n      await service.spawnAgent({ id: 'agent-1' });\n      await service.spawnAgent({ id: 'agent-2' });\n\n      const updatedStatus = service.getConnectionStatus();\n      expect(updatedStatus?.nodeCount).toBe(2);\n\n      await service.shutdown();\n    });\n  });\n\n  describe('Error Handling Coverage', () => {\n    test('should throw error when spawning agent without connection', async () => {\n      const disconnectedService = new NeuralMeshService();\n      \n      await expect(disconnectedService.spawnAgent({ id: 'test' }))\n        .rejects.toThrow('Neural mesh not connected');\n    });\n\n    test('should throw error when processing inference without connection', async () => {\n      const disconnectedService = new NeuralMeshService();\n      \n      await expect(disconnectedService.processInference(new Float32Array([1, 2, 3])))\n        .rejects.toThrow('Neural mesh not connected');\n    });\n\n    test('should handle initialization error with WASM enabled', async () => {\n      const service = new NeuralMeshService({\n        transport: 'invalid' as any,\n        enableWasm: true,\n        debugMode: true\n      });\n\n      const connected = await service.initialize();\n      expect(connected).toBe(false);\n      expect(service.getConnectionStatus()?.status).toBe('error');\n    });\n  });\n\n  describe('Shutdown and Cleanup Coverage', () => {\n    test('should cleanup all resources on shutdown', async () => {\n      const service = new NeuralMeshService({\n        transport: 'stdio',\n        enableWasm: true,\n        enableRealtime: true,\n        debugMode: true\n      });\n\n      await service.initialize();\n      expect(service.getConnectionStatus()).not.toBeNull();\n      expect(service.isWasmEnabled()).toBe(true);\n\n      await service.shutdown();\n      expect(service.getConnectionStatus()).toBeNull();\n    });\n\n    test('should handle shutdown when not initialized', async () => {\n      const service = new NeuralMeshService();\n      \n      // Should not throw error\n      await expect(service.shutdown()).resolves.not.toThrow();\n    });\n\n    test('should handle multiple shutdown calls', async () => {\n      const service = new NeuralMeshService({ transport: 'stdio' });\n      await service.initialize();\n\n      await service.shutdown();\n      await service.shutdown(); // Second call should be safe\n      await service.shutdown(); // Third call should be safe\n    });\n  });\n\n  describe('Performance Edge Cases', () => {\n    test('should handle very large inference batches', async () => {\n      const service = new NeuralMeshService({\n        transport: 'stdio',\n        enableWasm: true,\n        debugMode: false\n      });\n\n      await service.initialize();\n\n      const largeInput = new Float32Array(10000).fill(0.5);\n      const result = await service.processInference(largeInput);\n\n      expect(result.output.length).toBe(10000);\n      expect(result.metrics.executionTime).toBeGreaterThan(0);\n      expect(result.metrics.memoryUsage).toBeGreaterThan(0);\n\n      await service.shutdown();\n    });\n\n    test('should handle rapid agent spawning', async () => {\n      const service = new NeuralMeshService({\n        transport: 'stdio',\n        debugMode: false\n      });\n\n      await service.initialize();\n\n      const agents = [];\n      const spawnPromises = [];\n\n      for (let i = 0; i < 50; i++) {\n        spawnPromises.push(service.spawnAgent({ id: `rapid-agent-${i}` }));\n      }\n\n      const spawnedAgents = await Promise.all(spawnPromises);\n      expect(spawnedAgents).toHaveLength(50);\n      expect(service.getConnectionStatus()?.nodeCount).toBe(50);\n\n      await service.shutdown();\n    });\n  });\n\n  describe('Debug Mode Coverage', () => {\n    test('should log debug messages when debug mode enabled', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      const debugService = new NeuralMeshService({\n        transport: 'stdio',\n        enableWasm: true,\n        debugMode: true\n      });\n\n      await debugService.initialize();\n      await debugService.spawnAgent({ id: 'debug-agent' });\n      await debugService.processInference(new Float32Array([0.5]));\n      await debugService.shutdown();\n\n      expect(consoleSpy).toHaveBeenCalled();\n      consoleSpy.mockRestore();\n    });\n\n    test('should not log debug messages when debug mode disabled', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      const silentService = new NeuralMeshService({\n        transport: 'stdio',\n        enableWasm: false,\n        debugMode: false\n      });\n\n      await silentService.initialize();\n      await silentService.shutdown();\n\n      // Should have minimal or no console output\n      const debugCalls = consoleSpy.mock.calls.filter(call => \n        call.some(arg => typeof arg === 'string' && arg.includes('🧠'))\n      );\n      expect(debugCalls.length).toBe(0);\n      \n      consoleSpy.mockRestore();\n    });\n  });\n});"],"version":3}