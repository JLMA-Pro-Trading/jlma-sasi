03b53262c51ef5c2e841fbf63df9c815
"use strict";
/**
 * Performance Test Setup for Phase 2A
 * Specialized setup for performance benchmarking with strict thresholds
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockPerformanceComponents = exports.performanceAssertions = exports.performanceTestUtils = exports.memoryMonitor = exports.MemoryMonitor = exports.performanceMonitor = exports.PerformanceMonitor = exports.PERFORMANCE_THRESHOLDS = void 0;
const globals_1 = require("@jest/globals");
// Performance thresholds for Phase 2A
exports.PERFORMANCE_THRESHOLDS = {
    AGENT_SPAWN_TIME: 75, // <75ms agent spawn time
    INFERENCE_TIME: 100, // <100ms neural inference
    PERSISTENCE_SAVE: 75, // <75ms database save operations
    PERSISTENCE_LOAD: 100, // <100ms database load operations
    COORDINATION_OVERHEAD: 50, // <50ms coordination between agents
    MEMORY_USAGE_PER_AGENT: 50 * 1024 * 1024, // <50MB per agent
    REAL_TIME_FPS: 60, // 60 FPS for real-time performance
    BATCH_PROCESSING: 200, // <200ms for batch operations
    KNOWLEDGE_SHARING: 150, // <150ms for knowledge transfer between agents
    CROSS_SESSION_RESTORE: 300 // <300ms for cross-session state restoration
};
// Performance monitoring utilities
class PerformanceMonitor {
    constructor() {
        Object.defineProperty(this, "metrics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "startTimes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
    }
    startMeasurement(operationId) {
        this.startTimes.set(operationId, performance.now());
    }
    endMeasurement(operationId, metadata = {}) {
        const startTime = this.startTimes.get(operationId);
        if (!startTime) {
            throw new Error(`No start time found for operation: ${operationId}`);
        }
        const duration = performance.now() - startTime;
        const metric = {
            operationId,
            duration,
            timestamp: Date.now(),
            metadata
        };
        const operationMetrics = this.metrics.get(operationId) || [];
        operationMetrics.push(metric);
        this.metrics.set(operationId, operationMetrics);
        this.startTimes.delete(operationId);
        return duration;
    }
    getMetrics(operationId) {
        return this.metrics.get(operationId) || [];
    }
    getAverageTime(operationId) {
        const metrics = this.getMetrics(operationId);
        if (metrics.length === 0)
            return 0;
        const totalTime = metrics.reduce((sum, metric) => sum + metric.duration, 0);
        return totalTime / metrics.length;
    }
    getPercentile(operationId, percentile) {
        const metrics = this.getMetrics(operationId);
        if (metrics.length === 0)
            return 0;
        const sorted = metrics.map(m => m.duration).sort((a, b) => a - b);
        const index = Math.ceil(sorted.length * (percentile / 100)) - 1;
        return sorted[index];
    }
    clear() {
        this.metrics.clear();
        this.startTimes.clear();
    }
    generateReport() {
        const report = {
            timestamp: Date.now(),
            operations: {}
        };
        for (const [operationId, metrics] of this.metrics.entries()) {
            if (metrics.length > 0) {
                report.operations[operationId] = {
                    count: metrics.length,
                    average: this.getAverageTime(operationId),
                    p50: this.getPercentile(operationId, 50),
                    p95: this.getPercentile(operationId, 95),
                    p99: this.getPercentile(operationId, 99),
                    min: Math.min(...metrics.map(m => m.duration)),
                    max: Math.max(...metrics.map(m => m.duration))
                };
            }
        }
        return report;
    }
}
exports.PerformanceMonitor = PerformanceMonitor;
// Global performance monitor instance
exports.performanceMonitor = new PerformanceMonitor();
// Memory monitoring utilities
class MemoryMonitor {
    constructor() {
        Object.defineProperty(this, "snapshots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    takeSnapshot(label) {
        const memUsage = process.memoryUsage();
        const snapshot = {
            label,
            timestamp: Date.now(),
            rss: memUsage.rss,
            heapUsed: memUsage.heapUsed,
            heapTotal: memUsage.heapTotal,
            external: memUsage.external
        };
        this.snapshots.push(snapshot);
        return snapshot;
    }
    comparSnapshots(labelA, labelB) {
        const snapshotA = this.snapshots.find(s => s.label === labelA);
        const snapshotB = this.snapshots.find(s => s.label === labelB);
        if (!snapshotA || !snapshotB) {
            throw new Error('Snapshots not found for comparison');
        }
        return {
            rssDelta: snapshotB.rss - snapshotA.rss,
            heapUsedDelta: snapshotB.heapUsed - snapshotA.heapUsed,
            heapTotalDelta: snapshotB.heapTotal - snapshotA.heapTotal,
            externalDelta: snapshotB.external - snapshotA.external
        };
    }
    getMemoryGrowth() {
        if (this.snapshots.length < 2)
            return 0;
        const first = this.snapshots[0];
        const last = this.snapshots[this.snapshots.length - 1];
        return last.heapUsed - first.heapUsed;
    }
    clear() {
        this.snapshots = [];
    }
}
exports.MemoryMonitor = MemoryMonitor;
// Global memory monitor instance
exports.memoryMonitor = new MemoryMonitor();
// Performance test utilities
exports.performanceTestUtils = {
    /**
     * Assert operation meets performance threshold
     */
    assertPerformanceThreshold: (operationType, actualTime) => {
        const threshold = exports.PERFORMANCE_THRESHOLDS[operationType];
        expect(actualTime).toBeLessThan(threshold);
    },
    /**
     * Measure async operation performance
     */
    measureAsyncOperation: async (operationName, operation) => {
        const operationId = `${operationName}-${Date.now()}`;
        exports.performanceMonitor.startMeasurement(operationId);
        const result = await operation();
        const duration = exports.performanceMonitor.endMeasurement(operationId);
        return { result, duration };
    },
    /**
     * Measure synchronous operation performance
     */
    measureSyncOperation: (operationName, operation) => {
        const operationId = `${operationName}-${Date.now()}`;
        exports.performanceMonitor.startMeasurement(operationId);
        const result = operation();
        const duration = exports.performanceMonitor.endMeasurement(operationId);
        return { result, duration };
    },
    /**
     * Run performance stress test
     */
    runStressTest: async (operationName, operation, iterations = 100) => {
        const results = [];
        exports.memoryMonitor.takeSnapshot(`${operationName}-start`);
        for (let i = 0; i < iterations; i++) {
            const { duration } = await exports.performanceTestUtils.measureAsyncOperation(`${operationName}-${i}`, operation);
            results.push(duration);
        }
        exports.memoryMonitor.takeSnapshot(`${operationName}-end`);
        const memoryGrowth = exports.memoryMonitor.getMemoryGrowth();
        return {
            iterations,
            averageTime: results.reduce((sum, time) => sum + time, 0) / results.length,
            minTime: Math.min(...results),
            maxTime: Math.max(...results),
            memoryGrowth,
            results
        };
    },
    /**
     * Test concurrent operations performance
     */
    testConcurrentPerformance: async (operationName, operation, concurrency = 10) => {
        exports.memoryMonitor.takeSnapshot(`${operationName}-concurrent-start`);
        const promises = Array.from({ length: concurrency }, (_, i) => exports.performanceTestUtils.measureAsyncOperation(`${operationName}-concurrent-${i}`, operation));
        const results = await Promise.all(promises);
        exports.memoryMonitor.takeSnapshot(`${operationName}-concurrent-end`);
        const memoryGrowth = exports.memoryMonitor.getMemoryGrowth();
        const durations = results.map(r => r.duration);
        return {
            concurrency,
            averageTime: durations.reduce((sum, time) => sum + time, 0) / durations.length,
            minTime: Math.min(...durations),
            maxTime: Math.max(...durations),
            memoryGrowth,
            results
        };
    },
    /**
     * Validate real-time performance (60 FPS = ~16.67ms per frame)
     */
    validateRealTimePerformance: (frameTime) => {
        const fpsThreshold = 1000 / exports.PERFORMANCE_THRESHOLDS.REAL_TIME_FPS; // ~16.67ms for 60 FPS
        expect(frameTime).toBeLessThan(fpsThreshold);
    },
    /**
     * Generate performance test scenarios
     */
    generatePerformanceScenarios: () => [
        {
            name: 'Agent Spawn Performance',
            thresholdType: 'AGENT_SPAWN_TIME',
            operation: async () => {
                // Mock agent spawn
                await new Promise(resolve => setTimeout(resolve, Math.random() * 50));
                return { agentId: 'test-agent', spawnTime: Date.now() };
            }
        },
        {
            name: 'Neural Inference Performance',
            thresholdType: 'INFERENCE_TIME',
            operation: async () => {
                // Mock neural inference
                await new Promise(resolve => setTimeout(resolve, Math.random() * 80));
                return [Math.random(), Math.random(), Math.random()];
            }
        },
        {
            name: 'Persistence Save Performance',
            thresholdType: 'PERSISTENCE_SAVE',
            operation: async () => {
                // Mock database save
                await new Promise(resolve => setTimeout(resolve, Math.random() * 60));
                return { saved: true, timestamp: Date.now() };
            }
        },
        {
            name: 'Coordination Overhead Performance',
            thresholdType: 'COORDINATION_OVERHEAD',
            operation: async () => {
                // Mock agent coordination
                await new Promise(resolve => setTimeout(resolve, Math.random() * 40));
                return { coordinated: true, agentCount: 3 };
            }
        }
    ]
};
// Performance assertion helpers
exports.performanceAssertions = {
    /**
     * Assert agent spawn time meets threshold
     */
    assertAgentSpawnTime: (spawnTime) => {
        exports.performanceTestUtils.assertPerformanceThreshold('AGENT_SPAWN_TIME', spawnTime);
    },
    /**
     * Assert neural inference time meets threshold
     */
    assertInferenceTime: (inferenceTime) => {
        exports.performanceTestUtils.assertPerformanceThreshold('INFERENCE_TIME', inferenceTime);
    },
    /**
     * Assert persistence operation time meets threshold
     */
    assertPersistenceTime: (operationType, operationTime) => {
        const thresholdType = operationType === 'save' ? 'PERSISTENCE_SAVE' : 'PERSISTENCE_LOAD';
        exports.performanceTestUtils.assertPerformanceThreshold(thresholdType, operationTime);
    },
    /**
     * Assert coordination overhead meets threshold
     */
    assertCoordinationOverhead: (coordinationTime) => {
        exports.performanceTestUtils.assertPerformanceThreshold('COORDINATION_OVERHEAD', coordinationTime);
    },
    /**
     * Assert memory usage per agent meets threshold
     */
    assertMemoryUsagePerAgent: (memoryUsage) => {
        expect(memoryUsage).toBeLessThan(exports.PERFORMANCE_THRESHOLDS.MEMORY_USAGE_PER_AGENT);
    },
    /**
     * Assert no memory leaks in operation
     */
    assertNoMemoryLeaks: (initialMemory, finalMemory, maxGrowth = 1024 * 1024) => {
        const memoryGrowth = finalMemory - initialMemory;
        expect(memoryGrowth).toBeLessThan(maxGrowth);
    }
};
// Mock performance-critical components
exports.mockPerformanceComponents = {
    fastNeuralInference: globals_1.jest.fn().mockImplementation(async (input) => {
        // Simulate fast inference (<100ms)
        await new Promise(resolve => setTimeout(resolve, Math.random() * 80));
        return new Float32Array(input.length).map(() => Math.random());
    }),
    optimizedAgentSpawn: globals_1.jest.fn().mockImplementation(async (config) => {
        // Simulate fast agent spawn (<75ms)
        await new Promise(resolve => setTimeout(resolve, Math.random() * 60));
        return {
            agentId: 'fast-agent-' + Date.now(),
            config,
            spawnTime: Date.now()
        };
    }),
    rapidPersistence: globals_1.jest.fn().mockImplementation(async (data) => {
        // Simulate fast persistence save (<75ms)
        await new Promise(resolve => setTimeout(resolve, Math.random() * 50));
        return { saved: true, data, timestamp: Date.now() };
    }),
    efficientCoordination: globals_1.jest.fn().mockImplementation(async (agents) => {
        // Simulate fast coordination (<50ms)
        await new Promise(resolve => setTimeout(resolve, Math.random() * 30));
        return { coordinated: agents, overhead: Date.now() };
    })
};
// Global performance test hooks
beforeEach(() => {
    exports.performanceMonitor.clear();
    exports.memoryMonitor.clear();
    globals_1.jest.clearAllMocks();
});
afterEach(() => {
    // Generate performance report if test failed
    if (expect.getState().currentTestName && expect.getState().assertionCalls > 0) {
        const report = exports.performanceMonitor.generateReport();
        if (Object.keys(report.operations).length > 0) {
            console.log('📊 Performance Report:', JSON.stringify(report, null, 2));
        }
    }
});
console.log('⚡ Performance test setup initialized');
console.log('🎯 Thresholds: <75ms spawn, <100ms inference, <50ms coordination');
console.log('📊 Memory monitoring enabled with leak detection');
console.log('🔄 Real-time performance validation ready (60 FPS)');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,