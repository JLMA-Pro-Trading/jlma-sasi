6a71556322b21c1b9362d0d462a61baf
"use strict";
/**
 * Simplified TDD Unit Tests for Agent Persistence Manager
 * Tests SQLite database operations with Phase 2A performance requirements
 * Focus: Red-Green-Refactor TDD methodology
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const perf_hooks_1 = require("perf_hooks");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
// Import our implementation
const AgentPersistenceManager_1 = require("../../../src/persistence/AgentPersistenceManager");
describe('AgentPersistenceManager - TDD Red-Green-Refactor', () => {
    let persistenceManager;
    let testDbPath;
    beforeEach(async () => {
        // Create unique test database for each test
        testDbPath = path.join(__dirname, `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}.db`);
        persistenceManager = new AgentPersistenceManager_1.AgentPersistenceManager(testDbPath);
        await persistenceManager.initialize();
    });
    afterEach(async () => {
        // Clean up test database
        if (persistenceManager) {
            await persistenceManager.close();
        }
        if (fs.existsSync(testDbPath)) {
            fs.unlinkSync(testDbPath);
        }
    });
    describe('TDD Red Phase - Database Schema', () => {
        test('should create all required tables', async () => {
            // TDD: This will initially fail until we implement schema creation
            const tables = await persistenceManager.getTables();
            expect(tables).toContain('agents');
            expect(tables).toContain('neural_weights');
            expect(tables).toContain('agent_memory');
            expect(tables).toContain('agent_metrics');
            expect(tables).toContain('session_state');
        });
        test('should create performance indexes', async () => {
            // TDD: This will initially fail until we implement index creation
            const indexes = await persistenceManager.getIndexes();
            expect(indexes.length).toBeGreaterThan(0);
            expect(indexes).toContain('idx_agents_status');
            expect(indexes).toContain('idx_agents_type');
        });
        test('should enable WAL mode for concurrent access', async () => {
            // TDD: This will initially fail until we configure SQLite properly
            const journalMode = await persistenceManager.getJournalMode();
            expect(journalMode).toBe('wal');
        });
    });
    describe('TDD Red Phase - Agent CRUD Operations', () => {
        test('should save agent within 50ms performance target', async () => {
            // TDD Red: This test should fail initially
            const agentConfig = {
                id: 'test-agent-001',
                type: 'researcher',
                cognitivePattern: 'divergent',
                networkLayers: [64, 128, 64, 32],
                status: 'spawning',
                createdAt: Date.now(),
                lastActive: Date.now()
            };
            const startTime = perf_hooks_1.performance.now();
            const savedAgent = await persistenceManager.saveAgent(agentConfig);
            const saveTime = perf_hooks_1.performance.now() - startTime;
            // Phase 2A requirement: database operations <50ms
            expect(saveTime).toBeLessThan(50);
            expect(savedAgent.id).toBe(agentConfig.id);
            expect(savedAgent.type).toBe(agentConfig.type);
        });
        test('should retrieve agent by ID within 50ms', async () => {
            // TDD Red: This test should fail initially
            const agentConfig = {
                id: 'test-agent-002',
                type: 'coder',
                cognitivePattern: 'convergent',
                networkLayers: [128, 256, 128, 64],
                status: 'active',
                createdAt: Date.now(),
                lastActive: Date.now()
            };
            await persistenceManager.saveAgent(agentConfig);
            const startTime = perf_hooks_1.performance.now();
            const retrievedAgent = await persistenceManager.getAgent(agentConfig.id);
            const retrieveTime = perf_hooks_1.performance.now() - startTime;
            // Phase 2A requirement: database operations <50ms
            expect(retrieveTime).toBeLessThan(50);
            expect(retrievedAgent).toBeDefined();
            expect(retrievedAgent.id).toBe(agentConfig.id);
            expect(retrievedAgent.type).toBe(agentConfig.type);
        });
        test('should update agent status atomically within 50ms', async () => {
            // TDD Red: This test should fail initially
            const agentId = 'test-agent-003';
            await persistenceManager.saveAgent({
                id: agentId,
                type: 'analyst',
                cognitivePattern: 'critical',
                networkLayers: [96, 192, 96, 48],
                status: 'spawning',
                createdAt: Date.now(),
                lastActive: Date.now()
            });
            const startTime = perf_hooks_1.performance.now();
            await persistenceManager.updateAgentStatus(agentId, 'active');
            const updateTime = perf_hooks_1.performance.now() - startTime;
            // Phase 2A requirement: database operations <50ms
            expect(updateTime).toBeLessThan(50);
            // Validate status change
            const updatedAgent = await persistenceManager.getAgent(agentId);
            expect(updatedAgent.status).toBe('active');
        });
        test('should prevent duplicate agent IDs', async () => {
            // TDD Red: This test should fail initially
            const agentConfig = {
                id: 'duplicate-test',
                type: 'coordinator',
                cognitivePattern: 'adaptive',
                networkLayers: [112, 224, 112, 56],
                status: 'spawning',
                createdAt: Date.now(),
                lastActive: Date.now()
            };
            // First save should succeed
            await persistenceManager.saveAgent(agentConfig);
            // Second save should fail with unique constraint
            await expect(persistenceManager.saveAgent(agentConfig))
                .rejects.toThrow(/UNIQUE constraint failed/);
        });
    });
    describe('TDD Red Phase - Performance Testing', () => {
        test('should handle concurrent operations efficiently', async () => {
            // TDD Red: This test should fail initially
            const concurrentSaves = Array.from({ length: 10 }, (_, i) => persistenceManager.saveAgent({
                id: `concurrent-agent-${i}`,
                type: 'optimizer',
                cognitivePattern: 'systems',
                networkLayers: [80, 160, 80, 40],
                status: 'spawning',
                createdAt: Date.now(),
                lastActive: Date.now()
            }));
            const startTime = perf_hooks_1.performance.now();
            const results = await Promise.all(concurrentSaves);
            const totalTime = perf_hooks_1.performance.now() - startTime;
            // All saves should succeed
            expect(results).toHaveLength(10);
            results.forEach(result => {
                expect(result).toBeDefined();
                expect(result.id).toMatch(/concurrent-agent-\d/);
            });
            // Average save time should be reasonable for concurrent operations
            const avgSaveTime = totalTime / 10;
            expect(avgSaveTime).toBeLessThan(75); // Slightly higher threshold for concurrent ops
        });
        test('should efficiently batch save multiple agents', async () => {
            // TDD Red: This test should fail initially
            const agents = Array.from({ length: 20 }, (_, i) => ({
                id: `batch-agent-${i}`,
                type: ['researcher', 'coder', 'analyst', 'optimizer', 'coordinator'][i % 5],
                cognitivePattern: ['convergent', 'divergent', 'critical', 'systems', 'adaptive'][i % 5],
                networkLayers: [64, 128, 64, 32],
                status: 'spawning',
                createdAt: Date.now(),
                lastActive: Date.now()
            }));
            const startTime = perf_hooks_1.performance.now();
            await persistenceManager.batchSaveAgents(agents);
            const batchTime = perf_hooks_1.performance.now() - startTime;
            // Batch operation should be efficient
            expect(batchTime).toBeLessThan(100); // 100ms for 20 agents = 5ms per agent
            // Verify all agents were saved
            const savedAgents = await persistenceManager.getAllAgents();
            expect(savedAgents).toHaveLength(20);
        });
    });
    describe('TDD Red Phase - Metrics Recording', () => {
        test('should record performance metrics', async () => {
            // TDD Red: This test should fail initially
            const agentId = 'metrics-test-agent';
            const spawnTime = 65; // ms
            await persistenceManager.saveAgent({
                id: agentId,
                type: 'researcher',
                cognitivePattern: 'divergent',
                networkLayers: [64, 128, 64],
                status: 'active',
                createdAt: Date.now(),
                lastActive: Date.now(),
                spawnTimeMs: spawnTime
            });
            await persistenceManager.recordMetric({
                agentId,
                metricType: 'spawn_time',
                value: spawnTime,
                unit: 'ms',
                recordedAt: Date.now(),
                context: { target: 75, status: 'pass' }
            });
            const metrics = await persistenceManager.getAgentMetrics(agentId, 'spawn_time');
            expect(metrics).toHaveLength(1);
            expect(metrics[0].value).toBe(spawnTime);
            expect(metrics[0].unit).toBe('ms');
        });
    });
    describe('TDD Red Phase - Error Handling', () => {
        test('should handle missing agent gracefully', async () => {
            // TDD Red: This test should fail initially
            const nonExistentAgent = await persistenceManager.getAgent('non-existent-id');
            expect(nonExistentAgent).toBeNull();
        });
        test('should validate required fields', async () => {
            // TDD Red: This test should fail initially
            // Missing required fields should fail
            await expect(persistenceManager.saveAgent({}))
                .rejects.toThrow();
            await expect(persistenceManager.saveAgent({
                id: 'test'
            }))
                .rejects.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,