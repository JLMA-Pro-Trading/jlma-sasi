{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/wasm-setup.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/wasm-setup.ts"],"sourcesContent":["/**\n * WASM Test Setup\n * Provides WASM module mocking and testing utilities for Jest\n */\n\nimport { jest } from '@jest/globals';\n\n// Mock WASM module for testing\nexport const mockWasmModule = {\n  initialized: true,\n  simdSupported: true,\n  performanceMultiplier: 2.8,\n  memoryPool: new ArrayBuffer(1024 * 1024),\n  \n  calculateNeuralActivation: jest.fn((inputs: Float32Array) => {\n    const result = new Float32Array(inputs.length);\n    for (let i = 0; i < inputs.length; i++) {\n      result[i] = Math.tanh(inputs[i] * 0.5);\n    }\n    return result;\n  }),\n  \n  optimizeConnections: jest.fn((connections: number[]) => {\n    return connections.map(w => Math.min(1, Math.max(0, w + (Math.random() - 0.5) * 0.1)));\n  }),\n  \n  benchmark: jest.fn(() => ({\n    operations_per_second: 1000000,\n    memory_usage: 1024 * 1024,\n    simd_acceleration: true\n  }))\n};\n\n// Global WASM utilities\nexport const wasmTestUtils = {\n  /**\n   * Create performance test data\n   */\n  createPerformanceData: (size: number = 1000) => {\n    return new Float32Array(Array.from({ length: size }, () => Math.random()));\n  },\n\n  /**\n   * Benchmark function execution time\n   */\n  benchmarkFunction: async (fn: Function, iterations: number = 100): Promise<number> => {\n    const start = performance.now();\n    for (let i = 0; i < iterations; i++) {\n      await fn();\n    }\n    const end = performance.now();\n    return (end - start) / iterations;\n  },\n\n  /**\n   * Assert performance threshold\n   */\n  assertPerformanceThreshold: (actualTime: number, thresholdMs: number) => {\n    if (actualTime > thresholdMs) {\n      throw new Error(`Performance threshold exceeded: ${actualTime}ms > ${thresholdMs}ms`);\n    }\n  },\n\n  /**\n   * Mock WASM memory management\n   */\n  mockMemoryManager: () => ({\n    allocate: jest.fn((size: number) => new ArrayBuffer(size)),\n    deallocate: jest.fn(),\n    getUsage: jest.fn(() => ({ used: 1024, available: 1024 * 1024 }))\n  })\n};\n\n// Setup WASM environment for tests\nbeforeAll(() => {\n  // Mock WebAssembly global if not available\n  if (typeof WebAssembly === 'undefined') {\n    (global as any).WebAssembly = {\n      instantiate: jest.fn().mockResolvedValue({\n        instance: {\n          exports: mockWasmModule\n        }\n      }),\n      compile: jest.fn().mockResolvedValue({}),\n      Module: jest.fn()\n    };\n  }\n\n  // Mock performance API\n  if (typeof performance === 'undefined') {\n    (global as any).performance = {\n      now: jest.fn(() => Date.now()),\n      mark: jest.fn(),\n      measure: jest.fn()\n    };\n  }\n});\n\n// Cleanup after tests\nafterEach(() => {\n  jest.clearAllMocks();\n});\n\nexport default mockWasmModule;"],"version":3}