{"version":3,"names":["cov_282gvqjcxl","actualCoverage","crypto","gzipSync","gunzipSync","performance","NeuralWeightStorage","constructor","persistenceManager","f","s","Object","defineProperty","persistence","saveNeuralWeights","agentId","networkLayers","weights","biases","startTime","now","length","b","Error","layerIndex","compressedData","compressLayerData","saveLayerWeights","saveTime","console","warn","toFixed","log","error","message","loadNeuralWeights","weightRecords","getAgentWeightRecords","record","sort","a","checksumValidation","expectedChecksum","generateChecksum","weightData","biasData","checksum","layerWeights","decompressWeights","compressionType","layerBiases","decompressBiases","push","loadTime","weightBuffer","Buffer","from","buffer","biasBuffer","originalSize","compressedWeights","compressedBiases","compressionThreshold","compressionEnabled","compressedSize","compressionRatio","compressionTime","data","decompressedBuffer","Float32Array","slice","byteOffset","byteLength","hash","createHash","update","digest","getCompressionStats","configureCompression","options","enabled","undefined","threshold","validation"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/NeuralWeightStorage.ts"],"sourcesContent":["/**\n * Neural Weight Storage Manager - Phase 2A Implementation\n * Handles neural network weight serialization, compression, and persistence\n * \n * Performance Requirements:\n * - Weight save/load: <30ms\n * - Compression ratio: >50%\n * - Data integrity: 100% with checksums\n * - Memory usage: <10MB during operations\n */\n\nimport * as crypto from 'crypto';\nimport { gzipSync, gunzipSync } from 'zlib';\nimport { performance } from 'perf_hooks';\nimport type { AgentPersistenceManager } from './AgentPersistenceManager';\n\nexport interface NeuralWeightData {\n  agentId: string;\n  layerIndex: number;\n  weights: Float32Array;\n  biases: Float32Array;\n  timestamp: number;\n  checksum?: string;\n}\n\nexport interface CompressedWeightData {\n  weightData: Buffer;\n  biasData: Buffer;\n  compressionType: 'gzip' | 'lz4' | 'none';\n  originalSize: number;\n  compressedSize: number;\n  compressionRatio: number;\n  checksum: string;\n}\n\nexport class NeuralWeightStorage {\n  private persistence: AgentPersistenceManager;\n  private compressionEnabled: boolean = true;\n  private checksumValidation: boolean = true;\n  private compressionThreshold: number = 1024; // Compress if data > 1KB\n\n  constructor(persistenceManager: AgentPersistenceManager) {\n    this.persistence = persistenceManager;\n  }\n\n  /**\n   * Save neural weights for an agent with compression and validation\n   * Performance target: <30ms\n   */\n  async saveNeuralWeights(\n    agentId: string,\n    networkLayers: number[],\n    weights: Float32Array[],\n    biases: Float32Array[]\n  ): Promise<void> {\n    const startTime = performance.now();\n\n    try {\n      if (weights.length !== biases.length) {\n        throw new Error('Weights and biases arrays must have the same length');\n      }\n\n      if (weights.length !== networkLayers.length - 1) {\n        throw new Error('Weight layers must match network architecture');\n      }\n\n      // Process each layer\n      for (let layerIndex = 0; layerIndex < weights.length; layerIndex++) {\n        const compressedData = await this.compressLayerData(\n          weights[layerIndex],\n          biases[layerIndex]\n        );\n\n        // Save to database via persistence manager\n        // This would call a method we'll add to AgentPersistenceManager\n        await this.saveLayerWeights(agentId, layerIndex, compressedData);\n      }\n\n      const saveTime = performance.now() - startTime;\n      \n      if (saveTime > 30) {\n        console.warn(`‚ö†Ô∏è Neural weight save time exceeded target: ${saveTime.toFixed(2)}ms`);\n      }\n\n      console.log(`üíæ Saved neural weights for agent ${agentId} (${saveTime.toFixed(2)}ms)`);\n\n    } catch (error) {\n      const saveTime = performance.now() - startTime;\n      console.error(`‚ùå Failed to save neural weights for ${agentId} (${saveTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Load neural weights for an agent with decompression and validation\n   * Performance target: <30ms\n   */\n  async loadNeuralWeights(agentId: string): Promise<{ weights: Float32Array[]; biases: Float32Array[] }> {\n    const startTime = performance.now();\n\n    try {\n      // Load weight records from database\n      const weightRecords = await this.getAgentWeightRecords(agentId);\n      \n      if (weightRecords.length === 0) {\n        throw new Error(`No neural weights found for agent ${agentId}`);\n      }\n\n      const weights: Float32Array[] = [];\n      const biases: Float32Array[] = [];\n\n      // Process each layer in order\n      for (const record of weightRecords.sort((a, b) => a.layerIndex - b.layerIndex)) {\n        // Validate checksum if enabled\n        if (this.checksumValidation) {\n          const expectedChecksum = this.generateChecksum(record.weightData, record.biasData);\n          if (expectedChecksum !== record.checksum) {\n            throw new Error(`Weight corruption detected for agent ${agentId}, layer ${record.layerIndex}`);\n          }\n        }\n\n        // Decompress and deserialize\n        const layerWeights = await this.decompressWeights(record.weightData, record.compressionType);\n        const layerBiases = await this.decompressBiases(record.biasData, record.compressionType);\n\n        weights.push(layerWeights);\n        biases.push(layerBiases);\n      }\n\n      const loadTime = performance.now() - startTime;\n      \n      if (loadTime > 30) {\n        console.warn(`‚ö†Ô∏è Neural weight load time exceeded target: ${loadTime.toFixed(2)}ms`);\n      }\n\n      console.log(`üì• Loaded neural weights for agent ${agentId} (${loadTime.toFixed(2)}ms)`);\n\n      return { weights, biases };\n\n    } catch (error) {\n      const loadTime = performance.now() - startTime;\n      console.error(`‚ùå Failed to load neural weights for ${agentId} (${loadTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Compress weight and bias data for a single layer\n   */\n  private async compressLayerData(\n    weights: Float32Array,\n    biases: Float32Array\n  ): Promise<CompressedWeightData> {\n    const startTime = performance.now();\n\n    try {\n      // Convert to buffers\n      const weightBuffer = Buffer.from(weights.buffer);\n      const biasBuffer = Buffer.from(biases.buffer);\n\n      const originalSize = weightBuffer.length + biasBuffer.length;\n      \n      let compressedWeights: Buffer;\n      let compressedBiases: Buffer;\n      let compressionType: 'gzip' | 'none' = 'none';\n\n      // Apply compression if data is large enough\n      if (originalSize > this.compressionThreshold && this.compressionEnabled) {\n        compressedWeights = gzipSync(weightBuffer);\n        compressedBiases = gzipSync(biasBuffer);\n        compressionType = 'gzip';\n      } else {\n        compressedWeights = weightBuffer;\n        compressedBiases = biasBuffer;\n      }\n\n      const compressedSize = compressedWeights.length + compressedBiases.length;\n      const compressionRatio = compressedSize / originalSize;\n\n      // Generate checksum for integrity validation\n      const checksum = this.generateChecksum(compressedWeights, compressedBiases);\n\n      const compressionTime = performance.now() - startTime;\n      \n      console.log(`üóúÔ∏è Compressed layer data: ${originalSize} ‚Üí ${compressedSize} bytes (${(compressionRatio * 100).toFixed(1)}%) in ${compressionTime.toFixed(2)}ms`);\n\n      return {\n        weightData: compressedWeights,\n        biasData: compressedBiases,\n        compressionType,\n        originalSize,\n        compressedSize,\n        compressionRatio,\n        checksum\n      };\n\n    } catch (error) {\n      console.error('‚ùå Failed to compress layer data:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Decompress weight data\n   */\n  private async decompressWeights(data: Buffer, compressionType: string): Promise<Float32Array> {\n    try {\n      let decompressedBuffer: Buffer;\n\n      if (compressionType === 'gzip') {\n        decompressedBuffer = gunzipSync(data);\n      } else {\n        decompressedBuffer = data;\n      }\n\n      // Convert back to Float32Array\n      return new Float32Array(decompressedBuffer.buffer.slice(\n        decompressedBuffer.byteOffset,\n        decompressedBuffer.byteOffset + decompressedBuffer.byteLength\n      ));\n\n    } catch (error) {\n      console.error('‚ùå Failed to decompress weights:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Decompress bias data\n   */\n  private async decompressBiases(data: Buffer, compressionType: string): Promise<Float32Array> {\n    try {\n      let decompressedBuffer: Buffer;\n\n      if (compressionType === 'gzip') {\n        decompressedBuffer = gunzipSync(data);\n      } else {\n        decompressedBuffer = data;\n      }\n\n      // Convert back to Float32Array\n      return new Float32Array(decompressedBuffer.buffer.slice(\n        decompressedBuffer.byteOffset,\n        decompressedBuffer.byteOffset + decompressedBuffer.byteLength\n      ));\n\n    } catch (error) {\n      console.error('‚ùå Failed to decompress biases:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate checksum for data integrity validation\n   */\n  private generateChecksum(weightData: Buffer, biasData: Buffer): string {\n    const hash = crypto.createHash('sha256');\n    hash.update(weightData);\n    hash.update(biasData);\n    return hash.digest('hex');\n  }\n\n  /**\n   * Save compressed layer weights to database\n   * This method will call the persistence manager\n   */\n  private async saveLayerWeights(\n    agentId: string,\n    layerIndex: number,\n    compressedData: CompressedWeightData\n  ): Promise<void> {\n    // This would call a method we need to add to AgentPersistenceManager\n    // For now, we'll implement a placeholder that shows the interface\n    \n    try {\n      // The AgentPersistenceManager would need a method like this:\n      // await this.persistence.saveNeuralWeightRecord({\n      //   agentId,\n      //   layerIndex,\n      //   weightData: compressedData.weightData,\n      //   biasData: compressedData.biasData,\n      //   updatedAt: Date.now(),\n      //   checksum: compressedData.checksum,\n      //   compressionType: compressedData.compressionType\n      // });\n\n      console.log(`üíæ Saved layer ${layerIndex} weights for agent ${agentId}`);\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to save layer weights:`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get agent weight records from database\n   * This method will call the persistence manager\n   */\n  private async getAgentWeightRecords(agentId: string): Promise<any[]> {\n    // This would call a method we need to add to AgentPersistenceManager\n    // For now, we'll return an empty array to show the interface\n    \n    try {\n      // The AgentPersistenceManager would need a method like this:\n      // return await this.persistence.getNeuralWeightRecords(agentId);\n      \n      console.log(`üì• Loading weight records for agent ${agentId}`);\n      return []; // Placeholder\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to load weight records:`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get compression statistics\n   */\n  getCompressionStats(): {\n    compressionEnabled: boolean;\n    checksumValidation: boolean;\n    compressionThreshold: number;\n  } {\n    return {\n      compressionEnabled: this.compressionEnabled,\n      checksumValidation: this.checksumValidation,\n      compressionThreshold: this.compressionThreshold\n    };\n  }\n\n  /**\n   * Configure compression settings\n   */\n  configureCompression(options: {\n    enabled?: boolean;\n    threshold?: number;\n    validation?: boolean;\n  }): void {\n    if (options.enabled !== undefined) {\n      this.compressionEnabled = options.enabled;\n    }\n    if (options.threshold !== undefined) {\n      this.compressionThreshold = options.threshold;\n    }\n    if (options.validation !== undefined) {\n      this.checksumValidation = options.validation;\n    }\n\n    console.log('‚öôÔ∏è Neural weight storage configuration updated:', {\n      compressionEnabled: this.compressionEnabled,\n      compressionThreshold: this.compressionThreshold,\n      checksumValidation: this.checksumValidation\n    });\n  }\n}"],"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","ignoreList":[]}