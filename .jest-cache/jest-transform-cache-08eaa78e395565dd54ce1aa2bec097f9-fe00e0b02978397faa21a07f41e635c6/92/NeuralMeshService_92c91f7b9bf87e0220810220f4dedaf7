f6c360675a6e6fc7a0357c8fdd1a331b
/* istanbul ignore next */
function cov_1765ro6jw9() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralMeshService.ts";
  var hash = "85d48caf5cd94b710dad951987a08e4001c03b81";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralMeshService.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 14,
          column: 11
        }
      },
      "1": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "2": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "3": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "4": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "5": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "6": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "7": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "8": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "9": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 70
        }
      },
      "10": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 45
        }
      },
      "11": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "12": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 44
        }
      },
      "13": {
        start: {
          line: 69,
          column: 33
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "14": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "15": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 83,
          column: 18
        }
      },
      "16": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "17": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 51
        }
      },
      "18": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 56
        }
      },
      "19": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 28
        }
      },
      "20": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 83
        }
      },
      "21": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 81
        }
      },
      "22": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 103,
          column: 14
        }
      },
      "23": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 38
        }
      },
      "24": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 25
        }
      },
      "25": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "26": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 66
        }
      },
      "27": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 119,
          column: 14
        }
      },
      "28": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "29": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 71
        }
      },
      "30": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 123,
          column: 14
        }
      },
      "31": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 121,
          column: 51
        }
      },
      "32": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 44
        }
      },
      "33": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "34": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 57
        }
      },
      "35": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 42
        }
      },
      "36": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "37": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 48
        }
      },
      "38": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 48
        }
      },
      "39": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 41
        }
      },
      "40": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 146,
          column: 14
        }
      },
      "41": {
        start: {
          line: 139,
          column: 37
        },
        end: {
          line: 143,
          column: 22
        }
      },
      "42": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 43
        }
      },
      "43": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "44": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 174,
          column: 14
        }
      },
      "45": {
        start: {
          line: 164,
          column: 35
        },
        end: {
          line: 164,
          column: 66
        }
      },
      "46": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 167,
          column: 21
        }
      },
      "47": {
        start: {
          line: 165,
          column: 33
        },
        end: {
          line: 165,
          column: 34
        }
      },
      "48": {
        start: {
          line: 166,
          column: 24
        },
        end: {
          line: 166,
          column: 63
        }
      },
      "49": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 34
        }
      },
      "50": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 172,
          column: 107
        }
      },
      "51": {
        start: {
          line: 172,
          column: 48
        },
        end: {
          line: 172,
          column: 105
        }
      },
      "52": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "53": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 71
        }
      },
      "54": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 86
        }
      },
      "55": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 35
        }
      },
      "56": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "57": {
        start: {
          line: 189,
          column: 28
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "58": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "59": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 61
        }
      },
      "60": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 66
        }
      },
      "61": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 62
        }
      },
      "62": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 211,
          column: 14
        }
      },
      "63": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 218,
          column: 14
        }
      },
      "64": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "65": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 51
        }
      },
      "66": {
        start: {
          line: 228,
          column: 13
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "67": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 51
        }
      },
      "68": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "69": {
        start: {
          line: 237,
          column: 28
        },
        end: {
          line: 239,
          column: 21
        }
      },
      "70": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 53
        }
      },
      "71": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "72": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 38
        }
      },
      "73": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 34
        }
      },
      "74": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 56
        }
      },
      "75": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "76": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 49
        }
      },
      "77": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "78": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 267,
          column: 13
        }
      },
      "79": {
        start: {
          line: 256,
          column: 39
        },
        end: {
          line: 259,
          column: 18
        }
      },
      "80": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 263,
          column: 17
        }
      },
      "81": {
        start: {
          line: 261,
          column: 20
        },
        end: {
          line: 261,
          column: 62
        }
      },
      "82": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 68
        }
      },
      "83": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 68
        }
      },
      "84": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "85": {
        start: {
          line: 276,
          column: 35
        },
        end: {
          line: 280,
          column: 14
        }
      },
      "86": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "87": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 82
        }
      },
      "88": {
        start: {
          line: 285,
          column: 32
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "89": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 52
        }
      },
      "90": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 31
        }
      },
      "91": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 67
        }
      },
      "92": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 24
        }
      },
      "93": {
        start: {
          line: 348,
          column: 24
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "94": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 45
        }
      },
      "95": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "96": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "97": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 370,
          column: 19
        }
      },
      "98": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "99": {
        start: {
          line: 374,
          column: 31
        },
        end: {
          line: 374,
          column: 95
        }
      },
      "100": {
        start: {
          line: 375,
          column: 32
        },
        end: {
          line: 375,
          column: 81
        }
      },
      "101": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 80
        }
      },
      "102": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 68
        }
      },
      "103": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 385,
          column: 14
        }
      },
      "104": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 125
        }
      },
      "105": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 397,
          column: 13
        }
      },
      "106": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 44
        }
      },
      "107": {
        start: {
          line: 392,
          column: 17
        },
        end: {
          line: 397,
          column: 13
        }
      },
      "108": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 393,
          column: 40
        }
      },
      "109": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 38
        }
      },
      "110": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 46
        }
      },
      "111": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 25
        }
      },
      "112": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 67
        }
      },
      "113": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 25
        }
      },
      "114": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "115": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 24
        }
      },
      "116": {
        start: {
          line: 413,
          column: 25
        },
        end: {
          line: 416,
          column: 10
        }
      },
      "117": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 55
        }
      },
      "118": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 439,
          column: 9
        }
      },
      "119": {
        start: {
          line: 424,
          column: 29
        },
        end: {
          line: 429,
          column: 14
        }
      },
      "120": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 433,
          column: 13
        }
      },
      "121": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 57
        }
      },
      "122": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 432,
          column: 28
        }
      },
      "123": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 25
        }
      },
      "124": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 58
        }
      },
      "125": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 438,
          column: 25
        }
      },
      "126": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "127": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 47
        }
      },
      "128": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 54
        }
      },
      "129": {
        start: {
          line: 451,
          column: 24
        },
        end: {
          line: 454,
          column: 9
        }
      },
      "130": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 452,
          column: 37
        }
      },
      "131": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 30
        }
      },
      "132": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 32
        }
      },
      "133": {
        start: {
          line: 458,
          column: 26
        },
        end: {
          line: 458,
          column: 56
        }
      },
      "134": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "135": {
        start: {
          line: 460,
          column: 26
        },
        end: {
          line: 460,
          column: 53
        }
      },
      "136": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 463,
          column: 13
        }
      },
      "137": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 462,
          column: 43
        }
      },
      "138": {
        start: {
          line: 467,
          column: 26
        },
        end: {
          line: 467,
          column: 56
        }
      },
      "139": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "140": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 469,
          column: 58
        }
      },
      "141": {
        start: {
          line: 469,
          column: 42
        },
        end: {
          line: 469,
          column: 56
        }
      },
      "142": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 479,
          column: 9
        }
      },
      "143": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 49
        }
      },
      "144": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 41
        }
      },
      "145": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 482,
          column: 9
        }
      },
      "146": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 35
        }
      },
      "147": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "148": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 52
        }
      },
      "149": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 55
        }
      },
      "150": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 36
        }
      },
      "151": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 493,
          column: 31
        }
      },
      "152": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 499,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 24
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 23
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 57
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 32
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 111
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 115,
            column: 36
          },
          end: {
            line: 115,
            column: 37
          }
        },
        loc: {
          start: {
            line: 115,
            column: 42
          },
          end: {
            line: 119,
            column: 13
          }
        },
        line: 115
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 120,
            column: 39
          },
          end: {
            line: 120,
            column: 40
          }
        },
        loc: {
          start: {
            line: 120,
            column: 50
          },
          end: {
            line: 123,
            column: 13
          }
        },
        line: 120
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 124,
            column: 37
          },
          end: {
            line: 124,
            column: 38
          }
        },
        loc: {
          start: {
            line: 124,
            column: 48
          },
          end: {
            line: 127,
            column: 13
          }
        },
        line: 124
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 129,
            column: 30
          },
          end: {
            line: 129,
            column: 31
          }
        },
        loc: {
          start: {
            line: 129,
            column: 51
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 129
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 138,
            column: 22
          },
          end: {
            line: 138,
            column: 23
          }
        },
        loc: {
          start: {
            line: 138,
            column: 38
          },
          end: {
            line: 145,
            column: 17
          }
        },
        line: 138
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 152
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 162,
            column: 43
          },
          end: {
            line: 162,
            column: 44
          }
        },
        loc: {
          start: {
            line: 162,
            column: 55
          },
          end: {
            line: 169,
            column: 17
          }
        },
        line: 162
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 170,
            column: 37
          },
          end: {
            line: 170,
            column: 38
          }
        },
        loc: {
          start: {
            line: 170,
            column: 54
          },
          end: {
            line: 173,
            column: 17
          }
        },
        line: 170
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 172,
            column: 43
          },
          end: {
            line: 172,
            column: 44
          }
        },
        loc: {
          start: {
            line: 172,
            column: 48
          },
          end: {
            line: 172,
            column: 105
          }
        },
        line: 172
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 38
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 187
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 27
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 224
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 37
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 235
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 236,
            column: 27
          },
          end: {
            line: 236,
            column: 28
          }
        },
        loc: {
          start: {
            line: 236,
            column: 48
          },
          end: {
            line: 245,
            column: 9
          }
        },
        line: 236
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 237,
            column: 39
          },
          end: {
            line: 237,
            column: 40
          }
        },
        loc: {
          start: {
            line: 237,
            column: 45
          },
          end: {
            line: 239,
            column: 13
          }
        },
        line: 237
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 240,
            column: 28
          },
          end: {
            line: 240,
            column: 29
          }
        },
        loc: {
          start: {
            line: 240,
            column: 42
          },
          end: {
            line: 243,
            column: 13
          }
        },
        line: 240
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 30
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 250
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 254,
            column: 44
          },
          end: {
            line: 254,
            column: 45
          }
        },
        loc: {
          start: {
            line: 254,
            column: 56
          },
          end: {
            line: 268,
            column: 9
          }
        },
        line: 254
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 42
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 273
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 347,
            column: 4
          },
          end: {
            line: 347,
            column: 5
          }
        },
        loc: {
          start: {
            line: 347,
            column: 40
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 347
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 35
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 362
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 26
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 409
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 422,
            column: 4
          },
          end: {
            line: 422,
            column: 5
          }
        },
        loc: {
          start: {
            line: 422,
            column: 30
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 422
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 444,
            column: 5
          }
        },
        loc: {
          start: {
            line: 444,
            column: 24
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 444
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 26
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 450
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 451,
            column: 24
          },
          end: {
            line: 451,
            column: 25
          }
        },
        loc: {
          start: {
            line: 451,
            column: 37
          },
          end: {
            line: 454,
            column: 9
          }
        },
        line: 451
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 457,
            column: 4
          },
          end: {
            line: 457,
            column: 5
          }
        },
        loc: {
          start: {
            line: 457,
            column: 25
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 457
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 22
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 466
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 469,
            column: 30
          },
          end: {
            line: 469,
            column: 31
          }
        },
        loc: {
          start: {
            line: 469,
            column: 42
          },
          end: {
            line: 469,
            column: 56
          }
        },
        line: 469
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 475,
            column: 4
          },
          end: {
            line: 475,
            column: 5
          }
        },
        loc: {
          start: {
            line: 475,
            column: 23
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 475
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 492,
            column: 4
          },
          end: {
            line: 492,
            column: 5
          }
        },
        loc: {
          start: {
            line: 492,
            column: 26
          },
          end: {
            line: 494,
            column: 5
          }
        },
        line: 492
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 20
          },
          end: {
            line: 500,
            column: 5
          }
        },
        line: 498
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 47,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 47,
            column: 39
          }
        }, {
          start: {
            line: 47,
            column: 43
          },
          end: {
            line: 47,
            column: 64
          }
        }],
        line: 47
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 39
          }
        }, {
          start: {
            line: 48,
            column: 43
          },
          end: {
            line: 48,
            column: 54
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 51,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 51,
            column: 39
          }
        }, {
          start: {
            line: 51,
            column: 43
          },
          end: {
            line: 51,
            column: 48
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: 91,
            column: 17
          },
          end: {
            line: 93,
            column: 13
          }
        }],
        line: 75
      },
      "6": {
        loc: {
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 32
          },
          end: {
            line: 92,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 32
          },
          end: {
            line: 92,
            column: 50
          }
        }, {
          start: {
            line: 92,
            column: 54
          },
          end: {
            line: 92,
            column: 81
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: 135,
            column: 13
          },
          end: {
            line: 147,
            column: 9
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "10": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "11": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        }, {
          start: {
            line: 203,
            column: 17
          },
          end: {
            line: 205,
            column: 13
          }
        }],
        line: 199
      },
      "12": {
        loc: {
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 199,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 199,
            column: 53
          }
        }, {
          start: {
            line: 199,
            column: 57
          },
          end: {
            line: 199,
            column: 71
          }
        }],
        line: 199
      },
      "13": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: 228,
            column: 13
          },
          end: {
            line: 230,
            column: 9
          }
        }],
        line: 225
      },
      "14": {
        loc: {
          start: {
            line: 228,
            column: 13
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 13
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "15": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "16": {
        loc: {
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 263,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 263,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "17": {
        loc: {
          start: {
            line: 260,
            column: 20
          },
          end: {
            line: 260,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 20
          },
          end: {
            line: 260,
            column: 42
          }
        }, {
          start: {
            line: 260,
            column: 46
          },
          end: {
            line: 260,
            column: 61
          }
        }],
        line: 260
      },
      "18": {
        loc: {
          start: {
            line: 278,
            column: 23
          },
          end: {
            line: 278,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 23
          },
          end: {
            line: 278,
            column: 36
          }
        }, {
          start: {
            line: 278,
            column: 40
          },
          end: {
            line: 278,
            column: 73
          }
        }],
        line: 278
      },
      "19": {
        loc: {
          start: {
            line: 279,
            column: 27
          },
          end: {
            line: 279,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 27
          },
          end: {
            line: 279,
            column: 44
          }
        }, {
          start: {
            line: 279,
            column: 48
          },
          end: {
            line: 279,
            column: 51
          }
        }],
        line: 279
      },
      "20": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "21": {
        loc: {
          start: {
            line: 282,
            column: 32
          },
          end: {
            line: 282,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 32
          },
          end: {
            line: 282,
            column: 52
          }
        }, {
          start: {
            line: 282,
            column: 56
          },
          end: {
            line: 282,
            column: 80
          }
        }],
        line: 282
      },
      "22": {
        loc: {
          start: {
            line: 305,
            column: 28
          },
          end: {
            line: 305,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 28
          },
          end: {
            line: 305,
            column: 51
          }
        }, {
          start: {
            line: 305,
            column: 55
          },
          end: {
            line: 305,
            column: 57
          }
        }],
        line: 305
      },
      "23": {
        loc: {
          start: {
            line: 316,
            column: 37
          },
          end: {
            line: 316,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 316,
            column: 55
          },
          end: {
            line: 316,
            column: 58
          }
        }, {
          start: {
            line: 316,
            column: 61
          },
          end: {
            line: 316,
            column: 64
          }
        }],
        line: 316
      },
      "24": {
        loc: {
          start: {
            line: 320,
            column: 28
          },
          end: {
            line: 320,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 320,
            column: 28
          },
          end: {
            line: 320,
            column: 51
          }
        }, {
          start: {
            line: 320,
            column: 55
          },
          end: {
            line: 320,
            column: 57
          }
        }],
        line: 320
      },
      "25": {
        loc: {
          start: {
            line: 323,
            column: 31
          },
          end: {
            line: 323,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 31
          },
          end: {
            line: 323,
            column: 60
          }
        }, {
          start: {
            line: 323,
            column: 64
          },
          end: {
            line: 323,
            column: 67
          }
        }],
        line: 323
      },
      "26": {
        loc: {
          start: {
            line: 333,
            column: 38
          },
          end: {
            line: 333,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 333,
            column: 56
          },
          end: {
            line: 333,
            column: 58
          }
        }, {
          start: {
            line: 333,
            column: 61
          },
          end: {
            line: 333,
            column: 63
          }
        }],
        line: 333
      },
      "27": {
        loc: {
          start: {
            line: 357,
            column: 15
          },
          end: {
            line: 357,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 15
          },
          end: {
            line: 357,
            column: 33
          }
        }, {
          start: {
            line: 357,
            column: 37
          },
          end: {
            line: 357,
            column: 44
          }
        }],
        line: 357
      },
      "28": {
        loc: {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 371,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 371,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "29": {
        loc: {
          start: {
            line: 373,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "30": {
        loc: {
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 373,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 373,
            column: 31
          }
        }, {
          start: {
            line: 373,
            column: 35
          },
          end: {
            line: 373,
            column: 81
          }
        }],
        line: 373
      },
      "31": {
        loc: {
          start: {
            line: 384,
            column: 33
          },
          end: {
            line: 384,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 384,
            column: 51
          },
          end: {
            line: 384,
            column: 54
          }
        }, {
          start: {
            line: 384,
            column: 57
          },
          end: {
            line: 384,
            column: 60
          }
        }],
        line: 384
      },
      "32": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        }, {
          start: {
            line: 392,
            column: 17
          },
          end: {
            line: 397,
            column: 13
          }
        }],
        line: 389
      },
      "33": {
        loc: {
          start: {
            line: 392,
            column: 17
          },
          end: {
            line: 397,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 17
          },
          end: {
            line: 397,
            column: 13
          }
        }, {
          start: {
            line: 395,
            column: 17
          },
          end: {
            line: 397,
            column: 13
          }
        }],
        line: 392
      },
      "34": {
        loc: {
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 412,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 412,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "35": {
        loc: {
          start: {
            line: 417,
            column: 15
          },
          end: {
            line: 417,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 417,
            column: 34
          },
          end: {
            line: 417,
            column: 47
          }
        }, {
          start: {
            line: 417,
            column: 50
          },
          end: {
            line: 417,
            column: 54
          }
        }],
        line: 417
      },
      "36": {
        loc: {
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 433,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 433,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "37": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "38": {
        loc: {
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "39": {
        loc: {
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "40": {
        loc: {
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "41": {
        loc: {
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "42": {
        loc: {
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 482,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 482,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "43": {
        loc: {
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 480,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 480,
            column: 26
          }
        }, {
          start: {
            line: 480,
            column: 30
          },
          end: {
            line: 480,
            column: 67
          }
        }],
        line: 480
      },
      "44": {
        loc: {
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralMeshService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralMeshService.ts"],
      sourcesContent: ["/**\n * Neural Mesh Service - Bridge between SASI and Synaptic-mesh MCP Server\n * \n * This service connects the SASI frontend to the Synaptic Neural Mesh MCP server,\n * enabling real-time neural agent management and WASM-accelerated processing.\n */\n\nimport { Agent } from '../types/agent'\n\nexport interface NeuralMeshConfig {\n  serverUrl: string\n  transport: 'stdio' | 'websocket' | 'http'\n  enableWasm: boolean\n  enableRealtime: boolean\n  debugMode: boolean\n}\n\nexport interface NeuralMeshConnection {\n  id: string\n  status: 'connecting' | 'connected' | 'disconnected' | 'error'\n  meshId?: string\n  nodeCount: number\n  synapseCount: number\n  lastActivity: Date\n}\n\nexport interface NeuralAgent extends Agent {\n  neuralProperties: {\n    neuronId: string\n    meshId: string\n    nodeType: 'sensory' | 'motor' | 'inter' | 'pyramidal' | 'purkinje'\n    layer: number\n    threshold: number\n    activation: number\n    connections: string[]\n    spikeHistory: number[]\n    lastSpike?: Date\n  }\n  wasmMetrics: {\n    executionTime: number\n    memoryUsage: number\n    simdAcceleration: boolean\n    performanceScore: number\n  }\n}\n\nexport interface SynapticResponse {\n  success: boolean\n  data?: any\n  error?: string\n  timestamp: string\n}\n\nexport class NeuralMeshService {\n  private config: NeuralMeshConfig\n  private connection: NeuralMeshConnection | null = null\n  private eventListeners: Map<string, Function[]> = new Map()\n  private mcpClient: any = null\n  private wasmModule: any = null\n  private realtimeInterval: NodeJS.Timer | null = null\n\n  constructor(config: NeuralMeshConfig) {\n    this.config = {\n      ...config,\n      serverUrl: config.serverUrl || 'ws://localhost:3000',\n      transport: config.transport || 'websocket',\n      enableWasm: config.enableWasm !== false,\n      enableRealtime: config.enableRealtime !== false,\n      debugMode: config.debugMode || false\n    }\n  }\n\n  /**\n   * Initialize connection to Synaptic-mesh MCP server\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      if (this.config.debugMode) {\n        console.log('\uD83E\uDDE0 Initializing Neural Mesh Service...')\n      }\n\n      // Initialize MCP client connection\n      await this.initializeMCPClient()\n\n      // Load WASM module if enabled\n      if (this.config.enableWasm) {\n        await this.loadWasmModule()\n      }\n\n      // Initialize neural mesh\n      const meshResponse = await this.callMCPTool('mesh_initialize', {\n        topology: 'synaptic',\n        nodes: 50,\n        connectivity: 0.4,\n        activation: 'relu'\n      })\n\n      if (meshResponse.success) {\n        this.connection = {\n          id: `conn_${Date.now()}`,\n          status: 'connected',\n          meshId: meshResponse.data.meshId,\n          nodeCount: meshResponse.data.nodes,\n          synapseCount: 0,\n          lastActivity: new Date()\n        }\n\n        // Start real-time monitoring if enabled\n        if (this.config.enableRealtime) {\n          this.startRealtimeMonitoring()\n        }\n\n        this.emit('connected', this.connection)\n        return true\n      } else {\n        throw new Error(meshResponse.error || 'Failed to initialize mesh')\n      }\n    } catch (error) {\n      console.error('\u274C Neural Mesh Service initialization failed:', error)\n      this.connection = {\n        id: `conn_${Date.now()}`,\n        status: 'error',\n        nodeCount: 0,\n        synapseCount: 0,\n        lastActivity: new Date()\n      }\n      this.emit('error', error)\n      return false\n    }\n  }\n\n  /**\n   * Initialize MCP client for communication with Synaptic-mesh server\n   */\n  private async initializeMCPClient(): Promise<void> {\n    if (this.config.transport === 'websocket') {\n      // WebSocket connection for real-time communication\n      this.mcpClient = new WebSocket(this.config.serverUrl)\n      \n      this.mcpClient.onopen = () => {\n        if (this.config.debugMode) {\n          console.log('\uD83D\uDD0C WebSocket connection established')\n        }\n      }\n\n      this.mcpClient.onmessage = (event: any) => {\n        const data = JSON.parse(event.data)\n        this.handleMCPMessage(data)\n      }\n\n      this.mcpClient.onerror = (error: any) => {\n        console.error('WebSocket error:', error)\n        this.emit('error', error)\n      }\n\n      // Wait for connection to establish\n      await new Promise((resolve, reject) => {\n        this.mcpClient.onopen = resolve\n        this.mcpClient.onerror = reject\n        setTimeout(reject, 5000) // 5 second timeout\n      })\n    } else {\n      // HTTP-based MCP client fallback\n      this.mcpClient = {\n        send: async (data: any) => {\n          const response = await fetch(this.config.serverUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          })\n          return response.json()\n        }\n      }\n    }\n  }\n\n  /**\n   * Load WASM module for performance-critical operations\n   */\n  private async loadWasmModule(): Promise<void> {\n    try {\n      // This would load the actual WASM module from the synaptic-mesh project\n      // For now, we'll simulate it with a placeholder\n      this.wasmModule = {\n        initialized: true,\n        simdSupported: true,\n        performanceMultiplier: 2.8,\n        memoryPool: new ArrayBuffer(1024 * 1024), // 1MB pool\n        \n        // Simulated WASM functions\n        calculateNeuralActivation: (inputs: Float32Array) => {\n          // Simulate SIMD-accelerated neural computation\n          const result = new Float32Array(inputs.length)\n          for (let i = 0; i < inputs.length; i++) {\n            result[i] = Math.tanh(inputs[i] * 0.5)\n          }\n          return result\n        },\n        \n        optimizeConnections: (connections: number[]) => {\n          // Simulate connection optimization\n          return connections.map(w => Math.min(1, Math.max(0, w + (Math.random() - 0.5) * 0.1)))\n        }\n      }\n\n      if (this.config.debugMode) {\n        console.log('\uD83D\uDE80 WASM module loaded with SIMD support')\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F WASM module loading failed, falling back to JS:', error)\n      this.wasmModule = null\n    }\n  }\n\n  /**\n   * Call MCP tool on the Synaptic-mesh server\n   */\n  private async callMCPTool(toolName: string, args: any): Promise<SynapticResponse> {\n    try {\n      const request = {\n        jsonrpc: '2.0',\n        id: Date.now(),\n        method: 'tools/call',\n        params: {\n          name: toolName,\n          arguments: args\n        }\n      }\n\n      let response: any\n      if (this.config.transport === 'websocket' && this.mcpClient) {\n        this.mcpClient.send(JSON.stringify(request))\n        response = await this.waitForResponse(request.id)\n      } else {\n        response = await this.mcpClient.send(request)\n      }\n\n      return {\n        success: !response.error,\n        data: response.result,\n        error: response.error?.message,\n        timestamp: new Date().toISOString()\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }\n\n  /**\n   * Handle incoming MCP messages\n   */\n  private handleMCPMessage(data: any): void {\n    if (data.method === 'notification') {\n      this.emit('notification', data.params)\n    } else if (data.id) {\n      this.emit(`response_${data.id}`, data)\n    }\n  }\n\n  /**\n   * Wait for specific response\n   */\n  private async waitForResponse(requestId: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Request timeout'))\n      }, 10000)\n\n      const handler = (response: any) => {\n        clearTimeout(timeout)\n        resolve(response)\n      }\n\n      this.once(`response_${requestId}`, handler)\n    })\n  }\n\n  /**\n   * Start real-time monitoring of neural mesh\n   */\n  private startRealtimeMonitoring(): void {\n    if (this.realtimeInterval) {\n      clearInterval(this.realtimeInterval)\n    }\n\n    this.realtimeInterval = setInterval(async () => {\n      try {\n        const statusResponse = await this.callMCPTool('mesh_status', {\n          meshId: this.connection?.meshId,\n          metrics: ['activity', 'connectivity', 'efficiency']\n        })\n\n        if (statusResponse.success && this.connection) {\n          this.connection.lastActivity = new Date()\n          this.emit('status_update', statusResponse.data)\n        }\n      } catch (error) {\n        console.error('Real-time monitoring error:', error)\n      }\n    }, 1000) // Update every second\n  }\n\n  /**\n   * Create a new neural agent\n   */\n  async createNeuralAgent(type: Agent['type'], config?: any): Promise<NeuralAgent | null> {\n    try {\n      // Spawn neuron in the mesh\n      const neuronResponse = await this.callMCPTool('neuron_spawn', {\n        type: this.mapAgentTypeToNeuronType(type),\n        layer: config?.layer || Math.floor(Math.random() * 6) + 1,\n        threshold: config?.threshold || 0.5\n      })\n\n      if (!neuronResponse.success) {\n        throw new Error(neuronResponse.error || 'Failed to spawn neuron')\n      }\n\n      // Create neural agent with real neural properties\n      const neuralAgent: NeuralAgent = {\n        id: `agent_${Date.now()}`,\n        name: `${type.charAt(0).toUpperCase() + type.slice(1)}-${neuronResponse.data.neuronId.slice(-4)}`,\n        type,\n        status: 'neural_sync',\n        currentTask: 'Initializing neural connection...',\n        repository: 'neural-mesh',\n        branch: 'main',\n        completedTasks: 0,\n        efficiency: 75,\n        progress: 0.1,\n        position: {\n          x: (Math.random() - 0.5) * 100,\n          y: (Math.random() - 0.5) * 100,\n          z: (Math.random() - 0.5) * 100\n        },\n        owner: 'Neural Mesh',\n        neuralId: neuronResponse.data.neuronId,\n        meshConnection: {\n          connected: true,\n          meshId: this.connection?.meshId || '',\n          nodeType: neuronResponse.data.type,\n          layer: neuronResponse.data.layer,\n          synapses: neuronResponse.data.connections,\n          activation: 0,\n          lastSpike: new Date()\n        },\n        realtime: {\n          cpuUsage: Math.random() * 20 + 10,\n          memoryUsage: Math.random() * 50 + 25,\n          networkLatency: Math.random() * 5 + 1,\n          wasmPerformance: this.wasmModule ? 2.8 : 1.0\n        },\n        neuralProperties: {\n          neuronId: neuronResponse.data.neuronId,\n          meshId: this.connection?.meshId || '',\n          nodeType: neuronResponse.data.type,\n          layer: neuronResponse.data.layer,\n          threshold: neuronResponse.data.threshold || 0.5,\n          activation: 0,\n          connections: [],\n          spikeHistory: [],\n          lastSpike: new Date()\n        },\n        wasmMetrics: {\n          executionTime: 0,\n          memoryUsage: 0,\n          simdAcceleration: !!this.wasmModule?.simdSupported,\n          performanceScore: this.wasmModule ? 95 : 70\n        }\n      }\n\n      this.emit('agent_created', neuralAgent)\n      return neuralAgent\n    } catch (error) {\n      console.error('Failed to create neural agent:', error)\n      return null\n    }\n  }\n\n  /**\n   * Map agent type to neuron type\n   */\n  private mapAgentTypeToNeuronType(agentType: Agent['type']): string {\n    const mapping = {\n      'researcher': 'sensory',\n      'coder': 'motor',\n      'tester': 'inter',\n      'reviewer': 'pyramidal',\n      'debugger': 'purkinje',\n      'neural': 'inter',\n      'synaptic': 'pyramidal'\n    }\n    return mapping[agentType] || 'inter'\n  }\n\n  /**\n   * Update agent with neural activity\n   */\n  async updateNeuralAgent(agent: NeuralAgent): Promise<NeuralAgent> {\n    try {\n      // Inject thought/task into neural mesh\n      if (agent.currentTask) {\n        await this.callMCPTool('thought_inject', {\n          thought: agent.currentTask,\n          encoding: 'embedding',\n          target_layer: agent.neuralProperties.layer\n        })\n      }\n\n      // Perform WASM-accelerated computation if available\n      if (this.wasmModule && agent.neuralProperties.spikeHistory.length > 0) {\n        const inputs = new Float32Array(agent.neuralProperties.spikeHistory.slice(-10))\n        const outputs = this.wasmModule.calculateNeuralActivation(inputs)\n        agent.neuralProperties.activation = outputs[outputs.length - 1]\n        agent.wasmMetrics.executionTime = performance.now()\n      }\n\n      // Update real-time metrics\n      agent.realtime = {\n        cpuUsage: Math.random() * 30 + 20,\n        memoryUsage: Math.random() * 60 + 30,\n        networkLatency: Math.random() * 10 + 2,\n        wasmPerformance: this.wasmModule ? 2.8 : 1.0\n      }\n\n      // Update efficiency based on neural activity\n      agent.efficiency = Math.min(100, Math.max(0, \n        agent.efficiency + (agent.neuralProperties.activation - 0.5) * 10\n      ))\n\n      // Update status based on neural activity\n      if (agent.neuralProperties.activation > 0.8) {\n        agent.status = 'processing'\n      } else if (agent.neuralProperties.activation > 0.3) {\n        agent.status = 'active'\n      } else {\n        agent.status = 'idle'\n      }\n\n      this.emit('agent_updated', agent)\n      return agent\n    } catch (error) {\n      console.error('Failed to update neural agent:', error)\n      return agent\n    }\n  }\n\n  /**\n   * Get mesh status\n   */\n  async getMeshStatus(): Promise<any> {\n    if (!this.connection) {\n      return null\n    }\n\n    const response = await this.callMCPTool('mesh_status', {\n      meshId: this.connection.meshId,\n      metrics: ['activity', 'connectivity', 'efficiency']\n    })\n\n    return response.success ? response.data : null\n  }\n\n  /**\n   * Train the neural mesh with patterns\n   */\n  async trainMesh(patterns: any[]): Promise<boolean> {\n    try {\n      const response = await this.callMCPTool('mesh_train', {\n        patterns,\n        epochs: 50,\n        learning_rate: 0.01,\n        algorithm: 'backprop'\n      })\n\n      if (response.success) {\n        this.emit('mesh_trained', response.data)\n        return true\n      }\n      return false\n    } catch (error) {\n      console.error('Mesh training failed:', error)\n      return false\n    }\n  }\n\n  /**\n   * Event system\n   */\n  on(event: string, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, [])\n    }\n    this.eventListeners.get(event)!.push(callback)\n  }\n\n  once(event: string, callback: Function): void {\n    const wrapper = (...args: any[]) => {\n      this.off(event, wrapper)\n      callback(...args)\n    }\n    this.on(event, wrapper)\n  }\n\n  off(event: string, callback: Function): void {\n    const listeners = this.eventListeners.get(event)\n    if (listeners) {\n      const index = listeners.indexOf(callback)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }\n\n  private emit(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event)\n    if (listeners) {\n      listeners.forEach(callback => callback(data))\n    }\n  }\n\n  /**\n   * Cleanup and disconnect\n   */\n  async disconnect(): Promise<void> {\n    if (this.realtimeInterval) {\n      clearInterval(this.realtimeInterval)\n      this.realtimeInterval = null\n    }\n\n    if (this.mcpClient && this.config.transport === 'websocket') {\n      this.mcpClient.close()\n    }\n\n    if (this.connection) {\n      this.connection.status = 'disconnected'\n      this.emit('disconnected', this.connection)\n    }\n\n    this.eventListeners.clear()\n  }\n\n  /**\n   * Get current connection status\n   */\n  getConnectionStatus(): NeuralMeshConnection | null {\n    return this.connection\n  }\n\n  /**\n   * Check if WASM is available\n   */\n  isWasmEnabled(): boolean {\n    return !!this.wasmModule\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "85d48caf5cd94b710dad951987a08e4001c03b81"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1765ro6jw9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1765ro6jw9();
/**
 * Neural Mesh Service - Bridge between SASI and Synaptic-mesh MCP Server
 *
 * This service connects the SASI frontend to the Synaptic Neural Mesh MCP server,
 * enabling real-time neural agent management and WASM-accelerated processing.
 */
export class NeuralMeshService {
  constructor(config) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[0]++;
    cov_1765ro6jw9().s[0]++;
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_1765ro6jw9().s[1]++;
    Object.defineProperty(this, "connection", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_1765ro6jw9().s[2]++;
    Object.defineProperty(this, "eventListeners", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Map()
    });
    /* istanbul ignore next */
    cov_1765ro6jw9().s[3]++;
    Object.defineProperty(this, "mcpClient", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_1765ro6jw9().s[4]++;
    Object.defineProperty(this, "wasmModule", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_1765ro6jw9().s[5]++;
    Object.defineProperty(this, "realtimeInterval", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_1765ro6jw9().s[6]++;
    this.config = {
      ...config,
      serverUrl:
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[0][0]++, config.serverUrl) ||
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[0][1]++, 'ws://localhost:3000'),
      transport:
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[1][0]++, config.transport) ||
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[1][1]++, 'websocket'),
      enableWasm: config.enableWasm !== false,
      enableRealtime: config.enableRealtime !== false,
      debugMode:
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[2][0]++, config.debugMode) ||
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[2][1]++, false)
    };
  }
  /**
   * Initialize connection to Synaptic-mesh MCP server
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[1]++;
    cov_1765ro6jw9().s[7]++;
    try {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[8]++;
      if (this.config.debugMode) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[3][0]++;
        cov_1765ro6jw9().s[9]++;
        console.log('🧠 Initializing Neural Mesh Service...');
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[3][1]++;
      }
      // Initialize MCP client connection
      cov_1765ro6jw9().s[10]++;
      await this.initializeMCPClient();
      // Load WASM module if enabled
      /* istanbul ignore next */
      cov_1765ro6jw9().s[11]++;
      if (this.config.enableWasm) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[4][0]++;
        cov_1765ro6jw9().s[12]++;
        await this.loadWasmModule();
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[4][1]++;
      }
      // Initialize neural mesh
      const meshResponse =
      /* istanbul ignore next */
      (cov_1765ro6jw9().s[13]++, await this.callMCPTool('mesh_initialize', {
        topology: 'synaptic',
        nodes: 50,
        connectivity: 0.4,
        activation: 'relu'
      }));
      /* istanbul ignore next */
      cov_1765ro6jw9().s[14]++;
      if (meshResponse.success) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[5][0]++;
        cov_1765ro6jw9().s[15]++;
        this.connection = {
          id: `conn_${Date.now()}`,
          status: 'connected',
          meshId: meshResponse.data.meshId,
          nodeCount: meshResponse.data.nodes,
          synapseCount: 0,
          lastActivity: new Date()
        };
        // Start real-time monitoring if enabled
        /* istanbul ignore next */
        cov_1765ro6jw9().s[16]++;
        if (this.config.enableRealtime) {
          /* istanbul ignore next */
          cov_1765ro6jw9().b[6][0]++;
          cov_1765ro6jw9().s[17]++;
          this.startRealtimeMonitoring();
        } else
        /* istanbul ignore next */
        {
          cov_1765ro6jw9().b[6][1]++;
        }
        cov_1765ro6jw9().s[18]++;
        this.emit('connected', this.connection);
        /* istanbul ignore next */
        cov_1765ro6jw9().s[19]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[5][1]++;
        cov_1765ro6jw9().s[20]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[7][0]++, meshResponse.error) ||
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[7][1]++, 'Failed to initialize mesh'));
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[21]++;
      console.error('❌ Neural Mesh Service initialization failed:', error);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[22]++;
      this.connection = {
        id: `conn_${Date.now()}`,
        status: 'error',
        nodeCount: 0,
        synapseCount: 0,
        lastActivity: new Date()
      };
      /* istanbul ignore next */
      cov_1765ro6jw9().s[23]++;
      this.emit('error', error);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[24]++;
      return false;
    }
  }
  /**
   * Initialize MCP client for communication with Synaptic-mesh server
   */
  async initializeMCPClient() {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[2]++;
    cov_1765ro6jw9().s[25]++;
    if (this.config.transport === 'websocket') {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[8][0]++;
      cov_1765ro6jw9().s[26]++;
      // WebSocket connection for real-time communication
      this.mcpClient = new WebSocket(this.config.serverUrl);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[27]++;
      this.mcpClient.onopen = () => {
        /* istanbul ignore next */
        cov_1765ro6jw9().f[3]++;
        cov_1765ro6jw9().s[28]++;
        if (this.config.debugMode) {
          /* istanbul ignore next */
          cov_1765ro6jw9().b[9][0]++;
          cov_1765ro6jw9().s[29]++;
          console.log('🔌 WebSocket connection established');
        } else
        /* istanbul ignore next */
        {
          cov_1765ro6jw9().b[9][1]++;
        }
      };
      /* istanbul ignore next */
      cov_1765ro6jw9().s[30]++;
      this.mcpClient.onmessage = event => {
        /* istanbul ignore next */
        cov_1765ro6jw9().f[4]++;
        const data =
        /* istanbul ignore next */
        (cov_1765ro6jw9().s[31]++, JSON.parse(event.data));
        /* istanbul ignore next */
        cov_1765ro6jw9().s[32]++;
        this.handleMCPMessage(data);
      };
      /* istanbul ignore next */
      cov_1765ro6jw9().s[33]++;
      this.mcpClient.onerror = error => {
        /* istanbul ignore next */
        cov_1765ro6jw9().f[5]++;
        cov_1765ro6jw9().s[34]++;
        console.error('WebSocket error:', error);
        /* istanbul ignore next */
        cov_1765ro6jw9().s[35]++;
        this.emit('error', error);
      };
      // Wait for connection to establish
      /* istanbul ignore next */
      cov_1765ro6jw9().s[36]++;
      await new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_1765ro6jw9().f[6]++;
        cov_1765ro6jw9().s[37]++;
        this.mcpClient.onopen = resolve;
        /* istanbul ignore next */
        cov_1765ro6jw9().s[38]++;
        this.mcpClient.onerror = reject;
        /* istanbul ignore next */
        cov_1765ro6jw9().s[39]++;
        setTimeout(reject, 5000); // 5 second timeout
      });
    } else {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[8][1]++;
      cov_1765ro6jw9().s[40]++;
      // HTTP-based MCP client fallback
      this.mcpClient = {
        send: async data => {
          /* istanbul ignore next */
          cov_1765ro6jw9().f[7]++;
          const response =
          /* istanbul ignore next */
          (cov_1765ro6jw9().s[41]++, await fetch(this.config.serverUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          }));
          /* istanbul ignore next */
          cov_1765ro6jw9().s[42]++;
          return response.json();
        }
      };
    }
  }
  /**
   * Load WASM module for performance-critical operations
   */
  async loadWasmModule() {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[8]++;
    cov_1765ro6jw9().s[43]++;
    try {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[44]++;
      // This would load the actual WASM module from the synaptic-mesh project
      // For now, we'll simulate it with a placeholder
      this.wasmModule = {
        initialized: true,
        simdSupported: true,
        performanceMultiplier: 2.8,
        memoryPool: new ArrayBuffer(1024 * 1024),
        // 1MB pool
        // Simulated WASM functions
        calculateNeuralActivation: inputs => {
          /* istanbul ignore next */
          cov_1765ro6jw9().f[9]++;
          // Simulate SIMD-accelerated neural computation
          const result =
          /* istanbul ignore next */
          (cov_1765ro6jw9().s[45]++, new Float32Array(inputs.length));
          /* istanbul ignore next */
          cov_1765ro6jw9().s[46]++;
          for (let i =
          /* istanbul ignore next */
          (cov_1765ro6jw9().s[47]++, 0); i < inputs.length; i++) {
            /* istanbul ignore next */
            cov_1765ro6jw9().s[48]++;
            result[i] = Math.tanh(inputs[i] * 0.5);
          }
          /* istanbul ignore next */
          cov_1765ro6jw9().s[49]++;
          return result;
        },
        optimizeConnections: connections => {
          /* istanbul ignore next */
          cov_1765ro6jw9().f[10]++;
          cov_1765ro6jw9().s[50]++;
          // Simulate connection optimization
          return connections.map(w => {
            /* istanbul ignore next */
            cov_1765ro6jw9().f[11]++;
            cov_1765ro6jw9().s[51]++;
            return Math.min(1, Math.max(0, w + (Math.random() - 0.5) * 0.1));
          });
        }
      };
      /* istanbul ignore next */
      cov_1765ro6jw9().s[52]++;
      if (this.config.debugMode) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[10][0]++;
        cov_1765ro6jw9().s[53]++;
        console.log('🚀 WASM module loaded with SIMD support');
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[10][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[54]++;
      console.warn('⚠️ WASM module loading failed, falling back to JS:', error);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[55]++;
      this.wasmModule = null;
    }
  }
  /**
   * Call MCP tool on the Synaptic-mesh server
   */
  async callMCPTool(toolName, args) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[12]++;
    cov_1765ro6jw9().s[56]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_1765ro6jw9().s[57]++, {
        jsonrpc: '2.0',
        id: Date.now(),
        method: 'tools/call',
        params: {
          name: toolName,
          arguments: args
        }
      });
      let response;
      /* istanbul ignore next */
      cov_1765ro6jw9().s[58]++;
      if (
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[12][0]++, this.config.transport === 'websocket') &&
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[12][1]++, this.mcpClient)) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[11][0]++;
        cov_1765ro6jw9().s[59]++;
        this.mcpClient.send(JSON.stringify(request));
        /* istanbul ignore next */
        cov_1765ro6jw9().s[60]++;
        response = await this.waitForResponse(request.id);
      } else {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[11][1]++;
        cov_1765ro6jw9().s[61]++;
        response = await this.mcpClient.send(request);
      }
      /* istanbul ignore next */
      cov_1765ro6jw9().s[62]++;
      return {
        success: !response.error,
        data: response.result,
        error: response.error?.message,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[63]++;
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
   * Handle incoming MCP messages
   */
  handleMCPMessage(data) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[13]++;
    cov_1765ro6jw9().s[64]++;
    if (data.method === 'notification') {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[13][0]++;
      cov_1765ro6jw9().s[65]++;
      this.emit('notification', data.params);
    } else {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[13][1]++;
      cov_1765ro6jw9().s[66]++;
      if (data.id) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[14][0]++;
        cov_1765ro6jw9().s[67]++;
        this.emit(`response_${data.id}`, data);
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[14][1]++;
      }
    }
  }
  /**
   * Wait for specific response
   */
  async waitForResponse(requestId) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[14]++;
    cov_1765ro6jw9().s[68]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_1765ro6jw9().f[15]++;
      const timeout =
      /* istanbul ignore next */
      (cov_1765ro6jw9().s[69]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_1765ro6jw9().f[16]++;
        cov_1765ro6jw9().s[70]++;
        reject(new Error('Request timeout'));
      }, 10000));
      /* istanbul ignore next */
      cov_1765ro6jw9().s[71]++;
      const handler = response => {
        /* istanbul ignore next */
        cov_1765ro6jw9().f[17]++;
        cov_1765ro6jw9().s[72]++;
        clearTimeout(timeout);
        /* istanbul ignore next */
        cov_1765ro6jw9().s[73]++;
        resolve(response);
      };
      /* istanbul ignore next */
      cov_1765ro6jw9().s[74]++;
      this.once(`response_${requestId}`, handler);
    });
  }
  /**
   * Start real-time monitoring of neural mesh
   */
  startRealtimeMonitoring() {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[18]++;
    cov_1765ro6jw9().s[75]++;
    if (this.realtimeInterval) {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[15][0]++;
      cov_1765ro6jw9().s[76]++;
      clearInterval(this.realtimeInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1765ro6jw9().b[15][1]++;
    }
    cov_1765ro6jw9().s[77]++;
    this.realtimeInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1765ro6jw9().f[19]++;
      cov_1765ro6jw9().s[78]++;
      try {
        const statusResponse =
        /* istanbul ignore next */
        (cov_1765ro6jw9().s[79]++, await this.callMCPTool('mesh_status', {
          meshId: this.connection?.meshId,
          metrics: ['activity', 'connectivity', 'efficiency']
        }));
        /* istanbul ignore next */
        cov_1765ro6jw9().s[80]++;
        if (
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[17][0]++, statusResponse.success) &&
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[17][1]++, this.connection)) {
          /* istanbul ignore next */
          cov_1765ro6jw9().b[16][0]++;
          cov_1765ro6jw9().s[81]++;
          this.connection.lastActivity = new Date();
          /* istanbul ignore next */
          cov_1765ro6jw9().s[82]++;
          this.emit('status_update', statusResponse.data);
        } else
        /* istanbul ignore next */
        {
          cov_1765ro6jw9().b[16][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1765ro6jw9().s[83]++;
        console.error('Real-time monitoring error:', error);
      }
    }, 1000); // Update every second
  }
  /**
   * Create a new neural agent
   */
  async createNeuralAgent(type, config) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[20]++;
    cov_1765ro6jw9().s[84]++;
    try {
      // Spawn neuron in the mesh
      const neuronResponse =
      /* istanbul ignore next */
      (cov_1765ro6jw9().s[85]++, await this.callMCPTool('neuron_spawn', {
        type: this.mapAgentTypeToNeuronType(type),
        layer:
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[18][0]++, config?.layer) ||
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[18][1]++, Math.floor(Math.random() * 6) + 1),
        threshold:
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[19][0]++, config?.threshold) ||
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[19][1]++, 0.5)
      }));
      /* istanbul ignore next */
      cov_1765ro6jw9().s[86]++;
      if (!neuronResponse.success) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[20][0]++;
        cov_1765ro6jw9().s[87]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[21][0]++, neuronResponse.error) ||
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[21][1]++, 'Failed to spawn neuron'));
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[20][1]++;
      }
      // Create neural agent with real neural properties
      const neuralAgent =
      /* istanbul ignore next */
      (cov_1765ro6jw9().s[88]++, {
        id: `agent_${Date.now()}`,
        name: `${type.charAt(0).toUpperCase() + type.slice(1)}-${neuronResponse.data.neuronId.slice(-4)}`,
        type,
        status: 'neural_sync',
        currentTask: 'Initializing neural connection...',
        repository: 'neural-mesh',
        branch: 'main',
        completedTasks: 0,
        efficiency: 75,
        progress: 0.1,
        position: {
          x: (Math.random() - 0.5) * 100,
          y: (Math.random() - 0.5) * 100,
          z: (Math.random() - 0.5) * 100
        },
        owner: 'Neural Mesh',
        neuralId: neuronResponse.data.neuronId,
        meshConnection: {
          connected: true,
          meshId:
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[22][0]++, this.connection?.meshId) ||
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[22][1]++, ''),
          nodeType: neuronResponse.data.type,
          layer: neuronResponse.data.layer,
          synapses: neuronResponse.data.connections,
          activation: 0,
          lastSpike: new Date()
        },
        realtime: {
          cpuUsage: Math.random() * 20 + 10,
          memoryUsage: Math.random() * 50 + 25,
          networkLatency: Math.random() * 5 + 1,
          wasmPerformance: this.wasmModule ?
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[23][0]++, 2.8) :
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[23][1]++, 1.0)
        },
        neuralProperties: {
          neuronId: neuronResponse.data.neuronId,
          meshId:
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[24][0]++, this.connection?.meshId) ||
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[24][1]++, ''),
          nodeType: neuronResponse.data.type,
          layer: neuronResponse.data.layer,
          threshold:
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[25][0]++, neuronResponse.data.threshold) ||
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[25][1]++, 0.5),
          activation: 0,
          connections: [],
          spikeHistory: [],
          lastSpike: new Date()
        },
        wasmMetrics: {
          executionTime: 0,
          memoryUsage: 0,
          simdAcceleration: !!this.wasmModule?.simdSupported,
          performanceScore: this.wasmModule ?
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[26][0]++, 95) :
          /* istanbul ignore next */
          (cov_1765ro6jw9().b[26][1]++, 70)
        }
      });
      /* istanbul ignore next */
      cov_1765ro6jw9().s[89]++;
      this.emit('agent_created', neuralAgent);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[90]++;
      return neuralAgent;
    } catch (error) {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[91]++;
      console.error('Failed to create neural agent:', error);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[92]++;
      return null;
    }
  }
  /**
   * Map agent type to neuron type
   */
  mapAgentTypeToNeuronType(agentType) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[21]++;
    const mapping =
    /* istanbul ignore next */
    (cov_1765ro6jw9().s[93]++, {
      'researcher': 'sensory',
      'coder': 'motor',
      'tester': 'inter',
      'reviewer': 'pyramidal',
      'debugger': 'purkinje',
      'neural': 'inter',
      'synaptic': 'pyramidal'
    });
    /* istanbul ignore next */
    cov_1765ro6jw9().s[94]++;
    return /* istanbul ignore next */(cov_1765ro6jw9().b[27][0]++, mapping[agentType]) ||
    /* istanbul ignore next */
    (cov_1765ro6jw9().b[27][1]++, 'inter');
  }
  /**
   * Update agent with neural activity
   */
  async updateNeuralAgent(agent) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[22]++;
    cov_1765ro6jw9().s[95]++;
    try {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[96]++;
      // Inject thought/task into neural mesh
      if (agent.currentTask) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[28][0]++;
        cov_1765ro6jw9().s[97]++;
        await this.callMCPTool('thought_inject', {
          thought: agent.currentTask,
          encoding: 'embedding',
          target_layer: agent.neuralProperties.layer
        });
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[28][1]++;
      }
      // Perform WASM-accelerated computation if available
      cov_1765ro6jw9().s[98]++;
      if (
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[30][0]++, this.wasmModule) &&
      /* istanbul ignore next */
      (cov_1765ro6jw9().b[30][1]++, agent.neuralProperties.spikeHistory.length > 0)) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[29][0]++;
        const inputs =
        /* istanbul ignore next */
        (cov_1765ro6jw9().s[99]++, new Float32Array(agent.neuralProperties.spikeHistory.slice(-10)));
        const outputs =
        /* istanbul ignore next */
        (cov_1765ro6jw9().s[100]++, this.wasmModule.calculateNeuralActivation(inputs));
        /* istanbul ignore next */
        cov_1765ro6jw9().s[101]++;
        agent.neuralProperties.activation = outputs[outputs.length - 1];
        /* istanbul ignore next */
        cov_1765ro6jw9().s[102]++;
        agent.wasmMetrics.executionTime = performance.now();
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[29][1]++;
      }
      // Update real-time metrics
      cov_1765ro6jw9().s[103]++;
      agent.realtime = {
        cpuUsage: Math.random() * 30 + 20,
        memoryUsage: Math.random() * 60 + 30,
        networkLatency: Math.random() * 10 + 2,
        wasmPerformance: this.wasmModule ?
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[31][0]++, 2.8) :
        /* istanbul ignore next */
        (cov_1765ro6jw9().b[31][1]++, 1.0)
      };
      // Update efficiency based on neural activity
      /* istanbul ignore next */
      cov_1765ro6jw9().s[104]++;
      agent.efficiency = Math.min(100, Math.max(0, agent.efficiency + (agent.neuralProperties.activation - 0.5) * 10));
      // Update status based on neural activity
      /* istanbul ignore next */
      cov_1765ro6jw9().s[105]++;
      if (agent.neuralProperties.activation > 0.8) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[32][0]++;
        cov_1765ro6jw9().s[106]++;
        agent.status = 'processing';
      } else {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[32][1]++;
        cov_1765ro6jw9().s[107]++;
        if (agent.neuralProperties.activation > 0.3) {
          /* istanbul ignore next */
          cov_1765ro6jw9().b[33][0]++;
          cov_1765ro6jw9().s[108]++;
          agent.status = 'active';
        } else {
          /* istanbul ignore next */
          cov_1765ro6jw9().b[33][1]++;
          cov_1765ro6jw9().s[109]++;
          agent.status = 'idle';
        }
      }
      /* istanbul ignore next */
      cov_1765ro6jw9().s[110]++;
      this.emit('agent_updated', agent);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[111]++;
      return agent;
    } catch (error) {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[112]++;
      console.error('Failed to update neural agent:', error);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[113]++;
      return agent;
    }
  }
  /**
   * Get mesh status
   */
  async getMeshStatus() {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[23]++;
    cov_1765ro6jw9().s[114]++;
    if (!this.connection) {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[34][0]++;
      cov_1765ro6jw9().s[115]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1765ro6jw9().b[34][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_1765ro6jw9().s[116]++, await this.callMCPTool('mesh_status', {
      meshId: this.connection.meshId,
      metrics: ['activity', 'connectivity', 'efficiency']
    }));
    /* istanbul ignore next */
    cov_1765ro6jw9().s[117]++;
    return response.success ?
    /* istanbul ignore next */
    (cov_1765ro6jw9().b[35][0]++, response.data) :
    /* istanbul ignore next */
    (cov_1765ro6jw9().b[35][1]++, null);
  }
  /**
   * Train the neural mesh with patterns
   */
  async trainMesh(patterns) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[24]++;
    cov_1765ro6jw9().s[118]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1765ro6jw9().s[119]++, await this.callMCPTool('mesh_train', {
        patterns,
        epochs: 50,
        learning_rate: 0.01,
        algorithm: 'backprop'
      }));
      /* istanbul ignore next */
      cov_1765ro6jw9().s[120]++;
      if (response.success) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[36][0]++;
        cov_1765ro6jw9().s[121]++;
        this.emit('mesh_trained', response.data);
        /* istanbul ignore next */
        cov_1765ro6jw9().s[122]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[36][1]++;
      }
      cov_1765ro6jw9().s[123]++;
      return false;
    } catch (error) {
      /* istanbul ignore next */
      cov_1765ro6jw9().s[124]++;
      console.error('Mesh training failed:', error);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[125]++;
      return false;
    }
  }
  /**
   * Event system
   */
  on(event, callback) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[25]++;
    cov_1765ro6jw9().s[126]++;
    if (!this.eventListeners.has(event)) {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[37][0]++;
      cov_1765ro6jw9().s[127]++;
      this.eventListeners.set(event, []);
    } else
    /* istanbul ignore next */
    {
      cov_1765ro6jw9().b[37][1]++;
    }
    cov_1765ro6jw9().s[128]++;
    this.eventListeners.get(event).push(callback);
  }
  once(event, callback) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[26]++;
    cov_1765ro6jw9().s[129]++;
    const wrapper = (...args) => {
      /* istanbul ignore next */
      cov_1765ro6jw9().f[27]++;
      cov_1765ro6jw9().s[130]++;
      this.off(event, wrapper);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[131]++;
      callback(...args);
    };
    /* istanbul ignore next */
    cov_1765ro6jw9().s[132]++;
    this.on(event, wrapper);
  }
  off(event, callback) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[28]++;
    const listeners =
    /* istanbul ignore next */
    (cov_1765ro6jw9().s[133]++, this.eventListeners.get(event));
    /* istanbul ignore next */
    cov_1765ro6jw9().s[134]++;
    if (listeners) {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[38][0]++;
      const index =
      /* istanbul ignore next */
      (cov_1765ro6jw9().s[135]++, listeners.indexOf(callback));
      /* istanbul ignore next */
      cov_1765ro6jw9().s[136]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_1765ro6jw9().b[39][0]++;
        cov_1765ro6jw9().s[137]++;
        listeners.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_1765ro6jw9().b[39][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1765ro6jw9().b[38][1]++;
    }
  }
  emit(event, data) {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[29]++;
    const listeners =
    /* istanbul ignore next */
    (cov_1765ro6jw9().s[138]++, this.eventListeners.get(event));
    /* istanbul ignore next */
    cov_1765ro6jw9().s[139]++;
    if (listeners) {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[40][0]++;
      cov_1765ro6jw9().s[140]++;
      listeners.forEach(callback => {
        /* istanbul ignore next */
        cov_1765ro6jw9().f[30]++;
        cov_1765ro6jw9().s[141]++;
        return callback(data);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1765ro6jw9().b[40][1]++;
    }
  }
  /**
   * Cleanup and disconnect
   */
  async disconnect() {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[31]++;
    cov_1765ro6jw9().s[142]++;
    if (this.realtimeInterval) {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[41][0]++;
      cov_1765ro6jw9().s[143]++;
      clearInterval(this.realtimeInterval);
      /* istanbul ignore next */
      cov_1765ro6jw9().s[144]++;
      this.realtimeInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1765ro6jw9().b[41][1]++;
    }
    cov_1765ro6jw9().s[145]++;
    if (
    /* istanbul ignore next */
    (cov_1765ro6jw9().b[43][0]++, this.mcpClient) &&
    /* istanbul ignore next */
    (cov_1765ro6jw9().b[43][1]++, this.config.transport === 'websocket')) {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[42][0]++;
      cov_1765ro6jw9().s[146]++;
      this.mcpClient.close();
    } else
    /* istanbul ignore next */
    {
      cov_1765ro6jw9().b[42][1]++;
    }
    cov_1765ro6jw9().s[147]++;
    if (this.connection) {
      /* istanbul ignore next */
      cov_1765ro6jw9().b[44][0]++;
      cov_1765ro6jw9().s[148]++;
      this.connection.status = 'disconnected';
      /* istanbul ignore next */
      cov_1765ro6jw9().s[149]++;
      this.emit('disconnected', this.connection);
    } else
    /* istanbul ignore next */
    {
      cov_1765ro6jw9().b[44][1]++;
    }
    cov_1765ro6jw9().s[150]++;
    this.eventListeners.clear();
  }
  /**
   * Get current connection status
   */
  getConnectionStatus() {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[32]++;
    cov_1765ro6jw9().s[151]++;
    return this.connection;
  }
  /**
   * Check if WASM is available
   */
  isWasmEnabled() {
    /* istanbul ignore next */
    cov_1765ro6jw9().f[33]++;
    cov_1765ro6jw9().s[152]++;
    return !!this.wasmModule;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,