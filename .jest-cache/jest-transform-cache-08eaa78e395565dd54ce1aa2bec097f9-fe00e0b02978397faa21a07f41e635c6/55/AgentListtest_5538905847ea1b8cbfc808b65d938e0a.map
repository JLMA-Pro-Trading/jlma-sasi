{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/components/AgentList.test.tsx","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/components/AgentList.test.tsx"],"sourcesContent":["/**\n * Comprehensive Unit Tests for AgentList Component\n * Target: 90%+ coverage for React component functionality\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport AgentList from '../../../src/components/AgentList';\n\n// Mock the CSS import\njest.mock('../../../src/styles/AgentList.css', () => ({}));\n\n// Mock agent data for testing\nconst mockAgents = [\n  {\n    id: 'agent-1',\n    type: 'researcher',\n    status: 'active',\n    performance: 85.2,\n    tasks: 12,\n    cognitivePattern: 'divergent',\n    neuralId: 'neural-1',\n    meshConnection: {\n      meshId: 'mesh-1',\n      strength: 0.8,\n      latency: 45\n    },\n    neuralProperties: {\n      neuronId: 'neuron-1',\n      meshId: 'mesh-1',\n      learningRate: 0.001,\n      activationFunction: 'tanh',\n      connectionStrength: 0.85\n    },\n    capabilities: ['research', 'analysis', 'documentation'],\n    memory: 45.6,\n    lastActive: Date.now() - 30000, // 30 seconds ago\n    createdAt: Date.now() - 300000 // 5 minutes ago\n  },\n  {\n    id: 'agent-2',\n    type: 'coder',\n    status: 'idle',\n    performance: 92.1,\n    tasks: 8,\n    cognitivePattern: 'convergent',\n    neuralId: 'neural-2',\n    meshConnection: {\n      meshId: 'mesh-1',\n      strength: 0.9,\n      latency: 32\n    },\n    neuralProperties: {\n      neuronId: 'neuron-2',\n      meshId: 'mesh-1',\n      learningRate: 0.002,\n      activationFunction: 'relu',\n      connectionStrength: 0.92\n    },\n    capabilities: ['coding', 'debugging', 'optimization'],\n    memory: 38.2,\n    lastActive: Date.now() - 120000, // 2 minutes ago\n    createdAt: Date.now() - 600000 // 10 minutes ago\n  },\n  {\n    id: 'agent-3',\n    type: 'analyst',\n    status: 'busy',\n    performance: 78.9,\n    tasks: 15,\n    cognitivePattern: 'systems',\n    neuralId: 'neural-3',\n    meshConnection: {\n      meshId: 'mesh-2',\n      strength: 0.7,\n      latency: 58\n    },\n    neuralProperties: {\n      neuronId: 'neuron-3',\n      meshId: 'mesh-2',\n      learningRate: 0.0015,\n      activationFunction: 'sigmoid',\n      connectionStrength: 0.76\n    },\n    capabilities: ['analysis', 'reporting', 'metrics'],\n    memory: 52.1,\n    lastActive: Date.now() - 5000, // 5 seconds ago\n    createdAt: Date.now() - 180000 // 3 minutes ago\n  }\n];\n\nconst mockOnAgentSelect = jest.fn();\nconst mockOnAgentAction = jest.fn();\n\ndescribe('AgentList Component - Comprehensive Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Rendering', () => {\n    test('should render agent list with default props', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByText('Active Agents (3)')).toBeInTheDocument();\n      expect(screen.getByText('agent-1')).toBeInTheDocument();\n      expect(screen.getByText('agent-2')).toBeInTheDocument();\n      expect(screen.getByText('agent-3')).toBeInTheDocument();\n    });\n\n    test('should render empty state when no agents', () => {\n      render(<AgentList agents={[]} />);\n      \n      expect(screen.getByText('No agents available')).toBeInTheDocument();\n      expect(screen.getByText('Spawn your first agent to get started')).toBeInTheDocument();\n    });\n\n    test('should render loading state', () => {\n      render(<AgentList agents={mockAgents} loading={true} />);\n      \n      expect(screen.getByText('Loading agents...')).toBeInTheDocument();\n    });\n\n    test('should render error state', () => {\n      const errorMessage = 'Failed to load agents';\n      render(<AgentList agents={[]} error={errorMessage} />);\n      \n      expect(screen.getByText('Error: Failed to load agents')).toBeInTheDocument();\n    });\n\n    test('should render custom title when provided', () => {\n      render(<AgentList agents={mockAgents} title=\"My Custom Agents\" />);\n      \n      expect(screen.getByText('My Custom Agents (3)')).toBeInTheDocument();\n    });\n  });\n\n  describe('Agent Display', () => {\n    test('should display agent status correctly', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByText('active')).toBeInTheDocument();\n      expect(screen.getByText('idle')).toBeInTheDocument();\n      expect(screen.getByText('busy')).toBeInTheDocument();\n    });\n\n    test('should display agent performance metrics', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByText('85.2%')).toBeInTheDocument();\n      expect(screen.getByText('92.1%')).toBeInTheDocument();\n      expect(screen.getByText('78.9%')).toBeInTheDocument();\n    });\n\n    test('should display agent types', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByText('researcher')).toBeInTheDocument();\n      expect(screen.getByText('coder')).toBeInTheDocument();\n      expect(screen.getByText('analyst')).toBeInTheDocument();\n    });\n\n    test('should display cognitive patterns', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByText('divergent')).toBeInTheDocument();\n      expect(screen.getByText('convergent')).toBeInTheDocument();\n      expect(screen.getByText('systems')).toBeInTheDocument();\n    });\n\n    test('should display task counts', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByText('12 tasks')).toBeInTheDocument();\n      expect(screen.getByText('8 tasks')).toBeInTheDocument();\n      expect(screen.getByText('15 tasks')).toBeInTheDocument();\n    });\n\n    test('should display memory usage', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByText('45.6 MB')).toBeInTheDocument();\n      expect(screen.getByText('38.2 MB')).toBeInTheDocument();\n      expect(screen.getByText('52.1 MB')).toBeInTheDocument();\n    });\n  });\n\n  describe('Filtering', () => {\n    test('should filter agents by status', () => {\n      render(<AgentList agents={mockAgents} showFilter={true} />);\n      \n      const statusFilter = screen.getByRole('combobox', { name: /status/i });\n      fireEvent.change(statusFilter, { target: { value: 'active' } });\n      \n      expect(screen.getByText('agent-1')).toBeInTheDocument();\n      expect(screen.queryByText('agent-2')).not.toBeInTheDocument();\n      expect(screen.queryByText('agent-3')).not.toBeInTheDocument();\n    });\n\n    test('should filter agents by type', () => {\n      render(<AgentList agents={mockAgents} showFilter={true} />);\n      \n      const typeFilter = screen.getByRole('combobox', { name: /type/i });\n      fireEvent.change(typeFilter, { target: { value: 'coder' } });\n      \n      expect(screen.queryByText('agent-1')).not.toBeInTheDocument();\n      expect(screen.getByText('agent-2')).toBeInTheDocument();\n      expect(screen.queryByText('agent-3')).not.toBeInTheDocument();\n    });\n\n    test('should search agents by name', () => {\n      render(<AgentList agents={mockAgents} showFilter={true} />);\n      \n      const searchInput = screen.getByPlaceholderText('Search agents...');\n      fireEvent.change(searchInput, { target: { value: 'agent-2' } });\n      \n      expect(screen.queryByText('agent-1')).not.toBeInTheDocument();\n      expect(screen.getByText('agent-2')).toBeInTheDocument();\n      expect(screen.queryByText('agent-3')).not.toBeInTheDocument();\n    });\n\n    test('should clear filters when reset button clicked', () => {\n      render(<AgentList agents={mockAgents} showFilter={true} />);\n      \n      // Apply a filter\n      const statusFilter = screen.getByRole('combobox', { name: /status/i });\n      fireEvent.change(statusFilter, { target: { value: 'active' } });\n      \n      // Click reset\n      const resetButton = screen.getByText('Reset Filters');\n      fireEvent.click(resetButton);\n      \n      // All agents should be visible again\n      expect(screen.getByText('agent-1')).toBeInTheDocument();\n      expect(screen.getByText('agent-2')).toBeInTheDocument();\n      expect(screen.getByText('agent-3')).toBeInTheDocument();\n    });\n  });\n\n  describe('Sorting', () => {\n    test('should sort agents by performance', () => {\n      render(<AgentList agents={mockAgents} showSort={true} />);\n      \n      const sortSelect = screen.getByRole('combobox', { name: /sort by/i });\n      fireEvent.change(sortSelect, { target: { value: 'performance' } });\n      \n      // Should sort in descending order (highest first)\n      const agentElements = screen.getAllByTestId(/agent-item/);\n      expect(agentElements[0]).toHaveTextContent('agent-2'); // 92.1%\n      expect(agentElements[1]).toHaveTextContent('agent-1'); // 85.2%\n      expect(agentElements[2]).toHaveTextContent('agent-3'); // 78.9%\n    });\n\n    test('should sort agents by name', () => {\n      render(<AgentList agents={mockAgents} showSort={true} />);\n      \n      const sortSelect = screen.getByRole('combobox', { name: /sort by/i });\n      fireEvent.change(sortSelect, { target: { value: 'name' } });\n      \n      const agentElements = screen.getAllByTestId(/agent-item/);\n      expect(agentElements[0]).toHaveTextContent('agent-1');\n      expect(agentElements[1]).toHaveTextContent('agent-2');\n      expect(agentElements[2]).toHaveTextContent('agent-3');\n    });\n\n    test('should sort agents by last active time', () => {\n      render(<AgentList agents={mockAgents} showSort={true} />);\n      \n      const sortSelect = screen.getByRole('combobox', { name: /sort by/i });\n      fireEvent.change(sortSelect, { target: { value: 'lastActive' } });\n      \n      // Should sort by most recently active first\n      const agentElements = screen.getAllByTestId(/agent-item/);\n      expect(agentElements[0]).toHaveTextContent('agent-3'); // 5 seconds ago\n      expect(agentElements[1]).toHaveTextContent('agent-1'); // 30 seconds ago\n      expect(agentElements[2]).toHaveTextContent('agent-2'); // 2 minutes ago\n    });\n  });\n\n  describe('Agent Selection', () => {\n    test('should call onAgentSelect when agent is clicked', () => {\n      render(<AgentList agents={mockAgents} onAgentSelect={mockOnAgentSelect} />);\n      \n      const agentElement = screen.getByTestId('agent-item-agent-1');\n      fireEvent.click(agentElement);\n      \n      expect(mockOnAgentSelect).toHaveBeenCalledWith(mockAgents[0]);\n    });\n\n    test('should highlight selected agent', () => {\n      render(<AgentList agents={mockAgents} selectedAgentId=\"agent-2\" />);\n      \n      const selectedAgent = screen.getByTestId('agent-item-agent-2');\n      expect(selectedAgent).toHaveClass('selected');\n    });\n\n    test('should allow multiple selection when enabled', () => {\n      render(<AgentList agents={mockAgents} allowMultiSelect={true} />);\n      \n      // Select multiple agents\n      const agent1 = screen.getByTestId('agent-item-agent-1');\n      const agent2 = screen.getByTestId('agent-item-agent-2');\n      \n      fireEvent.click(agent1);\n      fireEvent.click(agent2, { ctrlKey: true });\n      \n      expect(agent1).toHaveClass('selected');\n      expect(agent2).toHaveClass('selected');\n    });\n  });\n\n  describe('Agent Actions', () => {\n    test('should show action buttons when enabled', () => {\n      render(<AgentList agents={mockAgents} showActions={true} />);\n      \n      expect(screen.getAllByText('Terminate')).toHaveLength(3);\n      expect(screen.getAllByText('View Details')).toHaveLength(3);\n    });\n\n    test('should call onAgentAction when action button is clicked', () => {\n      render(<AgentList agents={mockAgents} showActions={true} onAgentAction={mockOnAgentAction} />);\n      \n      const terminateButton = screen.getAllByText('Terminate')[0];\n      fireEvent.click(terminateButton);\n      \n      expect(mockOnAgentAction).toHaveBeenCalledWith('terminate', mockAgents[0]);\n    });\n\n    test('should show additional actions in dropdown', () => {\n      render(<AgentList agents={mockAgents} showActions={true} />);\n      \n      const moreButton = screen.getAllByText('More')[0];\n      fireEvent.click(moreButton);\n      \n      expect(screen.getByText('Edit')).toBeInTheDocument();\n      expect(screen.getByText('Clone')).toBeInTheDocument();\n      expect(screen.getByText('Export')).toBeInTheDocument();\n    });\n  });\n\n  describe('Real-time Updates', () => {\n    test('should update agent list when agents prop changes', () => {\n      const { rerender } = render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByText('Active Agents (3)')).toBeInTheDocument();\n      \n      const updatedAgents = [...mockAgents, {\n        ...mockAgents[0],\n        id: 'agent-4',\n        type: 'optimizer'\n      }];\n      \n      rerender(<AgentList agents={updatedAgents} />);\n      \n      expect(screen.getByText('Active Agents (4)')).toBeInTheDocument();\n      expect(screen.getByText('agent-4')).toBeInTheDocument();\n    });\n\n    test('should show real-time status updates', async () => {\n      const { rerender } = render(<AgentList agents={mockAgents} />);\n      \n      const updatedAgents = mockAgents.map(agent => \n        agent.id === 'agent-1' \n          ? { ...agent, status: 'busy', performance: 87.5 }\n          : agent\n      );\n      \n      rerender(<AgentList agents={updatedAgents} />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('87.5%')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Performance Metrics', () => {\n    test('should display performance indicators correctly', () => {\n      render(<AgentList agents={mockAgents} showMetrics={true} />);\n      \n      // Check for performance bars\n      expect(screen.getAllByRole('progressbar')).toHaveLength(3);\n      \n      // Check for memory usage indicators\n      expect(screen.getByText('45.6 MB')).toBeInTheDocument();\n      expect(screen.getByText('38.2 MB')).toBeInTheDocument();\n      expect(screen.getByText('52.1 MB')).toBeInTheDocument();\n    });\n\n    test('should show connection strength indicators', () => {\n      render(<AgentList agents={mockAgents} showMetrics={true} />);\n      \n      expect(screen.getByText('80%')).toBeInTheDocument(); // Connection strength for agent-1\n      expect(screen.getByText('90%')).toBeInTheDocument(); // Connection strength for agent-2\n      expect(screen.getByText('70%')).toBeInTheDocument(); // Connection strength for agent-3\n    });\n\n    test('should display latency information', () => {\n      render(<AgentList agents={mockAgents} showMetrics={true} />);\n      \n      expect(screen.getByText('45ms')).toBeInTheDocument();\n      expect(screen.getByText('32ms')).toBeInTheDocument();\n      expect(screen.getByText('58ms')).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('should have proper ARIA labels', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByRole('list')).toHaveAttribute('aria-label', 'Agent list');\n      expect(screen.getAllByRole('listitem')).toHaveLength(3);\n    });\n\n    test('should support keyboard navigation', () => {\n      render(<AgentList agents={mockAgents} onAgentSelect={mockOnAgentSelect} />);\n      \n      const firstAgent = screen.getByTestId('agent-item-agent-1');\n      firstAgent.focus();\n      \n      fireEvent.keyDown(firstAgent, { key: 'Enter' });\n      expect(mockOnAgentSelect).toHaveBeenCalledWith(mockAgents[0]);\n      \n      fireEvent.keyDown(firstAgent, { key: ' ' });\n      expect(mockOnAgentSelect).toHaveBeenCalledTimes(2);\n    });\n\n    test('should have proper heading structure', () => {\n      render(<AgentList agents={mockAgents} />);\n      \n      expect(screen.getByRole('heading', { level: 2 })).toHaveTextContent('Active Agents (3)');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle agents with missing properties gracefully', () => {\n      const incompleteAgents = [\n        {\n          id: 'incomplete-agent',\n          type: 'unknown'\n          // Missing other properties\n        }\n      ];\n      \n      expect(() => render(<AgentList agents={incompleteAgents as any} />)).not.toThrow();\n      expect(screen.getByText('incomplete-agent')).toBeInTheDocument();\n    });\n\n    test('should handle null/undefined agent properties', () => {\n      const agentsWithNulls = [\n        {\n          ...mockAgents[0],\n          performance: null,\n          meshConnection: null,\n          neuralProperties: undefined\n        }\n      ];\n      \n      expect(() => render(<AgentList agents={agentsWithNulls as any} />)).not.toThrow();\n    });\n\n    test('should handle invalid performance values', () => {\n      const invalidAgents = [\n        {\n          ...mockAgents[0],\n          performance: NaN,\n          memory: -1\n        }\n      ];\n      \n      expect(() => render(<AgentList agents={invalidAgents} />)).not.toThrow();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle empty search results', () => {\n      render(<AgentList agents={mockAgents} showFilter={true} />);\n      \n      const searchInput = screen.getByPlaceholderText('Search agents...');\n      fireEvent.change(searchInput, { target: { value: 'nonexistent' } });\n      \n      expect(screen.getByText('No agents match your search criteria')).toBeInTheDocument();\n    });\n\n    test('should handle agents with very long names', () => {\n      const longNameAgent = {\n        ...mockAgents[0],\n        id: 'agent-with-very-long-name-that-might-cause-layout-issues',\n        type: 'agent-type-with-extremely-long-name'\n      };\n      \n      render(<AgentList agents={[longNameAgent]} />);\n      \n      expect(screen.getByText('agent-with-very-long-name-that-might-cause-layout-issues')).toBeInTheDocument();\n    });\n\n    test('should handle rapid updates without crashing', () => {\n      const { rerender } = render(<AgentList agents={mockAgents} />);\n      \n      // Simulate rapid updates\n      for (let i = 0; i < 10; i++) {\n        const updatedAgents = mockAgents.map(agent => ({\n          ...agent,\n          performance: Math.random() * 100,\n          lastActive: Date.now()\n        }));\n        \n        rerender(<AgentList agents={updatedAgents} />);\n      }\n      \n      expect(screen.getByText('Active Agents (3)')).toBeInTheDocument();\n    });\n\n    test('should handle agents with special characters in names', () => {\n      const specialAgent = {\n        ...mockAgents[0],\n        id: 'agent-with-special-chars-@#$%',\n        type: 'type-with-unicode-😀🚀'\n      };\n      \n      render(<AgentList agents={[specialAgent]} />);\n      \n      expect(screen.getByText('agent-with-special-chars-@#$%')).toBeInTheDocument();\n      expect(screen.getByText('type-with-unicode-😀🚀')).toBeInTheDocument();\n    });\n  });\n});"],"version":3}