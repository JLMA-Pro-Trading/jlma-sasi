7d4a3d512eaa55e3d62c856ce880a6f3
/* istanbul ignore next */
function cov_5bi21i5fj() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralContextAdapter.ts";
  var hash = "23500461f3e6f5346b147f7ce1ef37b38078a9b1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralContextAdapter.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 24
        }
      },
      "1": {
        start: {
          line: 12,
          column: 21
        },
        end: {
          line: 12,
          column: 26
        }
      },
      "2": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "3": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "4": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 28,
          column: 15
        }
      },
      "5": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "6": {
        start: {
          line: 31,
          column: 32
        },
        end: {
          line: 31,
          column: 107
        }
      },
      "7": {
        start: {
          line: 31,
          column: 49
        },
        end: {
          line: 31,
          column: 99
        }
      },
      "8": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 35,
          column: 19
        }
      },
      "9": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 42
        }
      },
      "10": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 36
        }
      },
      "11": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 39,
          column: 19
        }
      },
      "12": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "13": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 34
        }
      },
      "14": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 59
        }
      },
      "15": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 64
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 31
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 27
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 91
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 30
        }
      },
      "20": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 39
        }
      },
      "21": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "22": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 41
        }
      },
      "23": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 150,
          column: 5
        }
      },
      "24": {
        start: {
          line: 63,
          column: 23
        },
        end: {
          line: 63,
          column: 25
        }
      },
      "25": {
        start: {
          line: 65,
          column: 29
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "26": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "27": {
        start: {
          line: 113,
          column: 21
        },
        end: {
          line: 113,
          column: 22
        }
      },
      "28": {
        start: {
          line: 114,
          column: 32
        },
        end: {
          line: 114,
          column: 55
        }
      },
      "29": {
        start: {
          line: 115,
          column: 37
        },
        end: {
          line: 115,
          column: 62
        }
      },
      "30": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "31": {
        start: {
          line: 117,
          column: 38
        },
        end: {
          line: 117,
          column: 76
        }
      },
      "32": {
        start: {
          line: 118,
          column: 36
        },
        end: {
          line: 118,
          column: 78
        }
      },
      "33": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "34": {
        start: {
          line: 120,
          column: 38
        },
        end: {
          line: 133,
          column: 21
        }
      },
      "35": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 43
        }
      },
      "36": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 74
        }
      },
      "37": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 80
        }
      },
      "38": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 39
        }
      },
      "39": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 22
        }
      },
      "40": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 82
        }
      },
      "41": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 41
        }
      },
      "42": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 158,
          column: 5
        }
      },
      "43": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 44
        }
      },
      "44": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "45": {
        start: {
          line: 161,
          column: 29
        },
        end: {
          line: 161,
          column: 99
        }
      },
      "46": {
        start: {
          line: 161,
          column: 52
        },
        end: {
          line: 161,
          column: 98
        }
      },
      "47": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "48": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 19
        }
      },
      "49": {
        start: {
          line: 166,
          column: 29
        },
        end: {
          line: 166,
          column: 80
        }
      },
      "50": {
        start: {
          line: 167,
          column: 31
        },
        end: {
          line: 169,
          column: 35
        }
      },
      "51": {
        start: {
          line: 168,
          column: 24
        },
        end: {
          line: 168,
          column: 43
        }
      },
      "52": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "53": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "54": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 192,
          column: 17
        }
      },
      "55": {
        start: {
          line: 175,
          column: 38
        },
        end: {
          line: 175,
          column: 78
        }
      },
      "56": {
        start: {
          line: 176,
          column: 35
        },
        end: {
          line: 176,
          column: 97
        }
      },
      "57": {
        start: {
          line: 176,
          column: 75
        },
        end: {
          line: 176,
          column: 96
        }
      },
      "58": {
        start: {
          line: 177,
          column: 36
        },
        end: {
          line: 177,
          column: 98
        }
      },
      "59": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 39
        }
      },
      "60": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 52
        }
      },
      "61": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 181,
          column: 101
        }
      },
      "62": {
        start: {
          line: 183,
          column: 47
        },
        end: {
          line: 183,
          column: 96
        }
      },
      "63": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 187,
          column: 21
        }
      },
      "64": {
        start: {
          line: 185,
          column: 24
        },
        end: {
          line: 185,
          column: 75
        }
      },
      "65": {
        start: {
          line: 186,
          column: 24
        },
        end: {
          line: 186,
          column: 85
        }
      },
      "66": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 90
        }
      },
      "67": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 43
        }
      },
      "68": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "69": {
        start: {
          line: 197,
          column: 34
        },
        end: {
          line: 197,
          column: 99
        }
      },
      "70": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "71": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 54
        }
      },
      "72": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "73": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 60
        }
      },
      "74": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 66
        }
      },
      "75": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 37
        }
      },
      "76": {
        start: {
          line: 216,
          column: 25
        },
        end: {
          line: 216,
          column: 66
        }
      },
      "77": {
        start: {
          line: 216,
          column: 48
        },
        end: {
          line: 216,
          column: 65
        }
      },
      "78": {
        start: {
          line: 217,
          column: 25
        },
        end: {
          line: 217,
          column: 74
        }
      },
      "79": {
        start: {
          line: 217,
          column: 48
        },
        end: {
          line: 217,
          column: 73
        }
      },
      "80": {
        start: {
          line: 218,
          column: 29
        },
        end: {
          line: 218,
          column: 86
        }
      },
      "81": {
        start: {
          line: 218,
          column: 59
        },
        end: {
          line: 218,
          column: 82
        }
      },
      "82": {
        start: {
          line: 219,
          column: 23
        },
        end: {
          line: 219,
          column: 79
        }
      },
      "83": {
        start: {
          line: 219,
          column: 53
        },
        end: {
          line: 219,
          column: 75
        }
      },
      "84": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 220,
          column: 105
        }
      },
      "85": {
        start: {
          line: 220,
          column: 57
        },
        end: {
          line: 220,
          column: 80
        }
      },
      "86": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 227,
          column: 5
        }
      },
      "87": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 230,
          column: 5
        }
      },
      "88": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 61
        }
      },
      "89": {
        start: {
          line: 231,
          column: 31
        },
        end: {
          line: 238,
          column: 5
        }
      },
      "90": {
        start: {
          line: 239,
          column: 4
        },
        end: {
          line: 253,
          column: 6
        }
      },
      "91": {
        start: {
          line: 259,
          column: 19
        },
        end: {
          line: 259,
          column: 48
        }
      },
      "92": {
        start: {
          line: 260,
          column: 23
        },
        end: {
          line: 260,
          column: 55
        }
      },
      "93": {
        start: {
          line: 261,
          column: 31
        },
        end: {
          line: 268,
          column: 5
        }
      },
      "94": {
        start: {
          line: 269,
          column: 4
        },
        end: {
          line: 275,
          column: 6
        }
      },
      "95": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 282,
          column: 15
        }
      },
      "96": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 15
        }
      },
      "97": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 307,
          column: 5
        }
      },
      "98": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 34
        }
      },
      "99": {
        start: {
          line: 286,
          column: 26
        },
        end: {
          line: 286,
          column: 66
        }
      },
      "100": {
        start: {
          line: 287,
          column: 27
        },
        end: {
          line: 287,
          column: 114
        }
      },
      "101": {
        start: {
          line: 288,
          column: 29
        },
        end: {
          line: 291,
          column: 11
        }
      },
      "102": {
        start: {
          line: 288,
          column: 63
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "103": {
        start: {
          line: 289,
          column: 60
        },
        end: {
          line: 289,
          column: 81
        }
      },
      "104": {
        start: {
          line: 290,
          column: 62
        },
        end: {
          line: 290,
          column: 75
        }
      },
      "105": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "106": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 36
        }
      },
      "107": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 59
        }
      },
      "108": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 121
        }
      },
      "109": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 35
        }
      },
      "110": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 72
        }
      },
      "111": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 31
        }
      },
      "112": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 74
        }
      },
      "113": {
        start: {
          line: 313,
          column: 4
        },
        end: {
          line: 314,
          column: 15
        }
      },
      "114": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 15
        }
      },
      "115": {
        start: {
          line: 315,
          column: 4
        },
        end: {
          line: 338,
          column: 5
        }
      },
      "116": {
        start: {
          line: 316,
          column: 29
        },
        end: {
          line: 316,
          column: 70
        }
      },
      "117": {
        start: {
          line: 316,
          column: 52
        },
        end: {
          line: 316,
          column: 69
        }
      },
      "118": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 318,
          column: 19
        }
      },
      "119": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 19
        }
      },
      "120": {
        start: {
          line: 320,
          column: 28
        },
        end: {
          line: 320,
          column: 89
        }
      },
      "121": {
        start: {
          line: 321,
          column: 29
        },
        end: {
          line: 323,
          column: 56
        }
      },
      "122": {
        start: {
          line: 322,
          column: 29
        },
        end: {
          line: 322,
          column: 56
        }
      },
      "123": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 120
        }
      },
      "124": {
        start: {
          line: 324,
          column: 97
        },
        end: {
          line: 324,
          column: 117
        }
      },
      "125": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 333,
          column: 11
        }
      },
      "126": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 329,
          column: 13
        }
      },
      "127": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 56
        }
      },
      "128": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "129": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 56
        }
      },
      "130": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 110
        }
      },
      "131": {
        start: {
          line: 334,
          column: 88
        },
        end: {
          line: 334,
          column: 94
        }
      },
      "132": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 57
        }
      },
      "133": {
        start: {
          line: 345,
          column: 4
        },
        end: {
          line: 361,
          column: 5
        }
      },
      "134": {
        start: {
          line: 345,
          column: 17
        },
        end: {
          line: 345,
          column: 18
        }
      },
      "135": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "136": {
        start: {
          line: 346,
          column: 21
        },
        end: {
          line: 346,
          column: 26
        }
      },
      "137": {
        start: {
          line: 347,
          column: 27
        },
        end: {
          line: 347,
          column: 36
        }
      },
      "138": {
        start: {
          line: 348,
          column: 27
        },
        end: {
          line: 348,
          column: 36
        }
      },
      "139": {
        start: {
          line: 350,
          column: 42
        },
        end: {
          line: 350,
          column: 81
        }
      },
      "140": {
        start: {
          line: 351,
          column: 37
        },
        end: {
          line: 351,
          column: 84
        }
      },
      "141": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 359,
          column: 13
        }
      },
      "142": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 355,
          column: 17
        }
      },
      "143": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 55
        }
      },
      "144": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "145": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 55
        }
      },
      "146": {
        start: {
          line: 365,
          column: 19
        },
        end: {
          line: 365,
          column: 40
        }
      },
      "147": {
        start: {
          line: 366,
          column: 23
        },
        end: {
          line: 366,
          column: 53
        }
      },
      "148": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 380,
          column: 6
        }
      },
      "149": {
        start: {
          line: 383,
          column: 23
        },
        end: {
          line: 383,
          column: 70
        }
      },
      "150": {
        start: {
          line: 384,
          column: 23
        },
        end: {
          line: 384,
          column: 88
        }
      },
      "151": {
        start: {
          line: 385,
          column: 4
        },
        end: {
          line: 385,
          column: 141
        }
      },
      "152": {
        start: {
          line: 385,
          column: 51
        },
        end: {
          line: 385,
          column: 139
        }
      },
      "153": {
        start: {
          line: 388,
          column: 4
        },
        end: {
          line: 400,
          column: 6
        }
      },
      "154": {
        start: {
          line: 403,
          column: 25
        },
        end: {
          line: 403,
          column: 74
        }
      },
      "155": {
        start: {
          line: 403,
          column: 48
        },
        end: {
          line: 403,
          column: 73
        }
      },
      "156": {
        start: {
          line: 404,
          column: 29
        },
        end: {
          line: 404,
          column: 86
        }
      },
      "157": {
        start: {
          line: 404,
          column: 59
        },
        end: {
          line: 404,
          column: 82
        }
      },
      "158": {
        start: {
          line: 405,
          column: 23
        },
        end: {
          line: 405,
          column: 79
        }
      },
      "159": {
        start: {
          line: 405,
          column: 53
        },
        end: {
          line: 405,
          column: 75
        }
      },
      "160": {
        start: {
          line: 406,
          column: 27
        },
        end: {
          line: 406,
          column: 100
        }
      },
      "161": {
        start: {
          line: 406,
          column: 57
        },
        end: {
          line: 406,
          column: 80
        }
      },
      "162": {
        start: {
          line: 407,
          column: 4
        },
        end: {
          line: 433,
          column: 6
        }
      },
      "163": {
        start: {
          line: 415,
          column: 40
        },
        end: {
          line: 421,
          column: 13
        }
      },
      "164": {
        start: {
          line: 437,
          column: 4
        },
        end: {
          line: 444,
          column: 7
        }
      },
      "165": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "166": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 44
        }
      },
      "167": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 60
        }
      },
      "168": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 59
        }
      },
      "169": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 78
        }
      },
      "170": {
        start: {
          line: 448,
          column: 4
        },
        end: {
          line: 451,
          column: 5
        }
      },
      "171": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 38
        }
      },
      "172": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 29
        }
      },
      "173": {
        start: {
          line: 452,
          column: 4
        },
        end: {
          line: 452,
          column: 27
        }
      },
      "174": {
        start: {
          line: 456,
          column: 4
        },
        end: {
          line: 456,
          column: 25
        }
      },
      "175": {
        start: {
          line: 460,
          column: 4
        },
        end: {
          line: 464,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "initializeNeuralData",
        decl: {
          start: {
            line: 16,
            column: 22
          },
          end: {
            line: 16,
            column: 42
          }
        },
        loc: {
          start: {
            line: 16,
            column: 45
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 30
          },
          end: {
            line: 30,
            column: 31
          }
        },
        loc: {
          start: {
            line: 30,
            column: 51
          },
          end: {
            line: 40,
            column: 13
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 43
          },
          end: {
            line: 31,
            column: 44
          }
        },
        loc: {
          start: {
            line: 31,
            column: 49
          },
          end: {
            line: 31,
            column: 99
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 32,
            column: 50
          },
          end: {
            line: 32,
            column: 51
          }
        },
        loc: {
          start: {
            line: 32,
            column: 56
          },
          end: {
            line: 35,
            column: 17
          }
        },
        line: 32
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 36,
            column: 45
          }
        },
        loc: {
          start: {
            line: 36,
            column: 55
          },
          end: {
            line: 39,
            column: 17
          }
        },
        line: 36
      },
      "5": {
        name: "generateNeuralAgents",
        decl: {
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 58,
            column: 42
          }
        },
        loc: {
          start: {
            line: 58,
            column: 54
          },
          end: {
            line: 151,
            column: 1
          }
        },
        line: 58
      },
      "6": {
        name: "simulateNeuralActivity",
        decl: {
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 155,
            column: 44
          }
        },
        loc: {
          start: {
            line: 155,
            column: 53
          },
          end: {
            line: 211,
            column: 1
          }
        },
        line: 155
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 161,
            column: 43
          },
          end: {
            line: 161,
            column: 44
          }
        },
        loc: {
          start: {
            line: 161,
            column: 52
          },
          end: {
            line: 161,
            column: 98
          }
        },
        line: 161
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 168,
            column: 18
          },
          end: {
            line: 168,
            column: 19
          }
        },
        loc: {
          start: {
            line: 168,
            column: 24
          },
          end: {
            line: 168,
            column: 43
          }
        },
        line: 168
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 176,
            column: 69
          },
          end: {
            line: 176,
            column: 70
          }
        },
        loc: {
          start: {
            line: 176,
            column: 75
          },
          end: {
            line: 176,
            column: 96
          }
        },
        line: 176
      },
      "10": {
        name: "getNeuralSwarmStatistics",
        decl: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 40
          }
        },
        loc: {
          start: {
            line: 215,
            column: 49
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 215
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 216,
            column: 39
          },
          end: {
            line: 216,
            column: 40
          }
        },
        loc: {
          start: {
            line: 216,
            column: 48
          },
          end: {
            line: 216,
            column: 65
          }
        },
        line: 216
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 217,
            column: 39
          },
          end: {
            line: 217,
            column: 40
          }
        },
        loc: {
          start: {
            line: 217,
            column: 48
          },
          end: {
            line: 217,
            column: 73
          }
        },
        line: 217
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 218,
            column: 43
          },
          end: {
            line: 218,
            column: 44
          }
        },
        loc: {
          start: {
            line: 218,
            column: 59
          },
          end: {
            line: 218,
            column: 82
          }
        },
        line: 218
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 219,
            column: 37
          },
          end: {
            line: 219,
            column: 38
          }
        },
        loc: {
          start: {
            line: 219,
            column: 53
          },
          end: {
            line: 219,
            column: 75
          }
        },
        line: 219
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 220,
            column: 41
          },
          end: {
            line: 220,
            column: 42
          }
        },
        loc: {
          start: {
            line: 220,
            column: 57
          },
          end: {
            line: 220,
            column: 80
          }
        },
        line: 220
      },
      "16": {
        name: "generateNeuralSwarmData",
        decl: {
          start: {
            line: 258,
            column: 15
          },
          end: {
            line: 258,
            column: 38
          }
        },
        loc: {
          start: {
            line: 258,
            column: 41
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 258
      },
      "17": {
        name: "triggerLearningSession",
        decl: {
          start: {
            line: 280,
            column: 15
          },
          end: {
            line: 280,
            column: 37
          }
        },
        loc: {
          start: {
            line: 280,
            column: 45
          },
          end: {
            line: 308,
            column: 1
          }
        },
        line: 280
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 288,
            column: 56
          },
          end: {
            line: 288,
            column: 57
          }
        },
        loc: {
          start: {
            line: 288,
            column: 63
          },
          end: {
            line: 291,
            column: 9
          }
        },
        line: 288
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 289,
            column: 54
          },
          end: {
            line: 289,
            column: 55
          }
        },
        loc: {
          start: {
            line: 289,
            column: 60
          },
          end: {
            line: 289,
            column: 81
          }
        },
        line: 289
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 290,
            column: 56
          },
          end: {
            line: 290,
            column: 57
          }
        },
        loc: {
          start: {
            line: 290,
            column: 62
          },
          end: {
            line: 290,
            column: 75
          }
        },
        line: 290
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 294,
            column: 18
          },
          end: {
            line: 294,
            column: 19
          }
        },
        loc: {
          start: {
            line: 294,
            column: 31
          },
          end: {
            line: 298,
            column: 9
          }
        },
        line: 294
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 299,
            column: 19
          },
          end: {
            line: 299,
            column: 20
          }
        },
        loc: {
          start: {
            line: 299,
            column: 30
          },
          end: {
            line: 302,
            column: 9
          }
        },
        line: 299
      },
      "23": {
        name: "shareKnowledgeBetweenAgents",
        decl: {
          start: {
            line: 312,
            column: 15
          },
          end: {
            line: 312,
            column: 42
          }
        },
        loc: {
          start: {
            line: 312,
            column: 51
          },
          end: {
            line: 339,
            column: 1
          }
        },
        line: 312
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 316,
            column: 43
          },
          end: {
            line: 316,
            column: 44
          }
        },
        loc: {
          start: {
            line: 316,
            column: 52
          },
          end: {
            line: 316,
            column: 69
          }
        },
        line: 316
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 322,
            column: 20
          },
          end: {
            line: 322,
            column: 21
          }
        },
        loc: {
          start: {
            line: 322,
            column: 29
          },
          end: {
            line: 322,
            column: 56
          }
        },
        line: 322
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 324,
            column: 88
          },
          end: {
            line: 324,
            column: 89
          }
        },
        loc: {
          start: {
            line: 324,
            column: 97
          },
          end: {
            line: 324,
            column: 117
          }
        },
        line: 324
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 326,
            column: 29
          },
          end: {
            line: 326,
            column: 30
          }
        },
        loc: {
          start: {
            line: 326,
            column: 39
          },
          end: {
            line: 333,
            column: 9
          }
        },
        line: 326
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 334,
            column: 83
          },
          end: {
            line: 334,
            column: 84
          }
        },
        loc: {
          start: {
            line: 334,
            column: 88
          },
          end: {
            line: 334,
            column: 94
          }
        },
        line: 334
      },
      "29": {
        name: "updateAgentConnections",
        decl: {
          start: {
            line: 343,
            column: 9
          },
          end: {
            line: 343,
            column: 31
          }
        },
        loc: {
          start: {
            line: 343,
            column: 40
          },
          end: {
            line: 362,
            column: 1
          }
        },
        line: 343
      },
      "30": {
        name: "generateMockSwarmData",
        decl: {
          start: {
            line: 364,
            column: 9
          },
          end: {
            line: 364,
            column: 30
          }
        },
        loc: {
          start: {
            line: 364,
            column: 33
          },
          end: {
            line: 381,
            column: 1
          }
        },
        line: 364
      },
      "31": {
        name: "generateMockAgents",
        decl: {
          start: {
            line: 382,
            column: 9
          },
          end: {
            line: 382,
            column: 27
          }
        },
        loc: {
          start: {
            line: 382,
            column: 35
          },
          end: {
            line: 386,
            column: 1
          }
        },
        line: 382
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 385,
            column: 41
          },
          end: {
            line: 385,
            column: 42
          }
        },
        loc: {
          start: {
            line: 385,
            column: 51
          },
          end: {
            line: 385,
            column: 139
          }
        },
        line: 385
      },
      "33": {
        name: "createMockAgent",
        decl: {
          start: {
            line: 387,
            column: 9
          },
          end: {
            line: 387,
            column: 24
          }
        },
        loc: {
          start: {
            line: 387,
            column: 56
          },
          end: {
            line: 401,
            column: 1
          }
        },
        line: 387
      },
      "34": {
        name: "getMockSwarmStatistics",
        decl: {
          start: {
            line: 402,
            column: 9
          },
          end: {
            line: 402,
            column: 31
          }
        },
        loc: {
          start: {
            line: 402,
            column: 40
          },
          end: {
            line: 434,
            column: 1
          }
        },
        line: 402
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 403,
            column: 39
          },
          end: {
            line: 403,
            column: 40
          }
        },
        loc: {
          start: {
            line: 403,
            column: 48
          },
          end: {
            line: 403,
            column: 73
          }
        },
        line: 403
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 404,
            column: 43
          },
          end: {
            line: 404,
            column: 44
          }
        },
        loc: {
          start: {
            line: 404,
            column: 59
          },
          end: {
            line: 404,
            column: 82
          }
        },
        line: 404
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 405,
            column: 37
          },
          end: {
            line: 405,
            column: 38
          }
        },
        loc: {
          start: {
            line: 405,
            column: 53
          },
          end: {
            line: 405,
            column: 75
          }
        },
        line: 405
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 406,
            column: 41
          },
          end: {
            line: 406,
            column: 42
          }
        },
        loc: {
          start: {
            line: 406,
            column: 57
          },
          end: {
            line: 406,
            column: 80
          }
        },
        line: 406
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 415,
            column: 30
          },
          end: {
            line: 415,
            column: 31
          }
        },
        loc: {
          start: {
            line: 415,
            column: 40
          },
          end: {
            line: 421,
            column: 13
          }
        },
        line: 415
      },
      "40": {
        name: "simulateMockActivity",
        decl: {
          start: {
            line: 435,
            column: 9
          },
          end: {
            line: 435,
            column: 29
          }
        },
        loc: {
          start: {
            line: 435,
            column: 38
          },
          end: {
            line: 445,
            column: 1
          }
        },
        line: 435
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 437,
            column: 19
          },
          end: {
            line: 437,
            column: 20
          }
        },
        loc: {
          start: {
            line: 437,
            column: 28
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 437
      },
      "42": {
        name: "cleanupNeuralSystem",
        decl: {
          start: {
            line: 447,
            column: 22
          },
          end: {
            line: 447,
            column: 41
          }
        },
        loc: {
          start: {
            line: 447,
            column: 44
          },
          end: {
            line: 453,
            column: 1
          }
        },
        line: 447
      },
      "43": {
        name: "getNeuralManager",
        decl: {
          start: {
            line: 455,
            column: 16
          },
          end: {
            line: 455,
            column: 32
          }
        },
        loc: {
          start: {
            line: 455,
            column: 35
          },
          end: {
            line: 457,
            column: 1
          }
        },
        line: 455
      },
      "44": {
        name: "getNeuralSystemStatus",
        decl: {
          start: {
            line: 459,
            column: 16
          },
          end: {
            line: 459,
            column: 37
          }
        },
        loc: {
          start: {
            line: 459,
            column: 40
          },
          end: {
            line: 465,
            column: 1
          }
        },
        line: 459
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 43
          },
          end: {
            line: 58,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 58,
            column: 51
          },
          end: {
            line: 58,
            column: 52
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 22
          }
        }, {
          start: {
            line: 59,
            column: 26
          },
          end: {
            line: 59,
            column: 40
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "5": {
        loc: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "6": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 156,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 156,
            column: 22
          }
        }, {
          start: {
            line: 156,
            column: 26
          },
          end: {
            line: 156,
            column: 40
          }
        }],
        line: 156
      },
      "7": {
        loc: {
          start: {
            line: 161,
            column: 52
          },
          end: {
            line: 161,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 52
          },
          end: {
            line: 161,
            column: 77
          }
        }, {
          start: {
            line: 161,
            column: 81
          },
          end: {
            line: 161,
            column: 98
          }
        }],
        line: 161
      },
      "8": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "9": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "10": {
        loc: {
          start: {
            line: 184,
            column: 20
          },
          end: {
            line: 187,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 20
          },
          end: {
            line: 187,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "11": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "12": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "13": {
        loc: {
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 198,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 198,
            column: 41
          }
        }, {
          start: {
            line: 198,
            column: 45
          },
          end: {
            line: 198,
            column: 78
          }
        }],
        line: 198
      },
      "14": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "15": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 32
          }
        }, {
          start: {
            line: 203,
            column: 36
          },
          end: {
            line: 203,
            column: 59
          }
        }],
        line: 203
      },
      "16": {
        loc: {
          start: {
            line: 220,
            column: 27
          },
          end: {
            line: 220,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 27
          },
          end: {
            line: 220,
            column: 100
          }
        }, {
          start: {
            line: 220,
            column: 104
          },
          end: {
            line: 220,
            column: 105
          }
        }],
        line: 220
      },
      "17": {
        loc: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "18": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 228,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 228,
            column: 21
          }
        }, {
          start: {
            line: 228,
            column: 25
          },
          end: {
            line: 228,
            column: 48
          }
        }],
        line: 228
      },
      "19": {
        loc: {
          start: {
            line: 231,
            column: 31
          },
          end: {
            line: 238,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 231,
            column: 47
          },
          end: {
            line: 231,
            column: 84
          }
        }, {
          start: {
            line: 231,
            column: 87
          },
          end: {
            line: 238,
            column: 5
          }
        }],
        line: 231
      },
      "20": {
        loc: {
          start: {
            line: 261,
            column: 31
          },
          end: {
            line: 268,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 261,
            column: 47
          },
          end: {
            line: 261,
            column: 84
          }
        }, {
          start: {
            line: 261,
            column: 87
          },
          end: {
            line: 268,
            column: 5
          }
        }],
        line: 261
      },
      "21": {
        loc: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 282,
            column: 15
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 282,
            column: 15
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "22": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 281,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 281,
            column: 26
          }
        }, {
          start: {
            line: 281,
            column: 30
          },
          end: {
            line: 281,
            column: 44
          }
        }],
        line: 281
      },
      "23": {
        loc: {
          start: {
            line: 313,
            column: 4
          },
          end: {
            line: 314,
            column: 15
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 4
          },
          end: {
            line: 314,
            column: 15
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "24": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 318,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 318,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "25": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "26": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "27": {
        loc: {
          start: {
            line: 350,
            column: 42
          },
          end: {
            line: 350,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 350,
            column: 72
          },
          end: {
            line: 350,
            column: 75
          }
        }, {
          start: {
            line: 350,
            column: 78
          },
          end: {
            line: 350,
            column: 81
          }
        }],
        line: 350
      },
      "28": {
        loc: {
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 359,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 359,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      },
      "29": {
        loc: {
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 355,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 355,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "30": {
        loc: {
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "31": {
        loc: {
          start: {
            line: 387,
            column: 42
          },
          end: {
            line: 387,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 387,
            column: 49
          },
          end: {
            line: 387,
            column: 54
          }
        }],
        line: 387
      },
      "32": {
        loc: {
          start: {
            line: 392,
            column: 16
          },
          end: {
            line: 392,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 38
          },
          end: {
            line: 392,
            column: 46
          }
        }, {
          start: {
            line: 392,
            column: 49
          },
          end: {
            line: 392,
            column: 55
          }
        }],
        line: 392
      },
      "33": {
        loc: {
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 438
      },
      "34": {
        loc: {
          start: {
            line: 440,
            column: 32
          },
          end: {
            line: 440,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 440,
            column: 54
          },
          end: {
            line: 440,
            column: 55
          }
        }, {
          start: {
            line: 440,
            column: 58
          },
          end: {
            line: 440,
            column: 59
          }
        }],
        line: 440
      },
      "35": {
        loc: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralContextAdapter.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralContextAdapter.ts"],
      sourcesContent: ["/**\n * Neural Context Adapter for SASI Integration\n * Drop-in replacement functions for SwarmContext mock implementations\n * \n * This adapter provides seamless integration between SASI's existing SwarmContext\n * and the new neural agent system, maintaining full compatibility while adding\n * real neural capabilities.\n */\n\nimport NeuralAgentManager from './NeuralAgentManager';\nimport type { \n  SASIAgent, \n  SASISwarmData, \n  NeuralConfiguration,\n  AgentMetrics,\n  SwarmStatistics \n} from '../types/neural';\n\n// Singleton instance for seamless integration\nlet neuralManager: NeuralAgentManager | null = null;\nlet fallbackToMock = false;\n\n/**\n * Initialize neural data (replaces initializeMockData)\n */\nexport async function initializeNeuralData(): Promise<SASISwarmData> {\n  try {\n    // Initialize neural manager if not already done\n    if (!neuralManager) {\n      neuralManager = new NeuralAgentManager({\n        maxAgents: 25,\n        memoryLimitPerAgent: 50 * 1024 * 1024, // 50MB\n        inferenceTimeout: 100, // 100ms\n        simdEnabled: true,\n        crossLearningEnabled: true,\n        persistenceEnabled: true,\n        performanceMonitoring: true\n      });\n      \n      // Wait for initialization\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => reject(new Error('Neural initialization timeout')), 10000);\n        \n        neuralManager!.once('initialized', () => {\n          clearTimeout(timeout);\n          resolve(void 0);\n        });\n        \n        neuralManager!.once('error', (error) => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n      });\n    }\n    \n    // Generate initial neural data\n    const initialData = await generateNeuralSwarmData();\n    \n    console.log('\u2705 Neural system initialized successfully');\n    fallbackToMock = false;\n    \n    return initialData;\n    \n  } catch (error) {\n    console.warn('\u26A0\uFE0F Neural initialization failed, falling back to mock data:', error);\n    fallbackToMock = true;\n    \n    // Fallback to mock data\n    return generateMockSwarmData();\n  }\n}\n\n/**\n * Generate neural agents (replaces generateMockAgents)\n */\nexport async function generateNeuralAgents(count: number = 5): Promise<SASIAgent[]> {\n  if (fallbackToMock || !neuralManager) {\n    return generateMockAgents(count);\n  }\n  \n  try {\n    const agents: SASIAgent[] = [];\n    \n    // Define neural configurations for different agent types\n    const agentConfigs: Array<{ name: string; config: NeuralConfiguration }> = [\n      {\n        name: 'Coordinator',\n        config: {\n          type: 'mlp',\n          architecture: [128, 64, 32, 16],\n          activationFunction: 'relu',\n          learningRate: 0.01\n        }\n      },\n      {\n        name: 'Analyzer',\n        config: {\n          type: 'lstm',\n          architecture: [256, 128, 64, 32],\n          activationFunction: 'tanh',\n          learningRate: 0.005\n        }\n      },\n      {\n        name: 'Optimizer',\n        config: {\n          type: 'mlp',\n          architecture: [512, 256, 128, 64],\n          activationFunction: 'gelu',\n          learningRate: 0.001\n        }\n      },\n      {\n        name: 'Researcher',\n        config: {\n          type: 'transformer',\n          architecture: [1024, 512, 256, 128],\n          activationFunction: 'relu',\n          learningRate: 0.0001\n        }\n      },\n      {\n        name: 'Monitor',\n        config: {\n          type: 'cnn',\n          architecture: [784, 392, 196, 10],\n          activationFunction: 'leaky_relu',\n          learningRate: 0.01\n        }\n      }\n    ];\n    \n    // Spawn neural agents\n    for (let i = 0; i < count; i++) {\n      const configIndex = i % agentConfigs.length;\n      const { name, config } = agentConfigs[configIndex];\n      \n      try {\n        const neuralAgentId = await neuralManager.spawnAgent(config);\n        const neuralAgent = neuralManager.getAgentState(neuralAgentId);\n        \n        if (neuralAgent) {\n          const sasiAgent: SASIAgent = {\n            id: neuralAgentId,\n            name: `${name}-${i + 1}`,\n            type: config.type,\n            status: 'active',\n            performance: 85 + Math.random() * 15, // 85-100%\n            memoryUsage: neuralAgent.memoryUsage,\n            lastActivity: neuralAgent.lastActive,\n            totalTasks: 0,\n            successRate: 0.95 + Math.random() * 0.05, // 95-100%\n            learningProgress: neuralAgent.learningProgress,\n            connections: [],\n            neuralAgent\n          };\n          \n          agents.push(sasiAgent);\n        }\n        \n      } catch (error) {\n        console.warn(`Failed to spawn neural agent ${i}:`, error);\n        \n        // Create a mock agent as fallback\n        agents.push(createMockAgent(i, agentConfigs[configIndex].name));\n      }\n    }\n    \n    // Update connections between agents\n    updateAgentConnections(agents);\n    \n    return agents;\n    \n  } catch (error) {\n    console.warn('Neural agent generation failed, using mock agents:', error);\n    return generateMockAgents(count);\n  }\n}\n\n/**\n * Simulate neural activity (replaces simulateSwarmActivity)\n */\nexport async function simulateNeuralActivity(agents: SASIAgent[]): Promise<void> {\n  if (fallbackToMock || !neuralManager) {\n    return simulateMockActivity(agents);\n  }\n  \n  try {\n    // Run inference on random agents\n    const activeAgents = agents.filter(agent => agent.status === 'active' && agent.neuralAgent);\n    \n    if (activeAgents.length === 0) {\n      return;\n    }\n    \n    // Select random agents for activity\n    const numActiveNow = Math.floor(Math.random() * activeAgents.length) + 1;\n    const selectedAgents = activeAgents\n      .sort(() => Math.random() - 0.5)\n      .slice(0, numActiveNow);\n    \n    // Run neural inferences\n    for (const agent of selectedAgents) {\n      if (agent.neuralAgent) {\n        try {\n          // Generate random inputs based on agent type\n          const inputSize = agent.neuralAgent.config.architecture[0];\n          const inputs = Array.from({ length: inputSize }, () => Math.random() * 2 - 1);\n          \n          const outputs = await neuralManager.runInference(agent.neuralAgent.id, inputs);\n          \n          // Update agent statistics\n          agent.totalTasks++;\n          agent.lastActivity = Date.now();\n          agent.performance = Math.min(100, agent.performance + (Math.random() - 0.4) * 2);\n          \n          // Update memory usage from neural agent\n          const updatedNeuralAgent = neuralManager.getAgentState(agent.neuralAgent.id);\n          if (updatedNeuralAgent) {\n            agent.memoryUsage = updatedNeuralAgent.memoryUsage;\n            agent.learningProgress = updatedNeuralAgent.learningProgress;\n          }\n          \n        } catch (error) {\n          console.warn(`Neural inference failed for agent ${agent.id}:`, error);\n          agent.status = 'error';\n        }\n      }\n    }\n    \n    // Occasionally trigger learning sessions\n    if (Math.random() < 0.1) { // 10% chance\n      const learningAgent = selectedAgents[Math.floor(Math.random() * selectedAgents.length)];\n      if (learningAgent.neuralAgent && learningAgent.status === 'active') {\n        triggerLearningSession(learningAgent);\n      }\n    }\n    \n    // Occasionally share knowledge between agents\n    if (Math.random() < 0.05 && activeAgents.length > 1) { // 5% chance\n      await shareKnowledgeBetweenAgents(activeAgents);\n    }\n    \n  } catch (error) {\n    console.warn('Neural activity simulation failed:', error);\n    simulateMockActivity(agents);\n  }\n}\n\n/**\n * Get enhanced swarm statistics with neural metrics\n */\nexport function getNeuralSwarmStatistics(agents: SASIAgent[]): SwarmStatistics {\n  const neuralAgents = agents.filter(agent => agent.neuralAgent);\n  const activeAgents = agents.filter(agent => agent.status === 'active');\n  \n  const totalMemoryUsage = agents.reduce((sum, agent) => sum + agent.memoryUsage, 0);\n  const totalTasks = agents.reduce((sum, agent) => sum + agent.totalTasks, 0);\n  const avgPerformance = agents.reduce((sum, agent) => sum + agent.performance, 0) / agents.length || 0;\n  \n  let networkTopology = {\n    nodes: [],\n    connections: [],\n    totalNodes: 0,\n    activeConnections: 0,\n    networkHealth: 100\n  };\n  \n  if (neuralManager && neuralAgents.length > 0) {\n    networkTopology = neuralManager.getNetworkTopology();\n  }\n  \n  const performanceMetrics = neuralManager ? neuralManager.getPerformanceMetrics() : {\n    totalAgentsSpawned: agents.length,\n    averageSpawnTime: 50,\n    averageInferenceTime: 45,\n    memoryUsage: totalMemoryUsage,\n    activeLearningTasks: 0,\n    systemHealthScore: 95\n  };\n  \n  return {\n    totalAgents: agents.length,\n    activeAgents: activeAgents.length,\n    averagePerformance: avgPerformance,\n    totalMemoryUsage,\n    totalTasks,\n    systemHealth: performanceMetrics.systemHealthScore,\n    networkTopology,\n    learningMetrics: {\n      activeSessions: performanceMetrics.activeLearningTasks,\n      completedSessions: Math.floor(Math.random() * 50),\n      averageAccuracy: 0.85 + Math.random() * 0.1,\n      knowledgeTransfers: Math.floor(Math.random() * 20)\n    }\n  };\n}\n\n/**\n * Generate complete neural swarm data\n */\nasync function generateNeuralSwarmData(): Promise<SASISwarmData> {\n  const agents = await generateNeuralAgents(8);\n  const statistics = getNeuralSwarmStatistics(agents);\n  const performanceMetrics = neuralManager ? neuralManager.getPerformanceMetrics() : {\n    totalAgentsSpawned: 8,\n    averageSpawnTime: 50,\n    averageInferenceTime: 45,\n    memoryUsage: statistics.totalMemoryUsage,\n    activeLearningTasks: 0,\n    systemHealthScore: 95\n  };\n  \n  return {\n    agents,\n    statistics,\n    topology: statistics.networkTopology,\n    isNeuralEnabled: true,\n    performanceMetrics\n  };\n}\n\n/**\n * Trigger a learning session for an agent\n */\nasync function triggerLearningSession(agent: SASIAgent): Promise<void> {\n  if (!agent.neuralAgent || !neuralManager) return;\n  \n  try {\n    agent.status = 'learning';\n    \n    // Generate training data\n    const inputSize = agent.neuralAgent.config.architecture[0];\n    const outputSize = agent.neuralAgent.config.architecture[agent.neuralAgent.config.architecture.length - 1];\n    \n    const trainingData = Array.from({ length: 50 }, () => ({\n      inputs: Array.from({ length: inputSize }, () => Math.random() * 2 - 1),\n      outputs: Array.from({ length: outputSize }, () => Math.random())\n    }));\n    \n    // Start training (don't await to avoid blocking)\n    neuralManager.trainAgent(agent.neuralAgent.id, trainingData, 10)\n      .then((session) => {\n        agent.status = 'active';\n        agent.learningProgress = session.finalAccuracy;\n        console.log(`\u2705 Learning completed for ${agent.name}: ${(session.finalAccuracy * 100).toFixed(1)}% accuracy`);\n      })\n      .catch((error) => {\n        agent.status = 'error';\n        console.warn(`\u274C Learning failed for ${agent.name}:`, error);\n      });\n    \n  } catch (error) {\n    agent.status = 'error';\n    console.warn(`Learning session failed for ${agent.name}:`, error);\n  }\n}\n\n/**\n * Share knowledge between neural agents\n */\nasync function shareKnowledgeBetweenAgents(agents: SASIAgent[]): Promise<void> {\n  if (!neuralManager) return;\n  \n  try {\n    const neuralAgents = agents.filter(agent => agent.neuralAgent);\n    if (neuralAgents.length < 2) return;\n    \n    // Select source and target agents\n    const sourceAgent = neuralAgents[Math.floor(Math.random() * neuralAgents.length)];\n    const targetAgents = neuralAgents\n      .filter(agent => agent.id !== sourceAgent.id)\n      .slice(0, Math.floor(Math.random() * 3) + 1); // 1-3 targets\n    \n    await neuralManager.shareKnowledge(\n      sourceAgent.neuralAgent!.id,\n      targetAgents.map(agent => agent.neuralAgent!.id)\n    );\n    \n    // Update connection strengths\n    targetAgents.forEach(target => {\n      if (!sourceAgent.connections.includes(target.id)) {\n        sourceAgent.connections.push(target.id);\n      }\n      if (!target.connections.includes(sourceAgent.id)) {\n        target.connections.push(sourceAgent.id);\n      }\n    });\n    \n    console.log(`\uD83D\uDD04 Knowledge shared: ${sourceAgent.name} \u2192 ${targetAgents.map(a => a.name).join(', ')}`);\n    \n  } catch (error) {\n    console.warn('Knowledge sharing failed:', error);\n  }\n}\n\n/**\n * Update connections between agents based on their types and activities\n */\nfunction updateAgentConnections(agents: SASIAgent[]): void {\n  // Create connections based on agent types and performance\n  for (let i = 0; i < agents.length; i++) {\n    for (let j = i + 1; j < agents.length; j++) {\n      const agent1 = agents[i];\n      const agent2 = agents[j];\n      \n      // Higher chance of connection for similar types or high-performing agents\n      const connectionProbability = agent1.type === agent2.type ? 0.7 : 0.3;\n      const performanceBonus = (agent1.performance + agent2.performance) / 200; // 0-1\n      \n      if (Math.random() < connectionProbability + performanceBonus * 0.3) {\n        if (!agent1.connections.includes(agent2.id)) {\n          agent1.connections.push(agent2.id);\n        }\n        if (!agent2.connections.includes(agent1.id)) {\n          agent2.connections.push(agent1.id);\n        }\n      }\n    }\n  }\n}\n\n// Fallback mock implementations for when neural system is unavailable\n\nfunction generateMockSwarmData(): SASISwarmData {\n  const agents = generateMockAgents(8);\n  const statistics = getMockSwarmStatistics(agents);\n  \n  return {\n    agents,\n    statistics,\n    topology: statistics.networkTopology,\n    isNeuralEnabled: false,\n    performanceMetrics: {\n      totalAgentsSpawned: 8,\n      averageSpawnTime: 75,\n      averageInferenceTime: 65,\n      memoryUsage: statistics.totalMemoryUsage,\n      activeLearningTasks: 0,\n      systemHealthScore: 88\n    }\n  };\n}\n\nfunction generateMockAgents(count: number): SASIAgent[] {\n  const agentTypes = ['mlp', 'lstm', 'cnn', 'transformer', 'custom'];\n  const agentNames = ['Coordinator', 'Analyzer', 'Optimizer', 'Researcher', 'Monitor'];\n  \n  return Array.from({ length: count }, (_, i) => \n    createMockAgent(i, agentNames[i % agentNames.length], agentTypes[i % agentTypes.length])\n  );\n}\n\nfunction createMockAgent(index: number, baseName: string, type: string = 'mlp'): SASIAgent {\n  return {\n    id: `mock_agent_${index}_${Date.now()}`,\n    name: `${baseName}-${index + 1}`,\n    type,\n    status: Math.random() > 0.1 ? 'active' : 'idle',\n    performance: 70 + Math.random() * 25,\n    memoryUsage: (20 + Math.random() * 30) * 1024 * 1024, // 20-50MB\n    lastActivity: Date.now() - Math.random() * 300000, // Last 5 minutes\n    totalTasks: Math.floor(Math.random() * 100),\n    successRate: 0.8 + Math.random() * 0.15,\n    learningProgress: Math.random(),\n    connections: []\n  };\n}\n\nfunction getMockSwarmStatistics(agents: SASIAgent[]): SwarmStatistics {\n  const activeAgents = agents.filter(agent => agent.status === 'active');\n  const totalMemoryUsage = agents.reduce((sum, agent) => sum + agent.memoryUsage, 0);\n  const totalTasks = agents.reduce((sum, agent) => sum + agent.totalTasks, 0);\n  const avgPerformance = agents.reduce((sum, agent) => sum + agent.performance, 0) / agents.length;\n  \n  return {\n    totalAgents: agents.length,\n    activeAgents: activeAgents.length,\n    averagePerformance: avgPerformance,\n    totalMemoryUsage,\n    totalTasks,\n    systemHealth: 85 + Math.random() * 10,\n    networkTopology: {\n      nodes: agents.map(agent => ({\n        id: agent.id,\n        type: agent.type,\n        state: agent.status as any,\n        performance: agent.performance,\n        memoryUsage: agent.memoryUsage\n      })),\n      connections: [],\n      totalNodes: agents.length,\n      activeConnections: Math.floor(agents.length * 1.5),\n      networkHealth: 90 + Math.random() * 10\n    },\n    learningMetrics: {\n      activeSessions: Math.floor(Math.random() * 3),\n      completedSessions: Math.floor(Math.random() * 20),\n      averageAccuracy: 0.75 + Math.random() * 0.15,\n      knowledgeTransfers: Math.floor(Math.random() * 10)\n    }\n  };\n}\n\nfunction simulateMockActivity(agents: SASIAgent[]): void {\n  // Simple mock activity simulation\n  agents.forEach(agent => {\n    if (Math.random() < 0.3) { // 30% chance of activity\n      agent.lastActivity = Date.now();\n      agent.totalTasks += Math.random() < 0.7 ? 1 : 0;\n      agent.performance += (Math.random() - 0.5) * 5;\n      agent.performance = Math.max(0, Math.min(100, agent.performance));\n    }\n  });\n}\n\n// Cleanup function\nexport async function cleanupNeuralSystem(): Promise<void> {\n  if (neuralManager) {\n    await neuralManager.cleanup();\n    neuralManager = null;\n  }\n  fallbackToMock = false;\n}\n\n// Export the neural manager instance for advanced use cases\nexport function getNeuralManager(): NeuralAgentManager | null {\n  return neuralManager;\n}\n\n// Export status information\nexport function getNeuralSystemStatus(): {\n  isNeuralEnabled: boolean;\n  isFallbackMode: boolean;\n  managerInitialized: boolean;\n} {\n  return {\n    isNeuralEnabled: !fallbackToMock,\n    isFallbackMode: fallbackToMock,\n    managerInitialized: neuralManager !== null\n  };\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "23500461f3e6f5346b147f7ce1ef37b38078a9b1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_5bi21i5fj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_5bi21i5fj();
/**
 * Neural Context Adapter for SASI Integration
 * Drop-in replacement functions for SwarmContext mock implementations
 *
 * This adapter provides seamless integration between SASI's existing SwarmContext
 * and the new neural agent system, maintaining full compatibility while adding
 * real neural capabilities.
 */
import NeuralAgentManager from './NeuralAgentManager';
// Singleton instance for seamless integration
let neuralManager =
/* istanbul ignore next */
(cov_5bi21i5fj().s[0]++, null);
let fallbackToMock =
/* istanbul ignore next */
(cov_5bi21i5fj().s[1]++, false);
/**
 * Initialize neural data (replaces initializeMockData)
 */
export async function initializeNeuralData() {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[0]++;
  cov_5bi21i5fj().s[2]++;
  try {
    /* istanbul ignore next */
    cov_5bi21i5fj().s[3]++;
    // Initialize neural manager if not already done
    if (!neuralManager) {
      /* istanbul ignore next */
      cov_5bi21i5fj().b[0][0]++;
      cov_5bi21i5fj().s[4]++;
      neuralManager = new NeuralAgentManager({
        maxAgents: 25,
        memoryLimitPerAgent: 50 * 1024 * 1024,
        // 50MB
        inferenceTimeout: 100,
        // 100ms
        simdEnabled: true,
        crossLearningEnabled: true,
        persistenceEnabled: true,
        performanceMonitoring: true
      });
      // Wait for initialization
      /* istanbul ignore next */
      cov_5bi21i5fj().s[5]++;
      await new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_5bi21i5fj().f[1]++;
        const timeout =
        /* istanbul ignore next */
        (cov_5bi21i5fj().s[6]++, setTimeout(() => {
          /* istanbul ignore next */
          cov_5bi21i5fj().f[2]++;
          cov_5bi21i5fj().s[7]++;
          return reject(new Error('Neural initialization timeout'));
        }, 10000));
        /* istanbul ignore next */
        cov_5bi21i5fj().s[8]++;
        neuralManager.once('initialized', () => {
          /* istanbul ignore next */
          cov_5bi21i5fj().f[3]++;
          cov_5bi21i5fj().s[9]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_5bi21i5fj().s[10]++;
          resolve(void 0);
        });
        /* istanbul ignore next */
        cov_5bi21i5fj().s[11]++;
        neuralManager.once('error', error => {
          /* istanbul ignore next */
          cov_5bi21i5fj().f[4]++;
          cov_5bi21i5fj().s[12]++;
          clearTimeout(timeout);
          /* istanbul ignore next */
          cov_5bi21i5fj().s[13]++;
          reject(error);
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_5bi21i5fj().b[0][1]++;
    }
    // Generate initial neural data
    const initialData =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[14]++, await generateNeuralSwarmData());
    /* istanbul ignore next */
    cov_5bi21i5fj().s[15]++;
    console.log('✅ Neural system initialized successfully');
    /* istanbul ignore next */
    cov_5bi21i5fj().s[16]++;
    fallbackToMock = false;
    /* istanbul ignore next */
    cov_5bi21i5fj().s[17]++;
    return initialData;
  } catch (error) {
    /* istanbul ignore next */
    cov_5bi21i5fj().s[18]++;
    console.warn('⚠️ Neural initialization failed, falling back to mock data:', error);
    /* istanbul ignore next */
    cov_5bi21i5fj().s[19]++;
    fallbackToMock = true;
    // Fallback to mock data
    /* istanbul ignore next */
    cov_5bi21i5fj().s[20]++;
    return generateMockSwarmData();
  }
}
/**
 * Generate neural agents (replaces generateMockAgents)
 */
export async function generateNeuralAgents(count =
/* istanbul ignore next */
(cov_5bi21i5fj().b[1][0]++, 5)) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[5]++;
  cov_5bi21i5fj().s[21]++;
  if (
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[3][0]++, fallbackToMock) ||
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[3][1]++, !neuralManager)) {
    /* istanbul ignore next */
    cov_5bi21i5fj().b[2][0]++;
    cov_5bi21i5fj().s[22]++;
    return generateMockAgents(count);
  } else
  /* istanbul ignore next */
  {
    cov_5bi21i5fj().b[2][1]++;
  }
  cov_5bi21i5fj().s[23]++;
  try {
    const agents =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[24]++, []);
    // Define neural configurations for different agent types
    const agentConfigs =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[25]++, [{
      name: 'Coordinator',
      config: {
        type: 'mlp',
        architecture: [128, 64, 32, 16],
        activationFunction: 'relu',
        learningRate: 0.01
      }
    }, {
      name: 'Analyzer',
      config: {
        type: 'lstm',
        architecture: [256, 128, 64, 32],
        activationFunction: 'tanh',
        learningRate: 0.005
      }
    }, {
      name: 'Optimizer',
      config: {
        type: 'mlp',
        architecture: [512, 256, 128, 64],
        activationFunction: 'gelu',
        learningRate: 0.001
      }
    }, {
      name: 'Researcher',
      config: {
        type: 'transformer',
        architecture: [1024, 512, 256, 128],
        activationFunction: 'relu',
        learningRate: 0.0001
      }
    }, {
      name: 'Monitor',
      config: {
        type: 'cnn',
        architecture: [784, 392, 196, 10],
        activationFunction: 'leaky_relu',
        learningRate: 0.01
      }
    }]);
    // Spawn neural agents
    /* istanbul ignore next */
    cov_5bi21i5fj().s[26]++;
    for (let i =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[27]++, 0); i < count; i++) {
      const configIndex =
      /* istanbul ignore next */
      (cov_5bi21i5fj().s[28]++, i % agentConfigs.length);
      const {
        name,
        config
      } =
      /* istanbul ignore next */
      (cov_5bi21i5fj().s[29]++, agentConfigs[configIndex]);
      /* istanbul ignore next */
      cov_5bi21i5fj().s[30]++;
      try {
        const neuralAgentId =
        /* istanbul ignore next */
        (cov_5bi21i5fj().s[31]++, await neuralManager.spawnAgent(config));
        const neuralAgent =
        /* istanbul ignore next */
        (cov_5bi21i5fj().s[32]++, neuralManager.getAgentState(neuralAgentId));
        /* istanbul ignore next */
        cov_5bi21i5fj().s[33]++;
        if (neuralAgent) {
          /* istanbul ignore next */
          cov_5bi21i5fj().b[4][0]++;
          const sasiAgent =
          /* istanbul ignore next */
          (cov_5bi21i5fj().s[34]++, {
            id: neuralAgentId,
            name: `${name}-${i + 1}`,
            type: config.type,
            status: 'active',
            performance: 85 + Math.random() * 15,
            // 85-100%
            memoryUsage: neuralAgent.memoryUsage,
            lastActivity: neuralAgent.lastActive,
            totalTasks: 0,
            successRate: 0.95 + Math.random() * 0.05,
            // 95-100%
            learningProgress: neuralAgent.learningProgress,
            connections: [],
            neuralAgent
          });
          /* istanbul ignore next */
          cov_5bi21i5fj().s[35]++;
          agents.push(sasiAgent);
        } else
        /* istanbul ignore next */
        {
          cov_5bi21i5fj().b[4][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_5bi21i5fj().s[36]++;
        console.warn(`Failed to spawn neural agent ${i}:`, error);
        // Create a mock agent as fallback
        /* istanbul ignore next */
        cov_5bi21i5fj().s[37]++;
        agents.push(createMockAgent(i, agentConfigs[configIndex].name));
      }
    }
    // Update connections between agents
    /* istanbul ignore next */
    cov_5bi21i5fj().s[38]++;
    updateAgentConnections(agents);
    /* istanbul ignore next */
    cov_5bi21i5fj().s[39]++;
    return agents;
  } catch (error) {
    /* istanbul ignore next */
    cov_5bi21i5fj().s[40]++;
    console.warn('Neural agent generation failed, using mock agents:', error);
    /* istanbul ignore next */
    cov_5bi21i5fj().s[41]++;
    return generateMockAgents(count);
  }
}
/**
 * Simulate neural activity (replaces simulateSwarmActivity)
 */
export async function simulateNeuralActivity(agents) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[6]++;
  cov_5bi21i5fj().s[42]++;
  if (
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[6][0]++, fallbackToMock) ||
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[6][1]++, !neuralManager)) {
    /* istanbul ignore next */
    cov_5bi21i5fj().b[5][0]++;
    cov_5bi21i5fj().s[43]++;
    return simulateMockActivity(agents);
  } else
  /* istanbul ignore next */
  {
    cov_5bi21i5fj().b[5][1]++;
  }
  cov_5bi21i5fj().s[44]++;
  try {
    // Run inference on random agents
    const activeAgents =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[45]++, agents.filter(agent => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[7]++;
      cov_5bi21i5fj().s[46]++;
      return /* istanbul ignore next */(cov_5bi21i5fj().b[7][0]++, agent.status === 'active') &&
      /* istanbul ignore next */
      (cov_5bi21i5fj().b[7][1]++, agent.neuralAgent);
    }));
    /* istanbul ignore next */
    cov_5bi21i5fj().s[47]++;
    if (activeAgents.length === 0) {
      /* istanbul ignore next */
      cov_5bi21i5fj().b[8][0]++;
      cov_5bi21i5fj().s[48]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_5bi21i5fj().b[8][1]++;
    }
    // Select random agents for activity
    const numActiveNow =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[49]++, Math.floor(Math.random() * activeAgents.length) + 1);
    const selectedAgents =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[50]++, activeAgents.sort(() => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[8]++;
      cov_5bi21i5fj().s[51]++;
      return Math.random() - 0.5;
    }).slice(0, numActiveNow));
    // Run neural inferences
    /* istanbul ignore next */
    cov_5bi21i5fj().s[52]++;
    for (const agent of selectedAgents) {
      /* istanbul ignore next */
      cov_5bi21i5fj().s[53]++;
      if (agent.neuralAgent) {
        /* istanbul ignore next */
        cov_5bi21i5fj().b[9][0]++;
        cov_5bi21i5fj().s[54]++;
        try {
          // Generate random inputs based on agent type
          const inputSize =
          /* istanbul ignore next */
          (cov_5bi21i5fj().s[55]++, agent.neuralAgent.config.architecture[0]);
          const inputs =
          /* istanbul ignore next */
          (cov_5bi21i5fj().s[56]++, Array.from({
            length: inputSize
          }, () => {
            /* istanbul ignore next */
            cov_5bi21i5fj().f[9]++;
            cov_5bi21i5fj().s[57]++;
            return Math.random() * 2 - 1;
          }));
          const outputs =
          /* istanbul ignore next */
          (cov_5bi21i5fj().s[58]++, await neuralManager.runInference(agent.neuralAgent.id, inputs));
          // Update agent statistics
          /* istanbul ignore next */
          cov_5bi21i5fj().s[59]++;
          agent.totalTasks++;
          /* istanbul ignore next */
          cov_5bi21i5fj().s[60]++;
          agent.lastActivity = Date.now();
          /* istanbul ignore next */
          cov_5bi21i5fj().s[61]++;
          agent.performance = Math.min(100, agent.performance + (Math.random() - 0.4) * 2);
          // Update memory usage from neural agent
          const updatedNeuralAgent =
          /* istanbul ignore next */
          (cov_5bi21i5fj().s[62]++, neuralManager.getAgentState(agent.neuralAgent.id));
          /* istanbul ignore next */
          cov_5bi21i5fj().s[63]++;
          if (updatedNeuralAgent) {
            /* istanbul ignore next */
            cov_5bi21i5fj().b[10][0]++;
            cov_5bi21i5fj().s[64]++;
            agent.memoryUsage = updatedNeuralAgent.memoryUsage;
            /* istanbul ignore next */
            cov_5bi21i5fj().s[65]++;
            agent.learningProgress = updatedNeuralAgent.learningProgress;
          } else
          /* istanbul ignore next */
          {
            cov_5bi21i5fj().b[10][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_5bi21i5fj().s[66]++;
          console.warn(`Neural inference failed for agent ${agent.id}:`, error);
          /* istanbul ignore next */
          cov_5bi21i5fj().s[67]++;
          agent.status = 'error';
        }
      } else
      /* istanbul ignore next */
      {
        cov_5bi21i5fj().b[9][1]++;
      }
    }
    // Occasionally trigger learning sessions
    /* istanbul ignore next */
    cov_5bi21i5fj().s[68]++;
    if (Math.random() < 0.1) {
      /* istanbul ignore next */
      cov_5bi21i5fj().b[11][0]++;
      // 10% chance
      const learningAgent =
      /* istanbul ignore next */
      (cov_5bi21i5fj().s[69]++, selectedAgents[Math.floor(Math.random() * selectedAgents.length)]);
      /* istanbul ignore next */
      cov_5bi21i5fj().s[70]++;
      if (
      /* istanbul ignore next */
      (cov_5bi21i5fj().b[13][0]++, learningAgent.neuralAgent) &&
      /* istanbul ignore next */
      (cov_5bi21i5fj().b[13][1]++, learningAgent.status === 'active')) {
        /* istanbul ignore next */
        cov_5bi21i5fj().b[12][0]++;
        cov_5bi21i5fj().s[71]++;
        triggerLearningSession(learningAgent);
      } else
      /* istanbul ignore next */
      {
        cov_5bi21i5fj().b[12][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_5bi21i5fj().b[11][1]++;
    }
    // Occasionally share knowledge between agents
    cov_5bi21i5fj().s[72]++;
    if (
    /* istanbul ignore next */
    (cov_5bi21i5fj().b[15][0]++, Math.random() < 0.05) &&
    /* istanbul ignore next */
    (cov_5bi21i5fj().b[15][1]++, activeAgents.length > 1)) {
      /* istanbul ignore next */
      cov_5bi21i5fj().b[14][0]++;
      cov_5bi21i5fj().s[73]++;
      // 5% chance
      await shareKnowledgeBetweenAgents(activeAgents);
    } else
    /* istanbul ignore next */
    {
      cov_5bi21i5fj().b[14][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_5bi21i5fj().s[74]++;
    console.warn('Neural activity simulation failed:', error);
    /* istanbul ignore next */
    cov_5bi21i5fj().s[75]++;
    simulateMockActivity(agents);
  }
}
/**
 * Get enhanced swarm statistics with neural metrics
 */
export function getNeuralSwarmStatistics(agents) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[10]++;
  const neuralAgents =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[76]++, agents.filter(agent => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[11]++;
    cov_5bi21i5fj().s[77]++;
    return agent.neuralAgent;
  }));
  const activeAgents =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[78]++, agents.filter(agent => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[12]++;
    cov_5bi21i5fj().s[79]++;
    return agent.status === 'active';
  }));
  const totalMemoryUsage =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[80]++, agents.reduce((sum, agent) => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[13]++;
    cov_5bi21i5fj().s[81]++;
    return sum + agent.memoryUsage;
  }, 0));
  const totalTasks =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[82]++, agents.reduce((sum, agent) => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[14]++;
    cov_5bi21i5fj().s[83]++;
    return sum + agent.totalTasks;
  }, 0));
  const avgPerformance =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[84]++,
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[16][0]++, agents.reduce((sum, agent) => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[15]++;
    cov_5bi21i5fj().s[85]++;
    return sum + agent.performance;
  }, 0) / agents.length) ||
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[16][1]++, 0));
  let networkTopology =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[86]++, {
    nodes: [],
    connections: [],
    totalNodes: 0,
    activeConnections: 0,
    networkHealth: 100
  });
  /* istanbul ignore next */
  cov_5bi21i5fj().s[87]++;
  if (
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[18][0]++, neuralManager) &&
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[18][1]++, neuralAgents.length > 0)) {
    /* istanbul ignore next */
    cov_5bi21i5fj().b[17][0]++;
    cov_5bi21i5fj().s[88]++;
    networkTopology = neuralManager.getNetworkTopology();
  } else
  /* istanbul ignore next */
  {
    cov_5bi21i5fj().b[17][1]++;
  }
  const performanceMetrics =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[89]++, neuralManager ?
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[19][0]++, neuralManager.getPerformanceMetrics()) :
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[19][1]++, {
    totalAgentsSpawned: agents.length,
    averageSpawnTime: 50,
    averageInferenceTime: 45,
    memoryUsage: totalMemoryUsage,
    activeLearningTasks: 0,
    systemHealthScore: 95
  }));
  /* istanbul ignore next */
  cov_5bi21i5fj().s[90]++;
  return {
    totalAgents: agents.length,
    activeAgents: activeAgents.length,
    averagePerformance: avgPerformance,
    totalMemoryUsage,
    totalTasks,
    systemHealth: performanceMetrics.systemHealthScore,
    networkTopology,
    learningMetrics: {
      activeSessions: performanceMetrics.activeLearningTasks,
      completedSessions: Math.floor(Math.random() * 50),
      averageAccuracy: 0.85 + Math.random() * 0.1,
      knowledgeTransfers: Math.floor(Math.random() * 20)
    }
  };
}
/**
 * Generate complete neural swarm data
 */
async function generateNeuralSwarmData() {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[16]++;
  const agents =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[91]++, await generateNeuralAgents(8));
  const statistics =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[92]++, getNeuralSwarmStatistics(agents));
  const performanceMetrics =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[93]++, neuralManager ?
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[20][0]++, neuralManager.getPerformanceMetrics()) :
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[20][1]++, {
    totalAgentsSpawned: 8,
    averageSpawnTime: 50,
    averageInferenceTime: 45,
    memoryUsage: statistics.totalMemoryUsage,
    activeLearningTasks: 0,
    systemHealthScore: 95
  }));
  /* istanbul ignore next */
  cov_5bi21i5fj().s[94]++;
  return {
    agents,
    statistics,
    topology: statistics.networkTopology,
    isNeuralEnabled: true,
    performanceMetrics
  };
}
/**
 * Trigger a learning session for an agent
 */
async function triggerLearningSession(agent) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[17]++;
  cov_5bi21i5fj().s[95]++;
  if (
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[22][0]++, !agent.neuralAgent) ||
  /* istanbul ignore next */
  (cov_5bi21i5fj().b[22][1]++, !neuralManager)) {
    /* istanbul ignore next */
    cov_5bi21i5fj().b[21][0]++;
    cov_5bi21i5fj().s[96]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_5bi21i5fj().b[21][1]++;
  }
  cov_5bi21i5fj().s[97]++;
  try {
    /* istanbul ignore next */
    cov_5bi21i5fj().s[98]++;
    agent.status = 'learning';
    // Generate training data
    const inputSize =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[99]++, agent.neuralAgent.config.architecture[0]);
    const outputSize =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[100]++, agent.neuralAgent.config.architecture[agent.neuralAgent.config.architecture.length - 1]);
    const trainingData =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[101]++, Array.from({
      length: 50
    }, () => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[18]++;
      cov_5bi21i5fj().s[102]++;
      return {
        inputs: Array.from({
          length: inputSize
        }, () => {
          /* istanbul ignore next */
          cov_5bi21i5fj().f[19]++;
          cov_5bi21i5fj().s[103]++;
          return Math.random() * 2 - 1;
        }),
        outputs: Array.from({
          length: outputSize
        }, () => {
          /* istanbul ignore next */
          cov_5bi21i5fj().f[20]++;
          cov_5bi21i5fj().s[104]++;
          return Math.random();
        })
      };
    }));
    // Start training (don't await to avoid blocking)
    /* istanbul ignore next */
    cov_5bi21i5fj().s[105]++;
    neuralManager.trainAgent(agent.neuralAgent.id, trainingData, 10).then(session => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[21]++;
      cov_5bi21i5fj().s[106]++;
      agent.status = 'active';
      /* istanbul ignore next */
      cov_5bi21i5fj().s[107]++;
      agent.learningProgress = session.finalAccuracy;
      /* istanbul ignore next */
      cov_5bi21i5fj().s[108]++;
      console.log(`✅ Learning completed for ${agent.name}: ${(session.finalAccuracy * 100).toFixed(1)}% accuracy`);
    }).catch(error => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[22]++;
      cov_5bi21i5fj().s[109]++;
      agent.status = 'error';
      /* istanbul ignore next */
      cov_5bi21i5fj().s[110]++;
      console.warn(`❌ Learning failed for ${agent.name}:`, error);
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_5bi21i5fj().s[111]++;
    agent.status = 'error';
    /* istanbul ignore next */
    cov_5bi21i5fj().s[112]++;
    console.warn(`Learning session failed for ${agent.name}:`, error);
  }
}
/**
 * Share knowledge between neural agents
 */
async function shareKnowledgeBetweenAgents(agents) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[23]++;
  cov_5bi21i5fj().s[113]++;
  if (!neuralManager) {
    /* istanbul ignore next */
    cov_5bi21i5fj().b[23][0]++;
    cov_5bi21i5fj().s[114]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_5bi21i5fj().b[23][1]++;
  }
  cov_5bi21i5fj().s[115]++;
  try {
    const neuralAgents =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[116]++, agents.filter(agent => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[24]++;
      cov_5bi21i5fj().s[117]++;
      return agent.neuralAgent;
    }));
    /* istanbul ignore next */
    cov_5bi21i5fj().s[118]++;
    if (neuralAgents.length < 2) {
      /* istanbul ignore next */
      cov_5bi21i5fj().b[24][0]++;
      cov_5bi21i5fj().s[119]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_5bi21i5fj().b[24][1]++;
    }
    // Select source and target agents
    const sourceAgent =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[120]++, neuralAgents[Math.floor(Math.random() * neuralAgents.length)]);
    const targetAgents =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[121]++, neuralAgents.filter(agent => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[25]++;
      cov_5bi21i5fj().s[122]++;
      return agent.id !== sourceAgent.id;
    }).slice(0, Math.floor(Math.random() * 3) + 1)); // 1-3 targets
    /* istanbul ignore next */
    cov_5bi21i5fj().s[123]++;
    await neuralManager.shareKnowledge(sourceAgent.neuralAgent.id, targetAgents.map(agent => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[26]++;
      cov_5bi21i5fj().s[124]++;
      return agent.neuralAgent.id;
    }));
    // Update connection strengths
    /* istanbul ignore next */
    cov_5bi21i5fj().s[125]++;
    targetAgents.forEach(target => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[27]++;
      cov_5bi21i5fj().s[126]++;
      if (!sourceAgent.connections.includes(target.id)) {
        /* istanbul ignore next */
        cov_5bi21i5fj().b[25][0]++;
        cov_5bi21i5fj().s[127]++;
        sourceAgent.connections.push(target.id);
      } else
      /* istanbul ignore next */
      {
        cov_5bi21i5fj().b[25][1]++;
      }
      cov_5bi21i5fj().s[128]++;
      if (!target.connections.includes(sourceAgent.id)) {
        /* istanbul ignore next */
        cov_5bi21i5fj().b[26][0]++;
        cov_5bi21i5fj().s[129]++;
        target.connections.push(sourceAgent.id);
      } else
      /* istanbul ignore next */
      {
        cov_5bi21i5fj().b[26][1]++;
      }
    });
    /* istanbul ignore next */
    cov_5bi21i5fj().s[130]++;
    console.log(`🔄 Knowledge shared: ${sourceAgent.name} → ${targetAgents.map(a => {
      /* istanbul ignore next */
      cov_5bi21i5fj().f[28]++;
      cov_5bi21i5fj().s[131]++;
      return a.name;
    }).join(', ')}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_5bi21i5fj().s[132]++;
    console.warn('Knowledge sharing failed:', error);
  }
}
/**
 * Update connections between agents based on their types and activities
 */
function updateAgentConnections(agents) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[29]++;
  cov_5bi21i5fj().s[133]++;
  // Create connections based on agent types and performance
  for (let i =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[134]++, 0); i < agents.length; i++) {
    /* istanbul ignore next */
    cov_5bi21i5fj().s[135]++;
    for (let j =
    /* istanbul ignore next */
    (cov_5bi21i5fj().s[136]++, i + 1); j < agents.length; j++) {
      const agent1 =
      /* istanbul ignore next */
      (cov_5bi21i5fj().s[137]++, agents[i]);
      const agent2 =
      /* istanbul ignore next */
      (cov_5bi21i5fj().s[138]++, agents[j]);
      // Higher chance of connection for similar types or high-performing agents
      const connectionProbability =
      /* istanbul ignore next */
      (cov_5bi21i5fj().s[139]++, agent1.type === agent2.type ?
      /* istanbul ignore next */
      (cov_5bi21i5fj().b[27][0]++, 0.7) :
      /* istanbul ignore next */
      (cov_5bi21i5fj().b[27][1]++, 0.3));
      const performanceBonus =
      /* istanbul ignore next */
      (cov_5bi21i5fj().s[140]++, (agent1.performance + agent2.performance) / 200); // 0-1
      /* istanbul ignore next */
      cov_5bi21i5fj().s[141]++;
      if (Math.random() < connectionProbability + performanceBonus * 0.3) {
        /* istanbul ignore next */
        cov_5bi21i5fj().b[28][0]++;
        cov_5bi21i5fj().s[142]++;
        if (!agent1.connections.includes(agent2.id)) {
          /* istanbul ignore next */
          cov_5bi21i5fj().b[29][0]++;
          cov_5bi21i5fj().s[143]++;
          agent1.connections.push(agent2.id);
        } else
        /* istanbul ignore next */
        {
          cov_5bi21i5fj().b[29][1]++;
        }
        cov_5bi21i5fj().s[144]++;
        if (!agent2.connections.includes(agent1.id)) {
          /* istanbul ignore next */
          cov_5bi21i5fj().b[30][0]++;
          cov_5bi21i5fj().s[145]++;
          agent2.connections.push(agent1.id);
        } else
        /* istanbul ignore next */
        {
          cov_5bi21i5fj().b[30][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_5bi21i5fj().b[28][1]++;
      }
    }
  }
}
// Fallback mock implementations for when neural system is unavailable
function generateMockSwarmData() {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[30]++;
  const agents =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[146]++, generateMockAgents(8));
  const statistics =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[147]++, getMockSwarmStatistics(agents));
  /* istanbul ignore next */
  cov_5bi21i5fj().s[148]++;
  return {
    agents,
    statistics,
    topology: statistics.networkTopology,
    isNeuralEnabled: false,
    performanceMetrics: {
      totalAgentsSpawned: 8,
      averageSpawnTime: 75,
      averageInferenceTime: 65,
      memoryUsage: statistics.totalMemoryUsage,
      activeLearningTasks: 0,
      systemHealthScore: 88
    }
  };
}
function generateMockAgents(count) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[31]++;
  const agentTypes =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[149]++, ['mlp', 'lstm', 'cnn', 'transformer', 'custom']);
  const agentNames =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[150]++, ['Coordinator', 'Analyzer', 'Optimizer', 'Researcher', 'Monitor']);
  /* istanbul ignore next */
  cov_5bi21i5fj().s[151]++;
  return Array.from({
    length: count
  }, (_, i) => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[32]++;
    cov_5bi21i5fj().s[152]++;
    return createMockAgent(i, agentNames[i % agentNames.length], agentTypes[i % agentTypes.length]);
  });
}
function createMockAgent(index, baseName, type =
/* istanbul ignore next */
(cov_5bi21i5fj().b[31][0]++, 'mlp')) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[33]++;
  cov_5bi21i5fj().s[153]++;
  return {
    id: `mock_agent_${index}_${Date.now()}`,
    name: `${baseName}-${index + 1}`,
    type,
    status: Math.random() > 0.1 ?
    /* istanbul ignore next */
    (cov_5bi21i5fj().b[32][0]++, 'active') :
    /* istanbul ignore next */
    (cov_5bi21i5fj().b[32][1]++, 'idle'),
    performance: 70 + Math.random() * 25,
    memoryUsage: (20 + Math.random() * 30) * 1024 * 1024,
    // 20-50MB
    lastActivity: Date.now() - Math.random() * 300000,
    // Last 5 minutes
    totalTasks: Math.floor(Math.random() * 100),
    successRate: 0.8 + Math.random() * 0.15,
    learningProgress: Math.random(),
    connections: []
  };
}
function getMockSwarmStatistics(agents) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[34]++;
  const activeAgents =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[154]++, agents.filter(agent => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[35]++;
    cov_5bi21i5fj().s[155]++;
    return agent.status === 'active';
  }));
  const totalMemoryUsage =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[156]++, agents.reduce((sum, agent) => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[36]++;
    cov_5bi21i5fj().s[157]++;
    return sum + agent.memoryUsage;
  }, 0));
  const totalTasks =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[158]++, agents.reduce((sum, agent) => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[37]++;
    cov_5bi21i5fj().s[159]++;
    return sum + agent.totalTasks;
  }, 0));
  const avgPerformance =
  /* istanbul ignore next */
  (cov_5bi21i5fj().s[160]++, agents.reduce((sum, agent) => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[38]++;
    cov_5bi21i5fj().s[161]++;
    return sum + agent.performance;
  }, 0) / agents.length);
  /* istanbul ignore next */
  cov_5bi21i5fj().s[162]++;
  return {
    totalAgents: agents.length,
    activeAgents: activeAgents.length,
    averagePerformance: avgPerformance,
    totalMemoryUsage,
    totalTasks,
    systemHealth: 85 + Math.random() * 10,
    networkTopology: {
      nodes: agents.map(agent => {
        /* istanbul ignore next */
        cov_5bi21i5fj().f[39]++;
        cov_5bi21i5fj().s[163]++;
        return {
          id: agent.id,
          type: agent.type,
          state: agent.status,
          performance: agent.performance,
          memoryUsage: agent.memoryUsage
        };
      }),
      connections: [],
      totalNodes: agents.length,
      activeConnections: Math.floor(agents.length * 1.5),
      networkHealth: 90 + Math.random() * 10
    },
    learningMetrics: {
      activeSessions: Math.floor(Math.random() * 3),
      completedSessions: Math.floor(Math.random() * 20),
      averageAccuracy: 0.75 + Math.random() * 0.15,
      knowledgeTransfers: Math.floor(Math.random() * 10)
    }
  };
}
function simulateMockActivity(agents) {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[40]++;
  cov_5bi21i5fj().s[164]++;
  // Simple mock activity simulation
  agents.forEach(agent => {
    /* istanbul ignore next */
    cov_5bi21i5fj().f[41]++;
    cov_5bi21i5fj().s[165]++;
    if (Math.random() < 0.3) {
      /* istanbul ignore next */
      cov_5bi21i5fj().b[33][0]++;
      cov_5bi21i5fj().s[166]++;
      // 30% chance of activity
      agent.lastActivity = Date.now();
      /* istanbul ignore next */
      cov_5bi21i5fj().s[167]++;
      agent.totalTasks += Math.random() < 0.7 ?
      /* istanbul ignore next */
      (cov_5bi21i5fj().b[34][0]++, 1) :
      /* istanbul ignore next */
      (cov_5bi21i5fj().b[34][1]++, 0);
      /* istanbul ignore next */
      cov_5bi21i5fj().s[168]++;
      agent.performance += (Math.random() - 0.5) * 5;
      /* istanbul ignore next */
      cov_5bi21i5fj().s[169]++;
      agent.performance = Math.max(0, Math.min(100, agent.performance));
    } else
    /* istanbul ignore next */
    {
      cov_5bi21i5fj().b[33][1]++;
    }
  });
}
// Cleanup function
export async function cleanupNeuralSystem() {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[42]++;
  cov_5bi21i5fj().s[170]++;
  if (neuralManager) {
    /* istanbul ignore next */
    cov_5bi21i5fj().b[35][0]++;
    cov_5bi21i5fj().s[171]++;
    await neuralManager.cleanup();
    /* istanbul ignore next */
    cov_5bi21i5fj().s[172]++;
    neuralManager = null;
  } else
  /* istanbul ignore next */
  {
    cov_5bi21i5fj().b[35][1]++;
  }
  cov_5bi21i5fj().s[173]++;
  fallbackToMock = false;
}
// Export the neural manager instance for advanced use cases
export function getNeuralManager() {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[43]++;
  cov_5bi21i5fj().s[174]++;
  return neuralManager;
}
// Export status information
export function getNeuralSystemStatus() {
  /* istanbul ignore next */
  cov_5bi21i5fj().f[44]++;
  cov_5bi21i5fj().s[175]++;
  return {
    isNeuralEnabled: !fallbackToMock,
    isFallbackMode: fallbackToMock,
    managerInitialized: neuralManager !== null
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,