{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/tdd/tdd-workflow-templates.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/tdd/tdd-workflow-templates.test.ts"],"sourcesContent":["/**\n * TDD Workflow Templates for Phase 2A\n * Test-Driven Development templates and patterns for neural agent development\n */\n\nimport { jest } from '@jest/globals';\nimport { performanceTestUtils, PERFORMANCE_THRESHOLDS } from '../performance-setup';\nimport { coordinationTestUtils } from '../coordination-setup';\n\ndescribe('TDD Workflow Templates', () => {\n  \n  describe('Neural Agent TDD Template', () => {\n    /**\n     * TDD Template: Neural Agent Development\n     * RED -> GREEN -> REFACTOR cycle for neural agents\n     */\n    \n    test('RED: Neural agent spawn should fail without implementation', async () => {\n      // Step 1: Write failing test first\n      const mockNeuralAgentManager = {\n        spawnAgent: jest.fn().mockRejectedValue(new Error('Not implemented'))\n      };\n      \n      await expect(\n        mockNeuralAgentManager.spawnAgent({\n          type: 'mlp',\n          architecture: [10, 5, 1]\n        })\n      ).rejects.toThrow('Not implemented');\n      \n      console.log('🔴 RED: Test fails as expected - Neural agent spawn not implemented');\n    });\n    \n    test('GREEN: Neural agent spawn should succeed with minimal implementation', async () => {\n      // Step 2: Implement minimal functionality to pass test\n      const mockNeuralAgentManager = {\n        spawnAgent: jest.fn().mockImplementation(async (config) => {\n          // Minimal implementation\n          return {\n            agentId: 'temp-agent-' + Date.now(),\n            config,\n            status: 'active',\n            spawnTime: Date.now()\n          };\n        })\n      };\n      \n      const result = await mockNeuralAgentManager.spawnAgent({\n        type: 'mlp',\n        architecture: [10, 5, 1]\n      });\n      \n      expect(result.agentId).toBeDefined();\n      expect(result.status).toBe('active');\n      \n      console.log('🟢 GREEN: Test passes with minimal implementation');\n    });\n    \n    test('REFACTOR: Neural agent spawn should be optimized for performance', async () => {\n      // Step 3: Refactor for performance and maintainability\n      const optimizedNeuralAgentManager = {\n        spawnAgent: jest.fn().mockImplementation(async (config) => {\n          const startTime = performance.now();\n          \n          // Optimized implementation with validation\n          if (!config.type || !config.architecture) {\n            throw new Error('Invalid configuration');\n          }\n          \n          const agent = {\n            agentId: `${config.type}-agent-${Date.now()}`,\n            config,\n            status: 'active',\n            spawnTime: Date.now(),\n            memoryUsage: config.architecture.reduce((sum, layer) => sum + layer, 0) * 1000,\n            performance: {\n              spawnDuration: performance.now() - startTime\n            }\n          };\n          \n          return agent;\n        })\n      };\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'optimized-agent-spawn',\n        async () => {\n          return await optimizedNeuralAgentManager.spawnAgent({\n            type: 'mlp',\n            architecture: [10, 5, 1]\n          });\n        }\n      );\n      \n      // Verify performance meets threshold\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.AGENT_SPAWN_TIME);\n      expect(result.agentId).toContain('mlp-agent-');\n      expect(result.memoryUsage).toBeDefined();\n      \n      console.log('🔄 REFACTOR: Implementation optimized for performance and maintainability');\n    });\n  });\n  \n  describe('Persistence TDD Template', () => {\n    /**\n     * TDD Template: Database Persistence\n     * Testing persistence operations with performance constraints\n     */\n    \n    test('RED: Agent state persistence should fail without database implementation', async () => {\n      const mockPersistenceService = {\n        saveAgentState: jest.fn().mockRejectedValue(new Error('Database not configured'))\n      };\n      \n      const agentState = {\n        id: 'test-agent-001',\n        type: 'mlp',\n        weights: new Float32Array([0.1, 0.2, 0.3])\n      };\n      \n      await expect(\n        mockPersistenceService.saveAgentState(agentState)\n      ).rejects.toThrow('Database not configured');\n      \n      console.log('🔴 RED: Persistence fails without database implementation');\n    });\n    \n    test('GREEN: Agent state persistence should succeed with basic implementation', async () => {\n      const mockDatabase = new Map();\n      \n      const mockPersistenceService = {\n        saveAgentState: jest.fn().mockImplementation(async (agentState) => {\n          mockDatabase.set(agentState.id, agentState);\n          return { saved: true, timestamp: Date.now() };\n        }),\n        \n        loadAgentState: jest.fn().mockImplementation(async (agentId) => {\n          return mockDatabase.get(agentId) || null;\n        })\n      };\n      \n      const agentState = {\n        id: 'test-agent-001',\n        type: 'mlp',\n        weights: new Float32Array([0.1, 0.2, 0.3])\n      };\n      \n      const saveResult = await mockPersistenceService.saveAgentState(agentState);\n      expect(saveResult.saved).toBe(true);\n      \n      const loadedState = await mockPersistenceService.loadAgentState(agentState.id);\n      expect(loadedState).toEqual(agentState);\n      \n      console.log('🟢 GREEN: Basic persistence implementation works');\n    });\n    \n    test('REFACTOR: Agent state persistence should be optimized with SQLite and validation', async () => {\n      const mockSQLiteDatabase = {\n        save: jest.fn().mockImplementation(async (agentState) => {\n          // Simulate optimized SQLite operations\n          const startTime = performance.now();\n          \n          // Validation\n          if (!agentState.id || !agentState.type) {\n            throw new Error('Invalid agent state');\n          }\n          \n          // Simulate SQLite save\n          await new Promise(resolve => setTimeout(resolve, 30)); // <75ms\n          \n          return {\n            saved: true,\n            agentId: agentState.id,\n            timestamp: Date.now(),\n            duration: performance.now() - startTime\n          };\n        }),\n        \n        load: jest.fn().mockImplementation(async (agentId) => {\n          // Simulate optimized SQLite load\n          await new Promise(resolve => setTimeout(resolve, 50)); // <100ms\n          \n          return {\n            id: agentId,\n            type: 'mlp',\n            weights: new Float32Array([0.1, 0.2, 0.3]),\n            loadTime: Date.now()\n          };\n        })\n      };\n      \n      const agentState = {\n        id: 'optimized-agent-001',\n        type: 'mlp',\n        weights: new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5])\n      };\n      \n      const { result: saveResult, duration: saveDuration } = await performanceTestUtils.measureAsyncOperation(\n        'optimized-persistence-save',\n        async () => {\n          return await mockSQLiteDatabase.save(agentState);\n        }\n      );\n      \n      const { result: loadResult, duration: loadDuration } = await performanceTestUtils.measureAsyncOperation(\n        'optimized-persistence-load',\n        async () => {\n          return await mockSQLiteDatabase.load(agentState.id);\n        }\n      );\n      \n      // Verify performance thresholds\n      expect(saveDuration).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE);\n      expect(loadDuration).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_LOAD);\n      \n      expect(saveResult.saved).toBe(true);\n      expect(loadResult.id).toBe(agentState.id);\n      \n      console.log('🔄 REFACTOR: Persistence optimized with SQLite and validation');\n    });\n  });\n  \n  describe('Coordination TDD Template', () => {\n    /**\n     * TDD Template: Agent Coordination\n     * Testing multi-agent coordination with performance requirements\n     */\n    \n    test('RED: Agent coordination should fail without implementation', async () => {\n      const mockCoordinationService = {\n        coordinateAgents: jest.fn().mockRejectedValue(new Error('Coordination not implemented'))\n      };\n      \n      await expect(\n        mockCoordinationService.coordinateAgents(['agent-1', 'agent-2'], 'collaborative-task')\n      ).rejects.toThrow('Coordination not implemented');\n      \n      console.log('🔴 RED: Coordination fails without implementation');\n    });\n    \n    test('GREEN: Agent coordination should work with basic message passing', async () => {\n      const mockCoordinationService = {\n        coordinateAgents: jest.fn().mockImplementation(async (agentIds, task) => {\n          // Basic coordination: just assign task to all agents\n          return {\n            coordinationId: 'coord-' + Date.now(),\n            assignedAgents: agentIds,\n            task,\n            status: 'coordinated'\n          };\n        })\n      };\n      \n      const result = await mockCoordinationService.coordinateAgents(\n        ['agent-1', 'agent-2', 'agent-3'],\n        'analyze-performance-data'\n      );\n      \n      expect(result.assignedAgents).toHaveLength(3);\n      expect(result.status).toBe('coordinated');\n      \n      console.log('🟢 GREEN: Basic coordination works');\n    });\n    \n    test('REFACTOR: Agent coordination should be optimized with smart load balancing', async () => {\n      const mockOptimizedCoordinationService = {\n        coordinateAgents: jest.fn().mockImplementation(async (agentIds, task) => {\n          const startTime = performance.now();\n          \n          // Optimized coordination with load balancing\n          const agentCapabilities = agentIds.map(id => ({\n            id,\n            currentLoad: Math.random() * 0.8, // 0-80% load\n            capabilities: ['analysis', 'optimization'],\n            performance: 0.85 + Math.random() * 0.15 // 85-100% efficiency\n          }));\n          \n          // Smart assignment based on load and capabilities\n          const assignments = agentCapabilities\n            .sort((a, b) => a.currentLoad - b.currentLoad) // Assign to least loaded first\n            .map(agent => ({\n              agentId: agent.id,\n              assignedTask: task,\n              priority: agent.currentLoad < 0.5 ? 'high' : 'medium'\n            }));\n          \n          const coordinationOverhead = performance.now() - startTime;\n          \n          return {\n            coordinationId: 'optimized-coord-' + Date.now(),\n            assignments,\n            strategy: 'load-balanced',\n            coordinationOverhead,\n            expectedCompletion: Date.now() + 2000,\n            status: 'optimally-coordinated'\n          };\n        })\n      };\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'optimized-coordination',\n        async () => {\n          return await mockOptimizedCoordinationService.coordinateAgents(\n            ['agent-1', 'agent-2', 'agent-3', 'agent-4'],\n            'complex-neural-optimization'\n          );\n        }\n      );\n      \n      // Verify performance threshold\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      expect(result.coordinationOverhead).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      \n      expect(result.strategy).toBe('load-balanced');\n      expect(result.assignments).toHaveLength(4);\n      expect(result.status).toBe('optimally-coordinated');\n      \n      console.log('🔄 REFACTOR: Coordination optimized with smart load balancing');\n    });\n  });\n  \n  describe('Performance Testing TDD Template', () => {\n    /**\n     * TDD Template: Performance Testing\n     * Testing performance requirements with specific thresholds\n     */\n    \n    test('RED: Performance test should fail with slow implementation', async () => {\n      const slowImplementation = {\n        processData: jest.fn().mockImplementation(async (data) => {\n          // Intentionally slow implementation\n          await new Promise(resolve => setTimeout(resolve, 200)); // >100ms\n          return data.map((x: number) => x * 2);\n        })\n      };\n      \n      const testData = Array.from({ length: 100 }, (_, i) => i);\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'slow-processing',\n        async () => {\n          return await slowImplementation.processData(testData);\n        }\n      );\n      \n      // This should fail the performance threshold\n      expect(duration).toBeGreaterThan(PERFORMANCE_THRESHOLDS.INFERENCE_TIME);\n      \n      console.log('🔴 RED: Performance test fails with slow implementation');\n    });\n    \n    test('GREEN: Performance test should pass with optimized implementation', async () => {\n      const optimizedImplementation = {\n        processData: jest.fn().mockImplementation(async (data) => {\n          // Optimized implementation\n          await new Promise(resolve => setTimeout(resolve, 50)); // <100ms\n          return data.map((x: number) => x * 2);\n        })\n      };\n      \n      const testData = Array.from({ length: 100 }, (_, i) => i);\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'optimized-processing',\n        async () => {\n          return await optimizedImplementation.processData(testData);\n        }\n      );\n      \n      // This should pass the performance threshold\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.INFERENCE_TIME);\n      expect(result).toHaveLength(testData.length);\n      \n      console.log('🟢 GREEN: Performance test passes with optimized implementation');\n    });\n    \n    test('REFACTOR: Performance should be consistently fast under load', async () => {\n      const robustImplementation = {\n        processData: jest.fn().mockImplementation(async (data) => {\n          // Robust implementation with consistent performance\n          const startTime = performance.now();\n          \n          // Efficient processing with early exit optimization\n          const result = [];\n          for (let i = 0; i < data.length; i++) {\n            result.push(data[i] * 2);\n            // Yield control occasionally to maintain responsiveness\n            if (i % 50 === 0) {\n              await new Promise(resolve => setImmediate(resolve));\n            }\n          }\n          \n          const processingTime = performance.now() - startTime;\n          return { result, processingTime };\n        })\n      };\n      \n      const testData = Array.from({ length: 1000 }, (_, i) => i);\n      \n      // Test under load with multiple concurrent operations\n      const { result } = await performanceTestUtils.testConcurrentPerformance(\n        'robust-processing',\n        async () => {\n          return await robustImplementation.processData(testData);\n        },\n        5 // 5 concurrent operations\n      );\n      \n      // All operations should meet performance threshold\n      expect(result.averageTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INFERENCE_TIME);\n      expect(result.maxTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INFERENCE_TIME * 1.5); // Some tolerance for max\n      \n      console.log('🔄 REFACTOR: Performance is consistently fast under concurrent load');\n    });\n  });\n  \n  describe('Integration Testing TDD Template', () => {\n    /**\n     * TDD Template: Integration Testing\n     * Testing complete workflows with multiple components\n     */\n    \n    test('RED: Integration test should fail without component integration', async () => {\n      const mockComponents = {\n        neuralManager: { spawnAgent: jest.fn().mockRejectedValue(new Error('Not connected')) },\n        persistence: { saveState: jest.fn().mockRejectedValue(new Error('Not connected')) },\n        coordination: { orchestrate: jest.fn().mockRejectedValue(new Error('Not connected')) }\n      };\n      \n      // Integration workflow should fail\n      await expect(async () => {\n        const agent = await mockComponents.neuralManager.spawnAgent({ type: 'mlp' });\n        await mockComponents.persistence.saveState(agent);\n        await mockComponents.coordination.orchestrate([agent.id]);\n      }).rejects.toThrow();\n      \n      console.log('🔴 RED: Integration fails without component connections');\n    });\n    \n    test('GREEN: Integration test should succeed with basic component integration', async () => {\n      const mockIntegratedSystem = {\n        neuralManager: {\n          spawnAgent: jest.fn().mockImplementation(async (config) => ({\n            id: 'integrated-agent-' + Date.now(),\n            config,\n            status: 'active'\n          }))\n        },\n        persistence: {\n          saveState: jest.fn().mockImplementation(async (agent) => ({\n            saved: true,\n            agentId: agent.id\n          }))\n        },\n        coordination: {\n          orchestrate: jest.fn().mockImplementation(async (agentIds) => ({\n            orchestrated: true,\n            agents: agentIds\n          }))\n        }\n      };\n      \n      // Integration workflow should succeed\n      const agent = await mockIntegratedSystem.neuralManager.spawnAgent({ type: 'mlp' });\n      const saveResult = await mockIntegratedSystem.persistence.saveState(agent);\n      const coordResult = await mockIntegratedSystem.coordination.orchestrate([agent.id]);\n      \n      expect(agent.status).toBe('active');\n      expect(saveResult.saved).toBe(true);\n      expect(coordResult.orchestrated).toBe(true);\n      \n      console.log('🟢 GREEN: Basic integration works');\n    });\n    \n    test('REFACTOR: Integration should be optimized with event-driven architecture', async () => {\n      const eventBus = new Map();\n      \n      const mockOptimizedSystem = {\n        neuralManager: {\n          spawnAgent: jest.fn().mockImplementation(async (config) => {\n            const agent = {\n              id: 'optimized-agent-' + Date.now(),\n              config,\n              status: 'active',\n              spawnTime: Date.now()\n            };\n            \n            // Emit event for other components\n            eventBus.set('agent-spawned', { agent, timestamp: Date.now() });\n            return agent;\n          })\n        },\n        \n        persistence: {\n          saveState: jest.fn().mockImplementation(async (agent) => {\n            const result = {\n              saved: true,\n              agentId: agent.id,\n              saveTime: Date.now()\n            };\n            \n            eventBus.set('agent-saved', { agent, result, timestamp: Date.now() });\n            return result;\n          })\n        },\n        \n        coordination: {\n          orchestrate: jest.fn().mockImplementation(async (agentIds) => {\n            const result = {\n              orchestrated: true,\n              agents: agentIds,\n              strategy: 'event-driven',\n              orchestrationTime: Date.now()\n            };\n            \n            eventBus.set('agents-orchestrated', { agentIds, result, timestamp: Date.now() });\n            return result;\n          })\n        },\n        \n        // Event monitoring\n        getEventHistory: () => Array.from(eventBus.entries())\n      };\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'optimized-integration',\n        async () => {\n          const agent = await mockOptimizedSystem.neuralManager.spawnAgent({ \n            type: 'mlp',\n            architecture: [10, 5, 1]\n          });\n          \n          const saveResult = await mockOptimizedSystem.persistence.saveState(agent);\n          const coordResult = await mockOptimizedSystem.coordination.orchestrate([agent.id]);\n          \n          return { agent, saveResult, coordResult };\n        }\n      );\n      \n      // Verify performance and event-driven behavior\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD * 3); // Allow for 3 operations\n      \n      const eventHistory = mockOptimizedSystem.getEventHistory();\n      expect(eventHistory).toHaveLength(3); // 3 events emitted\n      expect(eventHistory.map(([event]) => event)).toEqual([\n        'agent-spawned',\n        'agent-saved', \n        'agents-orchestrated'\n      ]);\n      \n      console.log('🔄 REFACTOR: Integration optimized with event-driven architecture');\n    });\n  });\n  \n  describe('TDD Best Practices Validation', () => {\n    test('should follow TDD cycle timing recommendations', async () => {\n      const tddCycleTimes = {\n        red: 30,    // 30ms to write failing test\n        green: 60,  // 60ms to implement minimal solution\n        refactor: 90 // 90ms to optimize implementation\n      };\n      \n      Object.entries(tddCycleTimes).forEach(([phase, expectedTime]) => {\n        expect(expectedTime).toBeLessThan(100); // Each phase should be fast\n        console.log(`✅ TDD ${phase.toUpperCase()} phase timing: ${expectedTime}ms (recommended <100ms)`);\n      });\n    });\n    \n    test('should validate test coverage requirements', () => {\n      const coverageRequirements = {\n        statements: 90,\n        branches: 90,\n        functions: 90,\n        lines: 90\n      };\n      \n      Object.entries(coverageRequirements).forEach(([metric, threshold]) => {\n        expect(threshold).toBeGreaterThanOrEqual(90);\n        console.log(`✅ Coverage requirement: ${metric} >= ${threshold}%`);\n      });\n    });\n    \n    test('should enforce performance testing in TDD cycle', () => {\n      const performanceRequirements = [\n        'AGENT_SPAWN_TIME',\n        'INFERENCE_TIME', \n        'PERSISTENCE_SAVE',\n        'PERSISTENCE_LOAD',\n        'COORDINATION_OVERHEAD'\n      ];\n      \n      performanceRequirements.forEach(requirement => {\n        const threshold = PERFORMANCE_THRESHOLDS[requirement as keyof typeof PERFORMANCE_THRESHOLDS];\n        expect(threshold).toBeDefined();\n        expect(threshold).toBeGreaterThan(0);\n        console.log(`✅ Performance requirement: ${requirement} < ${threshold}ms`);\n      });\n    });\n  });\n});\n\n// TDD Workflow Coordination Hook\nafterEach(async () => {\n  await new Promise(resolve => setTimeout(resolve, 10));\n  const hookResult = await coordinationTestUtils.mockHooksExecution(\n    'post-edit',\n    { \n      file: 'tdd-workflow-templates.test.ts',\n      operation: 'tdd_template_execution',\n      performance: 'tdd_cycles_completed',\n      phase: 'red_green_refactor'\n    }\n  );\n  expect(hookResult.executed).toBe(true);\n});"],"version":3}