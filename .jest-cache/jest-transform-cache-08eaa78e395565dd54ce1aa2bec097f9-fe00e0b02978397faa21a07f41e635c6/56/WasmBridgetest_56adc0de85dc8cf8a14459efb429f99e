fcfee9ece29e2e8317e3afb46cb24212
"use strict";
/**
 * Comprehensive Unit Tests for WasmBridge
 * Target: 95%+ coverage for WASM operations and SIMD acceleration
 */
Object.defineProperty(exports, "__esModule", { value: true });
const WasmBridge_1 = require("../../../src/utils/WasmBridge");
// Mock WebAssembly for testing
const mockMemory = {
    buffer: new ArrayBuffer(1024 * 1024) // 1MB
};
const mockWasmModule = {
    memory: mockMemory,
    calculate_neural_activation: jest.fn(),
    optimize_connections: jest.fn(),
    process_spike_train: jest.fn(() => 42.5),
    calculate_mesh_efficiency: jest.fn(() => 0.85),
    simd_supported: jest.fn(() => 1),
    get_memory_usage: jest.fn(() => 1024 * 1024)
};
global.WebAssembly = {
    Memory: jest.fn(() => mockMemory),
    compile: jest.fn().mockResolvedValue({}),
    instantiate: jest.fn().mockResolvedValue({ instance: mockWasmModule }),
    validate: jest.fn(() => true)
};
// Mock performance
global.performance = {
    now: jest.fn(() => Date.now())
};
describe('WasmBridge - Comprehensive Unit Tests', () => {
    let wasmBridge;
    beforeEach(() => {
        jest.clearAllMocks();
        wasmBridge = new WasmBridge_1.WasmBridge();
    });
    afterEach(() => {
        if (wasmBridge) {
            wasmBridge.cleanup();
        }
    });
    describe('Initialization', () => {
        test('should initialize successfully with WebAssembly support', async () => {
            const result = await wasmBridge.initialize();
            expect(result).toBe(true);
            expect(wasmBridge.isWasmInitialized()).toBe(true);
        });
        test('should detect SIMD support correctly', async () => {
            await wasmBridge.initialize();
            expect(wasmBridge.isSIMDSupported()).toBe(true);
        });
        test('should handle missing WebAssembly support', async () => {
            const originalWebAssembly = global.WebAssembly;
            delete global.WebAssembly;
            const result = await wasmBridge.initialize();
            expect(result).toBe(false);
            expect(wasmBridge.isWasmInitialized()).toBe(false);
            // Restore WebAssembly
            global.WebAssembly = originalWebAssembly;
        });
        test('should handle WASM compilation errors', async () => {
            const originalCompile = global.WebAssembly.compile;
            global.WebAssembly.compile = jest.fn().mockRejectedValue(new Error('Compilation failed'));
            const result = await wasmBridge.initialize();
            expect(result).toBe(false);
            // Restore original
            global.WebAssembly.compile = originalCompile;
        });
        test('should detect SIMD support failure', async () => {
            const originalValidate = global.WebAssembly.validate;
            global.WebAssembly.validate = jest.fn(() => false);
            await wasmBridge.initialize();
            expect(wasmBridge.isSIMDSupported()).toBe(false);
            // Restore original
            global.WebAssembly.validate = originalValidate;
        });
    });
    describe('Neural Activation Calculation', () => {
        beforeEach(async () => {
            await wasmBridge.initialize();
        });
        test('should calculate neural activation successfully', () => {
            const inputs = new Float32Array([0.1, 0.5, 0.9, -0.2, 0.7]);
            const outputs = wasmBridge.calculateNeuralActivation(inputs);
            expect(outputs).toBeInstanceOf(Float32Array);
            expect(outputs.length).toBe(inputs.length);
            expect(mockWasmModule.calculate_neural_activation).toHaveBeenCalled();
        });
        test('should handle empty input array', () => {
            const inputs = new Float32Array([]);
            const outputs = wasmBridge.calculateNeuralActivation(inputs);
            expect(outputs).toBeInstanceOf(Float32Array);
            expect(outputs.length).toBe(0);
        });
        test('should handle large input arrays', () => {
            const largeInputs = new Float32Array(10000);
            for (let i = 0; i < largeInputs.length; i++) {
                largeInputs[i] = Math.random() * 2 - 1; // Range [-1, 1]
            }
            const outputs = wasmBridge.calculateNeuralActivation(largeInputs);
            expect(outputs).toBeInstanceOf(Float32Array);
            expect(outputs.length).toBe(largeInputs.length);
        });
        test('should update performance metrics', () => {
            const inputs = new Float32Array([0.1, 0.2, 0.3]);
            wasmBridge.calculateNeuralActivation(inputs);
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics.executionTime).toBeGreaterThanOrEqual(0);
            expect(metrics.throughput).toBeGreaterThanOrEqual(0);
            expect(metrics.efficiency).toBeGreaterThan(0);
        });
        test('should throw error when not initialized', () => {
            const uninitializedBridge = new WasmBridge_1.WasmBridge();
            const inputs = new Float32Array([0.1, 0.2]);
            expect(() => uninitializedBridge.calculateNeuralActivation(inputs))
                .toThrow('WASM module not initialized');
        });
    });
    describe('Connection Optimization', () => {
        beforeEach(async () => {
            await wasmBridge.initialize();
        });
        test('should optimize connections successfully', () => {
            const connections = new Float32Array([0.1, 0.5, 0.8, 0.2, 0.9]);
            const optimized = wasmBridge.optimizeConnections(connections);
            expect(optimized).toBeInstanceOf(Float32Array);
            expect(optimized.length).toBe(connections.length);
            expect(mockWasmModule.optimize_connections).toHaveBeenCalled();
        });
        test('should handle single connection', () => {
            const connections = new Float32Array([0.5]);
            const optimized = wasmBridge.optimizeConnections(connections);
            expect(optimized).toBeInstanceOf(Float32Array);
            expect(optimized.length).toBe(1);
        });
        test('should handle empty connections array', () => {
            const connections = new Float32Array([]);
            const optimized = wasmBridge.optimizeConnections(connections);
            expect(optimized).toBeInstanceOf(Float32Array);
            expect(optimized.length).toBe(0);
        });
        test('should update performance metrics during optimization', () => {
            const connections = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5]);
            wasmBridge.optimizeConnections(connections);
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics.executionTime).toBeGreaterThanOrEqual(0);
            expect(metrics.throughput).toBeGreaterThanOrEqual(0);
        });
        test('should throw error when not initialized', () => {
            const uninitializedBridge = new WasmBridge_1.WasmBridge();
            const connections = new Float32Array([0.1, 0.2]);
            expect(() => uninitializedBridge.optimizeConnections(connections))
                .toThrow('WASM module not initialized');
        });
    });
    describe('Spike Train Processing', () => {
        beforeEach(async () => {
            await wasmBridge.initialize();
        });
        test('should process spike train data successfully', () => {
            const spikes = new Float32Array([0.0, 0.2, 0.8, 0.0, 1.0, 0.3, 0.0, 0.9]);
            const windowSize = 1000; // 1 second window
            const spikeRate = wasmBridge.processSpikeTrainData(spikes, windowSize);
            expect(typeof spikeRate).toBe('number');
            expect(spikeRate).toBe(42.5); // Mocked return value
            expect(mockWasmModule.process_spike_train).toHaveBeenCalledWith(spikes.length, expect.any(Number), spikes.length, windowSize);
        });
        test('should handle empty spike data', () => {
            const spikes = new Float32Array([]);
            const windowSize = 1000;
            const spikeRate = wasmBridge.processSpikeTrainData(spikes, windowSize);
            expect(typeof spikeRate).toBe('number');
            expect(spikeRate).toBe(42.5);
        });
        test('should handle different window sizes', () => {
            const spikes = new Float32Array([0.1, 0.5, 0.9]);
            const rates = [100, 500, 1000, 2000].map(windowSize => wasmBridge.processSpikeTrainData(spikes, windowSize));
            rates.forEach(rate => {
                expect(typeof rate).toBe('number');
                expect(rate).toBe(42.5);
            });
        });
        test('should update performance metrics', () => {
            const spikes = new Float32Array([0.1, 0.2, 0.3]);
            wasmBridge.processSpikeTrainData(spikes, 1000);
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics.executionTime).toBeGreaterThanOrEqual(0);
        });
        test('should throw error when not initialized', () => {
            const uninitializedBridge = new WasmBridge_1.WasmBridge();
            const spikes = new Float32Array([0.1, 0.2]);
            expect(() => uninitializedBridge.processSpikeTrainData(spikes, 1000))
                .toThrow('WASM module not initialized');
        });
    });
    describe('Mesh Efficiency Calculation', () => {
        beforeEach(async () => {
            await wasmBridge.initialize();
        });
        test('should calculate mesh efficiency successfully', () => {
            const neurons = new Float32Array([0.1, 0.5, 0.8, 0.2]);
            const synapses = new Float32Array([0.3, 0.7, 0.4, 0.9, 0.1, 0.6]);
            const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses);
            expect(typeof efficiency).toBe('number');
            expect(efficiency).toBe(0.85); // Mocked return value
            expect(mockWasmModule.calculate_mesh_efficiency).toHaveBeenCalledWith(neurons.length, expect.any(Number), synapses.length, expect.any(Number));
        });
        test('should handle single neuron and synapse', () => {
            const neurons = new Float32Array([0.5]);
            const synapses = new Float32Array([0.7]);
            const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses);
            expect(typeof efficiency).toBe('number');
            expect(efficiency).toBe(0.85);
        });
        test('should handle empty arrays', () => {
            const neurons = new Float32Array([]);
            const synapses = new Float32Array([]);
            const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses);
            expect(typeof efficiency).toBe('number');
            expect(efficiency).toBe(0.85);
        });
        test('should handle mismatched array sizes', () => {
            const neurons = new Float32Array([0.1, 0.2]);
            const synapses = new Float32Array([0.3, 0.4, 0.5, 0.6, 0.7]);
            const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses);
            expect(typeof efficiency).toBe('number');
            expect(efficiency).toBe(0.85);
        });
        test('should update performance metrics', () => {
            const neurons = new Float32Array([0.1, 0.2]);
            const synapses = new Float32Array([0.3, 0.4]);
            wasmBridge.calculateMeshEfficiency(neurons, synapses);
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics.executionTime).toBeGreaterThanOrEqual(0);
        });
        test('should throw error when not initialized', () => {
            const uninitializedBridge = new WasmBridge_1.WasmBridge();
            const neurons = new Float32Array([0.1]);
            const synapses = new Float32Array([0.2]);
            expect(() => uninitializedBridge.calculateMeshEfficiency(neurons, synapses))
                .toThrow('WASM module not initialized');
        });
    });
    describe('Performance Metrics', () => {
        beforeEach(async () => {
            await wasmBridge.initialize();
        });
        test('should provide initial performance metrics', () => {
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics).toBeDefined();
            expect(typeof metrics.executionTime).toBe('number');
            expect(typeof metrics.memoryUsage).toBe('number');
            expect(typeof metrics.simdAcceleration).toBe('boolean');
            expect(typeof metrics.throughput).toBe('number');
            expect(typeof metrics.efficiency).toBe('number');
        });
        test('should update memory usage from WASM module', () => {
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics.memoryUsage).toBe(1024 * 1024); // Mocked value
            expect(mockWasmModule.get_memory_usage).toHaveBeenCalled();
        });
        test('should track SIMD acceleration status', () => {
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics.simdAcceleration).toBe(true); // Based on initialization
        });
        test('should track execution time across operations', () => {
            const inputs = new Float32Array([0.1, 0.2, 0.3]);
            wasmBridge.calculateNeuralActivation(inputs);
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics.executionTime).toBeGreaterThanOrEqual(0);
        });
    });
    describe('Status Checks', () => {
        test('should report uninitialized state correctly', () => {
            expect(wasmBridge.isWasmInitialized()).toBe(false);
            expect(wasmBridge.isSIMDSupported()).toBe(false);
        });
        test('should report initialized state correctly', async () => {
            await wasmBridge.initialize();
            expect(wasmBridge.isWasmInitialized()).toBe(true);
            expect(wasmBridge.isSIMDSupported()).toBe(true);
        });
        test('should maintain SIMD status after failed operations', async () => {
            await wasmBridge.initialize();
            // Try an operation that might fail
            try {
                const invalidInputs = null;
                wasmBridge.calculateNeuralActivation(invalidInputs);
            }
            catch (error) {
                // Expected to fail
            }
            expect(wasmBridge.isSIMDSupported()).toBe(true);
        });
    });
    describe('Memory Management', () => {
        beforeEach(async () => {
            await wasmBridge.initialize();
        });
        test('should handle memory allocation and deallocation', () => {
            const inputs = new Float32Array([0.1, 0.2, 0.3]);
            // This should allocate and free memory internally
            const outputs = wasmBridge.calculateNeuralActivation(inputs);
            expect(outputs).toBeDefined();
            // Memory should be freed automatically
        });
        test('should handle multiple concurrent operations', () => {
            const inputs1 = new Float32Array([0.1, 0.2]);
            const inputs2 = new Float32Array([0.3, 0.4]);
            const connections = new Float32Array([0.5, 0.6]);
            const outputs1 = wasmBridge.calculateNeuralActivation(inputs1);
            const outputs2 = wasmBridge.calculateNeuralActivation(inputs2);
            const optimized = wasmBridge.optimizeConnections(connections);
            expect(outputs1).toBeDefined();
            expect(outputs2).toBeDefined();
            expect(optimized).toBeDefined();
        });
        test('should handle large memory allocations', () => {
            const largeInputs = new Float32Array(100000); // 100K elements
            largeInputs.fill(0.5);
            const outputs = wasmBridge.calculateNeuralActivation(largeInputs);
            expect(outputs).toBeDefined();
            expect(outputs.length).toBe(largeInputs.length);
        });
    });
    describe('Error Handling', () => {
        beforeEach(async () => {
            await wasmBridge.initialize();
        });
        test('should handle null inputs gracefully', () => {
            expect(() => wasmBridge.calculateNeuralActivation(null))
                .toThrow();
        });
        test('should handle undefined inputs gracefully', () => {
            expect(() => wasmBridge.calculateNeuralActivation(undefined))
                .toThrow();
        });
        test('should handle invalid Float32Array inputs', () => {
            const invalidInputs = [1, 2, 3]; // Not a Float32Array
            expect(() => wasmBridge.calculateNeuralActivation(invalidInputs))
                .toThrow();
        });
        test('should handle WASM function errors', () => {
            // Mock WASM function to throw error
            mockWasmModule.calculate_neural_activation.mockImplementation(() => {
                throw new Error('WASM function error');
            });
            const inputs = new Float32Array([0.1, 0.2]);
            expect(() => wasmBridge.calculateNeuralActivation(inputs))
                .toThrow();
        });
        test('should handle memory allocation failures', () => {
            // This is harder to test directly, but we can test the error paths
            const originalAllocate = wasmBridge.allocateMemory;
            wasmBridge.allocateMemory = jest.fn(() => {
                throw new Error('Memory allocation failed');
            });
            const inputs = new Float32Array([0.1, 0.2]);
            expect(() => wasmBridge.calculateNeuralActivation(inputs))
                .toThrow();
            // Restore original
            wasmBridge.allocateMemory = originalAllocate;
        });
    });
    describe('SIMD Support Detection', () => {
        test('should detect SIMD support correctly', async () => {
            // Test with SIMD supported
            global.WebAssembly.validate = jest.fn(() => true);
            const simdBridge = new WasmBridge_1.WasmBridge();
            await simdBridge.initialize();
            expect(simdBridge.isSIMDSupported()).toBe(true);
        });
        test('should detect lack of SIMD support', async () => {
            // Test with SIMD not supported
            global.WebAssembly.validate = jest.fn(() => false);
            const noSimdBridge = new WasmBridge_1.WasmBridge();
            await noSimdBridge.initialize();
            expect(noSimdBridge.isSIMDSupported()).toBe(false);
        });
        test('should handle SIMD detection errors', async () => {
            // Test with SIMD detection throwing error
            global.WebAssembly.validate = jest.fn(() => {
                throw new Error('SIMD detection failed');
            });
            const errorBridge = new WasmBridge_1.WasmBridge();
            await errorBridge.initialize();
            expect(errorBridge.isSIMDSupported()).toBe(false);
        });
    });
    describe('Cleanup', () => {
        test('should cleanup resources properly', async () => {
            await wasmBridge.initialize();
            expect(wasmBridge.isWasmInitialized()).toBe(true);
            wasmBridge.cleanup();
            expect(wasmBridge.isWasmInitialized()).toBe(false);
            expect(wasmBridge.isSIMDSupported()).toBe(false);
        });
        test('should reset performance metrics on cleanup', async () => {
            await wasmBridge.initialize();
            // Perform some operations to update metrics
            const inputs = new Float32Array([0.1, 0.2]);
            wasmBridge.calculateNeuralActivation(inputs);
            wasmBridge.cleanup();
            const metrics = wasmBridge.getPerformanceMetrics();
            expect(metrics.executionTime).toBe(0);
            expect(metrics.memoryUsage).toBe(0);
            expect(metrics.simdAcceleration).toBe(false);
            expect(metrics.throughput).toBe(0);
            expect(metrics.efficiency).toBe(0);
        });
        test('should handle cleanup when not initialized', () => {
            const uninitializedBridge = new WasmBridge_1.WasmBridge();
            expect(() => uninitializedBridge.cleanup()).not.toThrow();
        });
        test('should allow re-initialization after cleanup', async () => {
            await wasmBridge.initialize();
            expect(wasmBridge.isWasmInitialized()).toBe(true);
            wasmBridge.cleanup();
            expect(wasmBridge.isWasmInitialized()).toBe(false);
            const result = await wasmBridge.initialize();
            expect(result).toBe(true);
            expect(wasmBridge.isWasmInitialized()).toBe(true);
        });
    });
    describe('Edge Cases', () => {
        beforeEach(async () => {
            await wasmBridge.initialize();
        });
        test('should handle very small numbers', () => {
            const inputs = new Float32Array([1e-10, -1e-10, 0]);
            const outputs = wasmBridge.calculateNeuralActivation(inputs);
            expect(outputs).toBeDefined();
            expect(outputs.length).toBe(inputs.length);
        });
        test('should handle very large numbers', () => {
            const inputs = new Float32Array([1e10, -1e10, Number.MAX_VALUE]);
            const outputs = wasmBridge.calculateNeuralActivation(inputs);
            expect(outputs).toBeDefined();
            expect(outputs.length).toBe(inputs.length);
        });
        test('should handle special float values', () => {
            const inputs = new Float32Array([NaN, Infinity, -Infinity]);
            const outputs = wasmBridge.calculateNeuralActivation(inputs);
            expect(outputs).toBeDefined();
            expect(outputs.length).toBe(inputs.length);
        });
        test('should handle maximum array size', () => {
            // Test with a reasonably large array (not too large to avoid memory issues)
            const maxSize = 1000000; // 1M elements
            const inputs = new Float32Array(maxSize);
            inputs.fill(0.5);
            const outputs = wasmBridge.calculateNeuralActivation(inputs);
            expect(outputs).toBeDefined();
            expect(outputs.length).toBe(maxSize);
        });
        test('should handle zero window size in spike processing', () => {
            const spikes = new Float32Array([0.1, 0.2, 0.3]);
            const spikeRate = wasmBridge.processSpikeTrainData(spikes, 0);
            expect(typeof spikeRate).toBe('number');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,