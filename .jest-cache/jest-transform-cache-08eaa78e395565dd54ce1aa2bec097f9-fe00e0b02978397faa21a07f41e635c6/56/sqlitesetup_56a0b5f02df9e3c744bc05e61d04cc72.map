{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/sqlite-setup.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/sqlite-setup.ts"],"sourcesContent":["/**\n * SQLite Persistence Test Setup for Phase 2A\n * Specialized setup for SQLite database testing with neural agent persistence\n */\n\nimport { jest } from '@jest/globals';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Mock SQLite3 for testing environment\nconst mockDatabase = {\n  run: jest.fn(),\n  get: jest.fn(),\n  all: jest.fn(),\n  each: jest.fn(),\n  prepare: jest.fn(),\n  exec: jest.fn(),\n  close: jest.fn(),\n  serialize: jest.fn(),\n  parallelize: jest.fn()\n};\n\nconst mockStatement = {\n  run: jest.fn(),\n  get: jest.fn(),\n  all: jest.fn(),\n  each: jest.fn(),\n  bind: jest.fn(),\n  reset: jest.fn(),\n  finalize: jest.fn()\n};\n\n// Mock SQLite3 module if not available\njest.mock('sqlite3', () => ({\n  Database: jest.fn().mockImplementation(() => mockDatabase),\n  verbose: jest.fn().mockReturnThis(),\n  OPEN_READWRITE: 0x00000002,\n  OPEN_CREATE: 0x00000004,\n  OPEN_READONLY: 0x00000001\n}), { virtual: true });\n\n// Create test database directory\nconst testDbDir = path.join(process.cwd(), 'tests', 'temp-db');\nif (!fs.existsSync(testDbDir)) {\n  fs.mkdirSync(testDbDir, { recursive: true });\n}\n\n// Test database path\nexport const TEST_DB_PATH = path.join(testDbDir, 'test-neural-agents.db');\n\n// Agent State Schema for testing\nexport const AGENT_STATE_SCHEMA = `\n  CREATE TABLE IF NOT EXISTS agent_states (\n    id TEXT PRIMARY KEY,\n    agent_type TEXT NOT NULL,\n    neural_config TEXT NOT NULL,\n    weights BLOB,\n    biases BLOB,\n    created_at INTEGER NOT NULL,\n    last_active INTEGER NOT NULL,\n    total_inferences INTEGER DEFAULT 0,\n    average_inference_time REAL DEFAULT 0,\n    learning_progress REAL DEFAULT 0,\n    memory_usage INTEGER DEFAULT 0,\n    state INTEGER DEFAULT 0,\n    performance_metrics TEXT\n  );\n`;\n\nexport const TRAINING_SESSIONS_SCHEMA = `\n  CREATE TABLE IF NOT EXISTS training_sessions (\n    session_id TEXT PRIMARY KEY,\n    agent_id TEXT NOT NULL,\n    start_time INTEGER NOT NULL,\n    end_time INTEGER,\n    epochs INTEGER NOT NULL,\n    data_points INTEGER NOT NULL,\n    initial_accuracy REAL,\n    final_accuracy REAL,\n    training_data TEXT,\n    convergence_epoch INTEGER,\n    FOREIGN KEY (agent_id) REFERENCES agent_states (id)\n  );\n`;\n\nexport const KNOWLEDGE_SHARING_SCHEMA = `\n  CREATE TABLE IF NOT EXISTS knowledge_sharing (\n    id TEXT PRIMARY KEY,\n    source_agent_id TEXT NOT NULL,\n    target_agent_id TEXT NOT NULL,\n    shared_at INTEGER NOT NULL,\n    knowledge_type TEXT NOT NULL,\n    knowledge_data TEXT,\n    success BOOLEAN DEFAULT 1,\n    FOREIGN KEY (source_agent_id) REFERENCES agent_states (id),\n    FOREIGN KEY (target_agent_id) REFERENCES agent_states (id)\n  );\n`;\n\nexport const PERFORMANCE_METRICS_SCHEMA = `\n  CREATE TABLE IF NOT EXISTS performance_metrics (\n    id TEXT PRIMARY KEY,\n    agent_id TEXT,\n    metric_type TEXT NOT NULL,\n    metric_value REAL NOT NULL,\n    recorded_at INTEGER NOT NULL,\n    metadata TEXT,\n    FOREIGN KEY (agent_id) REFERENCES agent_states (id)\n  );\n`;\n\n// Mock Database Interface for testing\nexport class MockSQLiteDatabase {\n  private statements: Map<string, any> = new Map();\n  private data: Map<string, any[]> = new Map();\n  \n  constructor() {\n    // Initialize mock data structures\n    this.data.set('agent_states', []);\n    this.data.set('training_sessions', []);\n    this.data.set('knowledge_sharing', []);\n    this.data.set('performance_metrics', []);\n  }\n  \n  run(sql: string, params: any[] = [], callback?: (err: Error | null) => void): void {\n    if (sql.includes('INSERT INTO agent_states')) {\n      const agentData = this.parseInsertData(sql, params);\n      const agents = this.data.get('agent_states') || [];\n      agents.push(agentData);\n      this.data.set('agent_states', agents);\n    }\n    \n    if (callback) callback(null);\n  }\n  \n  get(sql: string, params: any[] = [], callback?: (err: Error | null, row?: any) => void): void {\n    let result = null;\n    \n    if (sql.includes('SELECT * FROM agent_states WHERE id = ?')) {\n      const agents = this.data.get('agent_states') || [];\n      result = agents.find(agent => agent.id === params[0]);\n    }\n    \n    if (callback) callback(null, result);\n  }\n  \n  all(sql: string, params: any[] = [], callback?: (err: Error | null, rows?: any[]) => void): void {\n    let results: any[] = [];\n    \n    if (sql.includes('SELECT * FROM agent_states')) {\n      results = this.data.get('agent_states') || [];\n    } else if (sql.includes('SELECT * FROM training_sessions')) {\n      results = this.data.get('training_sessions') || [];\n    }\n    \n    if (callback) callback(null, results);\n  }\n  \n  prepare(sql: string): any {\n    const statement = {\n      ...mockStatement,\n      run: jest.fn((params: any[], callback?: (err: Error | null) => void) => {\n        this.run(sql, params, callback);\n      }),\n      get: jest.fn((params: any[], callback?: (err: Error | null, row?: any) => void) => {\n        this.get(sql, params, callback);\n      }),\n      all: jest.fn((params: any[], callback?: (err: Error | null, rows?: any[]) => void) => {\n        this.all(sql, params, callback);\n      })\n    };\n    \n    this.statements.set(sql, statement);\n    return statement;\n  }\n  \n  close(): void {\n    this.data.clear();\n    this.statements.clear();\n  }\n  \n  private parseInsertData(sql: string, params: any[]): any {\n    // Simple mock data parsing for testing\n    return {\n      id: params[0] || 'test-agent-' + Date.now(),\n      agent_type: params[1] || 'mlp',\n      neural_config: params[2] || '{}',\n      created_at: params[3] || Date.now(),\n      last_active: params[4] || Date.now()\n    };\n  }\n  \n  // Test utilities\n  getTestData(table: string): any[] {\n    return this.data.get(table) || [];\n  }\n  \n  setTestData(table: string, data: any[]): void {\n    this.data.set(table, data);\n  }\n  \n  clearTestData(): void {\n    this.data.forEach((_, key) => this.data.set(key, []));\n  }\n}\n\n// Global mock database instance\nexport const mockSQLiteDB = new MockSQLiteDatabase();\n\n// SQLite Test Utilities\nexport const sqliteTestUtils = {\n  /**\n   * Create a test database with schema\n   */\n  createTestDatabase: async (): Promise<MockSQLiteDatabase> => {\n    const db = new MockSQLiteDatabase();\n    return db;\n  },\n  \n  /**\n   * Generate test agent state data\n   */\n  generateAgentStateData: (overrides: Partial<any> = {}) => ({\n    id: 'test-agent-' + Math.random().toString(36).substr(2, 9),\n    agent_type: 'mlp',\n    neural_config: JSON.stringify({\n      type: 'mlp',\n      architecture: [10, 5, 1],\n      activationFunction: 'relu'\n    }),\n    weights: Buffer.from(new Float32Array(100)),\n    biases: Buffer.from(new Float32Array(16)),\n    created_at: Date.now(),\n    last_active: Date.now(),\n    total_inferences: 0,\n    average_inference_time: 0,\n    learning_progress: 0,\n    memory_usage: 1024 * 1024, // 1MB\n    state: 0, // ACTIVE\n    performance_metrics: JSON.stringify({\n      successRate: 0.95,\n      averageResponseTime: 45\n    }),\n    ...overrides\n  }),\n  \n  /**\n   * Generate test training session data\n   */\n  generateTrainingSessionData: (agentId: string, overrides: Partial<any> = {}) => ({\n    session_id: 'session-' + Math.random().toString(36).substr(2, 9),\n    agent_id: agentId,\n    start_time: Date.now() - 10000,\n    end_time: Date.now(),\n    epochs: 10,\n    data_points: 100,\n    initial_accuracy: 0.5,\n    final_accuracy: 0.85,\n    training_data: JSON.stringify([\n      { inputs: [1, 2, 3], outputs: [0.8] }\n    ]),\n    convergence_epoch: 8,\n    ...overrides\n  }),\n  \n  /**\n   * Generate test knowledge sharing data\n   */\n  generateKnowledgeSharingData: (sourceId: string, targetId: string, overrides: Partial<any> = {}) => ({\n    id: 'share-' + Math.random().toString(36).substr(2, 9),\n    source_agent_id: sourceId,\n    target_agent_id: targetId,\n    shared_at: Date.now(),\n    knowledge_type: 'weights',\n    knowledge_data: JSON.stringify({\n      weights: Array.from({ length: 100 }, () => Math.random())\n    }),\n    success: true,\n    ...overrides\n  }),\n  \n  /**\n   * Generate test performance metrics\n   */\n  generatePerformanceMetrics: (agentId: string, overrides: Partial<any> = {}) => ({\n    id: 'metric-' + Math.random().toString(36).substr(2, 9),\n    agent_id: agentId,\n    metric_type: 'inference_time',\n    metric_value: 45.5,\n    recorded_at: Date.now(),\n    metadata: JSON.stringify({\n      inputSize: 10,\n      outputSize: 1,\n      memoryUsage: 1024 * 1024\n    }),\n    ...overrides\n  }),\n  \n  /**\n   * Assert persistence performance (<75ms for saves, <100ms for loads)\n   */\n  assertPersistencePerformance: (operationType: string, startTime: number, endTime: number) => {\n    const duration = endTime - startTime;\n    \n    if (operationType === 'save' || operationType === 'spawn') {\n      expect(duration).toBeLessThan(75); // <75ms for spawn/save operations\n    } else if (operationType === 'load' || operationType === 'inference') {\n      expect(duration).toBeLessThan(100); // <100ms for load/inference operations\n    }\n  },\n  \n  /**\n   * Validate cross-session persistence\n   */\n  validateCrossSessionPersistence: async (db: MockSQLiteDatabase, agentId: string) => {\n    // Simulate session end and restart\n    const agentData = db.getTestData('agent_states').find(a => a.id === agentId);\n    expect(agentData).toBeDefined();\n    \n    // Create new database instance (simulating app restart)\n    const newDb = new MockSQLiteDatabase();\n    newDb.setTestData('agent_states', [agentData]);\n    \n    // Verify data persists across sessions\n    const restoredAgent = newDb.getTestData('agent_states').find(a => a.id === agentId);\n    expect(restoredAgent).toEqual(agentData);\n    \n    return newDb;\n  },\n  \n  /**\n   * Test data migration scenarios\n   */\n  testDataMigration: async (fromVersion: string, toVersion: string) => {\n    // Mock migration logic for testing\n    const migrationSteps = {\n      '1.0.0': {\n        '2.0.0': [\n          'ALTER TABLE agent_states ADD COLUMN coordination_data TEXT',\n          'CREATE INDEX idx_agent_states_last_active ON agent_states(last_active)'\n        ]\n      }\n    };\n    \n    return migrationSteps[fromVersion]?.[toVersion] || [];\n  }\n};\n\n// Performance monitoring for persistence operations\nexport const persistencePerformanceMonitor = {\n  startTime: Date.now(),\n  \n  measureOperation: <T>(operationName: string, operation: () => Promise<T>): Promise<T> => {\n    const start = performance.now();\n    \n    return operation().then(result => {\n      const end = performance.now();\n      const duration = end - start;\n      \n      sqliteTestUtils.assertPersistencePerformance(operationName, start, end);\n      \n      return result;\n    });\n  }\n};\n\n// Global test hooks for SQLite\nbeforeEach(() => {\n  mockSQLiteDB.clearTestData();\n  jest.clearAllMocks();\n});\n\nafterEach(() => {\n  mockSQLiteDB.clearTestData();\n});\n\n// Setup console for SQLite testing\nconsole.log('💾 SQLite persistence test setup initialized');\nconsole.log('🗃️ Mock database configured for Phase 2A testing');\nconsole.log('⚡ Performance monitoring enabled (<75ms spawn, <100ms inference)');\nconsole.log('🔄 Cross-session persistence validation ready');"],"version":3}