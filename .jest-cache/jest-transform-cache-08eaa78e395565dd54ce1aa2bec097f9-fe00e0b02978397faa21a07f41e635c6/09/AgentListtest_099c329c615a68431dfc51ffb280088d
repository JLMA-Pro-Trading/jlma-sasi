03a7ce2f93391d6e6f076f9f82f731c5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock the CSS import
jest.mock('../../../src/styles/AgentList.css', () => ({}));
/**
 * Comprehensive Unit Tests for AgentList Component
 * Target: 90%+ coverage for React component functionality
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
const AgentList_1 = __importDefault(require("../../../src/components/AgentList"));
// Mock agent data for testing
const mockAgents = [
    {
        id: 'agent-1',
        type: 'researcher',
        status: 'active',
        performance: 85.2,
        tasks: 12,
        cognitivePattern: 'divergent',
        neuralId: 'neural-1',
        meshConnection: {
            meshId: 'mesh-1',
            strength: 0.8,
            latency: 45
        },
        neuralProperties: {
            neuronId: 'neuron-1',
            meshId: 'mesh-1',
            learningRate: 0.001,
            activationFunction: 'tanh',
            connectionStrength: 0.85
        },
        capabilities: ['research', 'analysis', 'documentation'],
        memory: 45.6,
        lastActive: Date.now() - 30000, // 30 seconds ago
        createdAt: Date.now() - 300000 // 5 minutes ago
    },
    {
        id: 'agent-2',
        type: 'coder',
        status: 'idle',
        performance: 92.1,
        tasks: 8,
        cognitivePattern: 'convergent',
        neuralId: 'neural-2',
        meshConnection: {
            meshId: 'mesh-1',
            strength: 0.9,
            latency: 32
        },
        neuralProperties: {
            neuronId: 'neuron-2',
            meshId: 'mesh-1',
            learningRate: 0.002,
            activationFunction: 'relu',
            connectionStrength: 0.92
        },
        capabilities: ['coding', 'debugging', 'optimization'],
        memory: 38.2,
        lastActive: Date.now() - 120000, // 2 minutes ago
        createdAt: Date.now() - 600000 // 10 minutes ago
    },
    {
        id: 'agent-3',
        type: 'analyst',
        status: 'busy',
        performance: 78.9,
        tasks: 15,
        cognitivePattern: 'systems',
        neuralId: 'neural-3',
        meshConnection: {
            meshId: 'mesh-2',
            strength: 0.7,
            latency: 58
        },
        neuralProperties: {
            neuronId: 'neuron-3',
            meshId: 'mesh-2',
            learningRate: 0.0015,
            activationFunction: 'sigmoid',
            connectionStrength: 0.76
        },
        capabilities: ['analysis', 'reporting', 'metrics'],
        memory: 52.1,
        lastActive: Date.now() - 5000, // 5 seconds ago
        createdAt: Date.now() - 180000 // 3 minutes ago
    }
];
const mockOnAgentSelect = jest.fn();
const mockOnAgentAction = jest.fn();
describe('AgentList Component - Comprehensive Tests', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('Rendering', () => {
        test('should render agent list with default props', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByText('Active Agents (3)')).toBeInTheDocument();
            expect(react_2.screen.getByText('agent-1')).toBeInTheDocument();
            expect(react_2.screen.getByText('agent-2')).toBeInTheDocument();
            expect(react_2.screen.getByText('agent-3')).toBeInTheDocument();
        });
        test('should render empty state when no agents', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: [] }));
            expect(react_2.screen.getByText('No agents available')).toBeInTheDocument();
            expect(react_2.screen.getByText('Spawn your first agent to get started')).toBeInTheDocument();
        });
        test('should render loading state', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, loading: true }));
            expect(react_2.screen.getByText('Loading agents...')).toBeInTheDocument();
        });
        test('should render error state', () => {
            const errorMessage = 'Failed to load agents';
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: [], error: errorMessage }));
            expect(react_2.screen.getByText('Error: Failed to load agents')).toBeInTheDocument();
        });
        test('should render custom title when provided', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, title: "My Custom Agents" }));
            expect(react_2.screen.getByText('My Custom Agents (3)')).toBeInTheDocument();
        });
    });
    describe('Agent Display', () => {
        test('should display agent status correctly', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByText('active')).toBeInTheDocument();
            expect(react_2.screen.getByText('idle')).toBeInTheDocument();
            expect(react_2.screen.getByText('busy')).toBeInTheDocument();
        });
        test('should display agent performance metrics', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByText('85.2%')).toBeInTheDocument();
            expect(react_2.screen.getByText('92.1%')).toBeInTheDocument();
            expect(react_2.screen.getByText('78.9%')).toBeInTheDocument();
        });
        test('should display agent types', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByText('researcher')).toBeInTheDocument();
            expect(react_2.screen.getByText('coder')).toBeInTheDocument();
            expect(react_2.screen.getByText('analyst')).toBeInTheDocument();
        });
        test('should display cognitive patterns', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByText('divergent')).toBeInTheDocument();
            expect(react_2.screen.getByText('convergent')).toBeInTheDocument();
            expect(react_2.screen.getByText('systems')).toBeInTheDocument();
        });
        test('should display task counts', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByText('12 tasks')).toBeInTheDocument();
            expect(react_2.screen.getByText('8 tasks')).toBeInTheDocument();
            expect(react_2.screen.getByText('15 tasks')).toBeInTheDocument();
        });
        test('should display memory usage', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByText('45.6 MB')).toBeInTheDocument();
            expect(react_2.screen.getByText('38.2 MB')).toBeInTheDocument();
            expect(react_2.screen.getByText('52.1 MB')).toBeInTheDocument();
        });
    });
    describe('Filtering', () => {
        test('should filter agents by status', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showFilter: true }));
            const statusFilter = react_2.screen.getByRole('combobox', { name: /status/i });
            react_2.fireEvent.change(statusFilter, { target: { value: 'active' } });
            expect(react_2.screen.getByText('agent-1')).toBeInTheDocument();
            expect(react_2.screen.queryByText('agent-2')).not.toBeInTheDocument();
            expect(react_2.screen.queryByText('agent-3')).not.toBeInTheDocument();
        });
        test('should filter agents by type', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showFilter: true }));
            const typeFilter = react_2.screen.getByRole('combobox', { name: /type/i });
            react_2.fireEvent.change(typeFilter, { target: { value: 'coder' } });
            expect(react_2.screen.queryByText('agent-1')).not.toBeInTheDocument();
            expect(react_2.screen.getByText('agent-2')).toBeInTheDocument();
            expect(react_2.screen.queryByText('agent-3')).not.toBeInTheDocument();
        });
        test('should search agents by name', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showFilter: true }));
            const searchInput = react_2.screen.getByPlaceholderText('Search agents...');
            react_2.fireEvent.change(searchInput, { target: { value: 'agent-2' } });
            expect(react_2.screen.queryByText('agent-1')).not.toBeInTheDocument();
            expect(react_2.screen.getByText('agent-2')).toBeInTheDocument();
            expect(react_2.screen.queryByText('agent-3')).not.toBeInTheDocument();
        });
        test('should clear filters when reset button clicked', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showFilter: true }));
            // Apply a filter
            const statusFilter = react_2.screen.getByRole('combobox', { name: /status/i });
            react_2.fireEvent.change(statusFilter, { target: { value: 'active' } });
            // Click reset
            const resetButton = react_2.screen.getByText('Reset Filters');
            react_2.fireEvent.click(resetButton);
            // All agents should be visible again
            expect(react_2.screen.getByText('agent-1')).toBeInTheDocument();
            expect(react_2.screen.getByText('agent-2')).toBeInTheDocument();
            expect(react_2.screen.getByText('agent-3')).toBeInTheDocument();
        });
    });
    describe('Sorting', () => {
        test('should sort agents by performance', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showSort: true }));
            const sortSelect = react_2.screen.getByRole('combobox', { name: /sort by/i });
            react_2.fireEvent.change(sortSelect, { target: { value: 'performance' } });
            // Should sort in descending order (highest first)
            const agentElements = react_2.screen.getAllByTestId(/agent-item/);
            expect(agentElements[0]).toHaveTextContent('agent-2'); // 92.1%
            expect(agentElements[1]).toHaveTextContent('agent-1'); // 85.2%
            expect(agentElements[2]).toHaveTextContent('agent-3'); // 78.9%
        });
        test('should sort agents by name', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showSort: true }));
            const sortSelect = react_2.screen.getByRole('combobox', { name: /sort by/i });
            react_2.fireEvent.change(sortSelect, { target: { value: 'name' } });
            const agentElements = react_2.screen.getAllByTestId(/agent-item/);
            expect(agentElements[0]).toHaveTextContent('agent-1');
            expect(agentElements[1]).toHaveTextContent('agent-2');
            expect(agentElements[2]).toHaveTextContent('agent-3');
        });
        test('should sort agents by last active time', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showSort: true }));
            const sortSelect = react_2.screen.getByRole('combobox', { name: /sort by/i });
            react_2.fireEvent.change(sortSelect, { target: { value: 'lastActive' } });
            // Should sort by most recently active first
            const agentElements = react_2.screen.getAllByTestId(/agent-item/);
            expect(agentElements[0]).toHaveTextContent('agent-3'); // 5 seconds ago
            expect(agentElements[1]).toHaveTextContent('agent-1'); // 30 seconds ago
            expect(agentElements[2]).toHaveTextContent('agent-2'); // 2 minutes ago
        });
    });
    describe('Agent Selection', () => {
        test('should call onAgentSelect when agent is clicked', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, onAgentSelect: mockOnAgentSelect }));
            const agentElement = react_2.screen.getByTestId('agent-item-agent-1');
            react_2.fireEvent.click(agentElement);
            expect(mockOnAgentSelect).toHaveBeenCalledWith(mockAgents[0]);
        });
        test('should highlight selected agent', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, selectedAgentId: "agent-2" }));
            const selectedAgent = react_2.screen.getByTestId('agent-item-agent-2');
            expect(selectedAgent).toHaveClass('selected');
        });
        test('should allow multiple selection when enabled', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, allowMultiSelect: true }));
            // Select multiple agents
            const agent1 = react_2.screen.getByTestId('agent-item-agent-1');
            const agent2 = react_2.screen.getByTestId('agent-item-agent-2');
            react_2.fireEvent.click(agent1);
            react_2.fireEvent.click(agent2, { ctrlKey: true });
            expect(agent1).toHaveClass('selected');
            expect(agent2).toHaveClass('selected');
        });
    });
    describe('Agent Actions', () => {
        test('should show action buttons when enabled', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showActions: true }));
            expect(react_2.screen.getAllByText('Terminate')).toHaveLength(3);
            expect(react_2.screen.getAllByText('View Details')).toHaveLength(3);
        });
        test('should call onAgentAction when action button is clicked', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showActions: true, onAgentAction: mockOnAgentAction }));
            const terminateButton = react_2.screen.getAllByText('Terminate')[0];
            react_2.fireEvent.click(terminateButton);
            expect(mockOnAgentAction).toHaveBeenCalledWith('terminate', mockAgents[0]);
        });
        test('should show additional actions in dropdown', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showActions: true }));
            const moreButton = react_2.screen.getAllByText('More')[0];
            react_2.fireEvent.click(moreButton);
            expect(react_2.screen.getByText('Edit')).toBeInTheDocument();
            expect(react_2.screen.getByText('Clone')).toBeInTheDocument();
            expect(react_2.screen.getByText('Export')).toBeInTheDocument();
        });
    });
    describe('Real-time Updates', () => {
        test('should update agent list when agents prop changes', () => {
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByText('Active Agents (3)')).toBeInTheDocument();
            const updatedAgents = [...mockAgents, {
                    ...mockAgents[0],
                    id: 'agent-4',
                    type: 'optimizer'
                }];
            rerender((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: updatedAgents }));
            expect(react_2.screen.getByText('Active Agents (4)')).toBeInTheDocument();
            expect(react_2.screen.getByText('agent-4')).toBeInTheDocument();
        });
        test('should show real-time status updates', async () => {
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            const updatedAgents = mockAgents.map(agent => agent.id === 'agent-1'
                ? { ...agent, status: 'busy', performance: 87.5 }
                : agent);
            rerender((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: updatedAgents }));
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByText('87.5%')).toBeInTheDocument();
            });
        });
    });
    describe('Performance Metrics', () => {
        test('should display performance indicators correctly', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showMetrics: true }));
            // Check for performance bars
            expect(react_2.screen.getAllByRole('progressbar')).toHaveLength(3);
            // Check for memory usage indicators
            expect(react_2.screen.getByText('45.6 MB')).toBeInTheDocument();
            expect(react_2.screen.getByText('38.2 MB')).toBeInTheDocument();
            expect(react_2.screen.getByText('52.1 MB')).toBeInTheDocument();
        });
        test('should show connection strength indicators', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showMetrics: true }));
            expect(react_2.screen.getByText('80%')).toBeInTheDocument(); // Connection strength for agent-1
            expect(react_2.screen.getByText('90%')).toBeInTheDocument(); // Connection strength for agent-2
            expect(react_2.screen.getByText('70%')).toBeInTheDocument(); // Connection strength for agent-3
        });
        test('should display latency information', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showMetrics: true }));
            expect(react_2.screen.getByText('45ms')).toBeInTheDocument();
            expect(react_2.screen.getByText('32ms')).toBeInTheDocument();
            expect(react_2.screen.getByText('58ms')).toBeInTheDocument();
        });
    });
    describe('Accessibility', () => {
        test('should have proper ARIA labels', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByRole('list')).toHaveAttribute('aria-label', 'Agent list');
            expect(react_2.screen.getAllByRole('listitem')).toHaveLength(3);
        });
        test('should support keyboard navigation', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, onAgentSelect: mockOnAgentSelect }));
            const firstAgent = react_2.screen.getByTestId('agent-item-agent-1');
            firstAgent.focus();
            react_2.fireEvent.keyDown(firstAgent, { key: 'Enter' });
            expect(mockOnAgentSelect).toHaveBeenCalledWith(mockAgents[0]);
            react_2.fireEvent.keyDown(firstAgent, { key: ' ' });
            expect(mockOnAgentSelect).toHaveBeenCalledTimes(2);
        });
        test('should have proper heading structure', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            expect(react_2.screen.getByRole('heading', { level: 2 })).toHaveTextContent('Active Agents (3)');
        });
    });
    describe('Error Handling', () => {
        test('should handle agents with missing properties gracefully', () => {
            const incompleteAgents = [
                {
                    id: 'incomplete-agent',
                    type: 'unknown'
                    // Missing other properties
                }
            ];
            expect(() => (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: incompleteAgents }))).not.toThrow();
            expect(react_2.screen.getByText('incomplete-agent')).toBeInTheDocument();
        });
        test('should handle null/undefined agent properties', () => {
            const agentsWithNulls = [
                {
                    ...mockAgents[0],
                    performance: null,
                    meshConnection: null,
                    neuralProperties: undefined
                }
            ];
            expect(() => (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: agentsWithNulls }))).not.toThrow();
        });
        test('should handle invalid performance values', () => {
            const invalidAgents = [
                {
                    ...mockAgents[0],
                    performance: NaN,
                    memory: -1
                }
            ];
            expect(() => (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: invalidAgents }))).not.toThrow();
        });
    });
    describe('Edge Cases', () => {
        test('should handle empty search results', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents, showFilter: true }));
            const searchInput = react_2.screen.getByPlaceholderText('Search agents...');
            react_2.fireEvent.change(searchInput, { target: { value: 'nonexistent' } });
            expect(react_2.screen.getByText('No agents match your search criteria')).toBeInTheDocument();
        });
        test('should handle agents with very long names', () => {
            const longNameAgent = {
                ...mockAgents[0],
                id: 'agent-with-very-long-name-that-might-cause-layout-issues',
                type: 'agent-type-with-extremely-long-name'
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: [longNameAgent] }));
            expect(react_2.screen.getByText('agent-with-very-long-name-that-might-cause-layout-issues')).toBeInTheDocument();
        });
        test('should handle rapid updates without crashing', () => {
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: mockAgents }));
            // Simulate rapid updates
            for (let i = 0; i < 10; i++) {
                const updatedAgents = mockAgents.map(agent => ({
                    ...agent,
                    performance: Math.random() * 100,
                    lastActive: Date.now()
                }));
                rerender((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: updatedAgents }));
            }
            expect(react_2.screen.getByText('Active Agents (3)')).toBeInTheDocument();
        });
        test('should handle agents with special characters in names', () => {
            const specialAgent = {
                ...mockAgents[0],
                id: 'agent-with-special-chars-@#$%',
                type: 'type-with-unicode-😀🚀'
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AgentList_1.default, { agents: [specialAgent] }));
            expect(react_2.screen.getByText('agent-with-special-chars-@#$%')).toBeInTheDocument();
            expect(react_2.screen.getByText('type-with-unicode-😀🚀')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,