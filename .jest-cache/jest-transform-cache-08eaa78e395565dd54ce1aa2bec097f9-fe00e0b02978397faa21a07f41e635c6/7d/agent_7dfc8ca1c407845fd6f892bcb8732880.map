{"version":3,"names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/types/agent.ts"],"sourcesContent":["export interface Agent {\n  id: string\n  name: string\n  type: 'researcher' | 'coder' | 'tester' | 'reviewer' | 'debugger' | 'neural' | 'synaptic'\n  status: 'active' | 'idle' | 'processing' | 'completed' | 'neural_sync'\n  currentTask: string\n  repository: string\n  branch: string\n  completedTasks: number\n  efficiency: number\n  progress: number\n  position: { x: number; y: number; z: number }\n  owner: string\n  neuralId?: string\n  meshConnection?: {\n    connected: boolean\n    meshId: string\n    nodeType: string\n    layer: number\n    synapses: number\n    activation: number\n    lastSpike: Date\n  }\n  realtime?: {\n    cpuUsage: number\n    memoryUsage: number\n    networkLatency: number\n    wasmPerformance: number\n  }\n}\n\n// Phase 2A Persistence Types\n\nexport type AgentType = 'researcher' | 'coder' | 'analyst' | 'optimizer' | 'coordinator';\n\nexport type CognitivePattern = 'convergent' | 'divergent' | 'lateral' | 'systems' | 'critical' | 'adaptive';\n\nexport type AgentState = 'spawning' | 'active' | 'idle' | 'learning' | 'persisted' | 'terminating' | 'terminated' | 'error';\n\nexport interface AgentConfig {\n  id: string;\n  type: AgentType;\n  cognitivePattern: CognitivePattern;\n  networkLayers: number[];\n  learningRate?: number;\n  momentum?: number;\n  status: AgentState;\n  createdAt: number;\n  lastActive: number;\n  memoryUsageMB?: number;\n  performanceScore?: number;\n  spawnTimeMs?: number | null;\n  configJson?: string;\n  metadataJson?: string;\n}\n\nexport interface AgentMetric {\n  id?: number;\n  agentId: string;\n  metricType: 'spawn_time' | 'inference_time' | 'memory_usage' | 'cpu_usage' | 'accuracy' | 'throughput';\n  value: number;\n  unit: 'ms' | 'mb' | 'percent' | 'count' | 'requests_per_second';\n  recordedAt: number;\n  context?: Record<string, any>;\n}\n\nexport interface AgentMemoryEntry {\n  id?: number;\n  agentId: string;\n  memoryType: 'episodic' | 'semantic' | 'procedural' | 'working';\n  key: string;\n  valueData: Buffer;\n  importanceScore?: number;\n  accessCount?: number;\n  createdAt: number;\n  lastAccessed: number;\n  ttlExpires?: number | null;\n}\n\nexport interface SessionState {\n  id: string;\n  swarmTopology: 'mesh' | 'hierarchical' | 'ring' | 'star';\n  activeAgents: string[];\n  coordinationState: Buffer;\n  createdAt: number;\n  lastCheckpoint: number;\n  isActive: boolean;\n}\n\nexport interface NeuralWeightRecord {\n  agentId: string;\n  layerIndex: number;\n  weightData: Buffer;\n  biasData: Buffer;\n  updatedAt: number;\n  checksum: string;\n  compressionType: 'gzip' | 'lz4' | 'none';\n}\n\nexport interface DatabaseConnectionConfig {\n  path: string;\n  timeout: number;\n  maxConnections: number;\n  busyTimeout: number;\n  cacheSize: number;\n  mmapSize: number;\n  walMode: boolean;\n  synchronous: 'OFF' | 'NORMAL' | 'FULL';\n}\n\nexport interface PerformanceThresholds {\n  agentSpawnTime: number; // ms\n  inferenceTime: number; // ms\n  memoryPerAgent: number; // bytes\n  databaseOperationTime: number; // ms\n  recoveryTime: number; // ms\n}\n\nexport interface BatchOperation<T> {\n  operation: 'insert' | 'update' | 'delete';\n  data: T;\n  priority?: 'high' | 'medium' | 'low';\n}"],"mappings":"","ignoreList":[]}