1ee477109f2a407949ad6b1e12baa156
/* istanbul ignore next */
function cov_1rabdj7kv4() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/types/agent.ts";
  var hash = "0b7c41a04627619aea8d62ca4190f49022ec9c73";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/types/agent.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/types/agent.ts",
      mappings: "",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/types/agent.ts"],
      sourcesContent: ["export interface Agent {\n  id: string\n  name: string\n  type: 'researcher' | 'coder' | 'tester' | 'reviewer' | 'debugger' | 'neural' | 'synaptic'\n  status: 'active' | 'idle' | 'processing' | 'completed' | 'neural_sync'\n  currentTask: string\n  repository: string\n  branch: string\n  completedTasks: number\n  efficiency: number\n  progress: number\n  position: { x: number; y: number; z: number }\n  owner: string\n  neuralId?: string\n  meshConnection?: {\n    connected: boolean\n    meshId: string\n    nodeType: string\n    layer: number\n    synapses: number\n    activation: number\n    lastSpike: Date\n  }\n  realtime?: {\n    cpuUsage: number\n    memoryUsage: number\n    networkLatency: number\n    wasmPerformance: number\n  }\n}\n\n// Phase 2A Persistence Types\n\nexport type AgentType = 'researcher' | 'coder' | 'analyst' | 'optimizer' | 'coordinator';\n\nexport type CognitivePattern = 'convergent' | 'divergent' | 'lateral' | 'systems' | 'critical' | 'adaptive';\n\nexport type AgentState = 'spawning' | 'active' | 'idle' | 'learning' | 'persisted' | 'terminating' | 'terminated' | 'error';\n\nexport interface AgentConfig {\n  id: string;\n  type: AgentType;\n  cognitivePattern: CognitivePattern;\n  networkLayers: number[];\n  learningRate?: number;\n  momentum?: number;\n  status: AgentState;\n  createdAt: number;\n  lastActive: number;\n  memoryUsageMB?: number;\n  performanceScore?: number;\n  spawnTimeMs?: number | null;\n  configJson?: string;\n  metadataJson?: string;\n}\n\nexport interface AgentMetric {\n  id?: number;\n  agentId: string;\n  metricType: 'spawn_time' | 'inference_time' | 'memory_usage' | 'cpu_usage' | 'accuracy' | 'throughput';\n  value: number;\n  unit: 'ms' | 'mb' | 'percent' | 'count' | 'requests_per_second';\n  recordedAt: number;\n  context?: Record<string, any>;\n}\n\nexport interface AgentMemoryEntry {\n  id?: number;\n  agentId: string;\n  memoryType: 'episodic' | 'semantic' | 'procedural' | 'working';\n  key: string;\n  valueData: Buffer;\n  importanceScore?: number;\n  accessCount?: number;\n  createdAt: number;\n  lastAccessed: number;\n  ttlExpires?: number | null;\n}\n\nexport interface SessionState {\n  id: string;\n  swarmTopology: 'mesh' | 'hierarchical' | 'ring' | 'star';\n  activeAgents: string[];\n  coordinationState: Buffer;\n  createdAt: number;\n  lastCheckpoint: number;\n  isActive: boolean;\n}\n\nexport interface NeuralWeightRecord {\n  agentId: string;\n  layerIndex: number;\n  weightData: Buffer;\n  biasData: Buffer;\n  updatedAt: number;\n  checksum: string;\n  compressionType: 'gzip' | 'lz4' | 'none';\n}\n\nexport interface DatabaseConnectionConfig {\n  path: string;\n  timeout: number;\n  maxConnections: number;\n  busyTimeout: number;\n  cacheSize: number;\n  mmapSize: number;\n  walMode: boolean;\n  synchronous: 'OFF' | 'NORMAL' | 'FULL';\n}\n\nexport interface PerformanceThresholds {\n  agentSpawnTime: number; // ms\n  inferenceTime: number; // ms\n  memoryPerAgent: number; // bytes\n  databaseOperationTime: number; // ms\n  recoveryTime: number; // ms\n}\n\nexport interface BatchOperation<T> {\n  operation: 'insert' | 'update' | 'delete';\n  data: T;\n  priority?: 'high' | 'medium' | 'low';\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0b7c41a04627619aea8d62ca4190f49022ec9c73"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1rabdj7kv4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1rabdj7kv4();
export {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvYWdlbnRpc3RzLXF1aWNrc3RhcnQtd29ya3NwYWNlLWJhc2ljL3Nhc2kvc3JjL3R5cGVzL2FnZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgQWdlbnQge1xuICBpZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICB0eXBlOiAncmVzZWFyY2hlcicgfCAnY29kZXInIHwgJ3Rlc3RlcicgfCAncmV2aWV3ZXInIHwgJ2RlYnVnZ2VyJyB8ICduZXVyYWwnIHwgJ3N5bmFwdGljJ1xuICBzdGF0dXM6ICdhY3RpdmUnIHwgJ2lkbGUnIHwgJ3Byb2Nlc3NpbmcnIHwgJ2NvbXBsZXRlZCcgfCAnbmV1cmFsX3N5bmMnXG4gIGN1cnJlbnRUYXNrOiBzdHJpbmdcbiAgcmVwb3NpdG9yeTogc3RyaW5nXG4gIGJyYW5jaDogc3RyaW5nXG4gIGNvbXBsZXRlZFRhc2tzOiBudW1iZXJcbiAgZWZmaWNpZW5jeTogbnVtYmVyXG4gIHByb2dyZXNzOiBudW1iZXJcbiAgcG9zaXRpb246IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IHo6IG51bWJlciB9XG4gIG93bmVyOiBzdHJpbmdcbiAgbmV1cmFsSWQ/OiBzdHJpbmdcbiAgbWVzaENvbm5lY3Rpb24/OiB7XG4gICAgY29ubmVjdGVkOiBib29sZWFuXG4gICAgbWVzaElkOiBzdHJpbmdcbiAgICBub2RlVHlwZTogc3RyaW5nXG4gICAgbGF5ZXI6IG51bWJlclxuICAgIHN5bmFwc2VzOiBudW1iZXJcbiAgICBhY3RpdmF0aW9uOiBudW1iZXJcbiAgICBsYXN0U3Bpa2U6IERhdGVcbiAgfVxuICByZWFsdGltZT86IHtcbiAgICBjcHVVc2FnZTogbnVtYmVyXG4gICAgbWVtb3J5VXNhZ2U6IG51bWJlclxuICAgIG5ldHdvcmtMYXRlbmN5OiBudW1iZXJcbiAgICB3YXNtUGVyZm9ybWFuY2U6IG51bWJlclxuICB9XG59XG5cbi8vIFBoYXNlIDJBIFBlcnNpc3RlbmNlIFR5cGVzXG5cbmV4cG9ydCB0eXBlIEFnZW50VHlwZSA9ICdyZXNlYXJjaGVyJyB8ICdjb2RlcicgfCAnYW5hbHlzdCcgfCAnb3B0aW1pemVyJyB8ICdjb29yZGluYXRvcic7XG5cbmV4cG9ydCB0eXBlIENvZ25pdGl2ZVBhdHRlcm4gPSAnY29udmVyZ2VudCcgfCAnZGl2ZXJnZW50JyB8ICdsYXRlcmFsJyB8ICdzeXN0ZW1zJyB8ICdjcml0aWNhbCcgfCAnYWRhcHRpdmUnO1xuXG5leHBvcnQgdHlwZSBBZ2VudFN0YXRlID0gJ3NwYXduaW5nJyB8ICdhY3RpdmUnIHwgJ2lkbGUnIHwgJ2xlYXJuaW5nJyB8ICdwZXJzaXN0ZWQnIHwgJ3Rlcm1pbmF0aW5nJyB8ICd0ZXJtaW5hdGVkJyB8ICdlcnJvcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdlbnRDb25maWcge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiBBZ2VudFR5cGU7XG4gIGNvZ25pdGl2ZVBhdHRlcm46IENvZ25pdGl2ZVBhdHRlcm47XG4gIG5ldHdvcmtMYXllcnM6IG51bWJlcltdO1xuICBsZWFybmluZ1JhdGU/OiBudW1iZXI7XG4gIG1vbWVudHVtPzogbnVtYmVyO1xuICBzdGF0dXM6IEFnZW50U3RhdGU7XG4gIGNyZWF0ZWRBdDogbnVtYmVyO1xuICBsYXN0QWN0aXZlOiBudW1iZXI7XG4gIG1lbW9yeVVzYWdlTUI/OiBudW1iZXI7XG4gIHBlcmZvcm1hbmNlU2NvcmU/OiBudW1iZXI7XG4gIHNwYXduVGltZU1zPzogbnVtYmVyIHwgbnVsbDtcbiAgY29uZmlnSnNvbj86IHN0cmluZztcbiAgbWV0YWRhdGFKc29uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFnZW50TWV0cmljIHtcbiAgaWQ/OiBudW1iZXI7XG4gIGFnZW50SWQ6IHN0cmluZztcbiAgbWV0cmljVHlwZTogJ3NwYXduX3RpbWUnIHwgJ2luZmVyZW5jZV90aW1lJyB8ICdtZW1vcnlfdXNhZ2UnIHwgJ2NwdV91c2FnZScgfCAnYWNjdXJhY3knIHwgJ3Rocm91Z2hwdXQnO1xuICB2YWx1ZTogbnVtYmVyO1xuICB1bml0OiAnbXMnIHwgJ21iJyB8ICdwZXJjZW50JyB8ICdjb3VudCcgfCAncmVxdWVzdHNfcGVyX3NlY29uZCc7XG4gIHJlY29yZGVkQXQ6IG51bWJlcjtcbiAgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdlbnRNZW1vcnlFbnRyeSB7XG4gIGlkPzogbnVtYmVyO1xuICBhZ2VudElkOiBzdHJpbmc7XG4gIG1lbW9yeVR5cGU6ICdlcGlzb2RpYycgfCAnc2VtYW50aWMnIHwgJ3Byb2NlZHVyYWwnIHwgJ3dvcmtpbmcnO1xuICBrZXk6IHN0cmluZztcbiAgdmFsdWVEYXRhOiBCdWZmZXI7XG4gIGltcG9ydGFuY2VTY29yZT86IG51bWJlcjtcbiAgYWNjZXNzQ291bnQ/OiBudW1iZXI7XG4gIGNyZWF0ZWRBdDogbnVtYmVyO1xuICBsYXN0QWNjZXNzZWQ6IG51bWJlcjtcbiAgdHRsRXhwaXJlcz86IG51bWJlciB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvblN0YXRlIHtcbiAgaWQ6IHN0cmluZztcbiAgc3dhcm1Ub3BvbG9neTogJ21lc2gnIHwgJ2hpZXJhcmNoaWNhbCcgfCAncmluZycgfCAnc3Rhcic7XG4gIGFjdGl2ZUFnZW50czogc3RyaW5nW107XG4gIGNvb3JkaW5hdGlvblN0YXRlOiBCdWZmZXI7XG4gIGNyZWF0ZWRBdDogbnVtYmVyO1xuICBsYXN0Q2hlY2twb2ludDogbnVtYmVyO1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZXVyYWxXZWlnaHRSZWNvcmQge1xuICBhZ2VudElkOiBzdHJpbmc7XG4gIGxheWVySW5kZXg6IG51bWJlcjtcbiAgd2VpZ2h0RGF0YTogQnVmZmVyO1xuICBiaWFzRGF0YTogQnVmZmVyO1xuICB1cGRhdGVkQXQ6IG51bWJlcjtcbiAgY2hlY2tzdW06IHN0cmluZztcbiAgY29tcHJlc3Npb25UeXBlOiAnZ3ppcCcgfCAnbHo0JyB8ICdub25lJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhYmFzZUNvbm5lY3Rpb25Db25maWcge1xuICBwYXRoOiBzdHJpbmc7XG4gIHRpbWVvdXQ6IG51bWJlcjtcbiAgbWF4Q29ubmVjdGlvbnM6IG51bWJlcjtcbiAgYnVzeVRpbWVvdXQ6IG51bWJlcjtcbiAgY2FjaGVTaXplOiBudW1iZXI7XG4gIG1tYXBTaXplOiBudW1iZXI7XG4gIHdhbE1vZGU6IGJvb2xlYW47XG4gIHN5bmNocm9ub3VzOiAnT0ZGJyB8ICdOT1JNQUwnIHwgJ0ZVTEwnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBlcmZvcm1hbmNlVGhyZXNob2xkcyB7XG4gIGFnZW50U3Bhd25UaW1lOiBudW1iZXI7IC8vIG1zXG4gIGluZmVyZW5jZVRpbWU6IG51bWJlcjsgLy8gbXNcbiAgbWVtb3J5UGVyQWdlbnQ6IG51bWJlcjsgLy8gYnl0ZXNcbiAgZGF0YWJhc2VPcGVyYXRpb25UaW1lOiBudW1iZXI7IC8vIG1zXG4gIHJlY292ZXJ5VGltZTogbnVtYmVyOyAvLyBtc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoT3BlcmF0aW9uPFQ+IHtcbiAgb3BlcmF0aW9uOiAnaW5zZXJ0JyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZSc7XG4gIGRhdGE6IFQ7XG4gIHByaW9yaXR5PzogJ2hpZ2gnIHwgJ21lZGl1bScgfCAnbG93Jztcbn0iXSwibWFwcGluZ3MiOiIiLCJpZ25vcmVMaXN0IjpbXX0=