{"version":3,"names":["cov_t9dsayte4","actualCoverage","EventEmitter","performance","SecurityMonitor","constructor","securityValidator","f","s","Object","defineProperty","alertThresholds","failedAuthAttempts","responseTimeMs","memoryUsageMB","cpuUsagePercent","threatLevelEscalation","start","isRunning","b","console","warn","log","monitoringInterval","setInterval","collectMetrics","analyzeThreats","checkAlertConditions","setupAuditLogMonitoring","emit","stop","clearInterval","startTime","now","memoryUsage","process","cpuUsage","recentThreats","threats","filter","t","Date","timestamp","threatLevel","calculateThreatLevel","systemHealth","calculateSystemHealth","metrics","activeThreats","mitigated","length","blockedAttacks","averageResponseTime","heapUsed","user","system","networkConnections","failedAuthentications","getRecentFailedAuth","push","splice","recentAuditLogs","getAuditLogs","analyzeAuditLogForThreats","detectThreatPatterns","action","details","errors","reportThreat","type","severity","source","ipAddress","description","evidence","identifier","checksumMatch","agentId","extremeValues","sourceGroups","Map","threat","get","set","entries","createAlert","category","message","threatCount","criticalThreats","fullThreat","id","Math","random","toString","substr","attemptAutoMitigation","response","alert","fullAlert","acknowledged","alerts","toUpperCase","currentMetrics","toFixed","responseTime","criticalCount","highCount","mediumCount","score","min","criticalAlerts","a","max","round","failedAuthLogs","getSecurityDashboard","recentAlerts","threatBySeverity","critical","high","medium","low","threatByType","reduce","acc","alertBySeverity","recentActivity","sort","slice","threatSummary","total","by_severity","by_type","alertSummary","unacknowledged","acknowledgeAlert","alertId","find","resolveAlert","resolvedAt","getMetricsHistory","hours","cutoff","m","cleanup"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityMonitor.ts"],"sourcesContent":["/**\n * Security Monitor - Real-time Security Monitoring and Alerting\n * Provides continuous security monitoring for the neural agent system\n * \n * Features:\n * - Real-time threat detection\n * - Performance anomaly detection\n * - Security metric collection\n * - Automated incident response\n * - Dashboard integration\n */\n\nimport { EventEmitter } from 'events';\nimport { performance } from 'perf_hooks';\nimport type { SecurityValidator, AuditLog } from './SecurityValidator';\n\nexport interface SecurityMetrics {\n  timestamp: number;\n  systemHealth: number; // 0-100\n  threatLevel: 'low' | 'medium' | 'high' | 'critical';\n  activeThreats: number;\n  blockedAttacks: number;\n  averageResponseTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  networkConnections: number;\n  failedAuthentications: number;\n}\n\nexport interface ThreatDetection {\n  id: string;\n  type: 'sql_injection' | 'buffer_overflow' | 'dos_attack' | 'data_corruption' | 'unauthorized_access';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source: string;\n  timestamp: number;\n  description: string;\n  evidence: any;\n  mitigated: boolean;\n  response?: string;\n}\n\nexport interface SecurityAlert {\n  id: string;\n  timestamp: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  message: string;\n  details: any;\n  acknowledged: boolean;\n  resolvedAt?: number;\n}\n\nexport class SecurityMonitor extends EventEmitter {\n  private isRunning: boolean = false;\n  private securityValidator: SecurityValidator;\n  private metrics: SecurityMetrics[] = [];\n  private threats: ThreatDetection[] = [];\n  private alerts: SecurityAlert[] = [];\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private alertThresholds: any;\n\n  constructor(securityValidator: SecurityValidator) {\n    super();\n    this.securityValidator = securityValidator;\n    \n    this.alertThresholds = {\n      failedAuthAttempts: 5,\n      responseTimeMs: 1000,\n      memoryUsageMB: 500,\n      cpuUsagePercent: 80,\n      threatLevelEscalation: 10 // minutes\n    };\n  }\n\n  /**\n   * Start security monitoring\n   */\n  start(): void {\n    if (this.isRunning) {\n      console.warn('⚠️ Security monitor already running');\n      return;\n    }\n\n    console.log('🛡️ Starting security monitoring...');\n    this.isRunning = true;\n\n    // Start metrics collection\n    this.monitoringInterval = setInterval(() => {\n      this.collectMetrics();\n      this.analyzeThreats();\n      this.checkAlertConditions();\n    }, 5000); // Collect metrics every 5 seconds\n\n    // Set up audit log monitoring\n    this.setupAuditLogMonitoring();\n\n    this.emit('monitoring_started');\n    console.log('✅ Security monitoring active');\n  }\n\n  /**\n   * Stop security monitoring\n   */\n  stop(): void {\n    if (!this.isRunning) return;\n\n    console.log('🛑 Stopping security monitoring...');\n    \n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    this.isRunning = false;\n    this.emit('monitoring_stopped');\n    console.log('✅ Security monitoring stopped');\n  }\n\n  /**\n   * Collect current security metrics\n   */\n  private collectMetrics(): void {\n    const startTime = performance.now();\n\n    // Get system metrics\n    const memoryUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n\n    // Calculate threat level\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 300000 // Last 5 minutes\n    );\n    \n    const threatLevel = this.calculateThreatLevel(recentThreats);\n    const systemHealth = this.calculateSystemHealth();\n\n    const metrics: SecurityMetrics = {\n      timestamp: Date.now(),\n      systemHealth,\n      threatLevel,\n      activeThreats: recentThreats.filter(t => !t.mitigated).length,\n      blockedAttacks: recentThreats.filter(t => t.mitigated).length,\n      averageResponseTime: performance.now() - startTime,\n      memoryUsage: memoryUsage.heapUsed / 1024 / 1024, // MB\n      cpuUsage: (cpuUsage.user + cpuUsage.system) / 1000, // ms\n      networkConnections: 0, // Would be implemented with actual network monitoring\n      failedAuthentications: this.getRecentFailedAuth()\n    };\n\n    this.metrics.push(metrics);\n\n    // Keep only last 1000 metrics (about 1.4 hours at 5s intervals)\n    if (this.metrics.length > 1000) {\n      this.metrics.splice(0, 100);\n    }\n\n    this.emit('metrics_collected', metrics);\n  }\n\n  /**\n   * Analyze threats and detect patterns\n   */\n  private analyzeThreats(): void {\n    const recentAuditLogs = this.securityValidator.getAuditLogs({\n      startTime: Date.now() - 60000 // Last minute\n    });\n\n    for (const log of recentAuditLogs) {\n      this.analyzeAuditLogForThreats(log);\n    }\n\n    // Detect threat patterns\n    this.detectThreatPatterns();\n  }\n\n  /**\n   * Analyze individual audit log for threats\n   */\n  private analyzeAuditLogForThreats(log: AuditLog): void {\n    // SQL injection detection\n    if (log.action === 'sql_validation' && log.details.errors > 0) {\n      this.reportThreat({\n        type: 'sql_injection',\n        severity: 'high',\n        source: log.ipAddress || 'unknown',\n        description: 'SQL injection attempt detected',\n        evidence: log.details\n      });\n    }\n\n    // Rate limit violations (potential DoS)\n    if (log.action === 'rate_limit_exceeded') {\n      this.reportThreat({\n        type: 'dos_attack',\n        severity: 'medium',\n        source: log.details.identifier,\n        description: 'Rate limit exceeded - potential DoS attack',\n        evidence: log.details\n      });\n    }\n\n    // Neural weight corruption\n    if (log.action === 'weight_validation' && !log.details.checksumMatch) {\n      this.reportThreat({\n        type: 'data_corruption',\n        severity: 'critical',\n        source: log.agentId || 'unknown',\n        description: 'Neural weight corruption detected',\n        evidence: log.details\n      });\n    }\n\n    // Suspicious neural inputs\n    if (log.action === 'neural_input_validation' && log.details.extremeValues > 0) {\n      this.reportThreat({\n        type: 'buffer_overflow',\n        severity: 'medium',\n        source: log.agentId || 'unknown',\n        description: 'Potentially malicious neural input detected',\n        evidence: log.details\n      });\n    }\n  }\n\n  /**\n   * Detect threat patterns across multiple events\n   */\n  private detectThreatPatterns(): void {\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 300000 // Last 5 minutes\n    );\n\n    // Detect coordinated attacks\n    const sourceGroups = new Map<string, ThreatDetection[]>();\n    for (const threat of recentThreats) {\n      const threats = sourceGroups.get(threat.source) || [];\n      threats.push(threat);\n      sourceGroups.set(threat.source, threats);\n    }\n\n    // Alert for multiple threats from same source\n    for (const [source, threats] of sourceGroups.entries()) {\n      if (threats.length >= 3) {\n        this.createAlert({\n          severity: 'high',\n          category: 'coordinated_attack',\n          message: `Multiple threats detected from source: ${source}`,\n          details: { source, threatCount: threats.length, threats }\n        });\n      }\n    }\n\n    // Detect escalating threat patterns\n    const criticalThreats = recentThreats.filter(t => t.severity === 'critical');\n    if (criticalThreats.length >= 2) {\n      this.createAlert({\n        severity: 'critical',\n        category: 'threat_escalation',\n        message: 'Multiple critical security threats detected',\n        details: { criticalThreats }\n      });\n    }\n  }\n\n  /**\n   * Report a new threat detection\n   */\n  private reportThreat(threat: Omit<ThreatDetection, 'id' | 'timestamp' | 'mitigated'>): void {\n    const fullThreat: ThreatDetection = {\n      id: `threat_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      timestamp: Date.now(),\n      mitigated: false,\n      ...threat\n    };\n\n    this.threats.push(fullThreat);\n\n    // Auto-mitigation for certain threat types\n    this.attemptAutoMitigation(fullThreat);\n\n    // Create alert for high/critical threats\n    if (threat.severity === 'high' || threat.severity === 'critical') {\n      this.createAlert({\n        severity: threat.severity,\n        category: 'threat_detected',\n        message: `${threat.type} detected: ${threat.description}`,\n        details: fullThreat\n      });\n    }\n\n    this.emit('threat_detected', fullThreat);\n    \n    console.log(`🚨 Security threat detected: ${fullThreat.id} (${threat.severity})`);\n  }\n\n  /**\n   * Attempt automatic mitigation of threats\n   */\n  private attemptAutoMitigation(threat: ThreatDetection): void {\n    let mitigated = false;\n    let response = '';\n\n    switch (threat.type) {\n      case 'dos_attack':\n        // Automatically block source for DoS attacks\n        response = `Rate limiting enforced for source: ${threat.source}`;\n        mitigated = true;\n        break;\n\n      case 'sql_injection':\n        // Log and sanitize - already handled by validator\n        response = 'Input sanitized and logged';\n        mitigated = true;\n        break;\n\n      case 'data_corruption':\n        // Critical - require manual intervention\n        response = 'Manual intervention required';\n        mitigated = false;\n        break;\n\n      case 'buffer_overflow':\n        // Sanitize inputs\n        response = 'Input validation enforced';\n        mitigated = true;\n        break;\n\n      default:\n        response = 'No automatic mitigation available';\n        mitigated = false;\n    }\n\n    threat.mitigated = mitigated;\n    threat.response = response;\n\n    if (mitigated) {\n      console.log(`✅ Threat ${threat.id} automatically mitigated: ${response}`);\n    } else {\n      console.log(`⚠️ Threat ${threat.id} requires manual intervention: ${response}`);\n    }\n  }\n\n  /**\n   * Create a security alert\n   */\n  private createAlert(alert: Omit<SecurityAlert, 'id' | 'timestamp' | 'acknowledged'>): void {\n    const fullAlert: SecurityAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      timestamp: Date.now(),\n      acknowledged: false,\n      ...alert\n    };\n\n    this.alerts.push(fullAlert);\n\n    // Keep only last 500 alerts\n    if (this.alerts.length > 500) {\n      this.alerts.splice(0, 50);\n    }\n\n    this.emit('alert_created', fullAlert);\n\n    const severity = alert.severity.toUpperCase();\n    console.log(`🚨 ${severity} SECURITY ALERT: ${alert.message}`);\n  }\n\n  /**\n   * Check conditions that should trigger alerts\n   */\n  private checkAlertConditions(): void {\n    const currentMetrics = this.metrics[this.metrics.length - 1];\n    if (!currentMetrics) return;\n\n    // Memory usage alert\n    if (currentMetrics.memoryUsage > this.alertThresholds.memoryUsageMB) {\n      this.createAlert({\n        severity: 'medium',\n        category: 'resource_usage',\n        message: `High memory usage: ${currentMetrics.memoryUsage.toFixed(1)}MB`,\n        details: { memoryUsage: currentMetrics.memoryUsage }\n      });\n    }\n\n    // Response time alert\n    if (currentMetrics.averageResponseTime > this.alertThresholds.responseTimeMs) {\n      this.createAlert({\n        severity: 'medium',\n        category: 'performance',\n        message: `Slow response time: ${currentMetrics.averageResponseTime.toFixed(1)}ms`,\n        details: { responseTime: currentMetrics.averageResponseTime }\n      });\n    }\n\n    // System health alert\n    if (currentMetrics.systemHealth < 50) {\n      this.createAlert({\n        severity: 'high',\n        category: 'system_health',\n        message: `Low system health: ${currentMetrics.systemHealth}%`,\n        details: { systemHealth: currentMetrics.systemHealth }\n      });\n    }\n\n    // Threat level escalation\n    if (currentMetrics.threatLevel === 'critical') {\n      this.createAlert({\n        severity: 'critical',\n        category: 'threat_escalation',\n        message: 'Critical threat level reached',\n        details: { threatLevel: currentMetrics.threatLevel, activeThreats: currentMetrics.activeThreats }\n      });\n    }\n  }\n\n  /**\n   * Calculate overall threat level\n   */\n  private calculateThreatLevel(recentThreats: ThreatDetection[]): 'low' | 'medium' | 'high' | 'critical' {\n    if (recentThreats.length === 0) return 'low';\n\n    const criticalCount = recentThreats.filter(t => t.severity === 'critical').length;\n    const highCount = recentThreats.filter(t => t.severity === 'high').length;\n    const mediumCount = recentThreats.filter(t => t.severity === 'medium').length;\n\n    if (criticalCount > 0) return 'critical';\n    if (highCount >= 2) return 'critical';\n    if (highCount >= 1 || mediumCount >= 3) return 'high';\n    if (mediumCount >= 1) return 'medium';\n    \n    return 'low';\n  }\n\n  /**\n   * Calculate system health score\n   */\n  private calculateSystemHealth(): number {\n    let score = 100;\n\n    const currentMetrics = this.metrics[this.metrics.length - 1];\n    if (currentMetrics) {\n      // Deduct for high memory usage\n      if (currentMetrics.memoryUsage > 400) {\n        score -= Math.min(30, (currentMetrics.memoryUsage - 400) / 10);\n      }\n\n      // Deduct for slow response times\n      if (currentMetrics.averageResponseTime > 500) {\n        score -= Math.min(20, (currentMetrics.averageResponseTime - 500) / 50);\n      }\n    }\n\n    // Deduct for active threats\n    const activeThreats = this.threats.filter(t => \n      !t.mitigated && Date.now() - t.timestamp < 300000\n    );\n    score -= activeThreats.length * 10;\n\n    // Deduct for unacknowledged critical alerts\n    const criticalAlerts = this.alerts.filter(a => \n      !a.acknowledged && a.severity === 'critical'\n    );\n    score -= criticalAlerts.length * 15;\n\n    return Math.max(0, Math.round(score));\n  }\n\n  /**\n   * Get recent failed authentication count\n   */\n  private getRecentFailedAuth(): number {\n    const failedAuthLogs = this.securityValidator.getAuditLogs({\n      action: 'authentication_failed',\n      startTime: Date.now() - 300000 // Last 5 minutes\n    });\n    return failedAuthLogs.length;\n  }\n\n  /**\n   * Set up monitoring of audit logs\n   */\n  private setupAuditLogMonitoring(): void {\n    // In a real implementation, this would set up real-time log monitoring\n    // For now, we rely on the periodic analysis in collectMetrics\n  }\n\n  /**\n   * Get current security dashboard data\n   */\n  getSecurityDashboard(): {\n    currentMetrics: SecurityMetrics;\n    threatSummary: { total: number; by_severity: any; by_type: any };\n    alertSummary: { total: number; unacknowledged: number; by_severity: any };\n    recentActivity: (ThreatDetection | SecurityAlert)[];\n  } {\n    const currentMetrics = this.metrics[this.metrics.length - 1] || {\n      timestamp: Date.now(),\n      systemHealth: 100,\n      threatLevel: 'low' as const,\n      activeThreats: 0,\n      blockedAttacks: 0,\n      averageResponseTime: 0,\n      memoryUsage: 0,\n      cpuUsage: 0,\n      networkConnections: 0,\n      failedAuthentications: 0\n    };\n\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 3600000 // Last hour\n    );\n\n    const recentAlerts = this.alerts.filter(a => \n      Date.now() - a.timestamp < 3600000 // Last hour\n    );\n\n    const threatBySeverity = {\n      critical: recentThreats.filter(t => t.severity === 'critical').length,\n      high: recentThreats.filter(t => t.severity === 'high').length,\n      medium: recentThreats.filter(t => t.severity === 'medium').length,\n      low: recentThreats.filter(t => t.severity === 'low').length\n    };\n\n    const threatByType = recentThreats.reduce((acc, threat) => {\n      acc[threat.type] = (acc[threat.type] || 0) + 1;\n      return acc;\n    }, {} as any);\n\n    const alertBySeverity = {\n      critical: recentAlerts.filter(a => a.severity === 'critical').length,\n      high: recentAlerts.filter(a => a.severity === 'high').length,\n      medium: recentAlerts.filter(a => a.severity === 'medium').length,\n      low: recentAlerts.filter(a => a.severity === 'low').length\n    };\n\n    const recentActivity = [...recentThreats, ...recentAlerts]\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, 20);\n\n    return {\n      currentMetrics,\n      threatSummary: {\n        total: recentThreats.length,\n        by_severity: threatBySeverity,\n        by_type: threatByType\n      },\n      alertSummary: {\n        total: recentAlerts.length,\n        unacknowledged: recentAlerts.filter(a => !a.acknowledged).length,\n        by_severity: alertBySeverity\n      },\n      recentActivity\n    };\n  }\n\n  /**\n   * Acknowledge an alert\n   */\n  acknowledgeAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      this.emit('alert_acknowledged', alert);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Resolve an alert\n   */\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.resolvedAt = Date.now();\n      this.emit('alert_resolved', alert);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get security metrics history\n   */\n  getMetricsHistory(hours: number = 1): SecurityMetrics[] {\n    const cutoff = Date.now() - (hours * 60 * 60 * 1000);\n    return this.metrics.filter(m => m.timestamp > cutoff);\n  }\n\n  /**\n   * Clean up old data\n   */\n  cleanup(): void {\n    const cutoff = Date.now() - (24 * 60 * 60 * 1000); // 24 hours\n\n    this.threats = this.threats.filter(t => t.timestamp > cutoff);\n    this.alerts = this.alerts.filter(a => a.timestamp > cutoff);\n    this.metrics = this.metrics.filter(m => m.timestamp > cutoff);\n\n    console.log('🧹 Security monitor cleanup completed');\n  }\n}"],"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","ignoreList":[]}