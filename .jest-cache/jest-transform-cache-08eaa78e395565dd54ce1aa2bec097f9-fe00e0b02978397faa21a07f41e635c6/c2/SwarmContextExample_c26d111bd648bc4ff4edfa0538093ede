ad5f1969fccc1deda998d1c7525a7206
/* istanbul ignore next */
function cov_1nvro44deg() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/SwarmContextExample.tsx";
  var hash = "db105cdd9a4a48799f6d4d26d174c997283399ee";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/SwarmContextExample.tsx",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "1": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 20,
          column: 1
        }
      },
      "2": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "3": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 72
        }
      },
      "5": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "6": {
        start: {
          line: 21,
          column: 29
        },
        end: {
          line: 376,
          column: 1
        }
      },
      "7": {
        start: {
          line: 23,
          column: 32
        },
        end: {
          line: 23,
          column: 44
        }
      },
      "8": {
        start: {
          line: 24,
          column: 44
        },
        end: {
          line: 24,
          column: 56
        }
      },
      "9": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 34,
          column: 6
        }
      },
      "10": {
        start: {
          line: 35,
          column: 46
        },
        end: {
          line: 35,
          column: 61
        }
      },
      "11": {
        start: {
          line: 36,
          column: 46
        },
        end: {
          line: 36,
          column: 60
        }
      },
      "12": {
        start: {
          line: 37,
          column: 64
        },
        end: {
          line: 42,
          column: 6
        }
      },
      "13": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 49,
          column: 6
        }
      },
      "14": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "15": {
        start: {
          line: 53,
          column: 31
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "16": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "17": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 77
        }
      },
      "18": {
        start: {
          line: 57,
          column: 43
        },
        end: {
          line: 100,
          column: 17
        }
      },
      "19": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 52
        }
      },
      "20": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 63
        }
      },
      "21": {
        start: {
          line: 105,
          column: 38
        },
        end: {
          line: 105,
          column: 62
        }
      },
      "22": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 41
        }
      },
      "23": {
        start: {
          line: 108,
          column: 42
        },
        end: {
          line: 108,
          column: 70
        }
      },
      "24": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 114,
          column: 19
        }
      },
      "25": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 94
        }
      },
      "26": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 76
        }
      },
      "27": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 41
        }
      },
      "28": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 25
        }
      },
      "29": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "30": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 58
        }
      },
      "31": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 133,
          column: 78
        }
      },
      "32": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 30
        }
      },
      "33": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 160,
          column: 24
        }
      },
      "34": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 138,
          column: 19
        }
      },
      "35": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 19
        }
      },
      "36": {
        start: {
          line: 139,
          column: 25
        },
        end: {
          line: 158,
          column: 16
        }
      },
      "37": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "38": {
        start: {
          line: 142,
          column: 38
        },
        end: {
          line: 142,
          column: 68
        }
      },
      "39": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "40": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 45
        }
      },
      "41": {
        start: {
          line: 146,
          column: 46
        },
        end: {
          line: 146,
          column: 74
        }
      },
      "42": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 150,
          column: 24
        }
      },
      "43": {
        start: {
          line: 147,
          column: 55
        },
        end: {
          line: 150,
          column: 21
        }
      },
      "44": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 77
        }
      },
      "45": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 43
        }
      },
      "46": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 45
        }
      },
      "47": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 159,
          column: 44
        }
      },
      "48": {
        start: {
          line: 162,
          column: 32
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "49": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 163,
          column: 118
        }
      },
      "50": {
        start: {
          line: 163,
          column: 52
        },
        end: {
          line: 163,
          column: 110
        }
      },
      "51": {
        start: {
          line: 164,
          column: 27
        },
        end: {
          line: 164,
          column: 87
        }
      },
      "52": {
        start: {
          line: 164,
          column: 57
        },
        end: {
          line: 164,
          column: 83
        }
      },
      "53": {
        start: {
          line: 166,
          column: 26
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "54": {
        start: {
          line: 177,
          column: 30
        },
        end: {
          line: 177,
          column: 57
        }
      },
      "55": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 32
        }
      },
      "56": {
        start: {
          line: 180,
          column: 23
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "57": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 60
        }
      },
      "58": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 31
        }
      },
      "59": {
        start: {
          line: 184,
          column: 22
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "60": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 60
        }
      },
      "61": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 32
        }
      },
      "62": {
        start: {
          line: 189,
          column: 21
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "63": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "64": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 61
        }
      },
      "65": {
        start: {
          line: 193,
          column: 29
        },
        end: {
          line: 193,
          column: 55
        }
      },
      "66": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "67": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 61
        }
      },
      "68": {
        start: {
          line: 195,
          column: 37
        },
        end: {
          line: 195,
          column: 59
        }
      },
      "69": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 84
        }
      },
      "70": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 74
        }
      },
      "71": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 42
        }
      },
      "72": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 77
        }
      },
      "73": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 38
        }
      },
      "74": {
        start: {
          line: 210,
          column: 24
        },
        end: {
          line: 229,
          column: 5
        }
      },
      "75": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "76": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 60
        }
      },
      "77": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 213,
          column: 55
        }
      },
      "78": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "79": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 79
        }
      },
      "80": {
        start: {
          line: 215,
          column: 37
        },
        end: {
          line: 215,
          column: 77
        }
      },
      "81": {
        start: {
          line: 215,
          column: 61
        },
        end: {
          line: 215,
          column: 76
        }
      },
      "82": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 73
        }
      },
      "83": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 79
        }
      },
      "84": {
        start: {
          line: 220,
          column: 37
        },
        end: {
          line: 220,
          column: 77
        }
      },
      "85": {
        start: {
          line: 220,
          column: 61
        },
        end: {
          line: 220,
          column: 76
        }
      },
      "86": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 95
        }
      },
      "87": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 75
        }
      },
      "88": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 75
        }
      },
      "89": {
        start: {
          line: 227,
          column: 33
        },
        end: {
          line: 227,
          column: 73
        }
      },
      "90": {
        start: {
          line: 227,
          column: 57
        },
        end: {
          line: 227,
          column: 72
        }
      },
      "91": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 238,
          column: 5
        }
      },
      "92": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 237,
          column: 21
        }
      },
      "93": {
        start: {
          line: 231,
          column: 35
        },
        end: {
          line: 237,
          column: 19
        }
      },
      "94": {
        start: {
          line: 231,
          column: 55
        },
        end: {
          line: 237,
          column: 18
        }
      },
      "95": {
        start: {
          line: 239,
          column: 26
        },
        end: {
          line: 241,
          column: 5
        }
      },
      "96": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 61
        }
      },
      "97": {
        start: {
          line: 240,
          column: 35
        },
        end: {
          line: 240,
          column: 59
        }
      },
      "98": {
        start: {
          line: 243,
          column: 35
        },
        end: {
          line: 280,
          column: 5
        }
      },
      "99": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 61
        }
      },
      "100": {
        start: {
          line: 246,
          column: 26
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "101": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 35
        }
      },
      "102": {
        start: {
          line: 278,
          column: 31
        },
        end: {
          line: 278,
          column: 57
        }
      },
      "103": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 34
        }
      },
      "104": {
        start: {
          line: 281,
          column: 32
        },
        end: {
          line: 301,
          column: 5
        }
      },
      "105": {
        start: {
          line: 282,
          column: 25
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "106": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 53
        }
      },
      "107": {
        start: {
          line: 300,
          column: 29
        },
        end: {
          line: 300,
          column: 51
        }
      },
      "108": {
        start: {
          line: 302,
          column: 35
        },
        end: {
          line: 329,
          column: 5
        }
      },
      "109": {
        start: {
          line: 303,
          column: 27
        },
        end: {
          line: 303,
          column: 84
        }
      },
      "110": {
        start: {
          line: 304,
          column: 22
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "111": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 328,
          column: 12
        }
      },
      "112": {
        start: {
          line: 311,
          column: 56
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "113": {
        start: {
          line: 330,
          column: 37
        },
        end: {
          line: 346,
          column: 5
        }
      },
      "114": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 345,
          column: 12
        }
      },
      "115": {
        start: {
          line: 331,
          column: 35
        },
        end: {
          line: 345,
          column: 10
        }
      },
      "116": {
        start: {
          line: 332,
          column: 33
        },
        end: {
          line: 332,
          column: 52
        }
      },
      "117": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 334,
          column: 29
        }
      },
      "118": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 29
        }
      },
      "119": {
        start: {
          line: 335,
          column: 30
        },
        end: {
          line: 337,
          column: 62
        }
      },
      "120": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 344,
          column: 14
        }
      },
      "121": {
        start: {
          line: 348,
          column: 18
        },
        end: {
          line: 374,
          column: 5
        }
      },
      "122": {
        start: {
          line: 370,
          column: 43
        },
        end: {
          line: 370,
          column: 68
        }
      },
      "123": {
        start: {
          line: 375,
          column: 4
        },
        end: {
          line: 375,
          column: 79
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 24
          },
          end: {
            line: 14,
            column: 25
          }
        },
        loc: {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 21,
            column: 30
          }
        },
        loc: {
          start: {
            line: 21,
            column: 47
          },
          end: {
            line: 376,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 52,
            column: 14
          },
          end: {
            line: 52,
            column: 15
          }
        },
        loc: {
          start: {
            line: 52,
            column: 20
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 52
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 53,
            column: 31
          },
          end: {
            line: 53,
            column: 32
          }
        },
        loc: {
          start: {
            line: 53,
            column: 43
          },
          end: {
            line: 122,
            column: 9
          }
        },
        line: 53
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 16
          }
        },
        loc: {
          start: {
            line: 125,
            column: 21
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 125
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 131,
            column: 14
          },
          end: {
            line: 131,
            column: 15
          }
        },
        loc: {
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 131
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 136,
            column: 14
          },
          end: {
            line: 136,
            column: 15
          }
        },
        loc: {
          start: {
            line: 136,
            column: 20
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 136
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 139,
            column: 37
          },
          end: {
            line: 139,
            column: 38
          }
        },
        loc: {
          start: {
            line: 139,
            column: 49
          },
          end: {
            line: 158,
            column: 9
          }
        },
        line: 139
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 147,
            column: 46
          },
          end: {
            line: 147,
            column: 47
          }
        },
        loc: {
          start: {
            line: 147,
            column: 55
          },
          end: {
            line: 150,
            column: 21
          }
        },
        line: 147
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 159,
            column: 15
          },
          end: {
            line: 159,
            column: 16
          }
        },
        loc: {
          start: {
            line: 159,
            column: 21
          },
          end: {
            line: 159,
            column: 44
          }
        },
        line: 159
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 162,
            column: 32
          },
          end: {
            line: 162,
            column: 33
          }
        },
        loc: {
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 162
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 163,
            column: 43
          },
          end: {
            line: 163,
            column: 44
          }
        },
        loc: {
          start: {
            line: 163,
            column: 52
          },
          end: {
            line: 163,
            column: 110
          }
        },
        line: 163
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 164,
            column: 41
          },
          end: {
            line: 164,
            column: 42
          }
        },
        loc: {
          start: {
            line: 164,
            column: 57
          },
          end: {
            line: 164,
            column: 83
          }
        },
        line: 164
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 180,
            column: 23
          },
          end: {
            line: 180,
            column: 24
          }
        },
        loc: {
          start: {
            line: 180,
            column: 29
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 180
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 184,
            column: 22
          },
          end: {
            line: 184,
            column: 23
          }
        },
        loc: {
          start: {
            line: 184,
            column: 28
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 184
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 22
          }
        },
        loc: {
          start: {
            line: 189,
            column: 37
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 189
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 195,
            column: 26
          },
          end: {
            line: 195,
            column: 27
          }
        },
        loc: {
          start: {
            line: 195,
            column: 37
          },
          end: {
            line: 195,
            column: 59
          }
        },
        line: 195
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 210,
            column: 24
          },
          end: {
            line: 210,
            column: 25
          }
        },
        loc: {
          start: {
            line: 210,
            column: 38
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 210
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 215,
            column: 26
          },
          end: {
            line: 215,
            column: 27
          }
        },
        loc: {
          start: {
            line: 215,
            column: 37
          },
          end: {
            line: 215,
            column: 77
          }
        },
        line: 215
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 215,
            column: 52
          },
          end: {
            line: 215,
            column: 53
          }
        },
        loc: {
          start: {
            line: 215,
            column: 61
          },
          end: {
            line: 215,
            column: 76
          }
        },
        line: 215
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 220,
            column: 26
          },
          end: {
            line: 220,
            column: 27
          }
        },
        loc: {
          start: {
            line: 220,
            column: 37
          },
          end: {
            line: 220,
            column: 77
          }
        },
        line: 220
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 220,
            column: 52
          },
          end: {
            line: 220,
            column: 53
          }
        },
        loc: {
          start: {
            line: 220,
            column: 61
          },
          end: {
            line: 220,
            column: 76
          }
        },
        line: 220
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 227,
            column: 22
          },
          end: {
            line: 227,
            column: 23
          }
        },
        loc: {
          start: {
            line: 227,
            column: 33
          },
          end: {
            line: 227,
            column: 73
          }
        },
        line: 227
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 227,
            column: 48
          },
          end: {
            line: 227,
            column: 49
          }
        },
        loc: {
          start: {
            line: 227,
            column: 57
          },
          end: {
            line: 227,
            column: 72
          }
        },
        line: 227
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 230,
            column: 27
          },
          end: {
            line: 230,
            column: 28
          }
        },
        loc: {
          start: {
            line: 230,
            column: 45
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 230
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 231,
            column: 24
          },
          end: {
            line: 231,
            column: 25
          }
        },
        loc: {
          start: {
            line: 231,
            column: 35
          },
          end: {
            line: 237,
            column: 19
          }
        },
        line: 231
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 231,
            column: 47
          },
          end: {
            line: 231,
            column: 48
          }
        },
        loc: {
          start: {
            line: 231,
            column: 55
          },
          end: {
            line: 237,
            column: 18
          }
        },
        line: 231
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 239,
            column: 26
          },
          end: {
            line: 239,
            column: 27
          }
        },
        loc: {
          start: {
            line: 239,
            column: 42
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 239
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 240,
            column: 24
          },
          end: {
            line: 240,
            column: 25
          }
        },
        loc: {
          start: {
            line: 240,
            column: 35
          },
          end: {
            line: 240,
            column: 59
          }
        },
        line: 240
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 243,
            column: 35
          },
          end: {
            line: 243,
            column: 36
          }
        },
        loc: {
          start: {
            line: 243,
            column: 41
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 243
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 281,
            column: 32
          },
          end: {
            line: 281,
            column: 33
          }
        },
        loc: {
          start: {
            line: 281,
            column: 42
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 281
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 300,
            column: 18
          },
          end: {
            line: 300,
            column: 19
          }
        },
        loc: {
          start: {
            line: 300,
            column: 29
          },
          end: {
            line: 300,
            column: 51
          }
        },
        line: 300
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 302,
            column: 35
          },
          end: {
            line: 302,
            column: 36
          }
        },
        loc: {
          start: {
            line: 302,
            column: 46
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 302
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 311,
            column: 45
          },
          end: {
            line: 311,
            column: 46
          }
        },
        loc: {
          start: {
            line: 311,
            column: 56
          },
          end: {
            line: 328,
            column: 9
          }
        },
        line: 311
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 330,
            column: 37
          },
          end: {
            line: 330,
            column: 38
          }
        },
        loc: {
          start: {
            line: 330,
            column: 43
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 330
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 331,
            column: 18
          },
          end: {
            line: 331,
            column: 19
          }
        },
        loc: {
          start: {
            line: 331,
            column: 35
          },
          end: {
            line: 345,
            column: 10
          }
        },
        line: 331
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 331,
            column: 53
          },
          end: {
            line: 331,
            column: 54
          }
        },
        loc: {
          start: {
            line: 331,
            column: 62
          },
          end: {
            line: 345,
            column: 9
          }
        },
        line: 331
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 370,
            column: 30
          },
          end: {
            line: 370,
            column: 31
          }
        },
        loc: {
          start: {
            line: 370,
            column: 43
          },
          end: {
            line: 370,
            column: 68
          }
        },
        line: 370
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 138,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 138,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "2": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "3": {
        loc: {
          start: {
            line: 163,
            column: 52
          },
          end: {
            line: 163,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 52
          },
          end: {
            line: 163,
            column: 77
          }
        }, {
          start: {
            line: 163,
            column: 81
          },
          end: {
            line: 163,
            column: 110
          }
        }],
        line: 163
      },
      "4": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: 198,
            column: 17
          },
          end: {
            line: 202,
            column: 13
          }
        }],
        line: 194
      },
      "5": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: 218,
            column: 17
          },
          end: {
            line: 222,
            column: 13
          }
        }],
        line: 214
      },
      "6": {
        loc: {
          start: {
            line: 231,
            column: 55
          },
          end: {
            line: 237,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 232,
            column: 14
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: 237,
            column: 14
          },
          end: {
            line: 237,
            column: 18
          }
        }],
        line: 231
      },
      "7": {
        loc: {
          start: {
            line: 234,
            column: 23
          },
          end: {
            line: 234,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 234,
            column: 40
          },
          end: {
            line: 234,
            column: 54
          }
        }, {
          start: {
            line: 234,
            column: 57
          },
          end: {
            line: 234,
            column: 71
          }
        }],
        line: 234
      },
      "8": {
        loc: {
          start: {
            line: 288,
            column: 24
          },
          end: {
            line: 288,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 24
          },
          end: {
            line: 288,
            column: 45
          }
        }, {
          start: {
            line: 288,
            column: 49
          },
          end: {
            line: 288,
            column: 67
          }
        }],
        line: 288
      },
      "9": {
        loc: {
          start: {
            line: 315,
            column: 20
          },
          end: {
            line: 315,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 315,
            column: 42
          },
          end: {
            line: 315,
            column: 50
          }
        }, {
          start: {
            line: 315,
            column: 53
          },
          end: {
            line: 315,
            column: 96
          }
        }],
        line: 315
      },
      "10": {
        loc: {
          start: {
            line: 315,
            column: 53
          },
          end: {
            line: 315,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 315,
            column: 75
          },
          end: {
            line: 315,
            column: 87
          }
        }, {
          start: {
            line: 315,
            column: 90
          },
          end: {
            line: 315,
            column: 96
          }
        }],
        line: 315
      },
      "11": {
        loc: {
          start: {
            line: 317,
            column: 24
          },
          end: {
            line: 317,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 24
          },
          end: {
            line: 317,
            column: 91
          }
        }, {
          start: {
            line: 317,
            column: 95
          },
          end: {
            line: 317,
            column: 113
          }
        }],
        line: 317
      },
      "12": {
        loc: {
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 334,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 334,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "13": {
        loc: {
          start: {
            line: 335,
            column: 30
          },
          end: {
            line: 337,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 52
          },
          end: {
            line: 335,
            column: 60
          }
        }, {
          start: {
            line: 336,
            column: 16
          },
          end: {
            line: 337,
            column: 62
          }
        }],
        line: 335
      },
      "14": {
        loc: {
          start: {
            line: 336,
            column: 16
          },
          end: {
            line: 337,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 336,
            column: 38
          },
          end: {
            line: 336,
            column: 50
          }
        }, {
          start: {
            line: 337,
            column: 20
          },
          end: {
            line: 337,
            column: 62
          }
        }],
        line: 336
      },
      "15": {
        loc: {
          start: {
            line: 337,
            column: 20
          },
          end: {
            line: 337,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 42
          },
          end: {
            line: 337,
            column: 48
          }
        }, {
          start: {
            line: 337,
            column: 51
          },
          end: {
            line: 337,
            column: 62
          }
        }],
        line: 337
      },
      "16": {
        loc: {
          start: {
            line: 341,
            column: 32
          },
          end: {
            line: 341,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 341,
            column: 60
          },
          end: {
            line: 341,
            column: 84
          }
        }, {
          start: {
            line: 341,
            column: 87
          },
          end: {
            line: 341,
            column: 107
          }
        }],
        line: 341
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/SwarmContextExample.tsx",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/SwarmContextExample.tsx"],
      sourcesContent: ["/**\n * SwarmContext Integration Example\n * \n * This file demonstrates how to integrate the Neural Agent Manager\n * into the existing SwarmContext with minimal changes.\n * \n * Copy the relevant sections into your SwarmContext.tsx file.\n */\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'\nimport { useNeuralMesh } from '../hooks/useNeuralMesh'\nimport { NeuralAgent } from '../services/NeuralMeshService'\nimport { Agent } from '../types/agent'\n\n// ===== IMPORT NEURAL ADAPTERS =====\nimport {\n  initializeNeuralData,\n  generateNeuralAgents,\n  simulateNeuralActivity,\n  addNeuralAgent,\n  removeNeuralAgent,\n  getEnhancedStats,\n  getNeuralIntegrationStatus,\n  cleanupNeuralResources\n} from './NeuralContextAdapter'\n\n// ===== ENHANCED INTERFACES =====\n\nexport interface SwarmStats {\n  totalAgents: number\n  activeAgents: number\n  totalRepositories: number\n  tasksCompleted: number\n  asiProgress: number\n  networkEfficiency: number\n  globalContributors: number\n  processingUnits: number\n  neuralMeshStats?: {\n    totalNeurons: number\n    totalSynapses: number\n    meshConnectivity: number\n    neuralActivity: number\n    wasmAcceleration: boolean\n    averageLatency: number\n  }\n}\n\nexport interface Repository {\n  id: string\n  name: string\n  owner: string\n  description: string\n  activeAgents: number\n  totalIssues: number\n  completedIssues: number\n  openPullRequests: number\n  lastActivity: Date\n  techStack: string[]\n  votes: number\n  userVoted: boolean\n}\n\ninterface SwarmContextType {\n  agents: Agent[]\n  repositories: Repository[]\n  stats: SwarmStats\n  isSwarmActive: boolean\n  startSwarm: () => void\n  stopSwarm: () => void\n  addAgent: (type: Agent['type']) => Promise<void>\n  removeAgent: (id: string) => Promise<void>\n  voteForProject: (repositoryId: string) => void\n  addRepository: (repository: Repository) => void\n  \n  // Neural mesh integration\n  neuralMesh: {\n    isConnected: boolean\n    isInitializing: boolean\n    error: string | null\n    metrics: {\n      totalNeurons: number\n      totalSynapses: number\n      averageActivity: number\n      networkEfficiency: number\n      wasmAcceleration: boolean\n    }\n    connection: any\n    trainMesh: (patterns: any[]) => Promise<boolean>\n    getMeshStatus: () => Promise<any>\n    clearError: () => void\n    reconnect: () => Promise<void>\n    toggleNeuralMesh: (enabled: boolean) => void\n  }\n  \n  // Enhanced neural features\n  neuralIntegration: {\n    isInitialized: boolean\n    performanceMetrics: any\n    systemHealth: number\n    activeAlerts: number\n  }\n}\n\nconst SwarmContext = createContext<SwarmContextType | undefined>(undefined)\n\nexport const useSwarm = () => {\n  const context = useContext(SwarmContext)\n  if (context === undefined) {\n    throw new Error('useSwarm must be used within a SwarmProvider')\n  }\n  return context\n}\n\ninterface SwarmProviderProps {\n  children: ReactNode\n}\n\nexport const SwarmProvider: React.FC<SwarmProviderProps> = ({ children }) => {\n  // ===== STATE =====\n  const [agents, setAgents] = useState<Agent[]>([])\n  const [repositories, setRepositories] = useState<Repository[]>([])\n  const [stats, setStats] = useState<SwarmStats>({\n    totalAgents: 0,\n    activeAgents: 0,\n    totalRepositories: 0,\n    tasksCompleted: 0,\n    asiProgress: 0,\n    networkEfficiency: 0,\n    globalContributors: 0,\n    processingUnits: 0\n  })\n  const [isSwarmActive, setIsSwarmActive] = useState(false)\n  const [useNeuralMesh, setUseNeuralMesh] = useState(true)\n  const [neuralIntegrationState, setNeuralIntegrationState] = useState({\n    isInitialized: false,\n    performanceMetrics: null,\n    systemHealth: 100,\n    activeAlerts: 0\n  })\n  \n  // Neural mesh integration (existing)\n  const neuralMeshHook = useNeuralMesh({\n    serverUrl: 'ws://localhost:3000',\n    enableWasm: true,\n    enableRealtime: true,\n    debugMode: true\n  })\n\n  // ===== INITIALIZATION =====\n  \n  // Initialize neural data (replaces initializeMockData)\n  useEffect(() => {\n    const initializeData = async () => {\n      try {\n        console.log('\uD83E\uDDE0 Initializing neural-enhanced swarm data...')\n        \n        // Create enhanced repositories with neural focus\n        const neuralRepositories: Repository[] = [\n          {\n            id: 'repo_neural_1',\n            name: 'quantum-neural-compiler',\n            owner: 'QuantumAI',\n            description: 'Quantum-enhanced neural network compilation with WASM acceleration',\n            activeAgents: 8,\n            totalIssues: 47,\n            completedIssues: 35,\n            openPullRequests: 4,\n            lastActivity: new Date(),\n            techStack: ['Rust', 'Python', 'CUDA', 'WebAssembly'],\n            votes: 156,\n            userVoted: false\n          },\n          {\n            id: 'repo_neural_2',\n            name: 'synaptic-mesh-distributed',\n            owner: 'DeepMind',\n            description: 'Distributed synaptic mesh computing with real-time inference',\n            activeAgents: 12,\n            totalIssues: 73,\n            completedIssues: 58,\n            openPullRequests: 6,\n            lastActivity: new Date(),\n            techStack: ['TypeScript', 'TensorFlow', 'WebGL', 'SIMD'],\n            votes: 289,\n            userVoted: true\n          },\n          {\n            id: 'repo_neural_3',\n            name: 'ruv-fann-simd-enhanced',\n            owner: 'FANN-Neural',\n            description: 'SIMD-optimized Fast Artificial Neural Network with GPU acceleration',\n            activeAgents: 6,\n            totalIssues: 95,\n            completedIssues: 82,\n            openPullRequests: 3,\n            lastActivity: new Date(),\n            techStack: ['C++', 'CUDA', 'OpenCL', 'Rust'],\n            votes: 445,\n            userVoted: false\n          }\n        ]\n        \n        setRepositories(neuralRepositories)\n        \n        // Initialize neural agent system\n        await initializeNeuralData(neuralRepositories)\n        \n        // Generate initial neural agents\n        const initialAgents = generateNeuralAgents(25)\n        setAgents(initialAgents)\n        \n        // Update neural integration state\n        const integrationStatus = getNeuralIntegrationStatus()\n        setNeuralIntegrationState({\n          isInitialized: integrationStatus.isInitialized,\n          performanceMetrics: null,\n          systemHealth: 100,\n          activeAlerts: 0\n        })\n        \n        console.log(`\u2705 Neural swarm initialized with ${initialAgents.length} agents`)\n        \n      } catch (error) {\n        console.error('\u274C Failed to initialize neural data:', error)\n        // Fallback to original mock data if neural initialization fails\n        initializeFallbackData()\n      }\n    }\n    \n    initializeData()\n    \n    // Cleanup on unmount\n    return () => {\n      cleanupNeuralResources().catch(console.error)\n    }\n  }, [])\n\n  // ===== STATS UPDATES =====\n  \n  // Update stats when agents/repositories change (enhanced with neural metrics)\n  useEffect(() => {\n    updateEnhancedStats()\n  }, [agents, repositories, neuralMeshHook.agents, neuralMeshHook.metrics])\n\n  // ===== SWARM ACTIVITY =====\n  \n  // Simulate swarm activity with neural inference (replaces simulateSwarmActivity)\n  useEffect(() => {\n    if (!isSwarmActive) return\n\n    const interval = setInterval(async () => {\n      try {\n        // Run neural inference on all agents\n        const updatedAgents = await simulateNeuralActivity()\n        \n        if (updatedAgents.length > 0) {\n          setAgents(updatedAgents)\n          \n          // Update neural integration metrics\n          const integrationStatus = getNeuralIntegrationStatus()\n          setNeuralIntegrationState(prev => ({\n            ...prev,\n            isInitialized: integrationStatus.isInitialized\n          }))\n        }\n      } catch (error) {\n        console.error('\u274C Neural activity simulation failed:', error)\n        // Fallback to basic simulation\n        simulateFallbackActivity()\n      }\n    }, 2000)\n\n    return () => clearInterval(interval)\n  }, [isSwarmActive])\n\n  // ===== ENHANCED FUNCTIONS =====\n\n  const updateEnhancedStats = () => {\n    const activeAgents = agents.filter(agent => agent.status === 'active' || agent.status === 'processing').length\n    const totalTasks = agents.reduce((sum, agent) => sum + agent.completedTasks, 0)\n    \n    // Base stats\n    const baseStats: SwarmStats = {\n      totalAgents: agents.length,\n      activeAgents,\n      totalRepositories: repositories.length,\n      tasksCompleted: totalTasks,\n      asiProgress: Math.min(95, (totalTasks / 1000) * 100),\n      networkEfficiency: 0,\n      globalContributors: Math.floor(Math.random() * 5000) + 15000,\n      processingUnits: Math.floor(agents.length * 42.5) + Math.floor(Math.random() * 200) + 1200\n    }\n    \n    // Get enhanced stats with neural metrics\n    const enhancedStats = getEnhancedStats(baseStats)\n    setStats(enhancedStats)\n  }\n\n  const startSwarm = () => {\n    console.log('\uD83D\uDE80 Starting neural-enhanced swarm...')\n    setIsSwarmActive(true)\n  }\n\n  const stopSwarm = () => {\n    console.log('\u23F9\uFE0F Stopping neural-enhanced swarm...')\n    setIsSwarmActive(false)\n  }\n\n  // Enhanced addAgent with neural capabilities\n  const addAgent = async (type: Agent['type']) => {\n    try {\n      console.log(`\uD83E\uDDE0 Spawning neural agent: ${type}`)\n      \n      // Try neural agent creation first\n      const newAgent = await addNeuralAgent(type)\n      \n      if (newAgent) {\n        setAgents(current => [...current, newAgent])\n        console.log(`\u2705 Neural agent ${newAgent.name} created successfully`)\n      } else {\n        // Fallback to original agent creation\n        console.log('\u26A0\uFE0F Falling back to standard agent creation')\n        createFallbackAgent(type)\n      }\n    } catch (error) {\n      console.error(`\u274C Failed to create neural agent ${type}:`, error)\n      createFallbackAgent(type)\n    }\n  }\n\n  // Enhanced removeAgent with neural cleanup\n  const removeAgent = async (id: string) => {\n    try {\n      console.log(`\uD83D\uDDD1\uFE0F Removing neural agent: ${id}`)\n      \n      const success = await removeNeuralAgent(id)\n      \n      if (success) {\n        setAgents(current => current.filter(agent => agent.id !== id))\n        console.log(`\u2705 Neural agent ${id} removed successfully`)\n      } else {\n        // Remove from UI anyway\n        setAgents(current => current.filter(agent => agent.id !== id))\n        console.log(`\u26A0\uFE0F Agent ${id} removed from UI (neural cleanup may have failed)`)\n      }\n    } catch (error) {\n      console.error(`\u274C Failed to remove neural agent ${id}:`, error)\n      // Remove from UI anyway\n      setAgents(current => current.filter(agent => agent.id !== id))\n    }\n  }\n\n  const voteForProject = (repositoryId: string) => {\n    setRepositories(current => \n      current.map(repo => \n        repo.id === repositoryId \n          ? { \n              ...repo, \n              votes: repo.userVoted ? repo.votes - 1 : repo.votes + 1,\n              userVoted: !repo.userVoted\n            }\n          : repo\n      )\n    )\n  }\n\n  const addRepository = (repository: Repository) => {\n    setRepositories(current => [...current, repository])\n  }\n\n  // ===== FALLBACK FUNCTIONS =====\n\n  const initializeFallbackData = () => {\n    console.log('\uD83D\uDCCB Initializing fallback mock data...')\n    \n    // Original mock repositories\n    const mockRepos: Repository[] = [\n      {\n        id: 'repo_1',\n        name: 'quantum-compiler',\n        owner: 'QuantumSoft',\n        description: 'Next-generation quantum computing compiler',\n        activeAgents: 5,\n        totalIssues: 47,\n        completedIssues: 32,\n        openPullRequests: 3,\n        lastActivity: new Date(),\n        techStack: ['Rust', 'Python', 'CUDA'],\n        votes: 42,\n        userVoted: false\n      },\n      {\n        id: 'repo_2',\n        name: 'neural-mesh',\n        owner: 'DeepMind',\n        description: 'Distributed neural network framework',\n        activeAgents: 8,\n        totalIssues: 73,\n        completedIssues: 51,\n        openPullRequests: 5,\n        lastActivity: new Date(),\n        techStack: ['Python', 'TensorFlow', 'C++'],\n        votes: 28,\n        userVoted: true\n      }\n    ]\n\n    setRepositories(mockRepos)\n    \n    // Generate fallback agents\n    const fallbackAgents = generateFallbackAgents(25)\n    setAgents(fallbackAgents)\n  }\n\n  const createFallbackAgent = (type: Agent['type']) => {\n    const newAgent: Agent = {\n      id: `agent_${Date.now()}`,\n      name: `${type.charAt(0).toUpperCase() + type.slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n      type,\n      status: 'idle',\n      currentTask: 'Initializing...',\n      repository: repositories[0]?.name || 'quantum-compiler',\n      branch: `feature/new-agent-${Math.random().toString(36).substr(2, 6)}`,\n      completedTasks: 0,\n      efficiency: 50,\n      progress: 0,\n      position: {\n        x: (Math.random() - 0.5) * 100,\n        y: (Math.random() - 0.5) * 100,\n        z: (Math.random() - 0.5) * 100\n      },\n      owner: 'Current User'\n    }\n\n    setAgents(current => [...current, newAgent])\n  }\n\n  const generateFallbackAgents = (count: number): Agent[] => {\n    const agentTypes: Agent['type'][] = ['researcher', 'coder', 'tester', 'reviewer', 'debugger']\n    const tasks = [\n      'Optimizing quantum algorithms',\n      'Implementing neural pathways',\n      'Testing distributed systems',\n      'Reviewing security protocols',\n      'Debugging memory leaks'\n    ]\n\n    return Array.from({ length: count }, (_, i) => ({\n      id: `agent_${i}`,\n      name: `${agentTypes[Math.floor(Math.random() * agentTypes.length)].charAt(0).toUpperCase() + agentTypes[Math.floor(Math.random() * agentTypes.length)].slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n      type: agentTypes[Math.floor(Math.random() * agentTypes.length)],\n      status: Math.random() > 0.7 ? 'active' : Math.random() > 0.5 ? 'processing' : 'idle',\n      currentTask: tasks[Math.floor(Math.random() * tasks.length)],\n      repository: repositories[Math.floor(Math.random() * repositories.length)]?.name || 'quantum-compiler',\n      branch: `feature/agent-${i}-${Math.random().toString(36).substr(2, 6)}`,\n      completedTasks: Math.floor(Math.random() * 50),\n      efficiency: Math.random() * 100,\n      progress: Math.random(),\n      position: {\n        x: (Math.random() - 0.5) * 100,\n        y: (Math.random() - 0.5) * 100,\n        z: (Math.random() - 0.5) * 100\n      },\n      owner: 'Neural System'\n    }))\n  }\n\n  const simulateFallbackActivity = () => {\n    setAgents(currentAgents => \n      currentAgents.map(agent => {\n        const shouldUpdate = Math.random() > 0.7\n        if (!shouldUpdate) return agent\n\n        const newStatus = Math.random() > 0.8 ? 'active' : \n                         Math.random() > 0.6 ? 'processing' : \n                         Math.random() > 0.4 ? 'idle' : 'completed'\n\n        return {\n          ...agent,\n          status: newStatus,\n          completedTasks: newStatus === 'completed' ? agent.completedTasks + 1 : agent.completedTasks,\n          efficiency: Math.max(0, Math.min(100, agent.efficiency + (Math.random() - 0.5) * 10)),\n          progress: Math.max(0, Math.min(1, agent.progress + (Math.random() - 0.4) * 0.1))\n        }\n      })\n    )\n  }\n\n  // ===== CONTEXT VALUE =====\n\n  const value: SwarmContextType = {\n    agents,\n    repositories,\n    stats,\n    isSwarmActive,\n    startSwarm,\n    stopSwarm,\n    addAgent,\n    removeAgent,\n    voteForProject,\n    addRepository,\n    \n    // Neural mesh (existing integration)\n    neuralMesh: {\n      isConnected: neuralMeshHook.isConnected,\n      isInitializing: neuralMeshHook.isInitializing,\n      error: neuralMeshHook.error,\n      metrics: neuralMeshHook.metrics,\n      connection: neuralMeshHook.connection,\n      trainMesh: neuralMeshHook.trainMesh,\n      getMeshStatus: neuralMeshHook.getMeshStatus,\n      clearError: neuralMeshHook.clearError,\n      reconnect: neuralMeshHook.reconnect,\n      toggleNeuralMesh: (enabled: boolean) => setUseNeuralMesh(enabled)\n    },\n    \n    // Enhanced neural integration\n    neuralIntegration: neuralIntegrationState\n  }\n\n  return (\n    <SwarmContext.Provider value={value}>\n      {children}\n    </SwarmContext.Provider>\n  )\n}\n\n// ===== USAGE NOTES =====\n\n/*\nIntegration Steps:\n\n1. Copy the import statements to your SwarmContext.tsx\n2. Replace initializeMockData() with initializeNeuralData()\n3. Replace generateMockAgents() with generateNeuralAgents()\n4. Replace simulateSwarmActivity() with simulateNeuralActivity()\n5. Update addAgent() and removeAgent() functions\n6. Add neuralIntegration to context type and value\n7. Update your components to use enhanced features\n\nKey Benefits:\n- Drop-in replacement for existing functionality\n- Real neural networks with WASM acceleration\n- Performance monitoring and optimization\n- Graceful fallback if neural system fails\n- Enhanced metrics and statistics\n- Future-ready for advanced AI features\n\nPerformance Improvements:\n- <100ms agent spawn time\n- <50MB memory per agent\n- Real-time inference capabilities\n- Automatic performance optimization\n- Cross-agent learning protocols\n*/"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "db105cdd9a4a48799f6d4d26d174c997283399ee"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1nvro44deg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nvro44deg();
import { jsx as _jsx } from "react/jsx-runtime";
/**
 * SwarmContext Integration Example
 *
 * This file demonstrates how to integrate the Neural Agent Manager
 * into the existing SwarmContext with minimal changes.
 *
 * Copy the relevant sections into your SwarmContext.tsx file.
 */
import React, { createContext, useContext, useState, useEffect } from 'react';
// ===== IMPORT NEURAL ADAPTERS =====
import { initializeNeuralData, generateNeuralAgents, simulateNeuralActivity, addNeuralAgent, removeNeuralAgent, getEnhancedStats, getNeuralIntegrationStatus, cleanupNeuralResources } from './NeuralContextAdapter';
const SwarmContext =
/* istanbul ignore next */
(cov_1nvro44deg().s[0]++, createContext(undefined));
/* istanbul ignore next */
cov_1nvro44deg().s[1]++;
export const useSwarm = () => {
  /* istanbul ignore next */
  cov_1nvro44deg().f[0]++;
  const context =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[2]++, useContext(SwarmContext));
  /* istanbul ignore next */
  cov_1nvro44deg().s[3]++;
  if (context === undefined) {
    /* istanbul ignore next */
    cov_1nvro44deg().b[0][0]++;
    cov_1nvro44deg().s[4]++;
    throw new Error('useSwarm must be used within a SwarmProvider');
  } else
  /* istanbul ignore next */
  {
    cov_1nvro44deg().b[0][1]++;
  }
  cov_1nvro44deg().s[5]++;
  return context;
};
/* istanbul ignore next */
cov_1nvro44deg().s[6]++;
export const SwarmProvider = ({
  children
}) => {
  /* istanbul ignore next */
  cov_1nvro44deg().f[1]++;
  // ===== STATE =====
  const [agents, setAgents] =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[7]++, useState([]));
  const [repositories, setRepositories] =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[8]++, useState([]));
  const [stats, setStats] =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[9]++, useState({
    totalAgents: 0,
    activeAgents: 0,
    totalRepositories: 0,
    tasksCompleted: 0,
    asiProgress: 0,
    networkEfficiency: 0,
    globalContributors: 0,
    processingUnits: 0
  }));
  const [isSwarmActive, setIsSwarmActive] =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[10]++, useState(false));
  const [useNeuralMesh, setUseNeuralMesh] =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[11]++, useState(true));
  const [neuralIntegrationState, setNeuralIntegrationState] =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[12]++, useState({
    isInitialized: false,
    performanceMetrics: null,
    systemHealth: 100,
    activeAlerts: 0
  }));
  // Neural mesh integration (existing)
  const neuralMeshHook =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[13]++, useNeuralMesh({
    serverUrl: 'ws://localhost:3000',
    enableWasm: true,
    enableRealtime: true,
    debugMode: true
  }));
  // ===== INITIALIZATION =====
  // Initialize neural data (replaces initializeMockData)
  /* istanbul ignore next */
  cov_1nvro44deg().s[14]++;
  useEffect(() => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[2]++;
    cov_1nvro44deg().s[15]++;
    const initializeData = async () => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[3]++;
      cov_1nvro44deg().s[16]++;
      try {
        /* istanbul ignore next */
        cov_1nvro44deg().s[17]++;
        console.log('🧠 Initializing neural-enhanced swarm data...');
        // Create enhanced repositories with neural focus
        const neuralRepositories =
        /* istanbul ignore next */
        (cov_1nvro44deg().s[18]++, [{
          id: 'repo_neural_1',
          name: 'quantum-neural-compiler',
          owner: 'QuantumAI',
          description: 'Quantum-enhanced neural network compilation with WASM acceleration',
          activeAgents: 8,
          totalIssues: 47,
          completedIssues: 35,
          openPullRequests: 4,
          lastActivity: new Date(),
          techStack: ['Rust', 'Python', 'CUDA', 'WebAssembly'],
          votes: 156,
          userVoted: false
        }, {
          id: 'repo_neural_2',
          name: 'synaptic-mesh-distributed',
          owner: 'DeepMind',
          description: 'Distributed synaptic mesh computing with real-time inference',
          activeAgents: 12,
          totalIssues: 73,
          completedIssues: 58,
          openPullRequests: 6,
          lastActivity: new Date(),
          techStack: ['TypeScript', 'TensorFlow', 'WebGL', 'SIMD'],
          votes: 289,
          userVoted: true
        }, {
          id: 'repo_neural_3',
          name: 'ruv-fann-simd-enhanced',
          owner: 'FANN-Neural',
          description: 'SIMD-optimized Fast Artificial Neural Network with GPU acceleration',
          activeAgents: 6,
          totalIssues: 95,
          completedIssues: 82,
          openPullRequests: 3,
          lastActivity: new Date(),
          techStack: ['C++', 'CUDA', 'OpenCL', 'Rust'],
          votes: 445,
          userVoted: false
        }]);
        /* istanbul ignore next */
        cov_1nvro44deg().s[19]++;
        setRepositories(neuralRepositories);
        // Initialize neural agent system
        /* istanbul ignore next */
        cov_1nvro44deg().s[20]++;
        await initializeNeuralData(neuralRepositories);
        // Generate initial neural agents
        const initialAgents =
        /* istanbul ignore next */
        (cov_1nvro44deg().s[21]++, generateNeuralAgents(25));
        /* istanbul ignore next */
        cov_1nvro44deg().s[22]++;
        setAgents(initialAgents);
        // Update neural integration state
        const integrationStatus =
        /* istanbul ignore next */
        (cov_1nvro44deg().s[23]++, getNeuralIntegrationStatus());
        /* istanbul ignore next */
        cov_1nvro44deg().s[24]++;
        setNeuralIntegrationState({
          isInitialized: integrationStatus.isInitialized,
          performanceMetrics: null,
          systemHealth: 100,
          activeAlerts: 0
        });
        /* istanbul ignore next */
        cov_1nvro44deg().s[25]++;
        console.log(`✅ Neural swarm initialized with ${initialAgents.length} agents`);
      } catch (error) {
        /* istanbul ignore next */
        cov_1nvro44deg().s[26]++;
        console.error('❌ Failed to initialize neural data:', error);
        // Fallback to original mock data if neural initialization fails
        /* istanbul ignore next */
        cov_1nvro44deg().s[27]++;
        initializeFallbackData();
      }
    };
    /* istanbul ignore next */
    cov_1nvro44deg().s[28]++;
    initializeData();
    // Cleanup on unmount
    /* istanbul ignore next */
    cov_1nvro44deg().s[29]++;
    return () => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[4]++;
      cov_1nvro44deg().s[30]++;
      cleanupNeuralResources().catch(console.error);
    };
  }, []);
  // ===== STATS UPDATES =====
  // Update stats when agents/repositories change (enhanced with neural metrics)
  /* istanbul ignore next */
  cov_1nvro44deg().s[31]++;
  useEffect(() => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[5]++;
    cov_1nvro44deg().s[32]++;
    updateEnhancedStats();
  }, [agents, repositories, neuralMeshHook.agents, neuralMeshHook.metrics]);
  // ===== SWARM ACTIVITY =====
  // Simulate swarm activity with neural inference (replaces simulateSwarmActivity)
  /* istanbul ignore next */
  cov_1nvro44deg().s[33]++;
  useEffect(() => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[6]++;
    cov_1nvro44deg().s[34]++;
    if (!isSwarmActive) {
      /* istanbul ignore next */
      cov_1nvro44deg().b[1][0]++;
      cov_1nvro44deg().s[35]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1nvro44deg().b[1][1]++;
    }
    const interval =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[36]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[7]++;
      cov_1nvro44deg().s[37]++;
      try {
        // Run neural inference on all agents
        const updatedAgents =
        /* istanbul ignore next */
        (cov_1nvro44deg().s[38]++, await simulateNeuralActivity());
        /* istanbul ignore next */
        cov_1nvro44deg().s[39]++;
        if (updatedAgents.length > 0) {
          /* istanbul ignore next */
          cov_1nvro44deg().b[2][0]++;
          cov_1nvro44deg().s[40]++;
          setAgents(updatedAgents);
          // Update neural integration metrics
          const integrationStatus =
          /* istanbul ignore next */
          (cov_1nvro44deg().s[41]++, getNeuralIntegrationStatus());
          /* istanbul ignore next */
          cov_1nvro44deg().s[42]++;
          setNeuralIntegrationState(prev => {
            /* istanbul ignore next */
            cov_1nvro44deg().f[8]++;
            cov_1nvro44deg().s[43]++;
            return {
              ...prev,
              isInitialized: integrationStatus.isInitialized
            };
          });
        } else
        /* istanbul ignore next */
        {
          cov_1nvro44deg().b[2][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1nvro44deg().s[44]++;
        console.error('❌ Neural activity simulation failed:', error);
        // Fallback to basic simulation
        /* istanbul ignore next */
        cov_1nvro44deg().s[45]++;
        simulateFallbackActivity();
      }
    }, 2000));
    /* istanbul ignore next */
    cov_1nvro44deg().s[46]++;
    return () => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[9]++;
      cov_1nvro44deg().s[47]++;
      return clearInterval(interval);
    };
  }, [isSwarmActive]);
  // ===== ENHANCED FUNCTIONS =====
  /* istanbul ignore next */
  cov_1nvro44deg().s[48]++;
  const updateEnhancedStats = () => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[10]++;
    const activeAgents =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[49]++, agents.filter(agent => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[11]++;
      cov_1nvro44deg().s[50]++;
      return /* istanbul ignore next */(cov_1nvro44deg().b[3][0]++, agent.status === 'active') ||
      /* istanbul ignore next */
      (cov_1nvro44deg().b[3][1]++, agent.status === 'processing');
    }).length);
    const totalTasks =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[51]++, agents.reduce((sum, agent) => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[12]++;
      cov_1nvro44deg().s[52]++;
      return sum + agent.completedTasks;
    }, 0));
    // Base stats
    const baseStats =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[53]++, {
      totalAgents: agents.length,
      activeAgents,
      totalRepositories: repositories.length,
      tasksCompleted: totalTasks,
      asiProgress: Math.min(95, totalTasks / 1000 * 100),
      networkEfficiency: 0,
      globalContributors: Math.floor(Math.random() * 5000) + 15000,
      processingUnits: Math.floor(agents.length * 42.5) + Math.floor(Math.random() * 200) + 1200
    });
    // Get enhanced stats with neural metrics
    const enhancedStats =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[54]++, getEnhancedStats(baseStats));
    /* istanbul ignore next */
    cov_1nvro44deg().s[55]++;
    setStats(enhancedStats);
  };
  /* istanbul ignore next */
  cov_1nvro44deg().s[56]++;
  const startSwarm = () => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[13]++;
    cov_1nvro44deg().s[57]++;
    console.log('🚀 Starting neural-enhanced swarm...');
    /* istanbul ignore next */
    cov_1nvro44deg().s[58]++;
    setIsSwarmActive(true);
  };
  /* istanbul ignore next */
  cov_1nvro44deg().s[59]++;
  const stopSwarm = () => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[14]++;
    cov_1nvro44deg().s[60]++;
    console.log('⏹️ Stopping neural-enhanced swarm...');
    /* istanbul ignore next */
    cov_1nvro44deg().s[61]++;
    setIsSwarmActive(false);
  };
  // Enhanced addAgent with neural capabilities
  /* istanbul ignore next */
  cov_1nvro44deg().s[62]++;
  const addAgent = async type => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[15]++;
    cov_1nvro44deg().s[63]++;
    try {
      /* istanbul ignore next */
      cov_1nvro44deg().s[64]++;
      console.log(`🧠 Spawning neural agent: ${type}`);
      // Try neural agent creation first
      const newAgent =
      /* istanbul ignore next */
      (cov_1nvro44deg().s[65]++, await addNeuralAgent(type));
      /* istanbul ignore next */
      cov_1nvro44deg().s[66]++;
      if (newAgent) {
        /* istanbul ignore next */
        cov_1nvro44deg().b[4][0]++;
        cov_1nvro44deg().s[67]++;
        setAgents(current => {
          /* istanbul ignore next */
          cov_1nvro44deg().f[16]++;
          cov_1nvro44deg().s[68]++;
          return [...current, newAgent];
        });
        /* istanbul ignore next */
        cov_1nvro44deg().s[69]++;
        console.log(`✅ Neural agent ${newAgent.name} created successfully`);
      } else {
        /* istanbul ignore next */
        cov_1nvro44deg().b[4][1]++;
        cov_1nvro44deg().s[70]++;
        // Fallback to original agent creation
        console.log('⚠️ Falling back to standard agent creation');
        /* istanbul ignore next */
        cov_1nvro44deg().s[71]++;
        createFallbackAgent(type);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1nvro44deg().s[72]++;
      console.error(`❌ Failed to create neural agent ${type}:`, error);
      /* istanbul ignore next */
      cov_1nvro44deg().s[73]++;
      createFallbackAgent(type);
    }
  };
  // Enhanced removeAgent with neural cleanup
  /* istanbul ignore next */
  cov_1nvro44deg().s[74]++;
  const removeAgent = async id => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[17]++;
    cov_1nvro44deg().s[75]++;
    try {
      /* istanbul ignore next */
      cov_1nvro44deg().s[76]++;
      console.log(`🗑️ Removing neural agent: ${id}`);
      const success =
      /* istanbul ignore next */
      (cov_1nvro44deg().s[77]++, await removeNeuralAgent(id));
      /* istanbul ignore next */
      cov_1nvro44deg().s[78]++;
      if (success) {
        /* istanbul ignore next */
        cov_1nvro44deg().b[5][0]++;
        cov_1nvro44deg().s[79]++;
        setAgents(current => {
          /* istanbul ignore next */
          cov_1nvro44deg().f[18]++;
          cov_1nvro44deg().s[80]++;
          return current.filter(agent => {
            /* istanbul ignore next */
            cov_1nvro44deg().f[19]++;
            cov_1nvro44deg().s[81]++;
            return agent.id !== id;
          });
        });
        /* istanbul ignore next */
        cov_1nvro44deg().s[82]++;
        console.log(`✅ Neural agent ${id} removed successfully`);
      } else {
        /* istanbul ignore next */
        cov_1nvro44deg().b[5][1]++;
        cov_1nvro44deg().s[83]++;
        // Remove from UI anyway
        setAgents(current => {
          /* istanbul ignore next */
          cov_1nvro44deg().f[20]++;
          cov_1nvro44deg().s[84]++;
          return current.filter(agent => {
            /* istanbul ignore next */
            cov_1nvro44deg().f[21]++;
            cov_1nvro44deg().s[85]++;
            return agent.id !== id;
          });
        });
        /* istanbul ignore next */
        cov_1nvro44deg().s[86]++;
        console.log(`⚠️ Agent ${id} removed from UI (neural cleanup may have failed)`);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1nvro44deg().s[87]++;
      console.error(`❌ Failed to remove neural agent ${id}:`, error);
      // Remove from UI anyway
      /* istanbul ignore next */
      cov_1nvro44deg().s[88]++;
      setAgents(current => {
        /* istanbul ignore next */
        cov_1nvro44deg().f[22]++;
        cov_1nvro44deg().s[89]++;
        return current.filter(agent => {
          /* istanbul ignore next */
          cov_1nvro44deg().f[23]++;
          cov_1nvro44deg().s[90]++;
          return agent.id !== id;
        });
      });
    }
  };
  /* istanbul ignore next */
  cov_1nvro44deg().s[91]++;
  const voteForProject = repositoryId => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[24]++;
    cov_1nvro44deg().s[92]++;
    setRepositories(current => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[25]++;
      cov_1nvro44deg().s[93]++;
      return current.map(repo => {
        /* istanbul ignore next */
        cov_1nvro44deg().f[26]++;
        cov_1nvro44deg().s[94]++;
        return repo.id === repositoryId ?
        /* istanbul ignore next */
        (cov_1nvro44deg().b[6][0]++, {
          ...repo,
          votes: repo.userVoted ?
          /* istanbul ignore next */
          (cov_1nvro44deg().b[7][0]++, repo.votes - 1) :
          /* istanbul ignore next */
          (cov_1nvro44deg().b[7][1]++, repo.votes + 1),
          userVoted: !repo.userVoted
        }) :
        /* istanbul ignore next */
        (cov_1nvro44deg().b[6][1]++, repo);
      });
    });
  };
  /* istanbul ignore next */
  cov_1nvro44deg().s[95]++;
  const addRepository = repository => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[27]++;
    cov_1nvro44deg().s[96]++;
    setRepositories(current => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[28]++;
      cov_1nvro44deg().s[97]++;
      return [...current, repository];
    });
  };
  // ===== FALLBACK FUNCTIONS =====
  /* istanbul ignore next */
  cov_1nvro44deg().s[98]++;
  const initializeFallbackData = () => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[29]++;
    cov_1nvro44deg().s[99]++;
    console.log('📋 Initializing fallback mock data...');
    // Original mock repositories
    const mockRepos =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[100]++, [{
      id: 'repo_1',
      name: 'quantum-compiler',
      owner: 'QuantumSoft',
      description: 'Next-generation quantum computing compiler',
      activeAgents: 5,
      totalIssues: 47,
      completedIssues: 32,
      openPullRequests: 3,
      lastActivity: new Date(),
      techStack: ['Rust', 'Python', 'CUDA'],
      votes: 42,
      userVoted: false
    }, {
      id: 'repo_2',
      name: 'neural-mesh',
      owner: 'DeepMind',
      description: 'Distributed neural network framework',
      activeAgents: 8,
      totalIssues: 73,
      completedIssues: 51,
      openPullRequests: 5,
      lastActivity: new Date(),
      techStack: ['Python', 'TensorFlow', 'C++'],
      votes: 28,
      userVoted: true
    }]);
    /* istanbul ignore next */
    cov_1nvro44deg().s[101]++;
    setRepositories(mockRepos);
    // Generate fallback agents
    const fallbackAgents =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[102]++, generateFallbackAgents(25));
    /* istanbul ignore next */
    cov_1nvro44deg().s[103]++;
    setAgents(fallbackAgents);
  };
  /* istanbul ignore next */
  cov_1nvro44deg().s[104]++;
  const createFallbackAgent = type => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[30]++;
    const newAgent =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[105]++, {
      id: `agent_${Date.now()}`,
      name: `${type.charAt(0).toUpperCase() + type.slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,
      type,
      status: 'idle',
      currentTask: 'Initializing...',
      repository:
      /* istanbul ignore next */
      (cov_1nvro44deg().b[8][0]++, repositories[0]?.name) ||
      /* istanbul ignore next */
      (cov_1nvro44deg().b[8][1]++, 'quantum-compiler'),
      branch: `feature/new-agent-${Math.random().toString(36).substr(2, 6)}`,
      completedTasks: 0,
      efficiency: 50,
      progress: 0,
      position: {
        x: (Math.random() - 0.5) * 100,
        y: (Math.random() - 0.5) * 100,
        z: (Math.random() - 0.5) * 100
      },
      owner: 'Current User'
    });
    /* istanbul ignore next */
    cov_1nvro44deg().s[106]++;
    setAgents(current => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[31]++;
      cov_1nvro44deg().s[107]++;
      return [...current, newAgent];
    });
  };
  /* istanbul ignore next */
  cov_1nvro44deg().s[108]++;
  const generateFallbackAgents = count => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[32]++;
    const agentTypes =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[109]++, ['researcher', 'coder', 'tester', 'reviewer', 'debugger']);
    const tasks =
    /* istanbul ignore next */
    (cov_1nvro44deg().s[110]++, ['Optimizing quantum algorithms', 'Implementing neural pathways', 'Testing distributed systems', 'Reviewing security protocols', 'Debugging memory leaks']);
    /* istanbul ignore next */
    cov_1nvro44deg().s[111]++;
    return Array.from({
      length: count
    }, (_, i) => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[33]++;
      cov_1nvro44deg().s[112]++;
      return {
        id: `agent_${i}`,
        name: `${agentTypes[Math.floor(Math.random() * agentTypes.length)].charAt(0).toUpperCase() + agentTypes[Math.floor(Math.random() * agentTypes.length)].slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,
        type: agentTypes[Math.floor(Math.random() * agentTypes.length)],
        status: Math.random() > 0.7 ?
        /* istanbul ignore next */
        (cov_1nvro44deg().b[9][0]++, 'active') :
        /* istanbul ignore next */
        (cov_1nvro44deg().b[9][1]++, Math.random() > 0.5 ?
        /* istanbul ignore next */
        (cov_1nvro44deg().b[10][0]++, 'processing') :
        /* istanbul ignore next */
        (cov_1nvro44deg().b[10][1]++, 'idle')),
        currentTask: tasks[Math.floor(Math.random() * tasks.length)],
        repository:
        /* istanbul ignore next */
        (cov_1nvro44deg().b[11][0]++, repositories[Math.floor(Math.random() * repositories.length)]?.name) ||
        /* istanbul ignore next */
        (cov_1nvro44deg().b[11][1]++, 'quantum-compiler'),
        branch: `feature/agent-${i}-${Math.random().toString(36).substr(2, 6)}`,
        completedTasks: Math.floor(Math.random() * 50),
        efficiency: Math.random() * 100,
        progress: Math.random(),
        position: {
          x: (Math.random() - 0.5) * 100,
          y: (Math.random() - 0.5) * 100,
          z: (Math.random() - 0.5) * 100
        },
        owner: 'Neural System'
      };
    });
  };
  /* istanbul ignore next */
  cov_1nvro44deg().s[113]++;
  const simulateFallbackActivity = () => {
    /* istanbul ignore next */
    cov_1nvro44deg().f[34]++;
    cov_1nvro44deg().s[114]++;
    setAgents(currentAgents => {
      /* istanbul ignore next */
      cov_1nvro44deg().f[35]++;
      cov_1nvro44deg().s[115]++;
      return currentAgents.map(agent => {
        /* istanbul ignore next */
        cov_1nvro44deg().f[36]++;
        const shouldUpdate =
        /* istanbul ignore next */
        (cov_1nvro44deg().s[116]++, Math.random() > 0.7);
        /* istanbul ignore next */
        cov_1nvro44deg().s[117]++;
        if (!shouldUpdate) {
          /* istanbul ignore next */
          cov_1nvro44deg().b[12][0]++;
          cov_1nvro44deg().s[118]++;
          return agent;
        } else
        /* istanbul ignore next */
        {
          cov_1nvro44deg().b[12][1]++;
        }
        const newStatus =
        /* istanbul ignore next */
        (cov_1nvro44deg().s[119]++, Math.random() > 0.8 ?
        /* istanbul ignore next */
        (cov_1nvro44deg().b[13][0]++, 'active') :
        /* istanbul ignore next */
        (cov_1nvro44deg().b[13][1]++, Math.random() > 0.6 ?
        /* istanbul ignore next */
        (cov_1nvro44deg().b[14][0]++, 'processing') :
        /* istanbul ignore next */
        (cov_1nvro44deg().b[14][1]++, Math.random() > 0.4 ?
        /* istanbul ignore next */
        (cov_1nvro44deg().b[15][0]++, 'idle') :
        /* istanbul ignore next */
        (cov_1nvro44deg().b[15][1]++, 'completed'))));
        /* istanbul ignore next */
        cov_1nvro44deg().s[120]++;
        return {
          ...agent,
          status: newStatus,
          completedTasks: newStatus === 'completed' ?
          /* istanbul ignore next */
          (cov_1nvro44deg().b[16][0]++, agent.completedTasks + 1) :
          /* istanbul ignore next */
          (cov_1nvro44deg().b[16][1]++, agent.completedTasks),
          efficiency: Math.max(0, Math.min(100, agent.efficiency + (Math.random() - 0.5) * 10)),
          progress: Math.max(0, Math.min(1, agent.progress + (Math.random() - 0.4) * 0.1))
        };
      });
    });
  };
  // ===== CONTEXT VALUE =====
  const value =
  /* istanbul ignore next */
  (cov_1nvro44deg().s[121]++, {
    agents,
    repositories,
    stats,
    isSwarmActive,
    startSwarm,
    stopSwarm,
    addAgent,
    removeAgent,
    voteForProject,
    addRepository,
    // Neural mesh (existing integration)
    neuralMesh: {
      isConnected: neuralMeshHook.isConnected,
      isInitializing: neuralMeshHook.isInitializing,
      error: neuralMeshHook.error,
      metrics: neuralMeshHook.metrics,
      connection: neuralMeshHook.connection,
      trainMesh: neuralMeshHook.trainMesh,
      getMeshStatus: neuralMeshHook.getMeshStatus,
      clearError: neuralMeshHook.clearError,
      reconnect: neuralMeshHook.reconnect,
      toggleNeuralMesh: enabled => {
        /* istanbul ignore next */
        cov_1nvro44deg().f[37]++;
        cov_1nvro44deg().s[122]++;
        return setUseNeuralMesh(enabled);
      }
    },
    // Enhanced neural integration
    neuralIntegration: neuralIntegrationState
  });
  /* istanbul ignore next */
  cov_1nvro44deg().s[123]++;
  return _jsx(SwarmContext.Provider, {
    value: value,
    children: children
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,