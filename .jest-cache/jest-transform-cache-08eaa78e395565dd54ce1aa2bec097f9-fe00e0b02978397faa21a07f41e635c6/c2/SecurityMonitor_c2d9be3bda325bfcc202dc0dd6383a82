6205bb6a565d9f583b9d9f75870361db
/* istanbul ignore next */
function cov_t9dsayte4() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityMonitor.ts";
  var hash = "6b46f5c1b69cb47abfb0bab447586db42aa79665";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 16
        }
      },
      "1": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "2": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 28,
          column: 11
        }
      },
      "3": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "4": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "5": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 46,
          column: 11
        }
      },
      "6": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "7": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "8": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 51
        }
      },
      "9": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "10": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "11": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 64
        }
      },
      "12": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 19
        }
      },
      "13": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 59
        }
      },
      "14": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 30
        }
      },
      "15": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 83,
          column: 17
        }
      },
      "16": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 34
        }
      },
      "17": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 34
        }
      },
      "18": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 40
        }
      },
      "19": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 39
        }
      },
      "20": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 40
        }
      },
      "21": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 52
        }
      },
      "22": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 94,
          column: 19
        }
      },
      "23": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 19
        }
      },
      "24": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 58
        }
      },
      "25": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "26": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 51
        }
      },
      "27": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 43
        }
      },
      "28": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 31
        }
      },
      "29": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 40
        }
      },
      "30": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 53
        }
      },
      "31": {
        start: {
          line: 108,
          column: 26
        },
        end: {
          line: 108,
          column: 43
        }
      },
      "32": {
        start: {
          line: 110,
          column: 28
        },
        end: {
          line: 110,
          column: 49
        }
      },
      "33": {
        start: {
          line: 111,
          column: 25
        },
        end: {
          line: 111,
          column: 43
        }
      },
      "34": {
        start: {
          line: 113,
          column: 30
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "35": {
        start: {
          line: 113,
          column: 55
        },
        end: {
          line: 113,
          column: 88
        }
      },
      "36": {
        start: {
          line: 115,
          column: 28
        },
        end: {
          line: 115,
          column: 68
        }
      },
      "37": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 57
        }
      },
      "38": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "39": {
        start: {
          line: 121,
          column: 53
        },
        end: {
          line: 121,
          column: 65
        }
      },
      "40": {
        start: {
          line: 122,
          column: 54
        },
        end: {
          line: 122,
          column: 65
        }
      },
      "41": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 35
        }
      },
      "42": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "43": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 40
        }
      },
      "44": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 48
        }
      },
      "45": {
        start: {
          line: 140,
          column: 32
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "46": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "47": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 48
        }
      },
      "48": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 36
        }
      },
      "49": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "50": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "51": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "52": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "53": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "54": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "55": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "56": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 191,
          column: 15
        }
      },
      "57": {
        start: {
          line: 198,
          column: 30
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "58": {
        start: {
          line: 198,
          column: 55
        },
        end: {
          line: 198,
          column: 88
        }
      },
      "59": {
        start: {
          line: 201,
          column: 29
        },
        end: {
          line: 201,
          column: 38
        }
      },
      "60": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "61": {
        start: {
          line: 203,
          column: 28
        },
        end: {
          line: 203,
          column: 65
        }
      },
      "62": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 33
        }
      },
      "63": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 53
        }
      },
      "64": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "65": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "66": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 215,
          column: 19
        }
      },
      "67": {
        start: {
          line: 219,
          column: 32
        },
        end: {
          line: 219,
          column: 84
        }
      },
      "68": {
        start: {
          line: 219,
          column: 58
        },
        end: {
          line: 219,
          column: 83
        }
      },
      "69": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "70": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "71": {
        start: {
          line: 233,
          column: 27
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "72": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 38
        }
      },
      "73": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 47
        }
      },
      "74": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "75": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 249,
          column: 15
        }
      },
      "76": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 49
        }
      },
      "77": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 90
        }
      },
      "78": {
        start: {
          line: 258,
          column: 24
        },
        end: {
          line: 258,
          column: 29
        }
      },
      "79": {
        start: {
          line: 259,
          column: 23
        },
        end: {
          line: 259,
          column: 25
        }
      },
      "80": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "81": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 81
        }
      },
      "82": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 33
        }
      },
      "83": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 265,
          column: 22
        }
      },
      "84": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 56
        }
      },
      "85": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 33
        }
      },
      "86": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 22
        }
      },
      "87": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 58
        }
      },
      "88": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 34
        }
      },
      "89": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 22
        }
      },
      "90": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 55
        }
      },
      "91": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 33
        }
      },
      "92": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 22
        }
      },
      "93": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 63
        }
      },
      "94": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 34
        }
      },
      "95": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 37
        }
      },
      "96": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 35
        }
      },
      "97": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "98": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 86
        }
      },
      "99": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 92
        }
      },
      "100": {
        start: {
          line: 298,
          column: 26
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "101": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 36
        }
      },
      "102": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "103": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 38
        }
      },
      "104": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 46
        }
      },
      "105": {
        start: {
          line: 310,
          column: 25
        },
        end: {
          line: 310,
          column: 53
        }
      },
      "106": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 71
        }
      },
      "107": {
        start: {
          line: 317,
          column: 31
        },
        end: {
          line: 317,
          column: 68
        }
      },
      "108": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 319,
          column: 19
        }
      },
      "109": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 19
        }
      },
      "110": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "111": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 327,
          column: 15
        }
      },
      "112": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "113": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 336,
          column: 15
        }
      },
      "114": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "115": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 345,
          column: 15
        }
      },
      "116": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "117": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 354,
          column: 15
        }
      },
      "118": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 362,
          column: 25
        }
      },
      "119": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 25
        }
      },
      "120": {
        start: {
          line: 363,
          column: 30
        },
        end: {
          line: 363,
          column: 89
        }
      },
      "121": {
        start: {
          line: 363,
          column: 56
        },
        end: {
          line: 363,
          column: 81
        }
      },
      "122": {
        start: {
          line: 364,
          column: 26
        },
        end: {
          line: 364,
          column: 81
        }
      },
      "123": {
        start: {
          line: 364,
          column: 52
        },
        end: {
          line: 364,
          column: 73
        }
      },
      "124": {
        start: {
          line: 365,
          column: 28
        },
        end: {
          line: 365,
          column: 85
        }
      },
      "125": {
        start: {
          line: 365,
          column: 54
        },
        end: {
          line: 365,
          column: 77
        }
      },
      "126": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 367,
          column: 30
        }
      },
      "127": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 30
        }
      },
      "128": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 369,
          column: 30
        }
      },
      "129": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 30
        }
      },
      "130": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 371,
          column: 26
        }
      },
      "131": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 26
        }
      },
      "132": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 373,
          column: 28
        }
      },
      "133": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 28
        }
      },
      "134": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 21
        }
      },
      "135": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 380,
          column: 23
        }
      },
      "136": {
        start: {
          line: 381,
          column: 31
        },
        end: {
          line: 381,
          column: 68
        }
      },
      "137": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "138": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 386,
          column: 13
        }
      },
      "139": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 385,
          column: 79
        }
      },
      "140": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 390,
          column: 13
        }
      },
      "141": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 87
        }
      },
      "142": {
        start: {
          line: 393,
          column: 30
        },
        end: {
          line: 393,
          column: 105
        }
      },
      "143": {
        start: {
          line: 393,
          column: 55
        },
        end: {
          line: 393,
          column: 104
        }
      },
      "144": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 43
        }
      },
      "145": {
        start: {
          line: 396,
          column: 31
        },
        end: {
          line: 396,
          column: 100
        }
      },
      "146": {
        start: {
          line: 396,
          column: 55
        },
        end: {
          line: 396,
          column: 99
        }
      },
      "147": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 397,
          column: 44
        }
      },
      "148": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 46
        }
      },
      "149": {
        start: {
          line: 404,
          column: 31
        },
        end: {
          line: 407,
          column: 10
        }
      },
      "150": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 37
        }
      },
      "151": {
        start: {
          line: 421,
          column: 31
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "152": {
        start: {
          line: 433,
          column: 30
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "153": {
        start: {
          line: 433,
          column: 55
        },
        end: {
          line: 433,
          column: 89
        }
      },
      "154": {
        start: {
          line: 435,
          column: 29
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "155": {
        start: {
          line: 435,
          column: 53
        },
        end: {
          line: 435,
          column: 87
        }
      },
      "156": {
        start: {
          line: 437,
          column: 33
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "157": {
        start: {
          line: 438,
          column: 48
        },
        end: {
          line: 438,
          column: 73
        }
      },
      "158": {
        start: {
          line: 439,
          column: 44
        },
        end: {
          line: 439,
          column: 65
        }
      },
      "159": {
        start: {
          line: 440,
          column: 46
        },
        end: {
          line: 440,
          column: 69
        }
      },
      "160": {
        start: {
          line: 441,
          column: 43
        },
        end: {
          line: 441,
          column: 63
        }
      },
      "161": {
        start: {
          line: 443,
          column: 29
        },
        end: {
          line: 446,
          column: 14
        }
      },
      "162": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 59
        }
      },
      "163": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 23
        }
      },
      "164": {
        start: {
          line: 447,
          column: 32
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "165": {
        start: {
          line: 448,
          column: 47
        },
        end: {
          line: 448,
          column: 72
        }
      },
      "166": {
        start: {
          line: 449,
          column: 43
        },
        end: {
          line: 449,
          column: 64
        }
      },
      "167": {
        start: {
          line: 450,
          column: 45
        },
        end: {
          line: 450,
          column: 68
        }
      },
      "168": {
        start: {
          line: 451,
          column: 42
        },
        end: {
          line: 451,
          column: 62
        }
      },
      "169": {
        start: {
          line: 453,
          column: 31
        },
        end: {
          line: 455,
          column: 25
        }
      },
      "170": {
        start: {
          line: 454,
          column: 28
        },
        end: {
          line: 454,
          column: 53
        }
      },
      "171": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 469,
          column: 10
        }
      },
      "172": {
        start: {
          line: 465,
          column: 57
        },
        end: {
          line: 465,
          column: 72
        }
      },
      "173": {
        start: {
          line: 475,
          column: 22
        },
        end: {
          line: 475,
          column: 61
        }
      },
      "174": {
        start: {
          line: 475,
          column: 44
        },
        end: {
          line: 475,
          column: 60
        }
      },
      "175": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "176": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 38
        }
      },
      "177": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 51
        }
      },
      "178": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 24
        }
      },
      "179": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 21
        }
      },
      "180": {
        start: {
          line: 487,
          column: 22
        },
        end: {
          line: 487,
          column: 61
        }
      },
      "181": {
        start: {
          line: 487,
          column: 44
        },
        end: {
          line: 487,
          column: 60
        }
      },
      "182": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 492,
          column: 9
        }
      },
      "183": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 42
        }
      },
      "184": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 47
        }
      },
      "185": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 24
        }
      },
      "186": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 493,
          column: 21
        }
      },
      "187": {
        start: {
          line: 499,
          column: 23
        },
        end: {
          line: 499,
          column: 60
        }
      },
      "188": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 500,
          column: 62
        }
      },
      "189": {
        start: {
          line: 500,
          column: 40
        },
        end: {
          line: 500,
          column: 60
        }
      },
      "190": {
        start: {
          line: 506,
          column: 23
        },
        end: {
          line: 506,
          column: 57
        }
      },
      "191": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 507,
          column: 70
        }
      },
      "192": {
        start: {
          line: 507,
          column: 48
        },
        end: {
          line: 507,
          column: 68
        }
      },
      "193": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 508,
          column: 68
        }
      },
      "194": {
        start: {
          line: 508,
          column: 46
        },
        end: {
          line: 508,
          column: 66
        }
      },
      "195": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 509,
          column: 70
        }
      },
      "196": {
        start: {
          line: 509,
          column: 48
        },
        end: {
          line: 509,
          column: 68
        }
      },
      "197": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 71
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 79,
            column: 46
          },
          end: {
            line: 79,
            column: 47
          }
        },
        loc: {
          start: {
            line: 79,
            column: 52
          },
          end: {
            line: 83,
            column: 9
          }
        },
        line: 79
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 11
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 92
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 21
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 107
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 113,
            column: 50
          },
          end: {
            line: 113,
            column: 51
          }
        },
        loc: {
          start: {
            line: 113,
            column: 55
          },
          end: {
            line: 113,
            column: 88
          }
        },
        line: 113
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 121,
            column: 48
          },
          end: {
            line: 121,
            column: 49
          }
        },
        loc: {
          start: {
            line: 121,
            column: 53
          },
          end: {
            line: 121,
            column: 65
          }
        },
        line: 121
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 122,
            column: 49
          },
          end: {
            line: 122,
            column: 50
          }
        },
        loc: {
          start: {
            line: 122,
            column: 54
          },
          end: {
            line: 122,
            column: 65
          }
        },
        line: 122
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 21
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 139
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 35
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 152
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 27
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 197
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 198,
            column: 50
          },
          end: {
            line: 198,
            column: 51
          }
        },
        loc: {
          start: {
            line: 198,
            column: 55
          },
          end: {
            line: 198,
            column: 88
          }
        },
        line: 198
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 219,
            column: 53
          },
          end: {
            line: 219,
            column: 54
          }
        },
        loc: {
          start: {
            line: 219,
            column: 58
          },
          end: {
            line: 219,
            column: 83
          }
        },
        line: 219
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 25
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 232
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 34
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 257
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 23
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 297
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        loc: {
          start: {
            line: 316,
            column: 27
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 316
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 40
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 360
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 363,
            column: 51
          },
          end: {
            line: 363,
            column: 52
          }
        },
        loc: {
          start: {
            line: 363,
            column: 56
          },
          end: {
            line: 363,
            column: 81
          }
        },
        line: 363
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 364,
            column: 47
          },
          end: {
            line: 364,
            column: 48
          }
        },
        loc: {
          start: {
            line: 364,
            column: 52
          },
          end: {
            line: 364,
            column: 73
          }
        },
        line: 364
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 365,
            column: 49
          },
          end: {
            line: 365,
            column: 50
          }
        },
        loc: {
          start: {
            line: 365,
            column: 54
          },
          end: {
            line: 365,
            column: 77
          }
        },
        line: 365
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 28
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 379
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 393,
            column: 50
          },
          end: {
            line: 393,
            column: 51
          }
        },
        loc: {
          start: {
            line: 393,
            column: 55
          },
          end: {
            line: 393,
            column: 104
          }
        },
        line: 393
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 396,
            column: 50
          },
          end: {
            line: 396,
            column: 51
          }
        },
        loc: {
          start: {
            line: 396,
            column: 55
          },
          end: {
            line: 396,
            column: 99
          }
        },
        line: 396
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 26
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 403
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 30
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 413
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 27
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 420
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 433,
            column: 50
          },
          end: {
            line: 433,
            column: 51
          }
        },
        loc: {
          start: {
            line: 433,
            column: 55
          },
          end: {
            line: 433,
            column: 89
          }
        },
        line: 433
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 435,
            column: 48
          },
          end: {
            line: 435,
            column: 49
          }
        },
        loc: {
          start: {
            line: 435,
            column: 53
          },
          end: {
            line: 435,
            column: 87
          }
        },
        line: 435
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 438,
            column: 43
          },
          end: {
            line: 438,
            column: 44
          }
        },
        loc: {
          start: {
            line: 438,
            column: 48
          },
          end: {
            line: 438,
            column: 73
          }
        },
        line: 438
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 439,
            column: 39
          },
          end: {
            line: 439,
            column: 40
          }
        },
        loc: {
          start: {
            line: 439,
            column: 44
          },
          end: {
            line: 439,
            column: 65
          }
        },
        line: 439
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 440,
            column: 41
          },
          end: {
            line: 440,
            column: 42
          }
        },
        loc: {
          start: {
            line: 440,
            column: 46
          },
          end: {
            line: 440,
            column: 69
          }
        },
        line: 440
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 441,
            column: 38
          },
          end: {
            line: 441,
            column: 39
          }
        },
        loc: {
          start: {
            line: 441,
            column: 43
          },
          end: {
            line: 441,
            column: 63
          }
        },
        line: 441
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 443,
            column: 50
          },
          end: {
            line: 443,
            column: 51
          }
        },
        loc: {
          start: {
            line: 443,
            column: 67
          },
          end: {
            line: 446,
            column: 9
          }
        },
        line: 443
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 448,
            column: 42
          },
          end: {
            line: 448,
            column: 43
          }
        },
        loc: {
          start: {
            line: 448,
            column: 47
          },
          end: {
            line: 448,
            column: 72
          }
        },
        line: 448
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 449,
            column: 38
          },
          end: {
            line: 449,
            column: 39
          }
        },
        loc: {
          start: {
            line: 449,
            column: 43
          },
          end: {
            line: 449,
            column: 64
          }
        },
        line: 449
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 450,
            column: 40
          },
          end: {
            line: 450,
            column: 41
          }
        },
        loc: {
          start: {
            line: 450,
            column: 45
          },
          end: {
            line: 450,
            column: 68
          }
        },
        line: 450
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 451,
            column: 37
          },
          end: {
            line: 451,
            column: 38
          }
        },
        loc: {
          start: {
            line: 451,
            column: 42
          },
          end: {
            line: 451,
            column: 62
          }
        },
        line: 451
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 454,
            column: 18
          },
          end: {
            line: 454,
            column: 19
          }
        },
        loc: {
          start: {
            line: 454,
            column: 28
          },
          end: {
            line: 454,
            column: 53
          }
        },
        line: 454
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 465,
            column: 52
          },
          end: {
            line: 465,
            column: 53
          }
        },
        loc: {
          start: {
            line: 465,
            column: 57
          },
          end: {
            line: 465,
            column: 72
          }
        },
        line: 465
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 474,
            column: 4
          },
          end: {
            line: 474,
            column: 5
          }
        },
        loc: {
          start: {
            line: 474,
            column: 30
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 474
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 475,
            column: 39
          },
          end: {
            line: 475,
            column: 40
          }
        },
        loc: {
          start: {
            line: 475,
            column: 44
          },
          end: {
            line: 475,
            column: 60
          }
        },
        line: 475
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 26
          },
          end: {
            line: 494,
            column: 5
          }
        },
        line: 486
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 487,
            column: 39
          },
          end: {
            line: 487,
            column: 40
          }
        },
        loc: {
          start: {
            line: 487,
            column: 44
          },
          end: {
            line: 487,
            column: 60
          }
        },
        line: 487
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 33
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 498
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 500,
            column: 35
          },
          end: {
            line: 500,
            column: 36
          }
        },
        loc: {
          start: {
            line: 500,
            column: 40
          },
          end: {
            line: 500,
            column: 60
          }
        },
        line: 500
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 505,
            column: 4
          },
          end: {
            line: 505,
            column: 5
          }
        },
        loc: {
          start: {
            line: 505,
            column: 14
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 505
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 507,
            column: 43
          },
          end: {
            line: 507,
            column: 44
          }
        },
        loc: {
          start: {
            line: 507,
            column: 48
          },
          end: {
            line: 507,
            column: 68
          }
        },
        line: 507
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 508,
            column: 41
          },
          end: {
            line: 508,
            column: 42
          }
        },
        loc: {
          start: {
            line: 508,
            column: 46
          },
          end: {
            line: 508,
            column: 66
          }
        },
        line: 508
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 509,
            column: 43
          },
          end: {
            line: 509,
            column: 44
          }
        },
        loc: {
          start: {
            line: 509,
            column: 48
          },
          end: {
            line: 509,
            column: 68
          }
        },
        line: 509
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "1": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 94,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 94,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "2": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "3": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "4": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "5": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 43
          }
        }, {
          start: {
            line: 154,
            column: 47
          },
          end: {
            line: 154,
            column: 69
          }
        }],
        line: 154
      },
      "6": {
        loc: {
          start: {
            line: 158,
            column: 24
          },
          end: {
            line: 158,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 24
          },
          end: {
            line: 158,
            column: 37
          }
        }, {
          start: {
            line: 158,
            column: 41
          },
          end: {
            line: 158,
            column: 50
          }
        }],
        line: 158
      },
      "7": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "8": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "9": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 174,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 174,
            column: 46
          }
        }, {
          start: {
            line: 174,
            column: 50
          },
          end: {
            line: 174,
            column: 76
          }
        }],
        line: 174
      },
      "10": {
        loc: {
          start: {
            line: 178,
            column: 24
          },
          end: {
            line: 178,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 24
          },
          end: {
            line: 178,
            column: 35
          }
        }, {
          start: {
            line: 178,
            column: 39
          },
          end: {
            line: 178,
            column: 48
          }
        }],
        line: 178
      },
      "11": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "12": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 184,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 184,
            column: 52
          }
        }, {
          start: {
            line: 184,
            column: 56
          },
          end: {
            line: 184,
            column: 85
          }
        }],
        line: 184
      },
      "13": {
        loc: {
          start: {
            line: 188,
            column: 24
          },
          end: {
            line: 188,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 24
          },
          end: {
            line: 188,
            column: 35
          }
        }, {
          start: {
            line: 188,
            column: 39
          },
          end: {
            line: 188,
            column: 48
          }
        }],
        line: 188
      },
      "14": {
        loc: {
          start: {
            line: 203,
            column: 28
          },
          end: {
            line: 203,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 28
          },
          end: {
            line: 203,
            column: 59
          }
        }, {
          start: {
            line: 203,
            column: 63
          },
          end: {
            line: 203,
            column: 65
          }
        }],
        line: 203
      },
      "15": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "16": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "17": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "18": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 243,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 243,
            column: 38
          }
        }, {
          start: {
            line: 243,
            column: 42
          },
          end: {
            line: 243,
            column: 72
          }
        }],
        line: 243
      },
      "19": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 265,
            column: 22
          }
        }, {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 270,
            column: 22
          }
        }, {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 275,
            column: 22
          }
        }, {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 280,
            column: 22
          }
        }, {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 34
          }
        }],
        line: 260
      },
      "20": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: 290,
            column: 13
          },
          end: {
            line: 292,
            column: 9
          }
        }],
        line: 287
      },
      "21": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "22": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 319,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 319,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "23": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "24": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "25": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "26": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "27": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 362,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 362,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "28": {
        loc: {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 367,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 367,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "29": {
        loc: {
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 369,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 369,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "30": {
        loc: {
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 371,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 371,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "31": {
        loc: {
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 370,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 370,
            column: 26
          }
        }, {
          start: {
            line: 370,
            column: 30
          },
          end: {
            line: 370,
            column: 46
          }
        }],
        line: 370
      },
      "32": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 373,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 373,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "33": {
        loc: {
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "34": {
        loc: {
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 386,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 386,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "35": {
        loc: {
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "36": {
        loc: {
          start: {
            line: 393,
            column: 55
          },
          end: {
            line: 393,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 55
          },
          end: {
            line: 393,
            column: 67
          }
        }, {
          start: {
            line: 393,
            column: 71
          },
          end: {
            line: 393,
            column: 104
          }
        }],
        line: 393
      },
      "37": {
        loc: {
          start: {
            line: 396,
            column: 55
          },
          end: {
            line: 396,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 55
          },
          end: {
            line: 396,
            column: 70
          }
        }, {
          start: {
            line: 396,
            column: 74
          },
          end: {
            line: 396,
            column: 99
          }
        }],
        line: 396
      },
      "38": {
        loc: {
          start: {
            line: 421,
            column: 31
          },
          end: {
            line: 432,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 421,
            column: 31
          },
          end: {
            line: 421,
            column: 68
          }
        }, {
          start: {
            line: 421,
            column: 72
          },
          end: {
            line: 432,
            column: 9
          }
        }],
        line: 421
      },
      "39": {
        loc: {
          start: {
            line: 444,
            column: 32
          },
          end: {
            line: 444,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 32
          },
          end: {
            line: 444,
            column: 48
          }
        }, {
          start: {
            line: 444,
            column: 52
          },
          end: {
            line: 444,
            column: 53
          }
        }],
        line: 444
      },
      "40": {
        loc: {
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "41": {
        loc: {
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 488
      },
      "42": {
        loc: {
          start: {
            line: 498,
            column: 22
          },
          end: {
            line: 498,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 498,
            column: 30
          },
          end: {
            line: 498,
            column: 31
          }
        }],
        line: 498
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityMonitor.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityMonitor.ts"],
      sourcesContent: ["/**\n * Security Monitor - Real-time Security Monitoring and Alerting\n * Provides continuous security monitoring for the neural agent system\n * \n * Features:\n * - Real-time threat detection\n * - Performance anomaly detection\n * - Security metric collection\n * - Automated incident response\n * - Dashboard integration\n */\n\nimport { EventEmitter } from 'events';\nimport { performance } from 'perf_hooks';\nimport type { SecurityValidator, AuditLog } from './SecurityValidator';\n\nexport interface SecurityMetrics {\n  timestamp: number;\n  systemHealth: number; // 0-100\n  threatLevel: 'low' | 'medium' | 'high' | 'critical';\n  activeThreats: number;\n  blockedAttacks: number;\n  averageResponseTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  networkConnections: number;\n  failedAuthentications: number;\n}\n\nexport interface ThreatDetection {\n  id: string;\n  type: 'sql_injection' | 'buffer_overflow' | 'dos_attack' | 'data_corruption' | 'unauthorized_access';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source: string;\n  timestamp: number;\n  description: string;\n  evidence: any;\n  mitigated: boolean;\n  response?: string;\n}\n\nexport interface SecurityAlert {\n  id: string;\n  timestamp: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  message: string;\n  details: any;\n  acknowledged: boolean;\n  resolvedAt?: number;\n}\n\nexport class SecurityMonitor extends EventEmitter {\n  private isRunning: boolean = false;\n  private securityValidator: SecurityValidator;\n  private metrics: SecurityMetrics[] = [];\n  private threats: ThreatDetection[] = [];\n  private alerts: SecurityAlert[] = [];\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private alertThresholds: any;\n\n  constructor(securityValidator: SecurityValidator) {\n    super();\n    this.securityValidator = securityValidator;\n    \n    this.alertThresholds = {\n      failedAuthAttempts: 5,\n      responseTimeMs: 1000,\n      memoryUsageMB: 500,\n      cpuUsagePercent: 80,\n      threatLevelEscalation: 10 // minutes\n    };\n  }\n\n  /**\n   * Start security monitoring\n   */\n  start(): void {\n    if (this.isRunning) {\n      console.warn('\u26A0\uFE0F Security monitor already running');\n      return;\n    }\n\n    console.log('\uD83D\uDEE1\uFE0F Starting security monitoring...');\n    this.isRunning = true;\n\n    // Start metrics collection\n    this.monitoringInterval = setInterval(() => {\n      this.collectMetrics();\n      this.analyzeThreats();\n      this.checkAlertConditions();\n    }, 5000); // Collect metrics every 5 seconds\n\n    // Set up audit log monitoring\n    this.setupAuditLogMonitoring();\n\n    this.emit('monitoring_started');\n    console.log('\u2705 Security monitoring active');\n  }\n\n  /**\n   * Stop security monitoring\n   */\n  stop(): void {\n    if (!this.isRunning) return;\n\n    console.log('\uD83D\uDED1 Stopping security monitoring...');\n    \n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    this.isRunning = false;\n    this.emit('monitoring_stopped');\n    console.log('\u2705 Security monitoring stopped');\n  }\n\n  /**\n   * Collect current security metrics\n   */\n  private collectMetrics(): void {\n    const startTime = performance.now();\n\n    // Get system metrics\n    const memoryUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n\n    // Calculate threat level\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 300000 // Last 5 minutes\n    );\n    \n    const threatLevel = this.calculateThreatLevel(recentThreats);\n    const systemHealth = this.calculateSystemHealth();\n\n    const metrics: SecurityMetrics = {\n      timestamp: Date.now(),\n      systemHealth,\n      threatLevel,\n      activeThreats: recentThreats.filter(t => !t.mitigated).length,\n      blockedAttacks: recentThreats.filter(t => t.mitigated).length,\n      averageResponseTime: performance.now() - startTime,\n      memoryUsage: memoryUsage.heapUsed / 1024 / 1024, // MB\n      cpuUsage: (cpuUsage.user + cpuUsage.system) / 1000, // ms\n      networkConnections: 0, // Would be implemented with actual network monitoring\n      failedAuthentications: this.getRecentFailedAuth()\n    };\n\n    this.metrics.push(metrics);\n\n    // Keep only last 1000 metrics (about 1.4 hours at 5s intervals)\n    if (this.metrics.length > 1000) {\n      this.metrics.splice(0, 100);\n    }\n\n    this.emit('metrics_collected', metrics);\n  }\n\n  /**\n   * Analyze threats and detect patterns\n   */\n  private analyzeThreats(): void {\n    const recentAuditLogs = this.securityValidator.getAuditLogs({\n      startTime: Date.now() - 60000 // Last minute\n    });\n\n    for (const log of recentAuditLogs) {\n      this.analyzeAuditLogForThreats(log);\n    }\n\n    // Detect threat patterns\n    this.detectThreatPatterns();\n  }\n\n  /**\n   * Analyze individual audit log for threats\n   */\n  private analyzeAuditLogForThreats(log: AuditLog): void {\n    // SQL injection detection\n    if (log.action === 'sql_validation' && log.details.errors > 0) {\n      this.reportThreat({\n        type: 'sql_injection',\n        severity: 'high',\n        source: log.ipAddress || 'unknown',\n        description: 'SQL injection attempt detected',\n        evidence: log.details\n      });\n    }\n\n    // Rate limit violations (potential DoS)\n    if (log.action === 'rate_limit_exceeded') {\n      this.reportThreat({\n        type: 'dos_attack',\n        severity: 'medium',\n        source: log.details.identifier,\n        description: 'Rate limit exceeded - potential DoS attack',\n        evidence: log.details\n      });\n    }\n\n    // Neural weight corruption\n    if (log.action === 'weight_validation' && !log.details.checksumMatch) {\n      this.reportThreat({\n        type: 'data_corruption',\n        severity: 'critical',\n        source: log.agentId || 'unknown',\n        description: 'Neural weight corruption detected',\n        evidence: log.details\n      });\n    }\n\n    // Suspicious neural inputs\n    if (log.action === 'neural_input_validation' && log.details.extremeValues > 0) {\n      this.reportThreat({\n        type: 'buffer_overflow',\n        severity: 'medium',\n        source: log.agentId || 'unknown',\n        description: 'Potentially malicious neural input detected',\n        evidence: log.details\n      });\n    }\n  }\n\n  /**\n   * Detect threat patterns across multiple events\n   */\n  private detectThreatPatterns(): void {\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 300000 // Last 5 minutes\n    );\n\n    // Detect coordinated attacks\n    const sourceGroups = new Map<string, ThreatDetection[]>();\n    for (const threat of recentThreats) {\n      const threats = sourceGroups.get(threat.source) || [];\n      threats.push(threat);\n      sourceGroups.set(threat.source, threats);\n    }\n\n    // Alert for multiple threats from same source\n    for (const [source, threats] of sourceGroups.entries()) {\n      if (threats.length >= 3) {\n        this.createAlert({\n          severity: 'high',\n          category: 'coordinated_attack',\n          message: `Multiple threats detected from source: ${source}`,\n          details: { source, threatCount: threats.length, threats }\n        });\n      }\n    }\n\n    // Detect escalating threat patterns\n    const criticalThreats = recentThreats.filter(t => t.severity === 'critical');\n    if (criticalThreats.length >= 2) {\n      this.createAlert({\n        severity: 'critical',\n        category: 'threat_escalation',\n        message: 'Multiple critical security threats detected',\n        details: { criticalThreats }\n      });\n    }\n  }\n\n  /**\n   * Report a new threat detection\n   */\n  private reportThreat(threat: Omit<ThreatDetection, 'id' | 'timestamp' | 'mitigated'>): void {\n    const fullThreat: ThreatDetection = {\n      id: `threat_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      timestamp: Date.now(),\n      mitigated: false,\n      ...threat\n    };\n\n    this.threats.push(fullThreat);\n\n    // Auto-mitigation for certain threat types\n    this.attemptAutoMitigation(fullThreat);\n\n    // Create alert for high/critical threats\n    if (threat.severity === 'high' || threat.severity === 'critical') {\n      this.createAlert({\n        severity: threat.severity,\n        category: 'threat_detected',\n        message: `${threat.type} detected: ${threat.description}`,\n        details: fullThreat\n      });\n    }\n\n    this.emit('threat_detected', fullThreat);\n    \n    console.log(`\uD83D\uDEA8 Security threat detected: ${fullThreat.id} (${threat.severity})`);\n  }\n\n  /**\n   * Attempt automatic mitigation of threats\n   */\n  private attemptAutoMitigation(threat: ThreatDetection): void {\n    let mitigated = false;\n    let response = '';\n\n    switch (threat.type) {\n      case 'dos_attack':\n        // Automatically block source for DoS attacks\n        response = `Rate limiting enforced for source: ${threat.source}`;\n        mitigated = true;\n        break;\n\n      case 'sql_injection':\n        // Log and sanitize - already handled by validator\n        response = 'Input sanitized and logged';\n        mitigated = true;\n        break;\n\n      case 'data_corruption':\n        // Critical - require manual intervention\n        response = 'Manual intervention required';\n        mitigated = false;\n        break;\n\n      case 'buffer_overflow':\n        // Sanitize inputs\n        response = 'Input validation enforced';\n        mitigated = true;\n        break;\n\n      default:\n        response = 'No automatic mitigation available';\n        mitigated = false;\n    }\n\n    threat.mitigated = mitigated;\n    threat.response = response;\n\n    if (mitigated) {\n      console.log(`\u2705 Threat ${threat.id} automatically mitigated: ${response}`);\n    } else {\n      console.log(`\u26A0\uFE0F Threat ${threat.id} requires manual intervention: ${response}`);\n    }\n  }\n\n  /**\n   * Create a security alert\n   */\n  private createAlert(alert: Omit<SecurityAlert, 'id' | 'timestamp' | 'acknowledged'>): void {\n    const fullAlert: SecurityAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      timestamp: Date.now(),\n      acknowledged: false,\n      ...alert\n    };\n\n    this.alerts.push(fullAlert);\n\n    // Keep only last 500 alerts\n    if (this.alerts.length > 500) {\n      this.alerts.splice(0, 50);\n    }\n\n    this.emit('alert_created', fullAlert);\n\n    const severity = alert.severity.toUpperCase();\n    console.log(`\uD83D\uDEA8 ${severity} SECURITY ALERT: ${alert.message}`);\n  }\n\n  /**\n   * Check conditions that should trigger alerts\n   */\n  private checkAlertConditions(): void {\n    const currentMetrics = this.metrics[this.metrics.length - 1];\n    if (!currentMetrics) return;\n\n    // Memory usage alert\n    if (currentMetrics.memoryUsage > this.alertThresholds.memoryUsageMB) {\n      this.createAlert({\n        severity: 'medium',\n        category: 'resource_usage',\n        message: `High memory usage: ${currentMetrics.memoryUsage.toFixed(1)}MB`,\n        details: { memoryUsage: currentMetrics.memoryUsage }\n      });\n    }\n\n    // Response time alert\n    if (currentMetrics.averageResponseTime > this.alertThresholds.responseTimeMs) {\n      this.createAlert({\n        severity: 'medium',\n        category: 'performance',\n        message: `Slow response time: ${currentMetrics.averageResponseTime.toFixed(1)}ms`,\n        details: { responseTime: currentMetrics.averageResponseTime }\n      });\n    }\n\n    // System health alert\n    if (currentMetrics.systemHealth < 50) {\n      this.createAlert({\n        severity: 'high',\n        category: 'system_health',\n        message: `Low system health: ${currentMetrics.systemHealth}%`,\n        details: { systemHealth: currentMetrics.systemHealth }\n      });\n    }\n\n    // Threat level escalation\n    if (currentMetrics.threatLevel === 'critical') {\n      this.createAlert({\n        severity: 'critical',\n        category: 'threat_escalation',\n        message: 'Critical threat level reached',\n        details: { threatLevel: currentMetrics.threatLevel, activeThreats: currentMetrics.activeThreats }\n      });\n    }\n  }\n\n  /**\n   * Calculate overall threat level\n   */\n  private calculateThreatLevel(recentThreats: ThreatDetection[]): 'low' | 'medium' | 'high' | 'critical' {\n    if (recentThreats.length === 0) return 'low';\n\n    const criticalCount = recentThreats.filter(t => t.severity === 'critical').length;\n    const highCount = recentThreats.filter(t => t.severity === 'high').length;\n    const mediumCount = recentThreats.filter(t => t.severity === 'medium').length;\n\n    if (criticalCount > 0) return 'critical';\n    if (highCount >= 2) return 'critical';\n    if (highCount >= 1 || mediumCount >= 3) return 'high';\n    if (mediumCount >= 1) return 'medium';\n    \n    return 'low';\n  }\n\n  /**\n   * Calculate system health score\n   */\n  private calculateSystemHealth(): number {\n    let score = 100;\n\n    const currentMetrics = this.metrics[this.metrics.length - 1];\n    if (currentMetrics) {\n      // Deduct for high memory usage\n      if (currentMetrics.memoryUsage > 400) {\n        score -= Math.min(30, (currentMetrics.memoryUsage - 400) / 10);\n      }\n\n      // Deduct for slow response times\n      if (currentMetrics.averageResponseTime > 500) {\n        score -= Math.min(20, (currentMetrics.averageResponseTime - 500) / 50);\n      }\n    }\n\n    // Deduct for active threats\n    const activeThreats = this.threats.filter(t => \n      !t.mitigated && Date.now() - t.timestamp < 300000\n    );\n    score -= activeThreats.length * 10;\n\n    // Deduct for unacknowledged critical alerts\n    const criticalAlerts = this.alerts.filter(a => \n      !a.acknowledged && a.severity === 'critical'\n    );\n    score -= criticalAlerts.length * 15;\n\n    return Math.max(0, Math.round(score));\n  }\n\n  /**\n   * Get recent failed authentication count\n   */\n  private getRecentFailedAuth(): number {\n    const failedAuthLogs = this.securityValidator.getAuditLogs({\n      action: 'authentication_failed',\n      startTime: Date.now() - 300000 // Last 5 minutes\n    });\n    return failedAuthLogs.length;\n  }\n\n  /**\n   * Set up monitoring of audit logs\n   */\n  private setupAuditLogMonitoring(): void {\n    // In a real implementation, this would set up real-time log monitoring\n    // For now, we rely on the periodic analysis in collectMetrics\n  }\n\n  /**\n   * Get current security dashboard data\n   */\n  getSecurityDashboard(): {\n    currentMetrics: SecurityMetrics;\n    threatSummary: { total: number; by_severity: any; by_type: any };\n    alertSummary: { total: number; unacknowledged: number; by_severity: any };\n    recentActivity: (ThreatDetection | SecurityAlert)[];\n  } {\n    const currentMetrics = this.metrics[this.metrics.length - 1] || {\n      timestamp: Date.now(),\n      systemHealth: 100,\n      threatLevel: 'low' as const,\n      activeThreats: 0,\n      blockedAttacks: 0,\n      averageResponseTime: 0,\n      memoryUsage: 0,\n      cpuUsage: 0,\n      networkConnections: 0,\n      failedAuthentications: 0\n    };\n\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 3600000 // Last hour\n    );\n\n    const recentAlerts = this.alerts.filter(a => \n      Date.now() - a.timestamp < 3600000 // Last hour\n    );\n\n    const threatBySeverity = {\n      critical: recentThreats.filter(t => t.severity === 'critical').length,\n      high: recentThreats.filter(t => t.severity === 'high').length,\n      medium: recentThreats.filter(t => t.severity === 'medium').length,\n      low: recentThreats.filter(t => t.severity === 'low').length\n    };\n\n    const threatByType = recentThreats.reduce((acc, threat) => {\n      acc[threat.type] = (acc[threat.type] || 0) + 1;\n      return acc;\n    }, {} as any);\n\n    const alertBySeverity = {\n      critical: recentAlerts.filter(a => a.severity === 'critical').length,\n      high: recentAlerts.filter(a => a.severity === 'high').length,\n      medium: recentAlerts.filter(a => a.severity === 'medium').length,\n      low: recentAlerts.filter(a => a.severity === 'low').length\n    };\n\n    const recentActivity = [...recentThreats, ...recentAlerts]\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, 20);\n\n    return {\n      currentMetrics,\n      threatSummary: {\n        total: recentThreats.length,\n        by_severity: threatBySeverity,\n        by_type: threatByType\n      },\n      alertSummary: {\n        total: recentAlerts.length,\n        unacknowledged: recentAlerts.filter(a => !a.acknowledged).length,\n        by_severity: alertBySeverity\n      },\n      recentActivity\n    };\n  }\n\n  /**\n   * Acknowledge an alert\n   */\n  acknowledgeAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      this.emit('alert_acknowledged', alert);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Resolve an alert\n   */\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.resolvedAt = Date.now();\n      this.emit('alert_resolved', alert);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get security metrics history\n   */\n  getMetricsHistory(hours: number = 1): SecurityMetrics[] {\n    const cutoff = Date.now() - (hours * 60 * 60 * 1000);\n    return this.metrics.filter(m => m.timestamp > cutoff);\n  }\n\n  /**\n   * Clean up old data\n   */\n  cleanup(): void {\n    const cutoff = Date.now() - (24 * 60 * 60 * 1000); // 24 hours\n\n    this.threats = this.threats.filter(t => t.timestamp > cutoff);\n    this.alerts = this.alerts.filter(a => a.timestamp > cutoff);\n    this.metrics = this.metrics.filter(m => m.timestamp > cutoff);\n\n    console.log('\uD83E\uDDF9 Security monitor cleanup completed');\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6b46f5c1b69cb47abfb0bab447586db42aa79665"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_t9dsayte4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_t9dsayte4();
/**
 * Security Monitor - Real-time Security Monitoring and Alerting
 * Provides continuous security monitoring for the neural agent system
 *
 * Features:
 * - Real-time threat detection
 * - Performance anomaly detection
 * - Security metric collection
 * - Automated incident response
 * - Dashboard integration
 */
import { EventEmitter } from 'events';
import { performance } from 'perf_hooks';
export class SecurityMonitor extends EventEmitter {
  constructor(securityValidator) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[0]++;
    cov_t9dsayte4().s[0]++;
    super();
    /* istanbul ignore next */
    cov_t9dsayte4().s[1]++;
    Object.defineProperty(this, "isRunning", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[2]++;
    Object.defineProperty(this, "securityValidator", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[3]++;
    Object.defineProperty(this, "metrics", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[4]++;
    Object.defineProperty(this, "threats", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[5]++;
    Object.defineProperty(this, "alerts", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[6]++;
    Object.defineProperty(this, "monitoringInterval", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[7]++;
    Object.defineProperty(this, "alertThresholds", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[8]++;
    this.securityValidator = securityValidator;
    /* istanbul ignore next */
    cov_t9dsayte4().s[9]++;
    this.alertThresholds = {
      failedAuthAttempts: 5,
      responseTimeMs: 1000,
      memoryUsageMB: 500,
      cpuUsagePercent: 80,
      threatLevelEscalation: 10 // minutes
    };
  }
  /**
   * Start security monitoring
   */
  start() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[1]++;
    cov_t9dsayte4().s[10]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[0][0]++;
      cov_t9dsayte4().s[11]++;
      console.warn('⚠️ Security monitor already running');
      /* istanbul ignore next */
      cov_t9dsayte4().s[12]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[0][1]++;
    }
    cov_t9dsayte4().s[13]++;
    console.log('🛡️ Starting security monitoring...');
    /* istanbul ignore next */
    cov_t9dsayte4().s[14]++;
    this.isRunning = true;
    // Start metrics collection
    /* istanbul ignore next */
    cov_t9dsayte4().s[15]++;
    this.monitoringInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[2]++;
      cov_t9dsayte4().s[16]++;
      this.collectMetrics();
      /* istanbul ignore next */
      cov_t9dsayte4().s[17]++;
      this.analyzeThreats();
      /* istanbul ignore next */
      cov_t9dsayte4().s[18]++;
      this.checkAlertConditions();
    }, 5000); // Collect metrics every 5 seconds
    // Set up audit log monitoring
    /* istanbul ignore next */
    cov_t9dsayte4().s[19]++;
    this.setupAuditLogMonitoring();
    /* istanbul ignore next */
    cov_t9dsayte4().s[20]++;
    this.emit('monitoring_started');
    /* istanbul ignore next */
    cov_t9dsayte4().s[21]++;
    console.log('✅ Security monitoring active');
  }
  /**
   * Stop security monitoring
   */
  stop() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[3]++;
    cov_t9dsayte4().s[22]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[1][0]++;
      cov_t9dsayte4().s[23]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[1][1]++;
    }
    cov_t9dsayte4().s[24]++;
    console.log('🛑 Stopping security monitoring...');
    /* istanbul ignore next */
    cov_t9dsayte4().s[25]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[2][0]++;
      cov_t9dsayte4().s[26]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_t9dsayte4().s[27]++;
      this.monitoringInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[2][1]++;
    }
    cov_t9dsayte4().s[28]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_t9dsayte4().s[29]++;
    this.emit('monitoring_stopped');
    /* istanbul ignore next */
    cov_t9dsayte4().s[30]++;
    console.log('✅ Security monitoring stopped');
  }
  /**
   * Collect current security metrics
   */
  collectMetrics() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[4]++;
    const startTime =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[31]++, performance.now());
    // Get system metrics
    const memoryUsage =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[32]++, process.memoryUsage());
    const cpuUsage =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[33]++, process.cpuUsage());
    // Calculate threat level
    const recentThreats =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[34]++, this.threats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[5]++;
      cov_t9dsayte4().s[35]++;
      return Date.now() - t.timestamp < 300000;
    } // Last 5 minutes
    ));
    const threatLevel =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[36]++, this.calculateThreatLevel(recentThreats));
    const systemHealth =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[37]++, this.calculateSystemHealth());
    const metrics =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[38]++, {
      timestamp: Date.now(),
      systemHealth,
      threatLevel,
      activeThreats: recentThreats.filter(t => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[6]++;
        cov_t9dsayte4().s[39]++;
        return !t.mitigated;
      }).length,
      blockedAttacks: recentThreats.filter(t => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[7]++;
        cov_t9dsayte4().s[40]++;
        return t.mitigated;
      }).length,
      averageResponseTime: performance.now() - startTime,
      memoryUsage: memoryUsage.heapUsed / 1024 / 1024,
      // MB
      cpuUsage: (cpuUsage.user + cpuUsage.system) / 1000,
      // ms
      networkConnections: 0,
      // Would be implemented with actual network monitoring
      failedAuthentications: this.getRecentFailedAuth()
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[41]++;
    this.metrics.push(metrics);
    // Keep only last 1000 metrics (about 1.4 hours at 5s intervals)
    /* istanbul ignore next */
    cov_t9dsayte4().s[42]++;
    if (this.metrics.length > 1000) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[3][0]++;
      cov_t9dsayte4().s[43]++;
      this.metrics.splice(0, 100);
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[3][1]++;
    }
    cov_t9dsayte4().s[44]++;
    this.emit('metrics_collected', metrics);
  }
  /**
   * Analyze threats and detect patterns
   */
  analyzeThreats() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[8]++;
    const recentAuditLogs =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[45]++, this.securityValidator.getAuditLogs({
      startTime: Date.now() - 60000 // Last minute
    }));
    /* istanbul ignore next */
    cov_t9dsayte4().s[46]++;
    for (const log of recentAuditLogs) {
      /* istanbul ignore next */
      cov_t9dsayte4().s[47]++;
      this.analyzeAuditLogForThreats(log);
    }
    // Detect threat patterns
    /* istanbul ignore next */
    cov_t9dsayte4().s[48]++;
    this.detectThreatPatterns();
  }
  /**
   * Analyze individual audit log for threats
   */
  analyzeAuditLogForThreats(log) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[9]++;
    cov_t9dsayte4().s[49]++;
    // SQL injection detection
    if (
    /* istanbul ignore next */
    (cov_t9dsayte4().b[5][0]++, log.action === 'sql_validation') &&
    /* istanbul ignore next */
    (cov_t9dsayte4().b[5][1]++, log.details.errors > 0)) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[4][0]++;
      cov_t9dsayte4().s[50]++;
      this.reportThreat({
        type: 'sql_injection',
        severity: 'high',
        source:
        /* istanbul ignore next */
        (cov_t9dsayte4().b[6][0]++, log.ipAddress) ||
        /* istanbul ignore next */
        (cov_t9dsayte4().b[6][1]++, 'unknown'),
        description: 'SQL injection attempt detected',
        evidence: log.details
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[4][1]++;
    }
    // Rate limit violations (potential DoS)
    cov_t9dsayte4().s[51]++;
    if (log.action === 'rate_limit_exceeded') {
      /* istanbul ignore next */
      cov_t9dsayte4().b[7][0]++;
      cov_t9dsayte4().s[52]++;
      this.reportThreat({
        type: 'dos_attack',
        severity: 'medium',
        source: log.details.identifier,
        description: 'Rate limit exceeded - potential DoS attack',
        evidence: log.details
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[7][1]++;
    }
    // Neural weight corruption
    cov_t9dsayte4().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_t9dsayte4().b[9][0]++, log.action === 'weight_validation') &&
    /* istanbul ignore next */
    (cov_t9dsayte4().b[9][1]++, !log.details.checksumMatch)) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[8][0]++;
      cov_t9dsayte4().s[54]++;
      this.reportThreat({
        type: 'data_corruption',
        severity: 'critical',
        source:
        /* istanbul ignore next */
        (cov_t9dsayte4().b[10][0]++, log.agentId) ||
        /* istanbul ignore next */
        (cov_t9dsayte4().b[10][1]++, 'unknown'),
        description: 'Neural weight corruption detected',
        evidence: log.details
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[8][1]++;
    }
    // Suspicious neural inputs
    cov_t9dsayte4().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_t9dsayte4().b[12][0]++, log.action === 'neural_input_validation') &&
    /* istanbul ignore next */
    (cov_t9dsayte4().b[12][1]++, log.details.extremeValues > 0)) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[11][0]++;
      cov_t9dsayte4().s[56]++;
      this.reportThreat({
        type: 'buffer_overflow',
        severity: 'medium',
        source:
        /* istanbul ignore next */
        (cov_t9dsayte4().b[13][0]++, log.agentId) ||
        /* istanbul ignore next */
        (cov_t9dsayte4().b[13][1]++, 'unknown'),
        description: 'Potentially malicious neural input detected',
        evidence: log.details
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[11][1]++;
    }
  }
  /**
   * Detect threat patterns across multiple events
   */
  detectThreatPatterns() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[10]++;
    const recentThreats =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[57]++, this.threats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[11]++;
      cov_t9dsayte4().s[58]++;
      return Date.now() - t.timestamp < 300000;
    } // Last 5 minutes
    ));
    // Detect coordinated attacks
    const sourceGroups =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[59]++, new Map());
    /* istanbul ignore next */
    cov_t9dsayte4().s[60]++;
    for (const threat of recentThreats) {
      const threats =
      /* istanbul ignore next */
      (cov_t9dsayte4().s[61]++,
      /* istanbul ignore next */
      (cov_t9dsayte4().b[14][0]++, sourceGroups.get(threat.source)) ||
      /* istanbul ignore next */
      (cov_t9dsayte4().b[14][1]++, []));
      /* istanbul ignore next */
      cov_t9dsayte4().s[62]++;
      threats.push(threat);
      /* istanbul ignore next */
      cov_t9dsayte4().s[63]++;
      sourceGroups.set(threat.source, threats);
    }
    // Alert for multiple threats from same source
    /* istanbul ignore next */
    cov_t9dsayte4().s[64]++;
    for (const [source, threats] of sourceGroups.entries()) {
      /* istanbul ignore next */
      cov_t9dsayte4().s[65]++;
      if (threats.length >= 3) {
        /* istanbul ignore next */
        cov_t9dsayte4().b[15][0]++;
        cov_t9dsayte4().s[66]++;
        this.createAlert({
          severity: 'high',
          category: 'coordinated_attack',
          message: `Multiple threats detected from source: ${source}`,
          details: {
            source,
            threatCount: threats.length,
            threats
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_t9dsayte4().b[15][1]++;
      }
    }
    // Detect escalating threat patterns
    const criticalThreats =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[67]++, recentThreats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[12]++;
      cov_t9dsayte4().s[68]++;
      return t.severity === 'critical';
    }));
    /* istanbul ignore next */
    cov_t9dsayte4().s[69]++;
    if (criticalThreats.length >= 2) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[16][0]++;
      cov_t9dsayte4().s[70]++;
      this.createAlert({
        severity: 'critical',
        category: 'threat_escalation',
        message: 'Multiple critical security threats detected',
        details: {
          criticalThreats
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[16][1]++;
    }
  }
  /**
   * Report a new threat detection
   */
  reportThreat(threat) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[13]++;
    const fullThreat =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[71]++, {
      id: `threat_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
      timestamp: Date.now(),
      mitigated: false,
      ...threat
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[72]++;
    this.threats.push(fullThreat);
    // Auto-mitigation for certain threat types
    /* istanbul ignore next */
    cov_t9dsayte4().s[73]++;
    this.attemptAutoMitigation(fullThreat);
    // Create alert for high/critical threats
    /* istanbul ignore next */
    cov_t9dsayte4().s[74]++;
    if (
    /* istanbul ignore next */
    (cov_t9dsayte4().b[18][0]++, threat.severity === 'high') ||
    /* istanbul ignore next */
    (cov_t9dsayte4().b[18][1]++, threat.severity === 'critical')) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[17][0]++;
      cov_t9dsayte4().s[75]++;
      this.createAlert({
        severity: threat.severity,
        category: 'threat_detected',
        message: `${threat.type} detected: ${threat.description}`,
        details: fullThreat
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[17][1]++;
    }
    cov_t9dsayte4().s[76]++;
    this.emit('threat_detected', fullThreat);
    /* istanbul ignore next */
    cov_t9dsayte4().s[77]++;
    console.log(`🚨 Security threat detected: ${fullThreat.id} (${threat.severity})`);
  }
  /**
   * Attempt automatic mitigation of threats
   */
  attemptAutoMitigation(threat) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[14]++;
    let mitigated =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[78]++, false);
    let response =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[79]++, '');
    /* istanbul ignore next */
    cov_t9dsayte4().s[80]++;
    switch (threat.type) {
      case 'dos_attack':
        /* istanbul ignore next */
        cov_t9dsayte4().b[19][0]++;
        cov_t9dsayte4().s[81]++;
        // Automatically block source for DoS attacks
        response = `Rate limiting enforced for source: ${threat.source}`;
        /* istanbul ignore next */
        cov_t9dsayte4().s[82]++;
        mitigated = true;
        /* istanbul ignore next */
        cov_t9dsayte4().s[83]++;
        break;
      case 'sql_injection':
        /* istanbul ignore next */
        cov_t9dsayte4().b[19][1]++;
        cov_t9dsayte4().s[84]++;
        // Log and sanitize - already handled by validator
        response = 'Input sanitized and logged';
        /* istanbul ignore next */
        cov_t9dsayte4().s[85]++;
        mitigated = true;
        /* istanbul ignore next */
        cov_t9dsayte4().s[86]++;
        break;
      case 'data_corruption':
        /* istanbul ignore next */
        cov_t9dsayte4().b[19][2]++;
        cov_t9dsayte4().s[87]++;
        // Critical - require manual intervention
        response = 'Manual intervention required';
        /* istanbul ignore next */
        cov_t9dsayte4().s[88]++;
        mitigated = false;
        /* istanbul ignore next */
        cov_t9dsayte4().s[89]++;
        break;
      case 'buffer_overflow':
        /* istanbul ignore next */
        cov_t9dsayte4().b[19][3]++;
        cov_t9dsayte4().s[90]++;
        // Sanitize inputs
        response = 'Input validation enforced';
        /* istanbul ignore next */
        cov_t9dsayte4().s[91]++;
        mitigated = true;
        /* istanbul ignore next */
        cov_t9dsayte4().s[92]++;
        break;
      default:
        /* istanbul ignore next */
        cov_t9dsayte4().b[19][4]++;
        cov_t9dsayte4().s[93]++;
        response = 'No automatic mitigation available';
        /* istanbul ignore next */
        cov_t9dsayte4().s[94]++;
        mitigated = false;
    }
    /* istanbul ignore next */
    cov_t9dsayte4().s[95]++;
    threat.mitigated = mitigated;
    /* istanbul ignore next */
    cov_t9dsayte4().s[96]++;
    threat.response = response;
    /* istanbul ignore next */
    cov_t9dsayte4().s[97]++;
    if (mitigated) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[20][0]++;
      cov_t9dsayte4().s[98]++;
      console.log(`✅ Threat ${threat.id} automatically mitigated: ${response}`);
    } else {
      /* istanbul ignore next */
      cov_t9dsayte4().b[20][1]++;
      cov_t9dsayte4().s[99]++;
      console.log(`⚠️ Threat ${threat.id} requires manual intervention: ${response}`);
    }
  }
  /**
   * Create a security alert
   */
  createAlert(alert) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[15]++;
    const fullAlert =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[100]++, {
      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
      timestamp: Date.now(),
      acknowledged: false,
      ...alert
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[101]++;
    this.alerts.push(fullAlert);
    // Keep only last 500 alerts
    /* istanbul ignore next */
    cov_t9dsayte4().s[102]++;
    if (this.alerts.length > 500) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[21][0]++;
      cov_t9dsayte4().s[103]++;
      this.alerts.splice(0, 50);
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[21][1]++;
    }
    cov_t9dsayte4().s[104]++;
    this.emit('alert_created', fullAlert);
    const severity =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[105]++, alert.severity.toUpperCase());
    /* istanbul ignore next */
    cov_t9dsayte4().s[106]++;
    console.log(`🚨 ${severity} SECURITY ALERT: ${alert.message}`);
  }
  /**
   * Check conditions that should trigger alerts
   */
  checkAlertConditions() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[16]++;
    const currentMetrics =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[107]++, this.metrics[this.metrics.length - 1]);
    /* istanbul ignore next */
    cov_t9dsayte4().s[108]++;
    if (!currentMetrics) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[22][0]++;
      cov_t9dsayte4().s[109]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[22][1]++;
    }
    // Memory usage alert
    cov_t9dsayte4().s[110]++;
    if (currentMetrics.memoryUsage > this.alertThresholds.memoryUsageMB) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[23][0]++;
      cov_t9dsayte4().s[111]++;
      this.createAlert({
        severity: 'medium',
        category: 'resource_usage',
        message: `High memory usage: ${currentMetrics.memoryUsage.toFixed(1)}MB`,
        details: {
          memoryUsage: currentMetrics.memoryUsage
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[23][1]++;
    }
    // Response time alert
    cov_t9dsayte4().s[112]++;
    if (currentMetrics.averageResponseTime > this.alertThresholds.responseTimeMs) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[24][0]++;
      cov_t9dsayte4().s[113]++;
      this.createAlert({
        severity: 'medium',
        category: 'performance',
        message: `Slow response time: ${currentMetrics.averageResponseTime.toFixed(1)}ms`,
        details: {
          responseTime: currentMetrics.averageResponseTime
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[24][1]++;
    }
    // System health alert
    cov_t9dsayte4().s[114]++;
    if (currentMetrics.systemHealth < 50) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[25][0]++;
      cov_t9dsayte4().s[115]++;
      this.createAlert({
        severity: 'high',
        category: 'system_health',
        message: `Low system health: ${currentMetrics.systemHealth}%`,
        details: {
          systemHealth: currentMetrics.systemHealth
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[25][1]++;
    }
    // Threat level escalation
    cov_t9dsayte4().s[116]++;
    if (currentMetrics.threatLevel === 'critical') {
      /* istanbul ignore next */
      cov_t9dsayte4().b[26][0]++;
      cov_t9dsayte4().s[117]++;
      this.createAlert({
        severity: 'critical',
        category: 'threat_escalation',
        message: 'Critical threat level reached',
        details: {
          threatLevel: currentMetrics.threatLevel,
          activeThreats: currentMetrics.activeThreats
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[26][1]++;
    }
  }
  /**
   * Calculate overall threat level
   */
  calculateThreatLevel(recentThreats) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[17]++;
    cov_t9dsayte4().s[118]++;
    if (recentThreats.length === 0) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[27][0]++;
      cov_t9dsayte4().s[119]++;
      return 'low';
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[27][1]++;
    }
    const criticalCount =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[120]++, recentThreats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[18]++;
      cov_t9dsayte4().s[121]++;
      return t.severity === 'critical';
    }).length);
    const highCount =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[122]++, recentThreats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[19]++;
      cov_t9dsayte4().s[123]++;
      return t.severity === 'high';
    }).length);
    const mediumCount =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[124]++, recentThreats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[20]++;
      cov_t9dsayte4().s[125]++;
      return t.severity === 'medium';
    }).length);
    /* istanbul ignore next */
    cov_t9dsayte4().s[126]++;
    if (criticalCount > 0) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[28][0]++;
      cov_t9dsayte4().s[127]++;
      return 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[28][1]++;
    }
    cov_t9dsayte4().s[128]++;
    if (highCount >= 2) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[29][0]++;
      cov_t9dsayte4().s[129]++;
      return 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[29][1]++;
    }
    cov_t9dsayte4().s[130]++;
    if (
    /* istanbul ignore next */
    (cov_t9dsayte4().b[31][0]++, highCount >= 1) ||
    /* istanbul ignore next */
    (cov_t9dsayte4().b[31][1]++, mediumCount >= 3)) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[30][0]++;
      cov_t9dsayte4().s[131]++;
      return 'high';
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[30][1]++;
    }
    cov_t9dsayte4().s[132]++;
    if (mediumCount >= 1) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[32][0]++;
      cov_t9dsayte4().s[133]++;
      return 'medium';
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[32][1]++;
    }
    cov_t9dsayte4().s[134]++;
    return 'low';
  }
  /**
   * Calculate system health score
   */
  calculateSystemHealth() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[21]++;
    let score =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[135]++, 100);
    const currentMetrics =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[136]++, this.metrics[this.metrics.length - 1]);
    /* istanbul ignore next */
    cov_t9dsayte4().s[137]++;
    if (currentMetrics) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[33][0]++;
      cov_t9dsayte4().s[138]++;
      // Deduct for high memory usage
      if (currentMetrics.memoryUsage > 400) {
        /* istanbul ignore next */
        cov_t9dsayte4().b[34][0]++;
        cov_t9dsayte4().s[139]++;
        score -= Math.min(30, (currentMetrics.memoryUsage - 400) / 10);
      } else
      /* istanbul ignore next */
      {
        cov_t9dsayte4().b[34][1]++;
      }
      // Deduct for slow response times
      cov_t9dsayte4().s[140]++;
      if (currentMetrics.averageResponseTime > 500) {
        /* istanbul ignore next */
        cov_t9dsayte4().b[35][0]++;
        cov_t9dsayte4().s[141]++;
        score -= Math.min(20, (currentMetrics.averageResponseTime - 500) / 50);
      } else
      /* istanbul ignore next */
      {
        cov_t9dsayte4().b[35][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[33][1]++;
    }
    // Deduct for active threats
    const activeThreats =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[142]++, this.threats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[22]++;
      cov_t9dsayte4().s[143]++;
      return /* istanbul ignore next */(cov_t9dsayte4().b[36][0]++, !t.mitigated) &&
      /* istanbul ignore next */
      (cov_t9dsayte4().b[36][1]++, Date.now() - t.timestamp < 300000);
    }));
    /* istanbul ignore next */
    cov_t9dsayte4().s[144]++;
    score -= activeThreats.length * 10;
    // Deduct for unacknowledged critical alerts
    const criticalAlerts =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[145]++, this.alerts.filter(a => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[23]++;
      cov_t9dsayte4().s[146]++;
      return /* istanbul ignore next */(cov_t9dsayte4().b[37][0]++, !a.acknowledged) &&
      /* istanbul ignore next */
      (cov_t9dsayte4().b[37][1]++, a.severity === 'critical');
    }));
    /* istanbul ignore next */
    cov_t9dsayte4().s[147]++;
    score -= criticalAlerts.length * 15;
    /* istanbul ignore next */
    cov_t9dsayte4().s[148]++;
    return Math.max(0, Math.round(score));
  }
  /**
   * Get recent failed authentication count
   */
  getRecentFailedAuth() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[24]++;
    const failedAuthLogs =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[149]++, this.securityValidator.getAuditLogs({
      action: 'authentication_failed',
      startTime: Date.now() - 300000 // Last 5 minutes
    }));
    /* istanbul ignore next */
    cov_t9dsayte4().s[150]++;
    return failedAuthLogs.length;
  }
  /**
   * Set up monitoring of audit logs
   */
  setupAuditLogMonitoring() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[25]++;
  } // In a real implementation, this would set up real-time log monitoring
  // For now, we rely on the periodic analysis in collectMetrics
  /**
   * Get current security dashboard data
   */
  getSecurityDashboard() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[26]++;
    const currentMetrics =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[151]++,
    /* istanbul ignore next */
    (cov_t9dsayte4().b[38][0]++, this.metrics[this.metrics.length - 1]) ||
    /* istanbul ignore next */
    (cov_t9dsayte4().b[38][1]++, {
      timestamp: Date.now(),
      systemHealth: 100,
      threatLevel: 'low',
      activeThreats: 0,
      blockedAttacks: 0,
      averageResponseTime: 0,
      memoryUsage: 0,
      cpuUsage: 0,
      networkConnections: 0,
      failedAuthentications: 0
    }));
    const recentThreats =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[152]++, this.threats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[27]++;
      cov_t9dsayte4().s[153]++;
      return Date.now() - t.timestamp < 3600000;
    } // Last hour
    ));
    const recentAlerts =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[154]++, this.alerts.filter(a => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[28]++;
      cov_t9dsayte4().s[155]++;
      return Date.now() - a.timestamp < 3600000;
    } // Last hour
    ));
    const threatBySeverity =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[156]++, {
      critical: recentThreats.filter(t => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[29]++;
        cov_t9dsayte4().s[157]++;
        return t.severity === 'critical';
      }).length,
      high: recentThreats.filter(t => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[30]++;
        cov_t9dsayte4().s[158]++;
        return t.severity === 'high';
      }).length,
      medium: recentThreats.filter(t => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[31]++;
        cov_t9dsayte4().s[159]++;
        return t.severity === 'medium';
      }).length,
      low: recentThreats.filter(t => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[32]++;
        cov_t9dsayte4().s[160]++;
        return t.severity === 'low';
      }).length
    });
    const threatByType =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[161]++, recentThreats.reduce((acc, threat) => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[33]++;
      cov_t9dsayte4().s[162]++;
      acc[threat.type] = (
      /* istanbul ignore next */
      (cov_t9dsayte4().b[39][0]++, acc[threat.type]) ||
      /* istanbul ignore next */
      (cov_t9dsayte4().b[39][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_t9dsayte4().s[163]++;
      return acc;
    }, {}));
    const alertBySeverity =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[164]++, {
      critical: recentAlerts.filter(a => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[34]++;
        cov_t9dsayte4().s[165]++;
        return a.severity === 'critical';
      }).length,
      high: recentAlerts.filter(a => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[35]++;
        cov_t9dsayte4().s[166]++;
        return a.severity === 'high';
      }).length,
      medium: recentAlerts.filter(a => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[36]++;
        cov_t9dsayte4().s[167]++;
        return a.severity === 'medium';
      }).length,
      low: recentAlerts.filter(a => {
        /* istanbul ignore next */
        cov_t9dsayte4().f[37]++;
        cov_t9dsayte4().s[168]++;
        return a.severity === 'low';
      }).length
    });
    const recentActivity =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[169]++, [...recentThreats, ...recentAlerts].sort((a, b) => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[38]++;
      cov_t9dsayte4().s[170]++;
      return b.timestamp - a.timestamp;
    }).slice(0, 20));
    /* istanbul ignore next */
    cov_t9dsayte4().s[171]++;
    return {
      currentMetrics,
      threatSummary: {
        total: recentThreats.length,
        by_severity: threatBySeverity,
        by_type: threatByType
      },
      alertSummary: {
        total: recentAlerts.length,
        unacknowledged: recentAlerts.filter(a => {
          /* istanbul ignore next */
          cov_t9dsayte4().f[39]++;
          cov_t9dsayte4().s[172]++;
          return !a.acknowledged;
        }).length,
        by_severity: alertBySeverity
      },
      recentActivity
    };
  }
  /**
   * Acknowledge an alert
   */
  acknowledgeAlert(alertId) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[40]++;
    const alert =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[173]++, this.alerts.find(a => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[41]++;
      cov_t9dsayte4().s[174]++;
      return a.id === alertId;
    }));
    /* istanbul ignore next */
    cov_t9dsayte4().s[175]++;
    if (alert) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[40][0]++;
      cov_t9dsayte4().s[176]++;
      alert.acknowledged = true;
      /* istanbul ignore next */
      cov_t9dsayte4().s[177]++;
      this.emit('alert_acknowledged', alert);
      /* istanbul ignore next */
      cov_t9dsayte4().s[178]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[40][1]++;
    }
    cov_t9dsayte4().s[179]++;
    return false;
  }
  /**
   * Resolve an alert
   */
  resolveAlert(alertId) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[42]++;
    const alert =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[180]++, this.alerts.find(a => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[43]++;
      cov_t9dsayte4().s[181]++;
      return a.id === alertId;
    }));
    /* istanbul ignore next */
    cov_t9dsayte4().s[182]++;
    if (alert) {
      /* istanbul ignore next */
      cov_t9dsayte4().b[41][0]++;
      cov_t9dsayte4().s[183]++;
      alert.resolvedAt = Date.now();
      /* istanbul ignore next */
      cov_t9dsayte4().s[184]++;
      this.emit('alert_resolved', alert);
      /* istanbul ignore next */
      cov_t9dsayte4().s[185]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_t9dsayte4().b[41][1]++;
    }
    cov_t9dsayte4().s[186]++;
    return false;
  }
  /**
   * Get security metrics history
   */
  getMetricsHistory(hours =
  /* istanbul ignore next */
  (cov_t9dsayte4().b[42][0]++, 1)) {
    /* istanbul ignore next */
    cov_t9dsayte4().f[44]++;
    const cutoff =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[187]++, Date.now() - hours * 60 * 60 * 1000);
    /* istanbul ignore next */
    cov_t9dsayte4().s[188]++;
    return this.metrics.filter(m => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[45]++;
      cov_t9dsayte4().s[189]++;
      return m.timestamp > cutoff;
    });
  }
  /**
   * Clean up old data
   */
  cleanup() {
    /* istanbul ignore next */
    cov_t9dsayte4().f[46]++;
    const cutoff =
    /* istanbul ignore next */
    (cov_t9dsayte4().s[190]++, Date.now() - 24 * 60 * 60 * 1000); // 24 hours
    /* istanbul ignore next */
    cov_t9dsayte4().s[191]++;
    this.threats = this.threats.filter(t => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[47]++;
      cov_t9dsayte4().s[192]++;
      return t.timestamp > cutoff;
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[193]++;
    this.alerts = this.alerts.filter(a => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[48]++;
      cov_t9dsayte4().s[194]++;
      return a.timestamp > cutoff;
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[195]++;
    this.metrics = this.metrics.filter(m => {
      /* istanbul ignore next */
      cov_t9dsayte4().f[49]++;
      cov_t9dsayte4().s[196]++;
      return m.timestamp > cutoff;
    });
    /* istanbul ignore next */
    cov_t9dsayte4().s[197]++;
    console.log('🧹 Security monitor cleanup completed');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,