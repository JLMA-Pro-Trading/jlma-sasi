{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/AgentPersistenceManager.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/AgentPersistenceManager.ts"],"sourcesContent":["/**\n * AgentPersistenceManager - SQLite Database Layer for Phase 2A\n * Implements TDD-driven database operations with performance monitoring\n * \n * Performance Requirements:\n * - Agent spawn: <75ms\n * - Database operations: <50ms\n * - Memory usage: <50MB per agent\n * - Test coverage: >95%\n */\n\nimport Database, { Database as DatabaseType } from 'better-sqlite3';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { performance } from 'perf_hooks';\nimport type { \n  AgentConfig, \n  AgentMetric, \n  AgentMemoryEntry, \n  SessionState,\n  NeuralWeightRecord,\n  DatabaseConnectionConfig,\n  BatchOperation\n} from '../types/agent';\nimport { SecurityValidator } from '../security/SecurityValidator';\n\nexport class AgentPersistenceManager {\n  private db: DatabaseType | null = null;\n  private dbPath: string;\n  private config: DatabaseConnectionConfig;\n  private isInitialized: boolean = false;\n  private writeQueue: Array<() => Promise<any>> = [];\n  private isProcessingQueue: boolean = false;\n  private securityValidator: SecurityValidator;\n\n  constructor(dbPath: string = './.swarm/agents.db') {\n    this.dbPath = path.resolve(dbPath);\n    this.securityValidator = new SecurityValidator({\n      enableInputValidation: true,\n      enableAuditLogging: true,\n      maxInputSize: 1024 * 1024 // 1MB\n    });\n    this.config = {\n      path: this.dbPath,\n      timeout: 30000,\n      maxConnections: 5,\n      busyTimeout: 5000,\n      cacheSize: 64000, // 64MB cache\n      mmapSize: 268435456, // 256MB mmap\n      walMode: true,\n      synchronous: 'NORMAL'\n    };\n  }\n\n  /**\n   * Initialize SQLite database with Phase 2A schema and performance optimizations\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Ensure directory exists\n      const dbDir = path.dirname(this.dbPath);\n      if (!fs.existsSync(dbDir)) {\n        fs.mkdirSync(dbDir, { recursive: true });\n      }\n\n      // Initialize database connection\n      this.db = new Database(this.dbPath, {\n        timeout: this.config.timeout,\n        verbose: process.env.NODE_ENV === 'development' ? console.log : undefined\n      });\n\n      // Configure SQLite for performance\n      await this.configureSQLitePerformance();\n\n      // Create schema\n      await this.createSchema();\n\n      // Create indexes for performance\n      await this.createIndexes();\n\n      this.isInitialized = true;\n      console.log('✅ AgentPersistenceManager initialized successfully');\n\n    } catch (error) {\n      console.error('❌ Failed to initialize AgentPersistenceManager:', error);\n      throw new Error(`Database initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Configure SQLite for optimal performance\n   */\n  private async configureSQLitePerformance(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    // Enable WAL mode for concurrent reads\n    this.db.pragma('journal_mode = WAL');\n    \n    // Set synchronous mode for balanced performance/safety\n    this.db.pragma(`synchronous = ${this.config.synchronous}`);\n    \n    // Configure cache size\n    this.db.pragma(`cache_size = -${this.config.cacheSize / 1024}`); // Negative = KB\n    \n    // Use memory for temporary storage\n    this.db.pragma('temp_store = MEMORY');\n    \n    // Configure memory mapping\n    this.db.pragma(`mmap_size = ${this.config.mmapSize}`);\n    \n    // Set busy timeout\n    this.db.pragma(`busy_timeout = ${this.config.busyTimeout}`);\n    \n    // Enable foreign key constraints\n    this.db.pragma('foreign_keys = ON');\n    \n    console.log('🔧 SQLite performance configuration applied');\n  }\n\n  /**\n   * Create database schema for Phase 2A\n   */\n  private async createSchema(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const schemas = [\n      // Agent Lifecycle Management\n      `CREATE TABLE IF NOT EXISTS agents (\n        id TEXT PRIMARY KEY,\n        type TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'spawning',\n        cognitive_pattern TEXT NOT NULL,\n        network_layers TEXT NOT NULL,\n        learning_rate REAL DEFAULT 0.01,\n        momentum REAL DEFAULT 0.0,\n        created_at INTEGER NOT NULL,\n        last_active INTEGER NOT NULL,\n        memory_usage_mb REAL DEFAULT 0,\n        performance_score REAL DEFAULT 0,\n        spawn_time_ms INTEGER DEFAULT NULL,\n        config_json TEXT DEFAULT '{}',\n        metadata_json TEXT DEFAULT '{}'\n      )`,\n\n      // Neural Network State Persistence\n      `CREATE TABLE IF NOT EXISTS neural_weights (\n        agent_id TEXT NOT NULL,\n        layer_index INTEGER NOT NULL,\n        weight_data BLOB NOT NULL,\n        bias_data BLOB NOT NULL,\n        updated_at INTEGER NOT NULL,\n        checksum TEXT NOT NULL,\n        compression_type TEXT DEFAULT 'gzip',\n        PRIMARY KEY (agent_id, layer_index),\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Agent Memory and Knowledge Base\n      `CREATE TABLE IF NOT EXISTS agent_memory (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        agent_id TEXT NOT NULL,\n        memory_type TEXT NOT NULL,\n        key TEXT NOT NULL,\n        value_data BLOB NOT NULL,\n        importance_score REAL DEFAULT 0.5,\n        access_count INTEGER DEFAULT 0,\n        created_at INTEGER NOT NULL,\n        last_accessed INTEGER NOT NULL,\n        ttl_expires INTEGER DEFAULT NULL,\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Performance Metrics and Monitoring\n      `CREATE TABLE IF NOT EXISTS agent_metrics (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        agent_id TEXT NOT NULL,\n        metric_type TEXT NOT NULL,\n        value REAL NOT NULL,\n        unit TEXT NOT NULL,\n        recorded_at INTEGER NOT NULL,\n        context_json TEXT DEFAULT '{}',\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Cross-Session State Management\n      `CREATE TABLE IF NOT EXISTS session_state (\n        id TEXT PRIMARY KEY,\n        swarm_topology TEXT NOT NULL,\n        active_agents TEXT NOT NULL,\n        coordination_state BLOB NOT NULL,\n        created_at INTEGER NOT NULL,\n        last_checkpoint INTEGER NOT NULL,\n        is_active BOOLEAN DEFAULT TRUE\n      )`\n    ];\n\n    for (const schema of schemas) {\n      this.db.exec(schema);\n    }\n\n    console.log('📋 Database schema created successfully');\n  }\n\n  /**\n   * Create indexes for Phase 2A performance requirements\n   */\n  private async createIndexes(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const indexes = [\n      'CREATE INDEX IF NOT EXISTS idx_agents_status ON agents(status, last_active)',\n      'CREATE INDEX IF NOT EXISTS idx_agents_type ON agents(type, status)',\n      'CREATE INDEX IF NOT EXISTS idx_neural_weights_agent ON neural_weights(agent_id)',\n      'CREATE INDEX IF NOT EXISTS idx_agent_memory_type ON agent_memory(agent_id, memory_type)',\n      'CREATE INDEX IF NOT EXISTS idx_agent_memory_importance ON agent_memory(importance_score DESC, last_accessed DESC)',\n      'CREATE INDEX IF NOT EXISTS idx_metrics_agent_type ON agent_metrics(agent_id, metric_type, recorded_at)',\n      'CREATE INDEX IF NOT EXISTS idx_session_active ON session_state(is_active, last_checkpoint)'\n    ];\n\n    for (const index of indexes) {\n      this.db.exec(index);\n    }\n\n    console.log('🔍 Database indexes created successfully');\n  }\n\n  /**\n   * Save agent configuration to database\n   * Performance target: <50ms\n   */\n  async saveAgent(config: AgentConfig): Promise<AgentConfig> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        INSERT INTO agents (\n          id, type, status, cognitive_pattern, network_layers, learning_rate, momentum,\n          created_at, last_active, memory_usage_mb, performance_score, spawn_time_ms,\n          config_json, metadata_json\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n\n      const result = stmt.run(\n        config.id,\n        config.type,\n        config.status,\n        config.cognitivePattern,\n        JSON.stringify(config.networkLayers),\n        config.learningRate || 0.01,\n        config.momentum || 0.0,\n        config.createdAt,\n        config.lastActive,\n        config.memoryUsageMB || 0,\n        config.performanceScore || 0,\n        config.spawnTimeMs,\n        config.configJson || '{}',\n        config.metadataJson || '{}'\n      );\n\n      const saveTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (saveTime > 50) {\n        console.warn(`⚠️ Agent save time exceeded threshold: ${saveTime.toFixed(2)}ms`);\n      }\n\n      return config;\n\n    } catch (error) {\n      const saveTime = performance.now() - startTime;\n      console.error(`❌ Failed to save agent ${config.id} (${saveTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve agent by ID\n   * Performance target: <50ms\n   */\n  async getAgent(id: string): Promise<AgentConfig | null> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    // Security validation\n    const validation = this.securityValidator.validateSQLParameters(\n      'SELECT * FROM agents WHERE id = ?',\n      [id]\n    );\n    if (!validation.isValid) {\n      throw new Error(`Security validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        SELECT * FROM agents WHERE id = ?\n      `);\n\n      const row = stmt.get(validation.sanitizedInput![0]) as any;\n\n      const retrieveTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (retrieveTime > 50) {\n        console.warn(`⚠️ Agent retrieval time exceeded threshold: ${retrieveTime.toFixed(2)}ms`);\n      }\n\n      if (!row) return null;\n\n      return {\n        id: row.id,\n        type: row.type,\n        cognitivePattern: row.cognitive_pattern,\n        networkLayers: JSON.parse(row.network_layers),\n        learningRate: row.learning_rate,\n        momentum: row.momentum,\n        status: row.status,\n        createdAt: row.created_at,\n        lastActive: row.last_active,\n        memoryUsageMB: row.memory_usage_mb,\n        performanceScore: row.performance_score,\n        spawnTimeMs: row.spawn_time_ms,\n        configJson: row.config_json,\n        metadataJson: row.metadata_json\n      };\n\n    } catch (error) {\n      const retrieveTime = performance.now() - startTime;\n      console.error(`❌ Failed to retrieve agent ${id} (${retrieveTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Update agent status atomically\n   * Performance target: <50ms\n   */\n  async updateAgentStatus(id: string, status: string): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    // Security validation\n    const validation = this.securityValidator.validateSQLParameters(\n      'UPDATE agents SET status = ?, last_active = ? WHERE id = ?',\n      [status, Date.now(), id]\n    );\n    if (!validation.isValid) {\n      throw new Error(`Security validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        UPDATE agents SET status = ?, last_active = ? WHERE id = ?\n      `);\n\n      const sanitizedParams = validation.sanitizedInput!;\n      const result = stmt.run(sanitizedParams[0], sanitizedParams[1], sanitizedParams[2]);\n\n      if (result.changes === 0) {\n        throw new Error(`Agent not found: ${id}`);\n      }\n\n      const updateTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (updateTime > 50) {\n        console.warn(`⚠️ Agent status update time exceeded threshold: ${updateTime.toFixed(2)}ms`);\n      }\n\n    } catch (error) {\n      const updateTime = performance.now() - startTime;\n      console.error(`❌ Failed to update agent status ${id} (${updateTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Record performance metric\n   */\n  async recordMetric(metric: AgentMetric): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      INSERT INTO agent_metrics (agent_id, metric_type, value, unit, recorded_at, context_json)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      metric.agentId,\n      metric.metricType,\n      metric.value,\n      metric.unit,\n      metric.recordedAt,\n      JSON.stringify(metric.context || {})\n    );\n  }\n\n  /**\n   * Get agent metrics by type\n   */\n  async getAgentMetrics(agentId: string, metricType?: string): Promise<AgentMetric[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    let query = 'SELECT * FROM agent_metrics WHERE agent_id = ?';\n    const params: any[] = [agentId];\n\n    if (metricType) {\n      query += ' AND metric_type = ?';\n      params.push(metricType);\n    }\n\n    query += ' ORDER BY recorded_at DESC';\n\n    const stmt = this.db.prepare(query);\n    const rows = stmt.all(...params) as any[];\n\n    return rows.map(row => ({\n      id: row.id,\n      agentId: row.agent_id,\n      metricType: row.metric_type,\n      value: row.value,\n      unit: row.unit,\n      recordedAt: row.recorded_at,\n      context: JSON.parse(row.context_json || '{}')\n    }));\n  }\n\n  /**\n   * Batch save multiple agents efficiently\n   */\n  async batchSaveAgents(agents: AgentConfig[]): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const transaction = this.db.transaction((agentList: AgentConfig[]) => {\n        const stmt = this.db!.prepare(`\n          INSERT INTO agents (\n            id, type, status, cognitive_pattern, network_layers, learning_rate, momentum,\n            created_at, last_active, memory_usage_mb, performance_score, spawn_time_ms,\n            config_json, metadata_json\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        `);\n\n        for (const agent of agentList) {\n          stmt.run(\n            agent.id,\n            agent.type,\n            agent.status,\n            agent.cognitivePattern,\n            JSON.stringify(agent.networkLayers),\n            agent.learningRate || 0.01,\n            agent.momentum || 0.0,\n            agent.createdAt,\n            agent.lastActive,\n            agent.memoryUsageMB || 0,\n            agent.performanceScore || 0,\n            agent.spawnTimeMs,\n            agent.configJson || '{}',\n            agent.metadataJson || '{}'\n          );\n        }\n      });\n\n      transaction(agents);\n\n      const batchTime = performance.now() - startTime;\n      const avgTime = batchTime / agents.length;\n\n      console.log(`📊 Batch saved ${agents.length} agents in ${batchTime.toFixed(2)}ms (avg: ${avgTime.toFixed(2)}ms/agent)`);\n\n    } catch (error) {\n      const batchTime = performance.now() - startTime;\n      console.error(`❌ Failed to batch save agents (${batchTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all agents with optional filtering\n   */\n  async getAllAgents(filter?: { type?: string; status?: string }): Promise<AgentConfig[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    let query = 'SELECT * FROM agents';\n    const params: any[] = [];\n\n    if (filter) {\n      const conditions: string[] = [];\n      \n      if (filter.type) {\n        conditions.push('type = ?');\n        params.push(filter.type);\n      }\n      \n      if (filter.status) {\n        conditions.push('status = ?');\n        params.push(filter.status);\n      }\n      \n      if (conditions.length > 0) {\n        query += ' WHERE ' + conditions.join(' AND ');\n      }\n    }\n\n    query += ' ORDER BY created_at DESC';\n\n    // Security validation for parameterized query\n    const validation = this.securityValidator.validateSQLParameters(query, params);\n    if (!validation.isValid) {\n      throw new Error(`Security validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    const stmt = this.db.prepare(query);\n    const rows = stmt.all(...(validation.sanitizedInput || params)) as any[];\n\n    return rows.map(row => ({\n      id: row.id,\n      type: row.type,\n      cognitivePattern: row.cognitive_pattern,\n      networkLayers: JSON.parse(row.network_layers),\n      learningRate: row.learning_rate,\n      momentum: row.momentum,\n      status: row.status,\n      createdAt: row.created_at,\n      lastActive: row.last_active,\n      memoryUsageMB: row.memory_usage_mb,\n      performanceScore: row.performance_score,\n      spawnTimeMs: row.spawn_time_ms,\n      configJson: row.config_json,\n      metadataJson: row.metadata_json\n    }));\n  }\n\n  /**\n   * Get database table names (for testing)\n   */\n  async getTables(): Promise<string[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\n    `);\n    \n    const rows = stmt.all() as any[];\n    return rows.map(row => row.name);\n  }\n\n  /**\n   * Get database index names (for testing)\n   */\n  async getIndexes(): Promise<string[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      SELECT name FROM sqlite_master WHERE type='index' AND name NOT LIKE 'sqlite_%'\n    `);\n    \n    const rows = stmt.all() as any[];\n    return rows.map(row => row.name);\n  }\n\n  /**\n   * Get journal mode (for testing)\n   */\n  async getJournalMode(): Promise<string> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const result = this.db.pragma('journal_mode');\n    \n    // Handle both string and object responses from better-sqlite3\n    if (typeof result === 'string') {\n      return result;\n    } else if (Array.isArray(result) && result.length > 0 && result[0] && 'journal_mode' in result[0]) {\n      return (result[0] as any).journal_mode;\n    } else if (typeof result === 'object' && result && 'journal_mode' in result) {\n      return (result as any).journal_mode;\n    }\n    \n    return 'unknown';\n  }\n\n  /**\n   * Close database connection\n   */\n  async close(): Promise<void> {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n    this.isInitialized = false;\n    console.log('🔒 Database connection closed');\n  }\n}"],"version":3}