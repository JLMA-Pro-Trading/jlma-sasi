{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/persistence/neural-persistence.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/persistence/neural-persistence.test.ts"],"sourcesContent":["/**\n * Neural Agent Persistence Tests for Phase 2A\n * Tests SQLite persistence with performance thresholds and data integrity\n */\n\nimport { jest } from '@jest/globals';\nimport { \n  mockSQLiteDB, \n  sqliteTestUtils, \n  persistencePerformanceMonitor,\n  TEST_DB_PATH \n} from '../sqlite-setup';\nimport { performanceTestUtils, PERFORMANCE_THRESHOLDS } from '../performance-setup';\n\ndescribe('Neural Agent Persistence', () => {\n  let db: any;\n  \n  beforeEach(async () => {\n    db = await sqliteTestUtils.createTestDatabase();\n  });\n  \n  afterEach(async () => {\n    if (db) {\n      db.close();\n    }\n  });\n  \n  describe('Agent State Persistence', () => {\n    test('should save agent state within performance threshold (<75ms)', async () => {\n      const agentData = sqliteTestUtils.generateAgentStateData({\n        id: 'test-agent-persistence-001',\n        agent_type: 'mlp',\n        neural_config: JSON.stringify({\n          type: 'mlp',\n          architecture: [10, 5, 1],\n          activationFunction: 'relu'\n        })\n      });\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'agent-state-save',\n        async () => {\n          await new Promise((resolve, reject) => {\n            mockSQLiteDB.run(\n              'INSERT INTO agent_states (id, agent_type, neural_config, created_at, last_active) VALUES (?, ?, ?, ?, ?)',\n              [agentData.id, agentData.agent_type, agentData.neural_config, agentData.created_at, agentData.last_active],\n              (err) => err ? reject(err) : resolve(undefined)\n            );\n          });\n        }\n      );\n      \n      // Assert performance threshold\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE);\n      \n      // Verify data saved correctly\n      const savedAgent = mockSQLiteDB.getTestData('agent_states')\n        .find((agent: any) => agent.id === agentData.id);\n      expect(savedAgent).toBeDefined();\n      expect(savedAgent.agent_type).toBe(agentData.agent_type);\n    });\n    \n    test('should load agent state within performance threshold (<100ms)', async () => {\n      // Setup test data\n      const agentData = sqliteTestUtils.generateAgentStateData();\n      mockSQLiteDB.setTestData('agent_states', [agentData]);\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'agent-state-load',\n        async () => {\n          return new Promise((resolve, reject) => {\n            mockSQLiteDB.get(\n              'SELECT * FROM agent_states WHERE id = ?',\n              [agentData.id],\n              (err, row) => err ? reject(err) : resolve(row)\n            );\n          });\n        }\n      );\n      \n      // Assert performance threshold\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_LOAD);\n      \n      // Verify data loaded correctly\n      expect(result).toBeDefined();\n      expect((result as any).id).toBe(agentData.id);\n    });\n    \n    test('should handle batch save operations efficiently', async () => {\n      const agentCount = 10;\n      const agentDataList = Array.from({ length: agentCount }, () => \n        sqliteTestUtils.generateAgentStateData()\n      );\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'batch-agent-save',\n        async () => {\n          for (const agentData of agentDataList) {\n            await new Promise((resolve, reject) => {\n              mockSQLiteDB.run(\n                'INSERT INTO agent_states (id, agent_type, neural_config, created_at, last_active) VALUES (?, ?, ?, ?, ?)',\n                [agentData.id, agentData.agent_type, agentData.neural_config, agentData.created_at, agentData.last_active],\n                (err) => err ? reject(err) : resolve(undefined)\n              );\n            });\n          }\n        }\n      );\n      \n      // Batch operations should complete within reasonable time\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.BATCH_PROCESSING);\n      \n      // Verify all agents saved\n      const savedAgents = mockSQLiteDB.getTestData('agent_states');\n      expect(savedAgents).toHaveLength(agentCount);\n    });\n  });\n  \n  describe('Neural Weights Persistence', () => {\n    test('should save and load neural weights with data integrity', async () => {\n      const agentId = 'weight-test-agent-001';\n      const weights = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5]);\n      const biases = new Float32Array([0.01, 0.02]);\n      \n      const agentData = sqliteTestUtils.generateAgentStateData({\n        id: agentId,\n        weights: Buffer.from(weights.buffer),\n        biases: Buffer.from(biases.buffer)\n      });\n      \n      // Save weights\n      const { duration: saveDuration } = await performanceTestUtils.measureAsyncOperation(\n        'weights-save',\n        async () => {\n          await new Promise((resolve, reject) => {\n            mockSQLiteDB.run(\n              'INSERT INTO agent_states (id, agent_type, neural_config, weights, biases, created_at, last_active) VALUES (?, ?, ?, ?, ?, ?, ?)',\n              [agentData.id, agentData.agent_type, agentData.neural_config, agentData.weights, agentData.biases, agentData.created_at, agentData.last_active],\n              (err) => err ? reject(err) : resolve(undefined)\n            );\n          });\n        }\n      );\n      \n      expect(saveDuration).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE);\n      \n      // Load weights\n      const { result: loadedAgent, duration: loadDuration } = await performanceTestUtils.measureAsyncOperation(\n        'weights-load',\n        async () => {\n          return new Promise((resolve, reject) => {\n            mockSQLiteDB.get(\n              'SELECT * FROM agent_states WHERE id = ?',\n              [agentId],\n              (err, row) => err ? reject(err) : resolve(row)\n            );\n          });\n        }\n      );\n      \n      expect(loadDuration).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_LOAD);\n      \n      // Verify data integrity\n      expect(loadedAgent).toBeDefined();\n      expect((loadedAgent as any).id).toBe(agentId);\n      // Note: In real implementation, you'd verify Buffer.from(weights.buffer) matches\n    });\n  });\n  \n  describe('Training Session Persistence', () => {\n    test('should persist training sessions with performance metrics', async () => {\n      const agentId = 'training-agent-001';\n      const sessionData = sqliteTestUtils.generateTrainingSessionData(agentId, {\n        epochs: 50,\n        final_accuracy: 0.92,\n        convergence_epoch: 35\n      });\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'training-session-save',\n        async () => {\n          await new Promise((resolve, reject) => {\n            mockSQLiteDB.run(\n              'INSERT INTO training_sessions (session_id, agent_id, start_time, end_time, epochs, data_points, final_accuracy) VALUES (?, ?, ?, ?, ?, ?, ?)',\n              [sessionData.session_id, sessionData.agent_id, sessionData.start_time, sessionData.end_time, sessionData.epochs, sessionData.data_points, sessionData.final_accuracy],\n              (err) => err ? reject(err) : resolve(undefined)\n            );\n          });\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE);\n      \n      // Verify training session data integrity\n      const savedSessions = mockSQLiteDB.getTestData('training_sessions');\n      const savedSession = savedSessions.find((s: any) => s.session_id === sessionData.session_id);\n      expect(savedSession).toBeDefined();\n      expect(savedSession.final_accuracy).toBe(sessionData.final_accuracy);\n    });\n  });\n  \n  describe('Cross-Session Persistence', () => {\n    test('should maintain data integrity across sessions', async () => {\n      const agentId = 'cross-session-agent-001';\n      const originalData = sqliteTestUtils.generateAgentStateData({\n        id: agentId,\n        total_inferences: 150,\n        learning_progress: 0.85\n      });\n      \n      // Simulate session 1: Save agent state\n      mockSQLiteDB.setTestData('agent_states', [originalData]);\n      \n      // Simulate session end and restart\n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'cross-session-restore',\n        async () => {\n          return await sqliteTestUtils.validateCrossSessionPersistence(mockSQLiteDB, agentId);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.CROSS_SESSION_RESTORE);\n      \n      // Verify data persists across sessions\n      const restoredAgent = mockSQLiteDB.getTestData('agent_states')\n        .find((agent: any) => agent.id === agentId);\n      expect(restoredAgent).toBeDefined();\n      expect(restoredAgent.total_inferences).toBe(originalData.total_inferences);\n      expect(restoredAgent.learning_progress).toBe(originalData.learning_progress);\n    });\n    \n    test('should handle session interruption gracefully', async () => {\n      const agentData = sqliteTestUtils.generateAgentStateData();\n      \n      // Simulate interrupted save operation\n      try {\n        await new Promise((resolve, reject) => {\n          mockSQLiteDB.run(\n            'INSERT INTO agent_states (id, agent_type, neural_config) VALUES (?, ?, ?)',\n            [agentData.id, agentData.agent_type, agentData.neural_config],\n            (err) => {\n              // Simulate interruption\n              reject(new Error('Session interrupted'));\n            }\n          );\n        });\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n      }\n      \n      // Verify no partial data is saved\n      const savedAgents = mockSQLiteDB.getTestData('agent_states');\n      const partialAgent = savedAgents.find((agent: any) => agent.id === agentData.id);\n      expect(partialAgent).toBeUndefined();\n    });\n  });\n  \n  describe('Knowledge Sharing Persistence', () => {\n    test('should persist knowledge sharing events efficiently', async () => {\n      const sourceAgentId = 'source-agent-001';\n      const targetAgentId = 'target-agent-001';\n      const sharingData = sqliteTestUtils.generateKnowledgeSharingData(sourceAgentId, targetAgentId);\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'knowledge-sharing-save',\n        async () => {\n          await new Promise((resolve, reject) => {\n            mockSQLiteDB.run(\n              'INSERT INTO knowledge_sharing (id, source_agent_id, target_agent_id, shared_at, knowledge_type, knowledge_data) VALUES (?, ?, ?, ?, ?, ?)',\n              [sharingData.id, sharingData.source_agent_id, sharingData.target_agent_id, sharingData.shared_at, sharingData.knowledge_type, sharingData.knowledge_data],\n              (err) => err ? reject(err) : resolve(undefined)\n            );\n          });\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.KNOWLEDGE_SHARING);\n      \n      // Verify knowledge sharing data\n      const savedSharing = mockSQLiteDB.getTestData('knowledge_sharing');\n      const savedEvent = savedSharing.find((event: any) => event.id === sharingData.id);\n      expect(savedEvent).toBeDefined();\n      expect(savedEvent.source_agent_id).toBe(sourceAgentId);\n      expect(savedEvent.target_agent_id).toBe(targetAgentId);\n    });\n  });\n  \n  describe('Performance Metrics Persistence', () => {\n    test('should track and persist performance metrics over time', async () => {\n      const agentId = 'metrics-agent-001';\n      const metricsData = Array.from({ length: 20 }, () => \n        sqliteTestUtils.generatePerformanceMetrics(agentId)\n      );\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'metrics-batch-save',\n        async () => {\n          for (const metric of metricsData) {\n            await new Promise((resolve, reject) => {\n              mockSQLiteDB.run(\n                'INSERT INTO performance_metrics (id, agent_id, metric_type, metric_value, recorded_at) VALUES (?, ?, ?, ?, ?)',\n                [metric.id, metric.agent_id, metric.metric_type, metric.metric_value, metric.recorded_at],\n                (err) => err ? reject(err) : resolve(undefined)\n              );\n            });\n          }\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.BATCH_PROCESSING);\n      \n      // Verify metrics saved\n      const savedMetrics = mockSQLiteDB.getTestData('performance_metrics');\n      expect(savedMetrics).toHaveLength(metricsData.length);\n      \n      // Verify all metrics belong to correct agent\n      savedMetrics.forEach((metric: any) => {\n        expect(metric.agent_id).toBe(agentId);\n      });\n    });\n  });\n  \n  describe('Database Migration and Schema Evolution', () => {\n    test('should handle schema migrations without data loss', async () => {\n      // Simulate old schema data\n      const oldSchemaData = {\n        id: 'migration-test-agent',\n        agent_type: 'mlp',\n        neural_config: '{\"type\":\"mlp\"}',\n        created_at: Date.now()\n      };\n      \n      mockSQLiteDB.setTestData('agent_states', [oldSchemaData]);\n      \n      // Simulate migration\n      const migrationSteps = await sqliteTestUtils.testDataMigration('1.0.0', '2.0.0');\n      expect(migrationSteps).toHaveLength(2); // Expected migration steps\n      \n      // Verify data preserved after migration\n      const migratedData = mockSQLiteDB.getTestData('agent_states');\n      const migratedAgent = migratedData.find((agent: any) => agent.id === oldSchemaData.id);\n      expect(migratedAgent).toBeDefined();\n      expect(migratedAgent.agent_type).toBe(oldSchemaData.agent_type);\n    });\n  });\n  \n  describe('Persistence Error Handling', () => {\n    test('should handle database connection errors gracefully', async () => {\n      // Mock database error\n      const originalRun = mockSQLiteDB.run;\n      mockSQLiteDB.run = jest.fn().mockImplementation((sql, params, callback) => {\n        callback(new Error('Database connection failed'));\n      });\n      \n      const agentData = sqliteTestUtils.generateAgentStateData();\n      \n      await expect(\n        new Promise((resolve, reject) => {\n          mockSQLiteDB.run(\n            'INSERT INTO agent_states (id, agent_type) VALUES (?, ?)',\n            [agentData.id, agentData.agent_type],\n            (err) => err ? reject(err) : resolve(undefined)\n          );\n        })\n      ).rejects.toThrow('Database connection failed');\n      \n      // Restore original function\n      mockSQLiteDB.run = originalRun;\n    });\n    \n    test('should validate data integrity on load', async () => {\n      // Setup corrupted data\n      const corruptedData = {\n        id: 'corrupted-agent',\n        agent_type: null, // Invalid data\n        neural_config: 'invalid-json{',\n        created_at: 'not-a-number'\n      };\n      \n      mockSQLiteDB.setTestData('agent_states', [corruptedData]);\n      \n      const result = await new Promise((resolve, reject) => {\n        mockSQLiteDB.get(\n          'SELECT * FROM agent_states WHERE id = ?',\n          [corruptedData.id],\n          (err, row) => err ? reject(err) : resolve(row)\n        );\n      });\n      \n      // Verify corrupted data is detected\n      expect(result).toBeDefined();\n      expect((result as any).agent_type).toBeNull();\n      expect((result as any).neural_config).toBe('invalid-json{');\n    });\n  });\n});\n\n// Hook for coordination tracking\nafterEach(async () => {\n  await new Promise(resolve => setTimeout(resolve, 10));\n  const hookResult = await require('../coordination-setup').coordinationTestUtils.mockHooksExecution(\n    'post-edit',\n    { \n      file: 'neural-persistence.test.ts',\n      operation: 'test_completion',\n      performance: 'within_thresholds'\n    }\n  );\n  expect(hookResult.executed).toBe(true);\n});"],"version":3}