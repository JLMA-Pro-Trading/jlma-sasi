{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/wasm-performance.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/wasm-performance.test.ts"],"sourcesContent":["/**\n * WASM Performance Tests\n * Tests WASM module performance and SIMD acceleration\n */\n\nimport { describe, test, expect, beforeEach, afterEach } from '@jest/globals';\nimport { mockWasmModule, wasmTestUtils } from '../wasm-setup';\nimport { PerformanceTestUtils } from '../utils/neural-test-utils';\n\ndescribe('WASM Performance Tests', () => {\n  let memoryDetector: ReturnType<typeof PerformanceTestUtils.createMemoryLeakDetector>;\n\n  beforeEach(() => {\n    memoryDetector = PerformanceTestUtils.createMemoryLeakDetector();\n  });\n\n  afterEach(() => {\n    // Check for memory leaks\n    const analysis = memoryDetector.analyze();\n    expect(analysis.leaked).toBe(false);\n  });\n\n  describe('SIMD Acceleration Performance', () => {\n    test('should utilize SIMD for neural calculations', async () => {\n      expect(mockWasmModule.simdSupported).toBe(true);\n      \n      const testSizes = [128, 512, 1024, 4096];\n      \n      for (const size of testSizes) {\n        const input = wasmTestUtils.createPerformanceData(size);\n        \n        const time = await wasmTestUtils.benchmarkFunction(\n          () => mockWasmModule.calculateNeuralActivation(input),\n          50\n        );\n        \n        // SIMD should enable very fast computation\n        const timePerElement = time / size;\n        expect(timePerElement).toBeLessThan(0.0005); // <0.5μs per element with SIMD\n        \n        console.log(`SIMD Performance (${size} elements): ${time.toFixed(2)}ms, ${(timePerElement * 1000000).toFixed(2)}ns per element`);\n      }\n    });\n\n    test('should demonstrate performance multiplier', () => {\n      expect(mockWasmModule.performanceMultiplier).toBeGreaterThan(2.0);\n      \n      const baseline = 100; // ms baseline time\n      const expectedImprovement = baseline / mockWasmModule.performanceMultiplier;\n      \n      expect(expectedImprovement).toBeLessThan(50); // Should be less than half\n      \n      console.log(`Performance multiplier: ${mockWasmModule.performanceMultiplier}x`);\n    });\n  });\n\n  describe('Memory Management Performance', () => {\n    test('should efficiently manage WASM memory', () => {\n      const memoryManager = wasmTestUtils.mockMemoryManager();\n      \n      // Test allocation performance\n      const allocSizes = [1024, 4096, 16384, 65536];\n      \n      for (const size of allocSizes) {\n        const start = performance.now();\n        const buffer = memoryManager.allocate(size);\n        const end = performance.now();\n        \n        expect(buffer).toBeInstanceOf(ArrayBuffer);\n        expect(buffer.byteLength).toBe(size);\n        expect(end - start).toBeLessThan(1); // <1ms allocation time\n        \n        memoryManager.deallocate();\n      }\n    });\n\n    test('should track memory usage accurately', () => {\n      const memoryManager = wasmTestUtils.mockMemoryManager();\n      const usage = memoryManager.getUsage();\n      \n      expect(usage.used).toBeGreaterThanOrEqual(0);\n      expect(usage.available).toBeGreaterThan(0);\n      expect(usage.used).toBeLessThanOrEqual(usage.available);\n    });\n\n    test('should handle large memory allocations', () => {\n      const largeSize = 16 * 1024 * 1024; // 16MB\n      const memoryManager = wasmTestUtils.mockMemoryManager();\n      \n      const start = performance.now();\n      const buffer = memoryManager.allocate(largeSize);\n      const end = performance.now();\n      \n      expect(buffer).toBeInstanceOf(ArrayBuffer);\n      expect(end - start).toBeLessThan(10); // <10ms for large allocation\n    });\n  });\n\n  describe('Computation Benchmarks', () => {\n    test('should benchmark neural activation functions', async () => {\n      const testCases = [\n        { name: 'Small batch', size: 100 },\n        { name: 'Medium batch', size: 1000 },\n        { name: 'Large batch', size: 10000 },\n        { name: 'XL batch', size: 100000 }\n      ];\n\n      for (const testCase of testCases) {\n        const input = wasmTestUtils.createPerformanceData(testCase.size);\n        \n        const time = await wasmTestUtils.benchmarkFunction(\n          () => {\n            const result = mockWasmModule.calculateNeuralActivation(input);\n            expect(result).toBeInstanceOf(Float32Array);\n            expect(result.length).toBe(input.length);\n            return result;\n          },\n          testCase.size > 10000 ? 10 : 50 // Fewer iterations for large batches\n        );\n\n        const throughput = testCase.size / (time / 1000); // elements per second\n        \n        expect(time).toBeLessThan(50); // All should complete within 50ms\n        expect(throughput).toBeGreaterThan(10000); // >10K elements/sec\n\n        console.log(`${testCase.name} (${testCase.size}): ${time.toFixed(2)}ms, ${(throughput/1000).toFixed(0)}K elem/sec`);\n      }\n    });\n\n    test('should benchmark connection optimization', async () => {\n      const connectionSizes = [100, 500, 1000, 5000];\n\n      for (const size of connectionSizes) {\n        const connections = Array.from({ length: size }, () => Math.random() * 2 - 1);\n        \n        const time = await wasmTestUtils.benchmarkFunction(\n          () => {\n            const optimized = mockWasmModule.optimizeConnections(connections);\n            expect(optimized).toHaveLength(size);\n            expect(optimized.every(w => w >= 0 && w <= 1)).toBe(true);\n            return optimized;\n          },\n          20\n        );\n\n        const rate = size / (time / 1000); // connections per second\n        \n        expect(time).toBeLessThan(25); // Should complete within 25ms\n        expect(rate).toBeGreaterThan(1000); // >1K connections/sec\n\n        console.log(`Connection optimization (${size}): ${time.toFixed(2)}ms, ${(rate/1000).toFixed(1)}K conn/sec`);\n      }\n    });\n  });\n\n  describe('Performance Comparison Tests', () => {\n    test('should outperform JavaScript implementation', async () => {\n      const testSize = 10000;\n      const input = wasmTestUtils.createPerformanceData(testSize);\n\n      // WASM performance\n      const wasmTime = await wasmTestUtils.benchmarkFunction(\n        () => mockWasmModule.calculateNeuralActivation(input),\n        20\n      );\n\n      // JavaScript simulation\n      const jsTime = await wasmTestUtils.benchmarkFunction(\n        () => {\n          const result = new Float32Array(input.length);\n          for (let i = 0; i < input.length; i++) {\n            result[i] = Math.tanh(input[i] * 0.5);\n          }\n          return result;\n        },\n        20\n      );\n\n      const speedup = jsTime / wasmTime;\n      \n      expect(speedup).toBeGreaterThan(1.5); // At least 1.5x faster\n      expect(wasmTime).toBeLessThan(jsTime);\n\n      console.log(`Performance comparison (${testSize} elements):\n        WASM: ${wasmTime.toFixed(2)}ms\n        JavaScript: ${jsTime.toFixed(2)}ms\n        Speedup: ${speedup.toFixed(1)}x`);\n    });\n\n    test('should demonstrate consistent performance advantage', async () => {\n      const iterations = 10;\n      const testSize = 5000;\n      const wasmTimes: number[] = [];\n      const jsTimes: number[] = [];\n\n      for (let i = 0; i < iterations; i++) {\n        const input = wasmTestUtils.createPerformanceData(testSize);\n\n        // WASM test\n        const wasmStart = performance.now();\n        mockWasmModule.calculateNeuralActivation(input);\n        const wasmEnd = performance.now();\n        wasmTimes.push(wasmEnd - wasmStart);\n\n        // JS test\n        const jsStart = performance.now();\n        const result = new Float32Array(input.length);\n        for (let j = 0; j < input.length; j++) {\n          result[j] = Math.tanh(input[j] * 0.5);\n        }\n        const jsEnd = performance.now();\n        jsTimes.push(jsEnd - jsStart);\n      }\n\n      const avgWasmTime = wasmTimes.reduce((a, b) => a + b, 0) / wasmTimes.length;\n      const avgJsTime = jsTimes.reduce((a, b) => a + b, 0) / jsTimes.length;\n      const consistentSpeedup = avgJsTime / avgWasmTime;\n\n      expect(consistentSpeedup).toBeGreaterThan(1.5);\n\n      // Check consistency (low variance)\n      const wasmVariance = wasmTimes.reduce((acc, time) => acc + Math.pow(time - avgWasmTime, 2), 0) / wasmTimes.length;\n      const wasmStdDev = Math.sqrt(wasmVariance);\n      const coefficientOfVariation = wasmStdDev / avgWasmTime;\n\n      expect(coefficientOfVariation).toBeLessThan(0.2); // <20% variation\n\n      console.log(`Consistency test (${iterations} iterations):\n        WASM avg: ${avgWasmTime.toFixed(2)}ms ±${wasmStdDev.toFixed(2)}ms\n        JS avg: ${avgJsTime.toFixed(2)}ms\n        Consistent speedup: ${consistentSpeedup.toFixed(1)}x\n        CV: ${(coefficientOfVariation * 100).toFixed(1)}%`);\n    });\n  });\n\n  describe('Stress Testing', () => {\n    test('should handle sustained high-performance workloads', async () => {\n      const duration = 5000; // 5 seconds\n      const batchSize = 1000;\n      const startTime = Date.now();\n      let operations = 0;\n\n      while (Date.now() - startTime < duration) {\n        const input = wasmTestUtils.createPerformanceData(batchSize);\n        mockWasmModule.calculateNeuralActivation(input);\n        operations++;\n      }\n\n      const actualDuration = Date.now() - startTime;\n      const operationsPerSecond = operations / (actualDuration / 1000);\n      const elementsPerSecond = operationsPerSecond * batchSize;\n\n      expect(operationsPerSecond).toBeGreaterThan(100); // >100 ops/sec\n      expect(elementsPerSecond).toBeGreaterThan(50000); // >50K elements/sec\n\n      console.log(`Stress test (${actualDuration}ms):\n        Operations: ${operations}\n        Ops/sec: ${operationsPerSecond.toFixed(0)}\n        Elements/sec: ${(elementsPerSecond/1000).toFixed(0)}K`);\n    });\n\n    test('should maintain performance under memory pressure', async () => {\n      const largeBatches = 20;\n      const batchSize = 50000; // 50K elements per batch\n      const times: number[] = [];\n\n      for (let i = 0; i < largeBatches; i++) {\n        const input = wasmTestUtils.createPerformanceData(batchSize);\n        \n        const start = performance.now();\n        mockWasmModule.calculateNeuralActivation(input);\n        const end = performance.now();\n        \n        times.push(end - start);\n        \n        // Should complete each batch within reasonable time\n        expect(end - start).toBeLessThan(100);\n      }\n\n      // Performance should not degrade significantly\n      const firstHalf = times.slice(0, largeBatches / 2);\n      const secondHalf = times.slice(largeBatches / 2);\n      \n      const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;\n      const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;\n      \n      expect(secondAvg).toBeLessThan(firstAvg * 1.5); // <50% degradation\n\n      console.log(`Memory pressure test:\n        First half avg: ${firstAvg.toFixed(2)}ms\n        Second half avg: ${secondAvg.toFixed(2)}ms\n        Degradation: ${((secondAvg / firstAvg - 1) * 100).toFixed(1)}%`);\n    });\n  });\n\n  describe('Benchmark Regression', () => {\n    test('should meet performance benchmarks', async () => {\n      const benchmark = mockWasmModule.benchmark();\n      \n      expect(benchmark.operations_per_second).toBeGreaterThan(500000); // >500K ops/sec\n      expect(benchmark.memory_usage).toBeLessThan(10 * 1024 * 1024); // <10MB\n      expect(benchmark.simd_acceleration).toBe(true);\n\n      console.log(`Benchmark results:\n        Ops/sec: ${(benchmark.operations_per_second/1000).toFixed(0)}K\n        Memory: ${(benchmark.memory_usage/1024/1024).toFixed(1)}MB\n        SIMD: ${benchmark.simd_acceleration}`);\n    });\n\n    test('should validate performance targets', async () => {\n      const targets = {\n        minThroughput: 100000,    // elements/sec\n        maxLatency: 50,           // ms\n        maxMemoryGrowth: 50,      // MB\n        minSpeedupVsJS: 2.0       // multiplier\n      };\n\n      // Throughput test\n      const testSize = 10000;\n      const input = wasmTestUtils.createPerformanceData(testSize);\n      \n      const time = await wasmTestUtils.benchmarkFunction(\n        () => mockWasmModule.calculateNeuralActivation(input),\n        10\n      );\n\n      const throughput = testSize / (time / 1000);\n      \n      expect(throughput).toBeGreaterThan(targets.minThroughput);\n      expect(time).toBeLessThan(targets.maxLatency);\n\n      console.log(`Performance targets validation:\n        Throughput: ${(throughput/1000).toFixed(0)}K elem/sec (target: ${targets.minThroughput/1000}K)\n        Latency: ${time.toFixed(2)}ms (target: <${targets.maxLatency}ms)\n        Memory multiplier: ${mockWasmModule.performanceMultiplier}x (target: >${targets.minSpeedupVsJS}x)`);\n    });\n  });\n});"],"version":3}