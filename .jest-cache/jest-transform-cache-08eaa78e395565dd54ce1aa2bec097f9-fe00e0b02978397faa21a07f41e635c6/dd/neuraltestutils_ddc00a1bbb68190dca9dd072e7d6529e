ccdcacc0be11ad073d0f522caec12731
"use strict";
/**
 * Neural Testing Utilities
 * Comprehensive utilities for testing neural agent functionality
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeuralAssertions = exports.TestDataGenerator = exports.PerformanceTestUtils = exports.MockNeuralMeshService = exports.NeuralAgentFactory = void 0;
/**
 * Factory for creating mock neural agents
 */
class NeuralAgentFactory {
    static createMockAgent(overrides = {}) {
        return {
            id: `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            name: `TestAgent-${Math.random().toString(36).substr(2, 4)}`,
            type: 'neural',
            status: 'active',
            currentTask: 'Test task execution',
            repository: 'test-repo',
            branch: 'main',
            completedTasks: Math.floor(Math.random() * 10),
            efficiency: Math.floor(Math.random() * 40) + 60,
            progress: Math.random(),
            position: {
                x: (Math.random() - 0.5) * 100,
                y: (Math.random() - 0.5) * 100,
                z: (Math.random() - 0.5) * 100
            },
            owner: 'Test Suite',
            neuralId: `neuron_${Math.random().toString(36).substr(2, 9)}`,
            meshConnection: {
                connected: true,
                meshId: `mesh_${Math.random().toString(36).substr(2, 9)}`,
                nodeType: 'inter',
                layer: Math.floor(Math.random() * 6) + 1,
                synapses: Math.floor(Math.random() * 50) + 10,
                activation: Math.random(),
                lastSpike: new Date()
            },
            realtime: {
                cpuUsage: Math.random() * 50 + 20,
                memoryUsage: Math.random() * 60 + 30,
                networkLatency: Math.random() * 10 + 1,
                wasmPerformance: 2.8
            },
            ...overrides
        };
    }
    static createMockNeuralAgent(overrides = {}) {
        const baseAgent = this.createMockAgent();
        return {
            ...baseAgent,
            type: 'neural',
            neuralProperties: {
                neuronId: `neuron_${Math.random().toString(36).substr(2, 9)}`,
                meshId: `mesh_${Math.random().toString(36).substr(2, 9)}`,
                nodeType: 'inter',
                layer: Math.floor(Math.random() * 6) + 1,
                threshold: 0.5 + (Math.random() - 0.5) * 0.4,
                activation: Math.random(),
                connections: Array.from({ length: 5 }, () => Math.random().toString(36).substr(2, 9)),
                spikeHistory: Array.from({ length: 10 }, () => Math.random()),
                lastSpike: new Date()
            },
            wasmMetrics: {
                executionTime: Math.random() * 50 + 5,
                memoryUsage: Math.random() * 1024 * 1024,
                simdAcceleration: true,
                performanceScore: Math.floor(Math.random() * 20) + 80
            },
            ...overrides
        };
    }
    static createMockMeshConnection(overrides = {}) {
        return {
            id: `conn_${Date.now()}`,
            status: 'connected',
            meshId: `mesh_${Math.random().toString(36).substr(2, 9)}`,
            nodeCount: Math.floor(Math.random() * 100) + 50,
            synapseCount: Math.floor(Math.random() * 500) + 200,
            lastActivity: new Date(),
            ...overrides
        };
    }
}
exports.NeuralAgentFactory = NeuralAgentFactory;
/**
 * Mock Neural Mesh Service for testing
 */
class MockNeuralMeshService {
    constructor() {
        Object.defineProperty(this, "eventListeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "connection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "agents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        this.connection = NeuralAgentFactory.createMockMeshConnection();
    }
    // Mock all public methods from NeuralMeshService
    async initialize() {
        this.emit('connected', this.connection);
        return true;
    }
    async createNeuralAgent(type, config) {
        const agent = NeuralAgentFactory.createMockNeuralAgent({ type });
        this.agents.set(agent.id, agent);
        this.emit('agent_created', agent);
        return agent;
    }
    async updateNeuralAgent(agent) {
        // Simulate neural activity update
        agent.neuralProperties.activation = Math.random();
        agent.neuralProperties.spikeHistory.push(agent.neuralProperties.activation);
        if (agent.neuralProperties.spikeHistory.length > 10) {
            agent.neuralProperties.spikeHistory.shift();
        }
        this.agents.set(agent.id, agent);
        this.emit('agent_updated', agent);
        return agent;
    }
    async getMeshStatus() {
        return {
            nodeCount: this.connection?.nodeCount || 0,
            synapseCount: this.connection?.synapseCount || 0,
            activity: Math.random(),
            connectivity: Math.random() * 0.5 + 0.3,
            efficiency: Math.random() * 0.3 + 0.7
        };
    }
    async trainMesh(patterns) {
        // Simulate training delay
        await new Promise(resolve => setTimeout(resolve, 10));
        this.emit('mesh_trained', { patterns: patterns.length, accuracy: Math.random() * 0.2 + 0.8 });
        return true;
    }
    getConnectionStatus() {
        return this.connection;
    }
    isWasmEnabled() {
        return true;
    }
    async disconnect() {
        if (this.connection) {
            this.connection.status = 'disconnected';
            this.emit('disconnected', this.connection);
        }
        this.eventListeners.clear();
    }
    // Event system
    on(event, callback) {
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        this.eventListeners.get(event).push(callback);
    }
    once(event, callback) {
        const wrapper = (...args) => {
            this.off(event, wrapper);
            callback(...args);
        };
        this.on(event, wrapper);
    }
    off(event, callback) {
        const listeners = this.eventListeners.get(event);
        if (listeners) {
            const index = listeners.indexOf(callback);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        }
    }
    emit(event, data) {
        const listeners = this.eventListeners.get(event);
        if (listeners) {
            listeners.forEach(callback => callback(data));
        }
    }
    // Test utilities
    getAgent(id) {
        return this.agents.get(id);
    }
    getAllAgents() {
        return Array.from(this.agents.values());
    }
    clearAgents() {
        this.agents.clear();
    }
}
exports.MockNeuralMeshService = MockNeuralMeshService;
/**
 * Performance testing utilities
 */
class PerformanceTestUtils {
    /**
     * Test neural computation performance
     */
    static async testNeuralPerformance(service, iterations = 100, maxTimeMs = 50) {
        const times = [];
        const agent = await service.createNeuralAgent('neural');
        if (!agent) {
            throw new Error('Failed to create test agent');
        }
        for (let i = 0; i < iterations; i++) {
            const start = performance.now();
            await service.updateNeuralAgent(agent);
            const end = performance.now();
            times.push(end - start);
        }
        const averageTime = times.reduce((a, b) => a + b, 0) / times.length;
        const maxTime = Math.max(...times);
        const passed = maxTime <= maxTimeMs;
        return { averageTime, maxTime, passed };
    }
    /**
     * Test mesh coordination performance
     */
    static async testMeshCoordination(service, agentCount = 10, maxTimeMs = 100) {
        // Test mesh setup performance
        const setupStart = performance.now();
        const agents = [];
        for (let i = 0; i < agentCount; i++) {
            const agent = await service.createNeuralAgent('neural');
            if (agent)
                agents.push(agent);
        }
        const setupEnd = performance.now();
        const setupTime = setupEnd - setupStart;
        // Test coordination update performance
        const updateStart = performance.now();
        await Promise.all(agents.map(agent => service.updateNeuralAgent(agent)));
        const updateEnd = performance.now();
        const updateTime = updateEnd - updateStart;
        const passed = setupTime <= maxTimeMs && updateTime <= maxTimeMs;
        return { setupTime, updateTime, passed };
    }
    /**
     * Memory leak detection utility
     */
    static createMemoryLeakDetector() {
        const initialMemory = process.memoryUsage();
        let measurements = [initialMemory];
        return {
            measure: () => {
                measurements.push(process.memoryUsage());
            },
            analyze: (threshold = 50 * 1024 * 1024) => {
                if (measurements.length < 2) {
                    return { leaked: false, growth: 0 };
                }
                const latest = measurements[measurements.length - 1];
                const growth = latest.heapUsed - initialMemory.heapUsed;
                return {
                    leaked: growth > threshold,
                    growth
                };
            },
            reset: () => {
                measurements = [process.memoryUsage()];
            }
        };
    }
}
exports.PerformanceTestUtils = PerformanceTestUtils;
/**
 * Test data generators
 */
class TestDataGenerator {
    /**
     * Generate neural training patterns
     */
    static generateTrainingPatterns(count = 100) {
        return Array.from({ length: count }, (_, i) => ({
            id: i,
            input: Array.from({ length: 10 }, () => Math.random()),
            output: Array.from({ length: 5 }, () => Math.random()),
            weight: Math.random()
        }));
    }
    /**
     * Generate synthetic neural spikes
     */
    static generateSpikeData(duration = 1000, frequency = 50) {
        const spikes = [];
        const interval = 1000 / frequency; // ms between spikes
        for (let t = 0; t < duration; t += interval) {
            spikes.push(Math.random() > 0.3 ? 1 : 0); // 70% spike probability
        }
        return spikes;
    }
    /**
     * Generate mesh topology data
     */
    static generateMeshTopology(nodeCount = 50) {
        const nodes = Array.from({ length: nodeCount }, (_, i) => ({
            id: i,
            type: ['sensory', 'motor', 'inter', 'pyramidal', 'purkinje'][i % 5],
            layer: Math.floor(i / 10) + 1,
            position: {
                x: Math.random() * 100,
                y: Math.random() * 100,
                z: Math.random() * 100
            }
        }));
        const connections = [];
        for (let i = 0; i < nodeCount; i++) {
            const connectionCount = Math.floor(Math.random() * 8) + 2;
            for (let j = 0; j < connectionCount; j++) {
                const target = Math.floor(Math.random() * nodeCount);
                if (target !== i) {
                    connections.push({
                        from: i,
                        to: target,
                        weight: Math.random() * 2 - 1,
                        delay: Math.random() * 5
                    });
                }
            }
        }
        return { nodes, connections };
    }
}
exports.TestDataGenerator = TestDataGenerator;
/**
 * Assertion helpers for neural testing
 */
class NeuralAssertions {
    /**
     * Assert agent has valid neural properties
     */
    static assertValidNeuralAgent(agent) {
        expect(agent).toBeDefined();
        expect(agent.neuralProperties).toBeDefined();
        expect(agent.wasmMetrics).toBeDefined();
        expect(agent.neuralProperties.neuronId).toMatch(/^neuron_/);
        expect(agent.neuralProperties.layer).toBeGreaterThan(0);
        expect(agent.neuralProperties.layer).toBeLessThanOrEqual(6);
        expect(agent.neuralProperties.threshold).toBeGreaterThan(0);
        expect(agent.neuralProperties.threshold).toBeLessThanOrEqual(1);
        expect(agent.wasmMetrics.performanceScore).toBeGreaterThan(0);
        expect(agent.wasmMetrics.performanceScore).toBeLessThanOrEqual(100);
    }
    /**
     * Assert mesh connection is valid
     */
    static assertValidMeshConnection(connection) {
        expect(connection).toBeDefined();
        expect(connection.id).toMatch(/^conn_/);
        expect(connection.status).toMatch(/^(connecting|connected|disconnected|error)$/);
        expect(connection.nodeCount).toBeGreaterThanOrEqual(0);
        expect(connection.synapseCount).toBeGreaterThanOrEqual(0);
        expect(connection.lastActivity).toBeInstanceOf(Date);
    }
    /**
     * Assert performance metrics meet thresholds
     */
    static assertPerformanceThresholds(metrics, thresholds) {
        expect(metrics.averageTime).toBeLessThanOrEqual(thresholds.averageMs);
        expect(metrics.maxTime).toBeLessThanOrEqual(thresholds.maxMs);
    }
    /**
     * Assert no memory leaks
     */
    static assertNoMemoryLeaks(detector) {
        const analysis = detector.analyze();
        expect(analysis.leaked).toBe(false);
        if (analysis.leaked) {
            console.warn(`Memory leak detected: ${analysis.growth} bytes`);
        }
    }
}
exports.NeuralAssertions = NeuralAssertions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL3dvcmtzcGFjZXMvYWdlbnRpc3RzLXF1aWNrc3RhcnQtd29ya3NwYWNlLWJhc2ljL3Nhc2kvdGVzdHMvdXRpbHMvbmV1cmFsLXRlc3QtdXRpbHMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBTUg7O0dBRUc7QUFDSCxNQUFhLGtCQUFrQjtJQUM3QixNQUFNLENBQUMsZUFBZSxDQUFDLFlBQTRCLEVBQUU7UUFDbkQsT0FBTztZQUNMLEVBQUUsRUFBRSxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7WUFDcEUsSUFBSSxFQUFFLGFBQWEsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO1lBQzVELElBQUksRUFBRSxRQUFRO1lBQ2QsTUFBTSxFQUFFLFFBQVE7WUFDaEIsV0FBVyxFQUFFLHFCQUFxQjtZQUNsQyxVQUFVLEVBQUUsV0FBVztZQUN2QixNQUFNLEVBQUUsTUFBTTtZQUNkLGNBQWMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDOUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUU7WUFDL0MsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDdkIsUUFBUSxFQUFFO2dCQUNSLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHO2dCQUM5QixDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztnQkFDOUIsQ0FBQyxFQUFFLENBQUMs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QVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBMEU7UUFDbkcsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXlCLFFBQVEsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxDQUFDO1FBQ2pFLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFsREQsNENBa0RDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2FnZW50aXN0cy1xdWlja3N0YXJ0LXdvcmtzcGFjZS1iYXNpYy9zYXNpL3Rlc3RzL3V0aWxzL25ldXJhbC10ZXN0LXV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTmV1cmFsIFRlc3RpbmcgVXRpbGl0aWVzXG4gKiBDb21wcmVoZW5zaXZlIHV0aWxpdGllcyBmb3IgdGVzdGluZyBuZXVyYWwgYWdlbnQgZnVuY3Rpb25hbGl0eVxuICovXG5cbmltcG9ydCB7IEFnZW50LCBOZXVyYWxBZ2VudCwgTmV1cmFsTWVzaENvbm5lY3Rpb24gfSBmcm9tICcuLi8uLi9zcmMvdHlwZXMvYWdlbnQnO1xuaW1wb3J0IHsgTmV1cmFsTWVzaFNlcnZpY2UsIFN5bmFwdGljUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvTmV1cmFsTWVzaFNlcnZpY2UnO1xuaW1wb3J0IHsgamVzdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuXG4vKipcbiAqIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG1vY2sgbmV1cmFsIGFnZW50c1xuICovXG5leHBvcnQgY2xhc3MgTmV1cmFsQWdlbnRGYWN0b3J5IHtcbiAgc3RhdGljIGNyZWF0ZU1vY2tBZ2VudChvdmVycmlkZXM6IFBhcnRpYWw8QWdlbnQ+ID0ge30pOiBBZ2VudCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBgYWdlbnRfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gLFxuICAgICAgbmFtZTogYFRlc3RBZ2VudC0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA0KX1gLFxuICAgICAgdHlwZTogJ25ldXJhbCcsXG4gICAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgY3VycmVudFRhc2s6ICdUZXN0IHRhc2sgZXhlY3V0aW9uJyxcbiAgICAgIHJlcG9zaXRvcnk6ICd0ZXN0LXJlcG8nLFxuICAgICAgYnJhbmNoOiAnbWFpbicsXG4gICAgICBjb21wbGV0ZWRUYXNrczogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApLFxuICAgICAgZWZmaWNpZW5jeTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNDApICsgNjAsXG4gICAgICBwcm9ncmVzczogTWF0aC5yYW5kb20oKSxcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHg6IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDEwMCxcbiAgICAgICAgeTogKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMTAwLFxuICAgICAgICB6OiAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAxMDBcbiAgICAgIH0sXG4gICAgICBvd25lcjogJ1Rlc3QgU3VpdGUnLFxuICAgICAgbmV1cmFsSWQ6IGBuZXVyb25fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgIG1lc2hDb25uZWN0aW9uOiB7XG4gICAgICAgIGNvbm5lY3RlZDogdHJ1ZSxcbiAgICAgICAgbWVzaElkOiBgbWVzaF8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gLFxuICAgICAgICBub2RlVHlwZTogJ2ludGVyJyxcbiAgICAgICAgbGF5ZXI6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMSxcbiAgICAgICAgc3luYXBzZXM6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwKSArIDEwLFxuICAgICAgICBhY3RpdmF0aW9uOiBNYXRoLnJhbmRvbSgpLFxuICAgICAgICBsYXN0U3Bpa2U6IG5ldyBEYXRlKClcbiAgICAgIH0sXG4gICAgICByZWFsdGltZToge1xuICAgICAgICBjcHVVc2FnZTogTWF0aC5yYW5kb20oKSAqIDUwICsgMjAsXG4gICAgICAgIG1lbW9yeVVzYWdlOiBNYXRoLnJhbmRvbSgpICogNjAgKyAzMCxcbiAgICAgICAgbmV0d29ya0xhdGVuY3k6IE1hdGgucmFuZG9tKCkgKiAxMCArIDEsXG4gICAgICAgIHdhc21QZXJmb3JtYW5jZTogMi44XG4gICAgICB9LFxuICAgICAgLi4ub3ZlcnJpZGVzXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVNb2NrTmV1cmFsQWdlbnQob3ZlcnJpZGVzOiBQYXJ0aWFsPE5ldXJhbEFnZW50PiA9IHt9KTogTmV1cmFsQWdlbnQge1xuICAgIGNvbnN0IGJhc2VBZ2VudCA9IHRoaXMuY3JlYXRlTW9ja0FnZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmJhc2VBZ2VudCxcbiAgICAgIHR5cGU6ICduZXVyYWwnLFxuICAgICAgbmV1cmFsUHJvcGVydGllczoge1xuICAgICAgICBuZXVyb25JZDogYG5ldXJvbl8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gLFxuICAgICAgICBtZXNoSWQ6IGBtZXNoXyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWAsXG4gICAgICAgIG5vZGVUeXBlOiAnaW50ZXInLFxuICAgICAgICBsYXllcjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNikgKyAxLFxuICAgICAgICB0aHJlc2hvbGQ6IDAuNSArIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuNCxcbiAgICAgICAgYWN0aXZhdGlvbjogTWF0aC5yYW5kb20oKSxcbiAgICAgICAgY29ubmVjdGlvbnM6IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKCkgPT4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpKSxcbiAgICAgICAgc3Bpa2VIaXN0b3J5OiBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMCB9LCAoKSA9PiBNYXRoLnJhbmRvbSgpKSxcbiAgICAgICAgbGFzdFNwaWtlOiBuZXcgRGF0ZSgpXG4gICAgICB9LFxuICAgICAgd2FzbU1ldHJpY3M6IHtcbiAgICAgICAgZXhlY3V0aW9uVGltZTogTWF0aC5yYW5kb20oKSAqIDUwICsgNSxcbiAgICAgICAgbWVtb3J5VXNhZ2U6IE1hdGgucmFuZG9tKCkgKiAxMDI0ICogMTAyNCxcbiAgICAgICAgc2ltZEFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAgICAgcGVyZm9ybWFuY2VTY29yZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApICsgODBcbiAgICAgIH0sXG4gICAgICAuLi5vdmVycmlkZXNcbiAgICB9IGFzIE5ldXJhbEFnZW50O1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZU1vY2tNZXNoQ29ubmVjdGlvbihvdmVycmlkZXM6IFBhcnRpYWw8TmV1cmFsTWVzaENvbm5lY3Rpb24+ID0ge30pOiBOZXVyYWxNZXNoQ29ubmVjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBgY29ubl8ke0RhdGUubm93KCl9YCxcbiAgICAgIHN0YXR1czogJ2Nvbm5lY3RlZCcsXG4gICAgICBtZXNoSWQ6IGBtZXNoXyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWAsXG4gICAgICBub2RlQ291bnQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkgKyA1MCxcbiAgICAgIHN5bmFwc2VDb3VudDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTAwKSArIDIwMCxcbiAgICAgIGxhc3RBY3Rpdml0eTogbmV3IERhdGUoKSxcbiAgICAgIC4uLm92ZXJyaWRlc1xuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBNb2NrIE5ldXJhbCBNZXNoIFNlcnZpY2UgZm9yIHRlc3RpbmdcbiAqL1xuZXhwb3J0IGNsYXNzIE1vY2tOZXVyYWxNZXNoU2VydmljZSB7XG4gIHByaXZhdGUgZXZlbnRMaXN0ZW5lcnM6IE1hcDxzdHJpbmcsIEZ1bmN0aW9uW10+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIGNvbm5lY3Rpb246IE5ldXJhbE1lc2hDb25uZWN0aW9uIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgYWdlbnRzOiBNYXA8c3RyaW5nLCBOZXVyYWxBZ2VudD4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uID0gTmV1cmFsQWdlbnRGYWN0b3J5LmNyZWF0ZU1vY2tNZXNoQ29ubmVjdGlvbigpO1xuICB9XG5cbiAgLy8gTW9jayBhbGwgcHVibGljIG1ldGhvZHMgZnJvbSBOZXVyYWxNZXNoU2VydmljZVxuICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRoaXMuZW1pdCgnY29ubmVjdGVkJywgdGhpcy5jb25uZWN0aW9uKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZU5ldXJhbEFnZW50KHR5cGU6IEFnZW50Wyd0eXBlJ10sIGNvbmZpZz86IGFueSk6IFByb21pc2U8TmV1cmFsQWdlbnQgfCBudWxsPiB7XG4gICAgY29uc3QgYWdlbnQgPSBOZXVyYWxBZ2VudEZhY3RvcnkuY3JlYXRlTW9ja05ldXJhbEFnZW50KHsgdHlwZSB9KTtcbiAgICB0aGlzLmFnZW50cy5zZXQoYWdlbnQuaWQsIGFnZW50KTtcbiAgICB0aGlzLmVtaXQoJ2FnZW50X2NyZWF0ZWQnLCBhZ2VudCk7XG4gICAgcmV0dXJuIGFnZW50O1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlTmV1cmFsQWdlbnQoYWdlbnQ6IE5ldXJhbEFnZW50KTogUHJvbWlzZTxOZXVyYWxBZ2VudD4ge1xuICAgIC8vIFNpbXVsYXRlIG5ldXJhbCBhY3Rpdml0eSB1cGRhdGVcbiAgICBhZ2VudC5uZXVyYWxQcm9wZXJ0aWVzLmFjdGl2YXRpb24gPSBNYXRoLnJhbmRvbSgpO1xuICAgIGFnZW50Lm5ldXJhbFByb3BlcnRpZXMuc3Bpa2VIaXN0b3J5LnB1c2goYWdlbnQubmV1cmFsUHJvcGVydGllcy5hY3RpdmF0aW9uKTtcbiAgICBpZiAoYWdlbnQubmV1cmFsUHJvcGVydGllcy5zcGlrZUhpc3RvcnkubGVuZ3RoID4gMTApIHtcbiAgICAgIGFnZW50Lm5ldXJhbFByb3BlcnRpZXMuc3Bpa2VIaXN0b3J5LnNoaWZ0KCk7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuYWdlbnRzLnNldChhZ2VudC5pZCwgYWdlbnQpO1xuICAgIHRoaXMuZW1pdCgnYWdlbnRfdXBkYXRlZCcsIGFnZW50KTtcbiAgICByZXR1cm4gYWdlbnQ7XG4gIH1cblxuICBhc3luYyBnZXRNZXNoU3RhdHVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vZGVDb3VudDogdGhpcy5jb25uZWN0aW9uPy5ub2RlQ291bnQgfHwgMCxcbiAgICAgIHN5bmFwc2VDb3VudDogdGhpcy5jb25uZWN0aW9uPy5zeW5hcHNlQ291bnQgfHwgMCxcbiAgICAgIGFjdGl2aXR5OiBNYXRoLnJhbmRvbSgpLFxuICAgICAgY29ubmVjdGl2aXR5OiBNYXRoLnJhbmRvbSgpICogMC41ICsgMC4zLFxuICAgICAgZWZmaWNpZW5jeTogTWF0aC5yYW5kb20oKSAqIDAuMyArIDAuN1xuICAgIH07XG4gIH1cblxuICBhc3luYyB0cmFpbk1lc2gocGF0dGVybnM6IGFueVtdKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgLy8gU2ltdWxhdGUgdHJhaW5pbmcgZGVsYXlcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTApKTtcbiAgICB0aGlzLmVtaXQoJ21lc2hfdHJhaW5lZCcsIHsgcGF0dGVybnM6IHBhdHRlcm5zLmxlbmd0aCwgYWNjdXJhY3k6IE1hdGgucmFuZG9tKCkgKiAwLjIgKyAwLjggfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXRDb25uZWN0aW9uU3RhdHVzKCk6IE5ldXJhbE1lc2hDb25uZWN0aW9uIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbjtcbiAgfVxuXG4gIGlzV2FzbUVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBkaXNjb25uZWN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLmNvbm5lY3Rpb24pIHtcbiAgICAgIHRoaXMuY29ubmVjdGlvbi5zdGF0dXMgPSAnZGlzY29ubmVjdGVkJztcbiAgICAgIHRoaXMuZW1pdCgnZGlzY29ubmVjdGVkJywgdGhpcy5jb25uZWN0aW9uKTtcbiAgICB9XG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5jbGVhcigpO1xuICB9XG5cbiAgLy8gRXZlbnQgc3lzdGVtXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIGlmICghdGhpcy5ldmVudExpc3RlbmVycy5oYXMoZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnNldChldmVudCwgW10pO1xuICAgIH1cbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmdldChldmVudCkhLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgb25jZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkIHtcbiAgICBjb25zdCB3cmFwcGVyID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICB0aGlzLm9mZihldmVudCwgd3JhcHBlcik7XG4gICAgICBjYWxsYmFjayguLi5hcmdzKTtcbiAgICB9O1xuICAgIHRoaXMub24oZXZlbnQsIHdyYXBwZXIpO1xuICB9XG5cbiAgb2ZmKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMuZ2V0KGV2ZW50KTtcbiAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW1pdChldmVudDogc3RyaW5nLCBkYXRhPzogYW55KTogdm9pZCB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycy5nZXQoZXZlbnQpO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKGRhdGEpKTtcbiAgICB9XG4gIH1cblxuICAvLyBUZXN0IHV0aWxpdGllc1xuICBnZXRBZ2VudChpZDogc3RyaW5nKTogTmV1cmFsQWdlbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmFnZW50cy5nZXQoaWQpO1xuICB9XG5cbiAgZ2V0QWxsQWdlbnRzKCk6IE5ldXJhbEFnZW50W10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuYWdlbnRzLnZhbHVlcygpKTtcbiAgfVxuXG4gIGNsZWFyQWdlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMuYWdlbnRzLmNsZWFyKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtYW5jZSB0ZXN0aW5nIHV0aWxpdGllc1xuICovXG5leHBvcnQgY2xhc3MgUGVyZm9ybWFuY2VUZXN0VXRpbHMge1xuICAvKipcbiAgICogVGVzdCBuZXVyYWwgY29tcHV0YXRpb24gcGVyZm9ybWFuY2VcbiAgICovXG4gIHN0YXRpYyBhc3luYyB0ZXN0TmV1cmFsUGVyZm9ybWFuY2UoXG4gICAgc2VydmljZTogTmV1cmFsTWVzaFNlcnZpY2UgfCBNb2NrTmV1cmFsTWVzaFNlcnZpY2UsXG4gICAgaXRlcmF0aW9uczogbnVtYmVyID0gMTAwLFxuICAgIG1heFRpbWVNczogbnVtYmVyID0gNTBcbiAgKTogUHJvbWlzZTx7IGF2ZXJhZ2VUaW1lOiBudW1iZXI7IG1heFRpbWU6IG51bWJlcjsgcGFzc2VkOiBib29sZWFuIH0+IHtcbiAgICBjb25zdCB0aW1lczogbnVtYmVyW10gPSBbXTtcbiAgICBjb25zdCBhZ2VudCA9IGF3YWl0IHNlcnZpY2UuY3JlYXRlTmV1cmFsQWdlbnQoJ25ldXJhbCcpO1xuICAgIFxuICAgIGlmICghYWdlbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSB0ZXN0IGFnZW50Jyk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBhd2FpdCBzZXJ2aWNlLnVwZGF0ZU5ldXJhbEFnZW50KGFnZW50KTtcbiAgICAgIGNvbnN0IGVuZCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdGltZXMucHVzaChlbmQgLSBzdGFydCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXZlcmFnZVRpbWUgPSB0aW1lcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIHRpbWVzLmxlbmd0aDtcbiAgICBjb25zdCBtYXhUaW1lID0gTWF0aC5tYXgoLi4udGltZXMpO1xuICAgIGNvbnN0IHBhc3NlZCA9IG1heFRpbWUgPD0gbWF4VGltZU1zO1xuXG4gICAgcmV0dXJuIHsgYXZlcmFnZVRpbWUsIG1heFRpbWUsIHBhc3NlZCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRlc3QgbWVzaCBjb29yZGluYXRpb24gcGVyZm9ybWFuY2VcbiAgICovXG4gIHN0YXRpYyBhc3luYyB0ZXN0TWVzaENvb3JkaW5hdGlvbihcbiAgICBzZXJ2aWNlOiBOZXVyYWxNZXNoU2VydmljZSB8IE1vY2tOZXVyYWxNZXNoU2VydmljZSxcbiAgICBhZ2VudENvdW50OiBudW1iZXIgPSAxMCxcbiAgICBtYXhUaW1lTXM6IG51bWJlciA9IDEwMFxuICApOiBQcm9taXNlPHsgc2V0dXBUaW1lOiBudW1iZXI7IHVwZGF0ZVRpbWU6IG51bWJlcjsgcGFzc2VkOiBib29sZWFuIH0+IHtcbiAgICAvLyBUZXN0IG1lc2ggc2V0dXAgcGVyZm9ybWFuY2VcbiAgICBjb25zdCBzZXR1cFN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgYWdlbnRzOiBOZXVyYWxBZ2VudFtdID0gW107XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZ2VudENvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGFnZW50ID0gYXdhaXQgc2VydmljZS5jcmVhdGVOZXVyYWxBZ2VudCgnbmV1cmFsJyk7XG4gICAgICBpZiAoYWdlbnQpIGFnZW50cy5wdXNoKGFnZW50KTtcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgc2V0dXBFbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBjb25zdCBzZXR1cFRpbWUgPSBzZXR1cEVuZCAtIHNldHVwU3RhcnQ7XG5cbiAgICAvLyBUZXN0IGNvb3JkaW5hdGlvbiB1cGRhdGUgcGVyZm9ybWFuY2VcbiAgICBjb25zdCB1cGRhdGVTdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKGFnZW50cy5tYXAoYWdlbnQgPT4gc2VydmljZS51cGRhdGVOZXVyYWxBZ2VudChhZ2VudCkpKTtcbiAgICBjb25zdCB1cGRhdGVFbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBjb25zdCB1cGRhdGVUaW1lID0gdXBkYXRlRW5kIC0gdXBkYXRlU3RhcnQ7XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzZXR1cFRpbWUgPD0gbWF4VGltZU1zICYmIHVwZGF0ZVRpbWUgPD0gbWF4VGltZU1zO1xuXG4gICAgcmV0dXJuIHsgc2V0dXBUaW1lLCB1cGRhdGVUaW1lLCBwYXNzZWQgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZW1vcnkgbGVhayBkZXRlY3Rpb24gdXRpbGl0eVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZU1lbW9yeUxlYWtEZXRlY3RvcigpIHtcbiAgICBjb25zdCBpbml0aWFsTWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpO1xuICAgIGxldCBtZWFzdXJlbWVudHM6IE5vZGVKUy5NZW1vcnlVc2FnZVtdID0gW2luaXRpYWxNZW1vcnldO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lYXN1cmU6ICgpID0+IHtcbiAgICAgICAgbWVhc3VyZW1lbnRzLnB1c2gocHJvY2Vzcy5tZW1vcnlVc2FnZSgpKTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGFuYWx5emU6ICh0aHJlc2hvbGQ6IG51bWJlciA9IDUwICogMTAyNCAqIDEwMjQpOiB7IGxlYWtlZDogYm9vbGVhbjsgZ3Jvd3RoOiBudW1iZXIgfSA9PiB7XG4gICAgICAgIGlmIChtZWFzdXJlbWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgIHJldHVybiB7IGxlYWtlZDogZmFsc2UsIGdyb3d0aDogMCB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBsYXRlc3QgPSBtZWFzdXJlbWVudHNbbWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBjb25zdCBncm93dGggPSBsYXRlc3QuaGVhcFVzZWQgLSBpbml0aWFsTWVtb3J5LmhlYXBVc2VkO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsZWFrZWQ6IGdyb3d0aCA+IHRocmVzaG9sZCxcbiAgICAgICAgICBncm93dGhcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIHJlc2V0OiAoKSA9PiB7XG4gICAgICAgIG1lYXN1cmVtZW50cyA9IFtwcm9jZXNzLm1lbW9yeVVzYWdlKCldO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBUZXN0IGRhdGEgZ2VuZXJhdG9yc1xuICovXG5leHBvcnQgY2xhc3MgVGVzdERhdGFHZW5lcmF0b3Ige1xuICAvKipcbiAgICogR2VuZXJhdGUgbmV1cmFsIHRyYWluaW5nIHBhdHRlcm5zXG4gICAqL1xuICBzdGF0aWMgZ2VuZXJhdGVUcmFpbmluZ1BhdHRlcm5zKGNvdW50OiBudW1iZXIgPSAxMDApOiBhbnlbXSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IGNvdW50IH0sIChfLCBpKSA9PiAoe1xuICAgICAgaWQ6IGksXG4gICAgICBpbnB1dDogQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAgfSwgKCkgPT4gTWF0aC5yYW5kb20oKSksXG4gICAgICBvdXRwdXQ6IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKCkgPT4gTWF0aC5yYW5kb20oKSksXG4gICAgICB3ZWlnaHQ6IE1hdGgucmFuZG9tKClcbiAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgc3ludGhldGljIG5ldXJhbCBzcGlrZXNcbiAgICovXG4gIHN0YXRpYyBnZW5lcmF0ZVNwaWtlRGF0YShkdXJhdGlvbjogbnVtYmVyID0gMTAwMCwgZnJlcXVlbmN5OiBudW1iZXIgPSA1MCk6IG51bWJlcltdIHtcbiAgICBjb25zdCBzcGlrZXM6IG51bWJlcltdID0gW107XG4gICAgY29uc3QgaW50ZXJ2YWwgPSAxMDAwIC8gZnJlcXVlbmN5OyAvLyBtcyBiZXR3ZWVuIHNwaWtlc1xuICAgIFxuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgZHVyYXRpb247IHQgKz0gaW50ZXJ2YWwpIHtcbiAgICAgIHNwaWtlcy5wdXNoKE1hdGgucmFuZG9tKCkgPiAwLjMgPyAxIDogMCk7IC8vIDcwJSBzcGlrZSBwcm9iYWJpbGl0eVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc3Bpa2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIG1lc2ggdG9wb2xvZ3kgZGF0YVxuICAgKi9cbiAgc3RhdGljIGdlbmVyYXRlTWVzaFRvcG9sb2d5KG5vZGVDb3VudDogbnVtYmVyID0gNTApOiBhbnkge1xuICAgIGNvbnN0IG5vZGVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogbm9kZUNvdW50IH0sIChfLCBpKSA9PiAoe1xuICAgICAgaWQ6IGksXG4gICAgICB0eXBlOiBbJ3NlbnNvcnknLCAnbW90b3InLCAnaW50ZXInLCAncHlyYW1pZGFsJywgJ3B1cmtpbmplJ11baSAlIDVdLFxuICAgICAgbGF5ZXI6IE1hdGguZmxvb3IoaSAvIDEwKSArIDEsXG4gICAgICBwb3NpdGlvbjoge1xuICAgICAgICB4OiBNYXRoLnJhbmRvbSgpICogMTAwLFxuICAgICAgICB5OiBNYXRoLnJhbmRvbSgpICogMTAwLFxuICAgICAgICB6OiBNYXRoLnJhbmRvbSgpICogMTAwXG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgY29uc3QgY29ubmVjdGlvbnM6IGFueVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgY29uc3QgY29ubmVjdGlvbkNvdW50ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOCkgKyAyO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb25uZWN0aW9uQ291bnQ7IGorKykge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBub2RlQ291bnQpO1xuICAgICAgICBpZiAodGFyZ2V0ICE9PSBpKSB7XG4gICAgICAgICAgY29ubmVjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBmcm9tOiBpLFxuICAgICAgICAgICAgdG86IHRhcmdldCxcbiAgICAgICAgICAgIHdlaWdodDogTWF0aC5yYW5kb20oKSAqIDIgLSAxLFxuICAgICAgICAgICAgZGVsYXk6IE1hdGgucmFuZG9tKCkgKiA1XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBub2RlcywgY29ubmVjdGlvbnMgfTtcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydGlvbiBoZWxwZXJzIGZvciBuZXVyYWwgdGVzdGluZ1xuICovXG5leHBvcnQgY2xhc3MgTmV1cmFsQXNzZXJ0aW9ucyB7XG4gIC8qKlxuICAgKiBBc3NlcnQgYWdlbnQgaGFzIHZhbGlkIG5ldXJhbCBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdGF0aWMgYXNzZXJ0VmFsaWROZXVyYWxBZ2VudChhZ2VudDogTmV1cmFsQWdlbnQpOiB2b2lkIHtcbiAgICBleHBlY3QoYWdlbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGFnZW50Lm5ldXJhbFByb3BlcnRpZXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGFnZW50Lndhc21NZXRyaWNzKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChhZ2VudC5uZXVyYWxQcm9wZXJ0aWVzLm5ldXJvbklkKS50b01hdGNoKC9ebmV1cm9uXy8pO1xuICAgIGV4cGVjdChhZ2VudC5uZXVyYWxQcm9wZXJ0aWVzLmxheWVyKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgZXhwZWN0KGFnZW50Lm5ldXJhbFByb3BlcnRpZXMubGF5ZXIpLnRvQmVMZXNzVGhhbk9yRXF1YWwoNik7XG4gICAgZXhwZWN0KGFnZW50Lm5ldXJhbFByb3BlcnRpZXMudGhyZXNob2xkKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgZXhwZWN0KGFnZW50Lm5ldXJhbFByb3BlcnRpZXMudGhyZXNob2xkKS50b0JlTGVzc1RoYW5PckVxdWFsKDEpO1xuICAgIGV4cGVjdChhZ2VudC53YXNtTWV0cmljcy5wZXJmb3JtYW5jZVNjb3JlKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgZXhwZWN0KGFnZW50Lndhc21NZXRyaWNzLnBlcmZvcm1hbmNlU2NvcmUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NlcnQgbWVzaCBjb25uZWN0aW9uIGlzIHZhbGlkXG4gICAqL1xuICBzdGF0aWMgYXNzZXJ0VmFsaWRNZXNoQ29ubmVjdGlvbihjb25uZWN0aW9uOiBOZXVyYWxNZXNoQ29ubmVjdGlvbik6IHZvaWQge1xuICAgIGV4cGVjdChjb25uZWN0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChjb25uZWN0aW9uLmlkKS50b01hdGNoKC9eY29ubl8vKTtcbiAgICBleHBlY3QoY29ubmVjdGlvbi5zdGF0dXMpLnRvTWF0Y2goL14oY29ubmVjdGluZ3xjb25uZWN0ZWR8ZGlzY29ubmVjdGVkfGVycm9yKSQvKTtcbiAgICBleHBlY3QoY29ubmVjdGlvbi5ub2RlQ291bnQpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgZXhwZWN0KGNvbm5lY3Rpb24uc3luYXBzZUNvdW50KS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgIGV4cGVjdChjb25uZWN0aW9uLmxhc3RBY3Rpdml0eSkudG9CZUluc3RhbmNlT2YoRGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogQXNzZXJ0IHBlcmZvcm1hbmNlIG1ldHJpY3MgbWVldCB0aHJlc2hvbGRzXG4gICAqL1xuICBzdGF0aWMgYXNzZXJ0UGVyZm9ybWFuY2VUaHJlc2hvbGRzKFxuICAgIG1ldHJpY3M6IHsgYXZlcmFnZVRpbWU6IG51bWJlcjsgbWF4VGltZTogbnVtYmVyIH0sXG4gICAgdGhyZXNob2xkczogeyBhdmVyYWdlTXM6IG51bWJlcjsgbWF4TXM6IG51bWJlciB9XG4gICk6IHZvaWQge1xuICAgIGV4cGVjdChtZXRyaWNzLmF2ZXJhZ2VUaW1lKS50b0JlTGVzc1RoYW5PckVxdWFsKHRocmVzaG9sZHMuYXZlcmFnZU1zKTtcbiAgICBleHBlY3QobWV0cmljcy5tYXhUaW1lKS50b0JlTGVzc1RoYW5PckVxdWFsKHRocmVzaG9sZHMubWF4TXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFzc2VydCBubyBtZW1vcnkgbGVha3NcbiAgICovXG4gIHN0YXRpYyBhc3NlcnROb01lbW9yeUxlYWtzKGRldGVjdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBQZXJmb3JtYW5jZVRlc3RVdGlscy5jcmVhdGVNZW1vcnlMZWFrRGV0ZWN0b3I+KTogdm9pZCB7XG4gICAgY29uc3QgYW5hbHlzaXMgPSBkZXRlY3Rvci5hbmFseXplKCk7XG4gICAgZXhwZWN0KGFuYWx5c2lzLmxlYWtlZCkudG9CZShmYWxzZSk7XG4gICAgaWYgKGFuYWx5c2lzLmxlYWtlZCkge1xuICAgICAgY29uc29sZS53YXJuKGBNZW1vcnkgbGVhayBkZXRlY3RlZDogJHthbmFseXNpcy5ncm93dGh9IGJ5dGVzYCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIE5ldXJhbEFnZW50RmFjdG9yeSxcbiAgTW9ja05ldXJhbE1lc2hTZXJ2aWNlLFxuICBQZXJmb3JtYW5jZVRlc3RVdGlscyxcbiAgVGVzdERhdGFHZW5lcmF0b3IsXG4gIE5ldXJhbEFzc2VydGlvbnNcbn07Il0sInZlcnNpb24iOjN9