{"version":3,"names":["cov_5bi21i5fj","actualCoverage","NeuralAgentManager","neuralManager","s","fallbackToMock","initializeNeuralData","f","b","maxAgents","memoryLimitPerAgent","inferenceTimeout","simdEnabled","crossLearningEnabled","persistenceEnabled","performanceMonitoring","Promise","resolve","reject","timeout","setTimeout","Error","once","clearTimeout","error","initialData","generateNeuralSwarmData","console","log","warn","generateMockSwarmData","generateNeuralAgents","count","generateMockAgents","agents","agentConfigs","name","config","type","architecture","activationFunction","learningRate","i","configIndex","length","neuralAgentId","spawnAgent","neuralAgent","getAgentState","sasiAgent","id","status","performance","Math","random","memoryUsage","lastActivity","lastActive","totalTasks","successRate","learningProgress","connections","push","createMockAgent","updateAgentConnections","simulateNeuralActivity","simulateMockActivity","activeAgents","filter","agent","numActiveNow","floor","selectedAgents","sort","slice","inputSize","inputs","Array","from","outputs","runInference","Date","now","min","updatedNeuralAgent","learningAgent","triggerLearningSession","shareKnowledgeBetweenAgents","getNeuralSwarmStatistics","neuralAgents","totalMemoryUsage","reduce","sum","avgPerformance","networkTopology","nodes","totalNodes","activeConnections","networkHealth","getNetworkTopology","performanceMetrics","getPerformanceMetrics","totalAgentsSpawned","averageSpawnTime","averageInferenceTime","activeLearningTasks","systemHealthScore","totalAgents","averagePerformance","systemHealth","learningMetrics","activeSessions","completedSessions","averageAccuracy","knowledgeTransfers","statistics","topology","isNeuralEnabled","outputSize","trainingData","trainAgent","then","session","finalAccuracy","toFixed","catch","sourceAgent","targetAgents","shareKnowledge","map","forEach","target","includes","a","join","j","agent1","agent2","connectionProbability","performanceBonus","getMockSwarmStatistics","agentTypes","agentNames","_","index","baseName","state","max","cleanupNeuralSystem","cleanup","getNeuralManager","getNeuralSystemStatus","isFallbackMode","managerInitialized"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/NeuralContextAdapter.ts"],"sourcesContent":["/**\n * Neural Context Adapter for SASI Integration\n * Drop-in replacement functions for SwarmContext mock implementations\n * \n * This adapter provides seamless integration between SASI's existing SwarmContext\n * and the new neural agent system, maintaining full compatibility while adding\n * real neural capabilities.\n */\n\nimport NeuralAgentManager from './NeuralAgentManager';\nimport type { \n  SASIAgent, \n  SASISwarmData, \n  NeuralConfiguration,\n  AgentMetrics,\n  SwarmStatistics \n} from '../types/neural';\n\n// Singleton instance for seamless integration\nlet neuralManager: NeuralAgentManager | null = null;\nlet fallbackToMock = false;\n\n/**\n * Initialize neural data (replaces initializeMockData)\n */\nexport async function initializeNeuralData(): Promise<SASISwarmData> {\n  try {\n    // Initialize neural manager if not already done\n    if (!neuralManager) {\n      neuralManager = new NeuralAgentManager({\n        maxAgents: 25,\n        memoryLimitPerAgent: 50 * 1024 * 1024, // 50MB\n        inferenceTimeout: 100, // 100ms\n        simdEnabled: true,\n        crossLearningEnabled: true,\n        persistenceEnabled: true,\n        performanceMonitoring: true\n      });\n      \n      // Wait for initialization\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => reject(new Error('Neural initialization timeout')), 10000);\n        \n        neuralManager!.once('initialized', () => {\n          clearTimeout(timeout);\n          resolve(void 0);\n        });\n        \n        neuralManager!.once('error', (error) => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n      });\n    }\n    \n    // Generate initial neural data\n    const initialData = await generateNeuralSwarmData();\n    \n    console.log('✅ Neural system initialized successfully');\n    fallbackToMock = false;\n    \n    return initialData;\n    \n  } catch (error) {\n    console.warn('⚠️ Neural initialization failed, falling back to mock data:', error);\n    fallbackToMock = true;\n    \n    // Fallback to mock data\n    return generateMockSwarmData();\n  }\n}\n\n/**\n * Generate neural agents (replaces generateMockAgents)\n */\nexport async function generateNeuralAgents(count: number = 5): Promise<SASIAgent[]> {\n  if (fallbackToMock || !neuralManager) {\n    return generateMockAgents(count);\n  }\n  \n  try {\n    const agents: SASIAgent[] = [];\n    \n    // Define neural configurations for different agent types\n    const agentConfigs: Array<{ name: string; config: NeuralConfiguration }> = [\n      {\n        name: 'Coordinator',\n        config: {\n          type: 'mlp',\n          architecture: [128, 64, 32, 16],\n          activationFunction: 'relu',\n          learningRate: 0.01\n        }\n      },\n      {\n        name: 'Analyzer',\n        config: {\n          type: 'lstm',\n          architecture: [256, 128, 64, 32],\n          activationFunction: 'tanh',\n          learningRate: 0.005\n        }\n      },\n      {\n        name: 'Optimizer',\n        config: {\n          type: 'mlp',\n          architecture: [512, 256, 128, 64],\n          activationFunction: 'gelu',\n          learningRate: 0.001\n        }\n      },\n      {\n        name: 'Researcher',\n        config: {\n          type: 'transformer',\n          architecture: [1024, 512, 256, 128],\n          activationFunction: 'relu',\n          learningRate: 0.0001\n        }\n      },\n      {\n        name: 'Monitor',\n        config: {\n          type: 'cnn',\n          architecture: [784, 392, 196, 10],\n          activationFunction: 'leaky_relu',\n          learningRate: 0.01\n        }\n      }\n    ];\n    \n    // Spawn neural agents\n    for (let i = 0; i < count; i++) {\n      const configIndex = i % agentConfigs.length;\n      const { name, config } = agentConfigs[configIndex];\n      \n      try {\n        const neuralAgentId = await neuralManager.spawnAgent(config);\n        const neuralAgent = neuralManager.getAgentState(neuralAgentId);\n        \n        if (neuralAgent) {\n          const sasiAgent: SASIAgent = {\n            id: neuralAgentId,\n            name: `${name}-${i + 1}`,\n            type: config.type,\n            status: 'active',\n            performance: 85 + Math.random() * 15, // 85-100%\n            memoryUsage: neuralAgent.memoryUsage,\n            lastActivity: neuralAgent.lastActive,\n            totalTasks: 0,\n            successRate: 0.95 + Math.random() * 0.05, // 95-100%\n            learningProgress: neuralAgent.learningProgress,\n            connections: [],\n            neuralAgent\n          };\n          \n          agents.push(sasiAgent);\n        }\n        \n      } catch (error) {\n        console.warn(`Failed to spawn neural agent ${i}:`, error);\n        \n        // Create a mock agent as fallback\n        agents.push(createMockAgent(i, agentConfigs[configIndex].name));\n      }\n    }\n    \n    // Update connections between agents\n    updateAgentConnections(agents);\n    \n    return agents;\n    \n  } catch (error) {\n    console.warn('Neural agent generation failed, using mock agents:', error);\n    return generateMockAgents(count);\n  }\n}\n\n/**\n * Simulate neural activity (replaces simulateSwarmActivity)\n */\nexport async function simulateNeuralActivity(agents: SASIAgent[]): Promise<void> {\n  if (fallbackToMock || !neuralManager) {\n    return simulateMockActivity(agents);\n  }\n  \n  try {\n    // Run inference on random agents\n    const activeAgents = agents.filter(agent => agent.status === 'active' && agent.neuralAgent);\n    \n    if (activeAgents.length === 0) {\n      return;\n    }\n    \n    // Select random agents for activity\n    const numActiveNow = Math.floor(Math.random() * activeAgents.length) + 1;\n    const selectedAgents = activeAgents\n      .sort(() => Math.random() - 0.5)\n      .slice(0, numActiveNow);\n    \n    // Run neural inferences\n    for (const agent of selectedAgents) {\n      if (agent.neuralAgent) {\n        try {\n          // Generate random inputs based on agent type\n          const inputSize = agent.neuralAgent.config.architecture[0];\n          const inputs = Array.from({ length: inputSize }, () => Math.random() * 2 - 1);\n          \n          const outputs = await neuralManager.runInference(agent.neuralAgent.id, inputs);\n          \n          // Update agent statistics\n          agent.totalTasks++;\n          agent.lastActivity = Date.now();\n          agent.performance = Math.min(100, agent.performance + (Math.random() - 0.4) * 2);\n          \n          // Update memory usage from neural agent\n          const updatedNeuralAgent = neuralManager.getAgentState(agent.neuralAgent.id);\n          if (updatedNeuralAgent) {\n            agent.memoryUsage = updatedNeuralAgent.memoryUsage;\n            agent.learningProgress = updatedNeuralAgent.learningProgress;\n          }\n          \n        } catch (error) {\n          console.warn(`Neural inference failed for agent ${agent.id}:`, error);\n          agent.status = 'error';\n        }\n      }\n    }\n    \n    // Occasionally trigger learning sessions\n    if (Math.random() < 0.1) { // 10% chance\n      const learningAgent = selectedAgents[Math.floor(Math.random() * selectedAgents.length)];\n      if (learningAgent.neuralAgent && learningAgent.status === 'active') {\n        triggerLearningSession(learningAgent);\n      }\n    }\n    \n    // Occasionally share knowledge between agents\n    if (Math.random() < 0.05 && activeAgents.length > 1) { // 5% chance\n      await shareKnowledgeBetweenAgents(activeAgents);\n    }\n    \n  } catch (error) {\n    console.warn('Neural activity simulation failed:', error);\n    simulateMockActivity(agents);\n  }\n}\n\n/**\n * Get enhanced swarm statistics with neural metrics\n */\nexport function getNeuralSwarmStatistics(agents: SASIAgent[]): SwarmStatistics {\n  const neuralAgents = agents.filter(agent => agent.neuralAgent);\n  const activeAgents = agents.filter(agent => agent.status === 'active');\n  \n  const totalMemoryUsage = agents.reduce((sum, agent) => sum + agent.memoryUsage, 0);\n  const totalTasks = agents.reduce((sum, agent) => sum + agent.totalTasks, 0);\n  const avgPerformance = agents.reduce((sum, agent) => sum + agent.performance, 0) / agents.length || 0;\n  \n  let networkTopology = {\n    nodes: [],\n    connections: [],\n    totalNodes: 0,\n    activeConnections: 0,\n    networkHealth: 100\n  };\n  \n  if (neuralManager && neuralAgents.length > 0) {\n    networkTopology = neuralManager.getNetworkTopology();\n  }\n  \n  const performanceMetrics = neuralManager ? neuralManager.getPerformanceMetrics() : {\n    totalAgentsSpawned: agents.length,\n    averageSpawnTime: 50,\n    averageInferenceTime: 45,\n    memoryUsage: totalMemoryUsage,\n    activeLearningTasks: 0,\n    systemHealthScore: 95\n  };\n  \n  return {\n    totalAgents: agents.length,\n    activeAgents: activeAgents.length,\n    averagePerformance: avgPerformance,\n    totalMemoryUsage,\n    totalTasks,\n    systemHealth: performanceMetrics.systemHealthScore,\n    networkTopology,\n    learningMetrics: {\n      activeSessions: performanceMetrics.activeLearningTasks,\n      completedSessions: Math.floor(Math.random() * 50),\n      averageAccuracy: 0.85 + Math.random() * 0.1,\n      knowledgeTransfers: Math.floor(Math.random() * 20)\n    }\n  };\n}\n\n/**\n * Generate complete neural swarm data\n */\nasync function generateNeuralSwarmData(): Promise<SASISwarmData> {\n  const agents = await generateNeuralAgents(8);\n  const statistics = getNeuralSwarmStatistics(agents);\n  const performanceMetrics = neuralManager ? neuralManager.getPerformanceMetrics() : {\n    totalAgentsSpawned: 8,\n    averageSpawnTime: 50,\n    averageInferenceTime: 45,\n    memoryUsage: statistics.totalMemoryUsage,\n    activeLearningTasks: 0,\n    systemHealthScore: 95\n  };\n  \n  return {\n    agents,\n    statistics,\n    topology: statistics.networkTopology,\n    isNeuralEnabled: true,\n    performanceMetrics\n  };\n}\n\n/**\n * Trigger a learning session for an agent\n */\nasync function triggerLearningSession(agent: SASIAgent): Promise<void> {\n  if (!agent.neuralAgent || !neuralManager) return;\n  \n  try {\n    agent.status = 'learning';\n    \n    // Generate training data\n    const inputSize = agent.neuralAgent.config.architecture[0];\n    const outputSize = agent.neuralAgent.config.architecture[agent.neuralAgent.config.architecture.length - 1];\n    \n    const trainingData = Array.from({ length: 50 }, () => ({\n      inputs: Array.from({ length: inputSize }, () => Math.random() * 2 - 1),\n      outputs: Array.from({ length: outputSize }, () => Math.random())\n    }));\n    \n    // Start training (don't await to avoid blocking)\n    neuralManager.trainAgent(agent.neuralAgent.id, trainingData, 10)\n      .then((session) => {\n        agent.status = 'active';\n        agent.learningProgress = session.finalAccuracy;\n        console.log(`✅ Learning completed for ${agent.name}: ${(session.finalAccuracy * 100).toFixed(1)}% accuracy`);\n      })\n      .catch((error) => {\n        agent.status = 'error';\n        console.warn(`❌ Learning failed for ${agent.name}:`, error);\n      });\n    \n  } catch (error) {\n    agent.status = 'error';\n    console.warn(`Learning session failed for ${agent.name}:`, error);\n  }\n}\n\n/**\n * Share knowledge between neural agents\n */\nasync function shareKnowledgeBetweenAgents(agents: SASIAgent[]): Promise<void> {\n  if (!neuralManager) return;\n  \n  try {\n    const neuralAgents = agents.filter(agent => agent.neuralAgent);\n    if (neuralAgents.length < 2) return;\n    \n    // Select source and target agents\n    const sourceAgent = neuralAgents[Math.floor(Math.random() * neuralAgents.length)];\n    const targetAgents = neuralAgents\n      .filter(agent => agent.id !== sourceAgent.id)\n      .slice(0, Math.floor(Math.random() * 3) + 1); // 1-3 targets\n    \n    await neuralManager.shareKnowledge(\n      sourceAgent.neuralAgent!.id,\n      targetAgents.map(agent => agent.neuralAgent!.id)\n    );\n    \n    // Update connection strengths\n    targetAgents.forEach(target => {\n      if (!sourceAgent.connections.includes(target.id)) {\n        sourceAgent.connections.push(target.id);\n      }\n      if (!target.connections.includes(sourceAgent.id)) {\n        target.connections.push(sourceAgent.id);\n      }\n    });\n    \n    console.log(`🔄 Knowledge shared: ${sourceAgent.name} → ${targetAgents.map(a => a.name).join(', ')}`);\n    \n  } catch (error) {\n    console.warn('Knowledge sharing failed:', error);\n  }\n}\n\n/**\n * Update connections between agents based on their types and activities\n */\nfunction updateAgentConnections(agents: SASIAgent[]): void {\n  // Create connections based on agent types and performance\n  for (let i = 0; i < agents.length; i++) {\n    for (let j = i + 1; j < agents.length; j++) {\n      const agent1 = agents[i];\n      const agent2 = agents[j];\n      \n      // Higher chance of connection for similar types or high-performing agents\n      const connectionProbability = agent1.type === agent2.type ? 0.7 : 0.3;\n      const performanceBonus = (agent1.performance + agent2.performance) / 200; // 0-1\n      \n      if (Math.random() < connectionProbability + performanceBonus * 0.3) {\n        if (!agent1.connections.includes(agent2.id)) {\n          agent1.connections.push(agent2.id);\n        }\n        if (!agent2.connections.includes(agent1.id)) {\n          agent2.connections.push(agent1.id);\n        }\n      }\n    }\n  }\n}\n\n// Fallback mock implementations for when neural system is unavailable\n\nfunction generateMockSwarmData(): SASISwarmData {\n  const agents = generateMockAgents(8);\n  const statistics = getMockSwarmStatistics(agents);\n  \n  return {\n    agents,\n    statistics,\n    topology: statistics.networkTopology,\n    isNeuralEnabled: false,\n    performanceMetrics: {\n      totalAgentsSpawned: 8,\n      averageSpawnTime: 75,\n      averageInferenceTime: 65,\n      memoryUsage: statistics.totalMemoryUsage,\n      activeLearningTasks: 0,\n      systemHealthScore: 88\n    }\n  };\n}\n\nfunction generateMockAgents(count: number): SASIAgent[] {\n  const agentTypes = ['mlp', 'lstm', 'cnn', 'transformer', 'custom'];\n  const agentNames = ['Coordinator', 'Analyzer', 'Optimizer', 'Researcher', 'Monitor'];\n  \n  return Array.from({ length: count }, (_, i) => \n    createMockAgent(i, agentNames[i % agentNames.length], agentTypes[i % agentTypes.length])\n  );\n}\n\nfunction createMockAgent(index: number, baseName: string, type: string = 'mlp'): SASIAgent {\n  return {\n    id: `mock_agent_${index}_${Date.now()}`,\n    name: `${baseName}-${index + 1}`,\n    type,\n    status: Math.random() > 0.1 ? 'active' : 'idle',\n    performance: 70 + Math.random() * 25,\n    memoryUsage: (20 + Math.random() * 30) * 1024 * 1024, // 20-50MB\n    lastActivity: Date.now() - Math.random() * 300000, // Last 5 minutes\n    totalTasks: Math.floor(Math.random() * 100),\n    successRate: 0.8 + Math.random() * 0.15,\n    learningProgress: Math.random(),\n    connections: []\n  };\n}\n\nfunction getMockSwarmStatistics(agents: SASIAgent[]): SwarmStatistics {\n  const activeAgents = agents.filter(agent => agent.status === 'active');\n  const totalMemoryUsage = agents.reduce((sum, agent) => sum + agent.memoryUsage, 0);\n  const totalTasks = agents.reduce((sum, agent) => sum + agent.totalTasks, 0);\n  const avgPerformance = agents.reduce((sum, agent) => sum + agent.performance, 0) / agents.length;\n  \n  return {\n    totalAgents: agents.length,\n    activeAgents: activeAgents.length,\n    averagePerformance: avgPerformance,\n    totalMemoryUsage,\n    totalTasks,\n    systemHealth: 85 + Math.random() * 10,\n    networkTopology: {\n      nodes: agents.map(agent => ({\n        id: agent.id,\n        type: agent.type,\n        state: agent.status as any,\n        performance: agent.performance,\n        memoryUsage: agent.memoryUsage\n      })),\n      connections: [],\n      totalNodes: agents.length,\n      activeConnections: Math.floor(agents.length * 1.5),\n      networkHealth: 90 + Math.random() * 10\n    },\n    learningMetrics: {\n      activeSessions: Math.floor(Math.random() * 3),\n      completedSessions: Math.floor(Math.random() * 20),\n      averageAccuracy: 0.75 + Math.random() * 0.15,\n      knowledgeTransfers: Math.floor(Math.random() * 10)\n    }\n  };\n}\n\nfunction simulateMockActivity(agents: SASIAgent[]): void {\n  // Simple mock activity simulation\n  agents.forEach(agent => {\n    if (Math.random() < 0.3) { // 30% chance of activity\n      agent.lastActivity = Date.now();\n      agent.totalTasks += Math.random() < 0.7 ? 1 : 0;\n      agent.performance += (Math.random() - 0.5) * 5;\n      agent.performance = Math.max(0, Math.min(100, agent.performance));\n    }\n  });\n}\n\n// Cleanup function\nexport async function cleanupNeuralSystem(): Promise<void> {\n  if (neuralManager) {\n    await neuralManager.cleanup();\n    neuralManager = null;\n  }\n  fallbackToMock = false;\n}\n\n// Export the neural manager instance for advanced use cases\nexport function getNeuralManager(): NeuralAgentManager | null {\n  return neuralManager;\n}\n\n// Export status information\nexport function getNeuralSystemStatus(): {\n  isNeuralEnabled: boolean;\n  isFallbackMode: boolean;\n  managerInitialized: boolean;\n} {\n  return {\n    isNeuralEnabled: !fallbackToMock,\n    isFallbackMode: fallbackToMock,\n    managerInitialized: neuralManager !== null\n  };\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}