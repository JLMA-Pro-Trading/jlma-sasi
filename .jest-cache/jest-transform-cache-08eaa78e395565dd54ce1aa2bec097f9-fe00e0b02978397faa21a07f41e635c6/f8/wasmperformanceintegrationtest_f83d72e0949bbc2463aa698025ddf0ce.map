{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/wasm-performance-integration.test.ts","mappings":";AAAA;;;;;GAKG;;AAEH,2CAAkG;AAClG,qFAAiF;AACjF,uFAAmF;AACnF,+EAA2E;AAC3E,kEAAiE;AAEjE,IAAA,kBAAQ,EAAC,gDAAgD,EAAE,GAAG,EAAE;IAC9D,IAAI,oBAA0C,CAAA;IAC9C,IAAI,qBAA4C,CAAA;IAChD,IAAI,iBAAoC,CAAA;IACxC,IAAI,cAAgF,CAAA;IAEpF,IAAA,mBAAS,EAAC,KAAK,IAAI,EAAE;QACnB,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAA;QAElE,wBAAwB;QACxB,oBAAoB,GAAG,IAAI,2CAAoB,EAAE,CAAA;QACjD,qBAAqB,GAAG,IAAI,6CAAqB,EAAE,CAAA;QACnD,iBAAiB,GAAG,IAAI,qCAAiB,CAAC;YACxC,eAAe,EAAE,WAAW;YAC5B,UAAU,EAAE,IAAI;YAChB,WAAW,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;YAC7B,eAAe,EAAE,IAAI;SACtB,CAAC,CAAA;QAEF,4BAA4B;QAC5B,MAAM,iBAAiB,CAAC,UAAU,EAAE,CAAA;QAEpC,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAA;IACpE,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,KAAK,IAAI,EAAE;QAClB,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAA;QAEnE,IAAI,iBAAiB,EAAE,CAAC;YACtB,MAAM,iBAAiB,CAAC,OAAO,EAAE,CAAA;QACnC,CAAC;QAED,IAAI,oBAAoB,EAAE,CAAC;YACzB,oBAAoB,CAAC,OAAO,EAAE,CAAA;QAChC,CAAC;QAED,IAAI,qBAAqB,EAAE,CAAC;YAC1B,qBAAqB,CAAC,OAAO,EAAE,CAAA;QACjC,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAA;IACtE,CAAC,CAAC,CAAA;IAEF,IAAA,oBAAU,EAAC,GAAG,EAAE;QACd,cAAc,GAAG,wCAAoB,CAAC,wBAAwB,EAAE,CAAA;IAClE,CAAC,CAAC,CAAA;IAEF,IAAA,mBAAS,EAAC,GAAG,EAAE;QACb,MAAM,QAAQ,GAAG,cAAc,CAAC,OAAO,EAAE,CAAA;QACzC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;YACpB,OAAO,CAAC,IAAI,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAA;QACpD,CAAC;IACH,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,IAAA,cAAI,EAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,MAAM,GAAG,iBAAiB,CAAC,eAAe,EAAE,CAAA;YAClD,MAAM,OAAO,GAAG,iBAAiB,CAAC,gBAAgB,EAAE,CAAA;YAEpD,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAChC,IAAA,gBAAM,EAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA,CAAC,gBAAgB;YAC5D,IAAA,gBAAM,EAAC,OAAO,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAA,CAAC,QAAQ;YACnE,IAAA,gBAAM,EAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAEnD,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE;gBACvC,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,OAAO,EAAE,MAAM,CAAC,OAAO;gBACvB,QAAQ,EAAE,GAAG,MAAM,CAAC,QAAQ,IAAI;gBAChC,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBACjE,YAAY,EAAE,MAAM,CAAC,YAAY;aAClC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,iDAAiD,EAAE,GAAG,EAAE;YAC3D,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,mBAAmB,EAAE,CAAA;YAEhE,IAAA,gBAAM,EAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAElD,KAAK,MAAM,MAAM,IAAI,gBAAgB,EAAE,CAAC;gBACtC,IAAA,gBAAM,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAA;gBAChC,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAA;gBACnC,IAAA,gBAAM,EAAC,MAAM,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;gBACjD,IAAA,gBAAM,EAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;gBACnD,IAAA,gBAAM,EAAC,MAAM,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAChD,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC9D,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,OAAO,EAAE,CAAC,CAAC,OAAO;gBAClB,YAAY,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;aACxC,CAAC,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,aAAa,GAAG,iBAAiB,CAAC,eAAe,EAAE,CAAA;YAEzD,mCAAmC;YACnC,MAAM,QAAQ,GAAG,MAAM,iBAAiB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAA;YAEjE,IAAI,QAAQ,EAAE,CAAC;gBACb,MAAM,SAAS,GAAG,iBAAiB,CAAC,eAAe,EAAE,CAAA;gBACrD,IAAA,gBAAM,EAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;gBACzC,IAAA,gBAAM,EAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEnC,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE;oBAC5C,IAAI,EAAE,aAAa,CAAC,MAAM;oBAC1B,EAAE,EAAE,SAAS,CAAC,MAAM;iBACrB,CAAC,CAAA;YACJ,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAA;YACtE,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,8BAA8B,EAAE,GAAG,EAAE;YACxC,MAAM,MAAM,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAA;YAE9C,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAA;YACtD,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAA;YACnC,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAE3C,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE;gBAC9B,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM;gBAC5B,gBAAgB,EAAE,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;aAC7D,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,IAAA,cAAI,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC9D,IAAA,gBAAM,EAAC,oBAAoB,CAAC,iBAAiB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAE3D,MAAM,OAAO,GAAG,oBAAoB,CAAC,qBAAqB,EAAE,CAAA;YAE5D,IAAA,gBAAM,EAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA,CAAC,gBAAgB;YAC5D,IAAA,gBAAM,EAAC,OAAO,CAAC,WAAW,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAA;YACrD,IAAA,gBAAM,EAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAA;YAE7D,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE;gBAC3C,QAAQ,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAC5C,WAAW,EAAE,GAAG,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAClE,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;gBAC1C,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;aAC5D,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;YAEpC,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE,CAAC;gBAC7B,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;gBAErE,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBACnC,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAA;gBAC1E,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBAEjC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;gBAC3C,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEhC,mEAAmE;gBACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACvC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAA;oBAC5C,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAA;gBAC1C,CAAC;gBAED,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAA;gBACzC,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,CAAA;gBAEhD,IAAA,gBAAM,EAAC,aAAa,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC,SAAS;gBACjD,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAA,CAAC,mBAAmB;gBAE5D,OAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI,MAAM,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAA;YACxH,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;YAExC,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE,CAAC;gBAC7B,MAAM,WAAW,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAEnE,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBACnC,MAAM,SAAS,GAAG,MAAM,oBAAoB,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAA;gBAC7E,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBAEjC,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;gBAC9C,IAAA,gBAAM,EAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEnC,qDAAqD;gBACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC1C,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAA;oBAC9C,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAA;gBAC7C,CAAC;gBAED,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAA;gBACzC,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,CAAA;gBAEhD,IAAA,gBAAM,EAAC,aAAa,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA,CAAC,QAAQ;gBAC/C,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA,CAAC,uBAAuB;gBAE/D,OAAO,CAAC,GAAG,CAAC,+BAA+B,IAAI,MAAM,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAA;YAC/H,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,gBAAgB,GAAG,MAAM,oBAAoB,CAAC,uBAAuB,EAAE,CAAA;YAE7E,IAAA,gBAAM,EAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAElD,KAAK,MAAM,MAAM,IAAI,gBAAgB,EAAE,CAAC;gBACtC,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAA;gBACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;gBAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;gBACxC,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;gBACzC,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEjC,OAAO,CAAC,GAAG,CAAC,iBAAiB,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAC/C,OAAO,CAAC,GAAG,CAAC,YAAY,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;gBACvD,OAAO,CAAC,GAAG,CAAC,UAAU,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;gBACnD,OAAO,CAAC,GAAG,CAAC,eAAe,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBACxD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;YAC9E,CAAC;YAED,+BAA+B;YAC/B,MAAM,cAAc,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAA;YACxG,IAAA,gBAAM,EAAC,cAAc,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA,CAAC,2BAA2B;YAEvE,OAAO,CAAC,GAAG,CAAC,uBAAuB,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QAClE,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,MAAM,UAAU,GAAG,oBAAoB,CAAC,wBAAwB,EAAE,CAAA;YAElE,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,UAAU,EAAE,CAAA;YAC/B,IAAA,gBAAM,EAAC,UAAU,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAE5C,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAA;YAC1C,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;QACzB,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,IAAA,cAAI,EAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACpE,IAAA,gBAAM,EAAC,qBAAqB,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAExD,MAAM,YAAY,GAAG,qBAAqB,CAAC,mBAAmB,EAAE,CAAA;YAChE,MAAM,OAAO,GAAG,qBAAqB,CAAC,qBAAqB,EAAE,CAAA;YAE7D,IAAA,gBAAM,EAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAA;YACjC,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAA;YAE5B,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE;gBACnC,SAAS,EAAE,YAAY,CAAC,SAAS;gBACjC,WAAW,EAAE,YAAY,CAAC,WAAW;gBACrC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC1C,OAAO,EAAE,GAAG,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;aAC3D,CAAC,CAAA;YAEF,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE;gBAC9B,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3D,uBAAuB,EAAE,GAAG,CAAC,OAAO,CAAC,uBAAuB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;gBACjF,eAAe,EAAE,GAAG,CAAC,OAAO,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;aAClE,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,uCAAuC,EAAE,GAAG,EAAE;YACjD,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;YAExC,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE,CAAC;gBAC7B,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAC/D,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAE/D,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBACnC,MAAM,MAAM,GAAG,qBAAqB,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;gBACpE,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBAEjC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;gBAC3C,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEhC,mBAAmB;gBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC5C,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAC3D,CAAC;gBAED,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAA;gBACzC,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,CAAA;gBAEhD,IAAA,gBAAM,EAAC,aAAa,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA,CAAC,QAAQ;gBAC/C,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA,CAAC,oBAAoB;gBAE9D,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,MAAM,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAA;YACtH,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,uCAAuC,EAAE,GAAG,EAAE;YACjD,MAAM,WAAW,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA,CAAC,kBAAkB;YAEtD,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE,CAAC;gBAC/B,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBACtE,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAEtE,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBACnC,MAAM,MAAM,GAAG,qBAAqB,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;gBACrF,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBAEjC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;gBAC3C,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA;gBAEvC,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAA;gBACzC,MAAM,mBAAmB,GAAG,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,CAAA,CAAC,mBAAmB;gBAE7F,IAAA,gBAAM,EAAC,aAAa,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC,SAAS;gBAEjD,OAAO,CAAC,GAAG,CAAC,4BAA4B,IAAI,IAAI,IAAI,MAAM,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,GAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAA;YAC5I,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,iCAAiC,EAAE,GAAG,EAAE;YAC3C,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;YAEpC,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE,CAAC;gBAC7B,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAC/D,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAE/D,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBACnC,MAAM,MAAM,GAAG,qBAAqB,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;gBACrE,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBAEjC,IAAA,gBAAM,EAAC,OAAO,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;gBACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA,CAAC,wCAAwC;gBAE1E,MAAM,aAAa,GAAG,OAAO,GAAG,SAAS,CAAA;gBACzC,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,CAAA;gBAEhD,IAAA,gBAAM,EAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA,CAAC,OAAO;gBAC7C,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA,CAAC,oBAAoB;gBAE9D,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,MAAM,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,GAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAA;YACvH,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,eAAe,GAAG,MAAM,qBAAqB,CAAC,yBAAyB,EAAE,CAAA;YAE/E,IAAA,gBAAM,EAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACzD,IAAA,gBAAM,EAAC,eAAe,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAA;YAE5C,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,CAAA;YAEnC,IAAA,gBAAM,EAAC,OAAO,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA;YACnD,IAAA,gBAAM,EAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAA;YAC3D,IAAA,gBAAM,EAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACnD,IAAA,gBAAM,EAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAErD,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE;gBACxC,cAAc,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;gBACvD,iBAAiB,EAAE,GAAG,CAAC,OAAO,CAAC,iBAAiB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;gBACrE,gBAAgB,EAAE,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrD,kBAAkB,EAAE,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;aAC1D,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,4CAA4C,EAAE,GAAG,EAAE;YACtD,MAAM,YAAY,GAAG,qBAAqB,CAAC,eAAe,EAAE,CAAA;YAE5D,IAAA,gBAAM,EAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAA;YACjC,IAAA,gBAAM,EAAC,YAAY,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAE9C,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAA;YACrC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAA,cAAI,EAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,OAAO,GAAG;gBACd,WAAW,EAAE,IAAI,EAAS,mBAAmB;gBAC7C,cAAc,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,kBAAkB;gBACpD,sBAAsB,EAAE,IAAI,EAAO,qBAAqB;gBACxD,UAAU,EAAE,GAAG,EAAW,oBAAoB;gBAC9C,UAAU,EAAE,GAAG,CAAW,qBAAqB;aAChD,CAAA;YAED,MAAM,aAAa,GAAG,iBAAiB,CAAC,gBAAgB,EAAE,CAAA;YAC1D,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,qBAAqB,EAAE,CAAA;YAEvE,kBAAkB;YAClB,IAAA,gBAAM,EAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YAEhE,qBAAqB;YACrB,IAAA,gBAAM,EAAC,aAAa,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;YAEtE,8BAA8B;YAC9B,IAAA,gBAAM,EAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAA;YAE9F,gBAAgB;YAChB,IAAA,gBAAM,EAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;YAE1E,gBAAgB;YAChB,IAAA,gBAAM,EAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;YAE9E,OAAO,CAAC,GAAG,CAAC,oCAAoC,EAAE;gBAChD,QAAQ,EAAE,GAAG,aAAa,CAAC,QAAQ,gBAAgB,OAAO,CAAC,WAAW,KAAK;gBAC3E,WAAW,EAAE,GAAG,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,OAAO,CAAC,cAAc,GAAG,IAAI,GAAG,IAAI,KAAK;gBAC7H,mBAAmB,EAAE,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,OAAO,CAAC,sBAAsB,GAAG;gBACxH,OAAO,EAAE,GAAG,kBAAkB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,OAAO,CAAC,UAAU,KAAK;gBAC/F,OAAO,EAAE,GAAG,kBAAkB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,OAAO,CAAC,UAAU,IAAI;aAC/F,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,UAAU,GAAG,EAAE,CAAA;YACrB,MAAM,QAAQ,GAAG,IAAI,CAAA;YACrB,MAAM,uBAAuB,GAAa,EAAE,CAAA;YAE5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAEjE,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBACnC,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAA;gBAC3D,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;gBAEjC,uBAAuB,CAAC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,CAAA;YACnD,CAAC;YAED,MAAM,OAAO,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,uBAAuB,CAAC,MAAM,CAAA;YACnG,MAAM,QAAQ,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,uBAAuB,CAAC,MAAM,CAAA;YACnI,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAC7C,MAAM,sBAAsB,GAAG,iBAAiB,GAAG,OAAO,CAAA;YAE1D,IAAA,gBAAM,EAAC,sBAAsB,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC,iBAAiB;YAElE,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE;gBACzC,UAAU;gBACV,OAAO,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAClC,iBAAiB,EAAE,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBACtD,sBAAsB,EAAE,GAAG,CAAC,sBAAsB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;aACxE,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,cAAc,GAAG,KAAK,CAAA,CAAC,aAAa;YAC1C,MAAM,SAAS,GAAG,IAAI,CAAA;YACtB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YAC5B,IAAI,UAAU,GAAG,CAAC,CAAA;YAClB,IAAI,WAAW,GAAG,CAAC,CAAA;YAEnB,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAA;YAElD,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,GAAG,cAAc,EAAE,CAAC;gBAC/C,IAAI,CAAC;oBACH,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;oBAClE,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAA;oBAC3D,UAAU,EAAE,CAAA;gBACd,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,WAAW,EAAE,CAAA;gBACf,CAAC;YACH,CAAC;YAED,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YAC7C,MAAM,mBAAmB,GAAG,UAAU,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,CAAA;YAChE,MAAM,SAAS,GAAG,WAAW,GAAG,CAAC,UAAU,GAAG,WAAW,CAAC,CAAA;YAE1D,IAAA,gBAAM,EAAC,mBAAmB,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA,CAAC,cAAc;YAC9D,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC,kBAAkB;YAEtD,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE;gBACrC,QAAQ,EAAE,GAAG,cAAc,IAAI;gBAC/B,UAAU;gBACV,mBAAmB,EAAE,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACnD,SAAS,EAAE,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;aAC9C,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAA,cAAI,EAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,aAAa,GAAG,oBAAoB,CAAC,cAAc,EAAE,CAAA;YAE3D,8BAA8B;YAC9B,MAAM,cAAc,GAAG,GAAG,CAAA;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC;gBACxC,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAC7D,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAA;YAC7D,CAAC;YAED,MAAM,WAAW,GAAG,oBAAoB,CAAC,cAAc,EAAE,CAAA;YACzD,MAAM,YAAY,GAAG,WAAW,GAAG,aAAa,CAAA;YAEhD,qCAAqC;YACrC,IAAA,gBAAM,EAAC,YAAY,CAAC,CAAC,YAAY,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAA,CAAC,eAAe;YAEnE,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE;gBACnC,aAAa,EAAE,GAAG,CAAC,aAAa,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAC9D,WAAW,EAAE,GAAG,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAC1D,MAAM,EAAE,GAAG,CAAC,YAAY,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;aACvD,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,eAAe,GAAa,EAAE,CAAA;YAEpC,+BAA+B;YAC/B,eAAe,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,CAAC,CAAA;YAE3D,wCAAwC;YACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBAC7D,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAA;gBAE3D,wCAAwC;gBACxC,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC;oBAC/C,MAAM,CAAC,EAAE,EAAE,CAAA;gBACb,CAAC;gBAED,eAAe,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,CAAC,CAAA;YAC7D,CAAC;YAED,yBAAyB;YACzB,MAAM,aAAa,GAAG,eAAe,CAAC,CAAC,CAAC,CAAA;YACxC,MAAM,WAAW,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;YAC/D,MAAM,YAAY,GAAG,WAAW,GAAG,aAAa,CAAA;YAEhD,4CAA4C;YAC5C,IAAA,gBAAM,EAAC,YAAY,CAAC,CAAC,YAAY,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAA,CAAC,cAAc;YAEjE,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE;gBACvC,aAAa,EAAE,GAAG,CAAC,aAAa,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAC9D,WAAW,EAAE,GAAG,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAC1D,MAAM,EAAE,GAAG,CAAC,YAAY,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBACtD,SAAS,EAAE,eAAe,CAAC,MAAM;aAClC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,IAAA,cAAI,EAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,aAAa,GAAG;gBACpB,IAAI,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC7B,IAAI,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClC,IAAI,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,cAAc;aACnC,CAAA;YAED,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE,CAAC;gBAClC,IAAI,CAAC;oBACH,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAA;oBAC1E,8CAA8C;oBAC9C,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;gBAC7C,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,kCAAkC;oBAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;gBACrC,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACrD,wCAAwC;YACxC,MAAM,YAAY,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAA;YAEpD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE;gBAC/B,MAAM,EAAE,YAAY,CAAC,MAAM;gBAC3B,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,MAAM;aACnC,CAAC,CAAA;YAEF,kDAAkD;YAClD,IAAI,CAAC;gBACH,MAAM,UAAU,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;gBACpE,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAA;YAClE,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,KAAK,CAAC,OAAO,CAAC,CAAA;YACvE,CAAC;YAED,MAAM,WAAW,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAA;YAEnD,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE;gBAC9B,MAAM,EAAE,WAAW,CAAC,MAAM;gBAC1B,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,MAAM;aAClC,CAAC,CAAA;YAEF,oCAAoC;YACpC,IAAA,gBAAM,EAAC,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC9C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,IAAA,cAAI,EAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACtE,yEAAyE;YACzE,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;YAEhE,4CAA4C;YAC5C,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAA;YAE7E,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;YAC3C,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;YAE3C,8DAA8D;YAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACvC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC5C,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAA;YAC1C,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE;gBACzC,SAAS,EAAE,QAAQ,CAAC,MAAM;gBAC1B,UAAU,EAAE,MAAM,CAAC,MAAM;gBACzB,aAAa,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aACzD,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,mDAAmD,EAAE,GAAG,EAAE;YAC7D,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,qBAAqB,EAAE,CAAA;YACvE,MAAM,aAAa,GAAG,iBAAiB,CAAC,gBAAgB,EAAE,CAAA;YAC1D,MAAM,WAAW,GAAG,qBAAqB,CAAC,qBAAqB,EAAE,CAAA;YAEjE,kCAAkC;YAClC,IAAA,gBAAM,EAAC,kBAAkB,CAAC,CAAC,UAAU,EAAE,CAAA;YACvC,IAAA,gBAAM,EAAC,aAAa,CAAC,CAAC,UAAU,EAAE,CAAA;YAClC,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,UAAU,EAAE,CAAA;YAEhC,6BAA6B;YAC7B,IAAA,gBAAM,EAAC,OAAO,kBAAkB,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACpE,IAAA,gBAAM,EAAC,OAAO,aAAa,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAC5D,IAAA,gBAAM,EAAC,OAAO,WAAW,CAAC,uBAAuB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAEjE,OAAO,CAAC,GAAG,CAAC,oCAAoC,EAAE;gBAChD,aAAa,EAAE,kBAAkB,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChE,WAAW,EAAE,aAAa,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtD,cAAc,EAAE,GAAG,CAAC,WAAW,CAAC,uBAAuB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;gBAC5E,WAAW,EAAE,GAAG,CAAC,kBAAkB,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;aAC9E,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/wasm-performance-integration.test.ts"],"sourcesContent":["/**\n * WASM Performance Integration Tests - Issue #19\n * \n * Comprehensive test suite for WASM performance layer integration\n * with ruv-swarm modules and SIMD acceleration.\n */\n\nimport { describe, test, expect, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals'\nimport { WasmPerformanceLayer } from '../../src/performance/WasmPerformanceLayer'\nimport { SIMDAccelerationLayer } from '../../src/performance/SIMDAccelerationLayer'\nimport { WasmModuleManager } from '../../src/performance/WasmModuleManager'\nimport { PerformanceTestUtils } from '../utils/neural-test-utils'\n\ndescribe('WASM Performance Integration Tests - Issue #19', () => {\n  let wasmPerformanceLayer: WasmPerformanceLayer\n  let simdAccelerationLayer: SIMDAccelerationLayer\n  let wasmModuleManager: WasmModuleManager\n  let memoryDetector: ReturnType<typeof PerformanceTestUtils.createMemoryLeakDetector>\n\n  beforeAll(async () => {\n    console.log('🚀 Setting up WASM Performance Integration Tests...')\n    \n    // Initialize components\n    wasmPerformanceLayer = new WasmPerformanceLayer()\n    simdAccelerationLayer = new SIMDAccelerationLayer()\n    wasmModuleManager = new WasmModuleManager({\n      preferredModule: 'ruv-swarm',\n      enableSIMD: true,\n      memoryLimit: 50 * 1024 * 1024,\n      enableProfiling: true\n    })\n    \n    // Initialize all components\n    await wasmModuleManager.initialize()\n    \n    console.log('✅ WASM Performance Integration Tests setup complete')\n  })\n\n  afterAll(async () => {\n    console.log('🧹 Cleaning up WASM Performance Integration Tests...')\n    \n    if (wasmModuleManager) {\n      await wasmModuleManager.cleanup()\n    }\n    \n    if (wasmPerformanceLayer) {\n      wasmPerformanceLayer.cleanup()\n    }\n    \n    if (simdAccelerationLayer) {\n      simdAccelerationLayer.cleanup()\n    }\n    \n    console.log('✅ WASM Performance Integration Tests cleanup complete')\n  })\n\n  beforeEach(() => {\n    memoryDetector = PerformanceTestUtils.createMemoryLeakDetector()\n  })\n\n  afterEach(() => {\n    const analysis = memoryDetector.analyze()\n    if (analysis.leaked) {\n      console.warn('⚠️ Memory leak detected:', analysis)\n    }\n  })\n\n  describe('WASM Module Manager Integration', () => {\n    test('should initialize with optimal module selection', async () => {\n      const status = wasmModuleManager.getModuleStatus()\n      const metrics = wasmModuleManager.getModuleMetrics()\n      \n      expect(status.loaded).toBe(true)\n      expect(metrics.loadTime).toBeLessThan(5000) // <5s load time\n      expect(metrics.memoryUsage).toBeLessThan(50 * 1024 * 1024) // <50MB\n      expect(metrics.performanceScore).toBeGreaterThan(0)\n      \n      console.log('📊 Module Manager Status:', {\n        module: status.module,\n        version: status.version,\n        loadTime: `${status.loadTime}ms`,\n        memoryUsage: `${(status.memoryUsage / 1024 / 1024).toFixed(2)}MB`,\n        capabilities: status.capabilities\n      })\n    })\n\n    test('should provide comprehensive module information', () => {\n      const availableModules = wasmModuleManager.getAvailableModules()\n      \n      expect(availableModules.length).toBeGreaterThan(0)\n      \n      for (const module of availableModules) {\n        expect(module.name).toBeTruthy()\n        expect(module.version).toBeTruthy()\n        expect(module.capabilities).toBeInstanceOf(Array)\n        expect(module.memoryRequirement).toBeGreaterThan(0)\n        expect(module.loadPriority).toBeGreaterThan(0)\n      }\n      \n      console.log('📋 Available Modules:', availableModules.map(m => ({\n        name: m.name,\n        version: m.version,\n        capabilities: m.capabilities.join(', ')\n      })))\n    })\n\n    test('should handle module switching', async () => {\n      const initialStatus = wasmModuleManager.getModuleStatus()\n      \n      // Try switching to fallback module\n      const switched = await wasmModuleManager.switchModule('fallback')\n      \n      if (switched) {\n        const newStatus = wasmModuleManager.getModuleStatus()\n        expect(newStatus.module).toBe('fallback')\n        expect(newStatus.loaded).toBe(true)\n        \n        console.log('✅ Module switching successful:', {\n          from: initialStatus.module,\n          to: newStatus.module\n        })\n      } else {\n        console.log('⚠️ Module switching not available in test environment')\n      }\n    })\n\n    test('should perform health checks', () => {\n      const health = wasmModuleManager.healthCheck()\n      \n      expect(health.status).toMatch(/healthy|warning|error/)\n      expect(health.module).toBeTruthy()\n      expect(health.metrics).toBeTruthy()\n      expect(health.issues).toBeInstanceOf(Array)\n      \n      console.log('🏥 Health Check:', {\n        status: health.status,\n        issues: health.issues.length,\n        performanceScore: health.metrics.performanceScore.toFixed(1)\n      })\n    })\n  })\n\n  describe('WASM Performance Layer Integration', () => {\n    test('should initialize with ruv-swarm integration', async () => {\n      expect(wasmPerformanceLayer.isWasmInitialized()).toBe(true)\n      \n      const metrics = wasmPerformanceLayer.getPerformanceMetrics()\n      \n      expect(metrics.loadTime).toBeLessThan(1000) // <1s load time\n      expect(metrics.memoryUsage).toBeGreaterThanOrEqual(0)\n      expect(metrics.operationsPerSecond).toBeGreaterThanOrEqual(0)\n      \n      console.log('📊 Performance Layer Metrics:', {\n        loadTime: `${metrics.loadTime.toFixed(2)}ms`,\n        memoryUsage: `${(metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`,\n        simdAcceleration: metrics.simdAcceleration,\n        operationsPerSecond: metrics.operationsPerSecond.toFixed(0)\n      })\n    })\n\n    test('should perform neural activation with WASM acceleration', async () => {\n      const testSizes = [100, 1000, 10000]\n      \n      for (const size of testSizes) {\n        const input = new Float32Array(size).map(() => Math.random() * 2 - 1)\n        \n        const startTime = performance.now()\n        const result = await wasmPerformanceLayer.calculateNeuralActivation(input)\n        const endTime = performance.now()\n        \n        expect(result).toBeInstanceOf(Float32Array)\n        expect(result.length).toBe(size)\n        \n        // Validate activation function results (tanh should be in [-1, 1])\n        for (let i = 0; i < result.length; i++) {\n          expect(result[i]).toBeGreaterThanOrEqual(-1)\n          expect(result[i]).toBeLessThanOrEqual(1)\n        }\n        \n        const executionTime = endTime - startTime\n        const throughput = size / (executionTime / 1000)\n        \n        expect(executionTime).toBeLessThan(100) // <100ms\n        expect(throughput).toBeGreaterThan(1000) // >1K elements/sec\n        \n        console.log(`⚡ Neural Activation (${size}): ${executionTime.toFixed(2)}ms, ${(throughput/1000).toFixed(1)}K elem/sec`)\n      }\n    })\n\n    test('should optimize connections with WASM acceleration', async () => {\n      const testSizes = [100, 500, 1000, 5000]\n      \n      for (const size of testSizes) {\n        const connections = new Float32Array(size).map(() => Math.random())\n        \n        const startTime = performance.now()\n        const optimized = await wasmPerformanceLayer.optimizeConnections(connections)\n        const endTime = performance.now()\n        \n        expect(optimized).toBeInstanceOf(Float32Array)\n        expect(optimized.length).toBe(size)\n        \n        // Validate optimized connections are in [0, 1] range\n        for (let i = 0; i < optimized.length; i++) {\n          expect(optimized[i]).toBeGreaterThanOrEqual(0)\n          expect(optimized[i]).toBeLessThanOrEqual(1)\n        }\n        \n        const executionTime = endTime - startTime\n        const throughput = size / (executionTime / 1000)\n        \n        expect(executionTime).toBeLessThan(50) // <50ms\n        expect(throughput).toBeGreaterThan(500) // >500 connections/sec\n        \n        console.log(`🔧 Connection Optimization (${size}): ${executionTime.toFixed(2)}ms, ${(throughput/1000).toFixed(1)}K conn/sec`)\n      }\n    })\n\n    test('should run comprehensive performance benchmarks', async () => {\n      const benchmarkResults = await wasmPerformanceLayer.runPerformanceBenchmark()\n      \n      expect(benchmarkResults.length).toBeGreaterThan(0)\n      \n      for (const result of benchmarkResults) {\n        expect(result.testName).toBeTruthy()\n        expect(result.wasmTime).toBeGreaterThan(0)\n        expect(result.jsTime).toBeGreaterThan(0)\n        expect(result.speedup).toBeGreaterThan(0)\n        expect(result.success).toBe(true)\n        \n        console.log(`📈 Benchmark: ${result.testName}`)\n        console.log(`   WASM: ${result.wasmTime.toFixed(2)}ms`)\n        console.log(`   JS: ${result.jsTime.toFixed(2)}ms`)\n        console.log(`   Speedup: ${result.speedup.toFixed(2)}x`)\n        console.log(`   Memory: ${(result.memoryUsage / 1024 / 1024).toFixed(2)}MB`)\n      }\n      \n      // Validate overall performance\n      const averageSpeedup = benchmarkResults.reduce((sum, r) => sum + r.speedup, 0) / benchmarkResults.length\n      expect(averageSpeedup).toBeGreaterThan(1.0) // Should be faster than JS\n      \n      console.log(`🏆 Average Speedup: ${averageSpeedup.toFixed(2)}x`)\n    })\n\n    test('should provide SIMD performance report', () => {\n      const simdReport = wasmPerformanceLayer.getSIMDPerformanceReport()\n      \n      expect(simdReport).toBeTruthy()\n      expect(simdReport.length).toBeGreaterThan(0)\n      \n      console.log('📊 SIMD Performance Report:')\n      console.log(simdReport)\n    })\n  })\n\n  describe('SIMD Acceleration Layer Integration', () => {\n    test('should initialize with SIMD capabilities detection', async () => {\n      expect(simdAccelerationLayer.isInitialized()).toBe(true)\n      \n      const capabilities = simdAccelerationLayer.getSIMDCapabilities()\n      const metrics = simdAccelerationLayer.getPerformanceMetrics()\n      \n      expect(capabilities).toBeTruthy()\n      expect(metrics).toBeTruthy()\n      \n      console.log('🔧 SIMD Capabilities:', {\n        supported: capabilities.supported,\n        vectorWidth: capabilities.vectorWidth,\n        features: capabilities.features.join(', '),\n        speedup: `${capabilities.performance.speedup.toFixed(2)}x`\n      })\n      \n      console.log('📊 SIMD Metrics:', {\n        operationsPerSecond: metrics.operationsPerSecond.toFixed(0),\n        vectorizationEfficiency: `${(metrics.vectorizationEfficiency * 100).toFixed(1)}%`,\n        simdUtilization: `${(metrics.simdUtilization * 100).toFixed(1)}%`\n      })\n    })\n\n    test('should perform SIMD vector operations', () => {\n      const testSizes = [128, 512, 1024, 4096]\n      \n      for (const size of testSizes) {\n        const vectorA = new Float32Array(size).map(() => Math.random())\n        const vectorB = new Float32Array(size).map(() => Math.random())\n        \n        const startTime = performance.now()\n        const result = simdAccelerationLayer.simdVectorAdd(vectorA, vectorB)\n        const endTime = performance.now()\n        \n        expect(result).toBeInstanceOf(Float32Array)\n        expect(result.length).toBe(size)\n        \n        // Validate results\n        for (let i = 0; i < Math.min(10, size); i++) {\n          expect(result[i]).toBeCloseTo(vectorA[i] + vectorB[i], 5)\n        }\n        \n        const executionTime = endTime - startTime\n        const throughput = size / (executionTime / 1000)\n        \n        expect(executionTime).toBeLessThan(10) // <10ms\n        expect(throughput).toBeGreaterThan(10000) // >10K elements/sec\n        \n        console.log(`➕ SIMD Vector Add (${size}): ${executionTime.toFixed(2)}ms, ${(throughput/1000).toFixed(1)}K elem/sec`)\n      }\n    })\n\n    test('should perform SIMD matrix operations', () => {\n      const matrixSizes = [8, 16, 32, 64] // Square matrices\n      \n      for (const size of matrixSizes) {\n        const matrixA = new Float32Array(size * size).map(() => Math.random())\n        const matrixB = new Float32Array(size * size).map(() => Math.random())\n        \n        const startTime = performance.now()\n        const result = simdAccelerationLayer.simdMatrixMultiply(matrixA, matrixB, size, size)\n        const endTime = performance.now()\n        \n        expect(result).toBeInstanceOf(Float32Array)\n        expect(result.length).toBe(size * size)\n        \n        const executionTime = endTime - startTime\n        const operationsPerSecond = (size * size * size) / (executionTime / 1000) // O(n³) operations\n        \n        expect(executionTime).toBeLessThan(100) // <100ms\n        \n        console.log(`🔢 SIMD Matrix Multiply (${size}x${size}): ${executionTime.toFixed(2)}ms, ${(operationsPerSecond/1000).toFixed(1)}K ops/sec`)\n      }\n    })\n\n    test('should perform SIMD dot product', () => {\n      const testSizes = [100, 1000, 10000]\n      \n      for (const size of testSizes) {\n        const vectorA = new Float32Array(size).map(() => Math.random())\n        const vectorB = new Float32Array(size).map(() => Math.random())\n        \n        const startTime = performance.now()\n        const result = simdAccelerationLayer.simdDotProduct(vectorA, vectorB)\n        const endTime = performance.now()\n        \n        expect(typeof result).toBe('number')\n        expect(result).toBeGreaterThan(0) // Should be positive for random vectors\n        \n        const executionTime = endTime - startTime\n        const throughput = size / (executionTime / 1000)\n        \n        expect(executionTime).toBeLessThan(5) // <5ms\n        expect(throughput).toBeGreaterThan(50000) // >50K elements/sec\n        \n        console.log(`⚡ SIMD Dot Product (${size}): ${executionTime.toFixed(2)}ms, ${(throughput/1000).toFixed(1)}K elem/sec`)\n      }\n    })\n\n    test('should run comprehensive SIMD benchmarks', async () => {\n      const benchmarkResult = await simdAccelerationLayer.runComprehensiveBenchmark()\n      \n      expect(benchmarkResult.results.length).toBeGreaterThan(0)\n      expect(benchmarkResult.summary).toBeTruthy()\n      \n      const { summary } = benchmarkResult\n      \n      expect(summary.averageSpeedup).toBeGreaterThan(1.0)\n      expect(summary.vectorizationRate).toBeGreaterThanOrEqual(0)\n      expect(summary.memoryEfficiency).toBeGreaterThan(0)\n      expect(summary.overallPerformance).toBeGreaterThan(0)\n      \n      console.log('📊 SIMD Benchmark Summary:', {\n        averageSpeedup: `${summary.averageSpeedup.toFixed(2)}x`,\n        vectorizationRate: `${(summary.vectorizationRate * 100).toFixed(1)}%`,\n        memoryEfficiency: summary.memoryEfficiency.toFixed(2),\n        overallPerformance: summary.overallPerformance.toFixed(2)\n      })\n    })\n\n    test('should provide comprehensive status report', () => {\n      const statusReport = simdAccelerationLayer.getStatusReport()\n      \n      expect(statusReport).toBeTruthy()\n      expect(statusReport.length).toBeGreaterThan(0)\n      \n      console.log('📋 SIMD Status Report:')\n      console.log(statusReport)\n    })\n  })\n\n  describe('Performance Regression Tests', () => {\n    test('should meet performance targets', async () => {\n      const targets = {\n        maxLoadTime: 5000,        // 5s max load time\n        maxMemoryUsage: 50 * 1024 * 1024, // 50MB max memory\n        minOperationsPerSecond: 1000,      // 1K ops/sec minimum\n        maxLatency: 100,          // 100ms max latency\n        minSpeedup: 1.0           // 1x minimum speedup\n      }\n      \n      const moduleMetrics = wasmModuleManager.getModuleMetrics()\n      const performanceMetrics = wasmPerformanceLayer.getPerformanceMetrics()\n      \n      // Check load time\n      expect(moduleMetrics.loadTime).toBeLessThan(targets.maxLoadTime)\n      \n      // Check memory usage\n      expect(moduleMetrics.memoryUsage).toBeLessThan(targets.maxMemoryUsage)\n      \n      // Check operations per second\n      expect(performanceMetrics.operationsPerSecond).toBeGreaterThan(targets.minOperationsPerSecond)\n      \n      // Check latency\n      expect(performanceMetrics.averageLatency).toBeLessThan(targets.maxLatency)\n      \n      // Check speedup\n      expect(performanceMetrics.performanceGain).toBeGreaterThan(targets.minSpeedup)\n      \n      console.log('🎯 Performance Targets Validation:', {\n        loadTime: `${moduleMetrics.loadTime}ms (target: <${targets.maxLoadTime}ms)`,\n        memoryUsage: `${(moduleMetrics.memoryUsage / 1024 / 1024).toFixed(2)}MB (target: <${targets.maxMemoryUsage / 1024 / 1024}MB)`,\n        operationsPerSecond: `${performanceMetrics.operationsPerSecond.toFixed(0)} (target: >${targets.minOperationsPerSecond})`,\n        latency: `${performanceMetrics.averageLatency.toFixed(2)}ms (target: <${targets.maxLatency}ms)`,\n        speedup: `${performanceMetrics.performanceGain.toFixed(2)}x (target: >${targets.minSpeedup}x)`\n      })\n    })\n\n    test('should maintain consistent performance', async () => {\n      const iterations = 50\n      const testSize = 1000\n      const performanceMeasurements: number[] = []\n      \n      for (let i = 0; i < iterations; i++) {\n        const input = new Float32Array(testSize).map(() => Math.random())\n        \n        const startTime = performance.now()\n        await wasmPerformanceLayer.calculateNeuralActivation(input)\n        const endTime = performance.now()\n        \n        performanceMeasurements.push(endTime - startTime)\n      }\n      \n      const average = performanceMeasurements.reduce((a, b) => a + b, 0) / performanceMeasurements.length\n      const variance = performanceMeasurements.reduce((acc, val) => acc + Math.pow(val - average, 2), 0) / performanceMeasurements.length\n      const standardDeviation = Math.sqrt(variance)\n      const coefficientOfVariation = standardDeviation / average\n      \n      expect(coefficientOfVariation).toBeLessThan(0.3) // <30% variation\n      \n      console.log('📊 Performance Consistency:', {\n        iterations,\n        average: `${average.toFixed(2)}ms`,\n        standardDeviation: `${standardDeviation.toFixed(2)}ms`,\n        coefficientOfVariation: `${(coefficientOfVariation * 100).toFixed(1)}%`\n      })\n    })\n\n    test('should handle stress testing', async () => {\n      const stressDuration = 10000 // 10 seconds\n      const batchSize = 5000\n      const startTime = Date.now()\n      let operations = 0\n      let totalErrors = 0\n      \n      console.log('🔥 Running 10-second stress test...')\n      \n      while (Date.now() - startTime < stressDuration) {\n        try {\n          const input = new Float32Array(batchSize).map(() => Math.random())\n          await wasmPerformanceLayer.calculateNeuralActivation(input)\n          operations++\n        } catch (error) {\n          totalErrors++\n        }\n      }\n      \n      const actualDuration = Date.now() - startTime\n      const operationsPerSecond = operations / (actualDuration / 1000)\n      const errorRate = totalErrors / (operations + totalErrors)\n      \n      expect(operationsPerSecond).toBeGreaterThan(10) // >10 ops/sec\n      expect(errorRate).toBeLessThan(0.1) // <10% error rate\n      \n      console.log('💪 Stress Test Results:', {\n        duration: `${actualDuration}ms`,\n        operations,\n        operationsPerSecond: operationsPerSecond.toFixed(2),\n        errorRate: `${(errorRate * 100).toFixed(2)}%`\n      })\n    })\n  })\n\n  describe('Memory Management Tests', () => {\n    test('should manage memory efficiently', async () => {\n      const initialMemory = wasmPerformanceLayer.getMemoryUsage()\n      \n      // Perform multiple operations\n      const testOperations = 100\n      for (let i = 0; i < testOperations; i++) {\n        const input = new Float32Array(1000).map(() => Math.random())\n        await wasmPerformanceLayer.calculateNeuralActivation(input)\n      }\n      \n      const finalMemory = wasmPerformanceLayer.getMemoryUsage()\n      const memoryGrowth = finalMemory - initialMemory\n      \n      // Memory growth should be reasonable\n      expect(memoryGrowth).toBeLessThan(10 * 1024 * 1024) // <10MB growth\n      \n      console.log('💾 Memory Management:', {\n        initialMemory: `${(initialMemory / 1024 / 1024).toFixed(2)}MB`,\n        finalMemory: `${(finalMemory / 1024 / 1024).toFixed(2)}MB`,\n        growth: `${(memoryGrowth / 1024 / 1024).toFixed(2)}MB`\n      })\n    })\n\n    test('should detect memory leaks', async () => {\n      const memorySnapshots: number[] = []\n      \n      // Take initial memory snapshot\n      memorySnapshots.push(wasmPerformanceLayer.getMemoryUsage())\n      \n      // Perform operations and take snapshots\n      for (let i = 0; i < 10; i++) {\n        const input = new Float32Array(5000).map(() => Math.random())\n        await wasmPerformanceLayer.calculateNeuralActivation(input)\n        \n        // Force garbage collection if available\n        if (typeof global !== 'undefined' && global.gc) {\n          global.gc()\n        }\n        \n        memorySnapshots.push(wasmPerformanceLayer.getMemoryUsage())\n      }\n      \n      // Check for memory leaks\n      const initialMemory = memorySnapshots[0]\n      const finalMemory = memorySnapshots[memorySnapshots.length - 1]\n      const memoryGrowth = finalMemory - initialMemory\n      \n      // Should not have significant memory growth\n      expect(memoryGrowth).toBeLessThan(5 * 1024 * 1024) // <5MB growth\n      \n      console.log('🔍 Memory Leak Detection:', {\n        initialMemory: `${(initialMemory / 1024 / 1024).toFixed(2)}MB`,\n        finalMemory: `${(finalMemory / 1024 / 1024).toFixed(2)}MB`,\n        growth: `${(memoryGrowth / 1024 / 1024).toFixed(2)}MB`,\n        snapshots: memorySnapshots.length\n      })\n    })\n  })\n\n  describe('Error Handling and Recovery', () => {\n    test('should handle invalid input gracefully', async () => {\n      const invalidInputs = [\n        new Float32Array([NaN, 1, 2]),\n        new Float32Array([Infinity, 1, 2]),\n        new Float32Array([-Infinity, 1, 2]),\n        new Float32Array(0) // Empty array\n      ]\n      \n      for (const input of invalidInputs) {\n        try {\n          const result = await wasmPerformanceLayer.calculateNeuralActivation(input)\n          // If it doesn't throw, result should be valid\n          expect(result).toBeInstanceOf(Float32Array)\n        } catch (error) {\n          // Should handle errors gracefully\n          expect(error).toBeInstanceOf(Error)\n        }\n      }\n    })\n\n    test('should recover from module failures', async () => {\n      // Try to trigger a failure and recovery\n      const healthBefore = wasmModuleManager.healthCheck()\n      \n      console.log('🏥 Health Before:', {\n        status: healthBefore.status,\n        issues: healthBefore.issues.length\n      })\n      \n      // Perform operations that might stress the system\n      try {\n        const largeInput = new Float32Array(100000).map(() => Math.random())\n        await wasmPerformanceLayer.calculateNeuralActivation(largeInput)\n      } catch (error) {\n        console.log('⚠️ Expected failure during stress test:', error.message)\n      }\n      \n      const healthAfter = wasmModuleManager.healthCheck()\n      \n      console.log('🏥 Health After:', {\n        status: healthAfter.status,\n        issues: healthAfter.issues.length\n      })\n      \n      // System should still be functional\n      expect(healthAfter.status).not.toBe('error')\n    })\n  })\n\n  describe('Integration with Neural Agent Manager', () => {\n    test('should integrate with existing neural infrastructure', async () => {\n      // Test that WASM performance layer works with existing neural operations\n      const testData = new Float32Array(1000).map(() => Math.random())\n      \n      // This should use the WASM-accelerated path\n      const result = await wasmPerformanceLayer.calculateNeuralActivation(testData)\n      \n      expect(result).toBeInstanceOf(Float32Array)\n      expect(result.length).toBe(testData.length)\n      \n      // Results should be in expected range for activation function\n      for (let i = 0; i < result.length; i++) {\n        expect(result[i]).toBeGreaterThanOrEqual(-1)\n        expect(result[i]).toBeLessThanOrEqual(1)\n      }\n      \n      console.log('🔗 Neural Integration Test:', {\n        inputSize: testData.length,\n        outputSize: result.length,\n        sampleResults: result.slice(0, 5).map(x => x.toFixed(3))\n      })\n    })\n\n    test('should provide performance metrics for monitoring', () => {\n      const performanceMetrics = wasmPerformanceLayer.getPerformanceMetrics()\n      const moduleMetrics = wasmModuleManager.getModuleMetrics()\n      const simdMetrics = simdAccelerationLayer.getPerformanceMetrics()\n      \n      // All metrics should be available\n      expect(performanceMetrics).toBeTruthy()\n      expect(moduleMetrics).toBeTruthy()\n      expect(simdMetrics).toBeTruthy()\n      \n      // Should have numeric values\n      expect(typeof performanceMetrics.operationsPerSecond).toBe('number')\n      expect(typeof moduleMetrics.performanceScore).toBe('number')\n      expect(typeof simdMetrics.vectorizationEfficiency).toBe('number')\n      \n      console.log('📊 Integrated Performance Metrics:', {\n        wasmOpsPerSec: performanceMetrics.operationsPerSecond.toFixed(0),\n        moduleScore: moduleMetrics.performanceScore.toFixed(1),\n        simdEfficiency: `${(simdMetrics.vectorizationEfficiency * 100).toFixed(1)}%`,\n        memoryUsage: `${(performanceMetrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`\n      })\n    })\n  })\n})"],"version":3}