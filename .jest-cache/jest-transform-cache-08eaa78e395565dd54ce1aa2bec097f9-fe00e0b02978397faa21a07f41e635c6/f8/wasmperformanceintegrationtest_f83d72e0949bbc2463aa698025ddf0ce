788ca8c67a93fc29bcde05a8e196a808
"use strict";
/**
 * WASM Performance Integration Tests - Issue #19
 *
 * Comprehensive test suite for WASM performance layer integration
 * with ruv-swarm modules and SIMD acceleration.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const WasmPerformanceLayer_1 = require("../../src/performance/WasmPerformanceLayer");
const SIMDAccelerationLayer_1 = require("../../src/performance/SIMDAccelerationLayer");
const WasmModuleManager_1 = require("../../src/performance/WasmModuleManager");
const neural_test_utils_1 = require("../utils/neural-test-utils");
(0, globals_1.describe)('WASM Performance Integration Tests - Issue #19', () => {
    let wasmPerformanceLayer;
    let simdAccelerationLayer;
    let wasmModuleManager;
    let memoryDetector;
    (0, globals_1.beforeAll)(async () => {
        console.log('🚀 Setting up WASM Performance Integration Tests...');
        // Initialize components
        wasmPerformanceLayer = new WasmPerformanceLayer_1.WasmPerformanceLayer();
        simdAccelerationLayer = new SIMDAccelerationLayer_1.SIMDAccelerationLayer();
        wasmModuleManager = new WasmModuleManager_1.WasmModuleManager({
            preferredModule: 'ruv-swarm',
            enableSIMD: true,
            memoryLimit: 50 * 1024 * 1024,
            enableProfiling: true
        });
        // Initialize all components
        await wasmModuleManager.initialize();
        console.log('✅ WASM Performance Integration Tests setup complete');
    });
    (0, globals_1.afterAll)(async () => {
        console.log('🧹 Cleaning up WASM Performance Integration Tests...');
        if (wasmModuleManager) {
            await wasmModuleManager.cleanup();
        }
        if (wasmPerformanceLayer) {
            wasmPerformanceLayer.cleanup();
        }
        if (simdAccelerationLayer) {
            simdAccelerationLayer.cleanup();
        }
        console.log('✅ WASM Performance Integration Tests cleanup complete');
    });
    (0, globals_1.beforeEach)(() => {
        memoryDetector = neural_test_utils_1.PerformanceTestUtils.createMemoryLeakDetector();
    });
    (0, globals_1.afterEach)(() => {
        const analysis = memoryDetector.analyze();
        if (analysis.leaked) {
            console.warn('⚠️ Memory leak detected:', analysis);
        }
    });
    (0, globals_1.describe)('WASM Module Manager Integration', () => {
        (0, globals_1.test)('should initialize with optimal module selection', async () => {
            const status = wasmModuleManager.getModuleStatus();
            const metrics = wasmModuleManager.getModuleMetrics();
            (0, globals_1.expect)(status.loaded).toBe(true);
            (0, globals_1.expect)(metrics.loadTime).toBeLessThan(5000); // <5s load time
            (0, globals_1.expect)(metrics.memoryUsage).toBeLessThan(50 * 1024 * 1024); // <50MB
            (0, globals_1.expect)(metrics.performanceScore).toBeGreaterThan(0);
            console.log('📊 Module Manager Status:', {
                module: status.module,
                version: status.version,
                loadTime: `${status.loadTime}ms`,
                memoryUsage: `${(status.memoryUsage / 1024 / 1024).toFixed(2)}MB`,
                capabilities: status.capabilities
            });
        });
        (0, globals_1.test)('should provide comprehensive module information', () => {
            const availableModules = wasmModuleManager.getAvailableModules();
            (0, globals_1.expect)(availableModules.length).toBeGreaterThan(0);
            for (const module of availableModules) {
                (0, globals_1.expect)(module.name).toBeTruthy();
                (0, globals_1.expect)(module.version).toBeTruthy();
                (0, globals_1.expect)(module.capabilities).toBeInstanceOf(Array);
                (0, globals_1.expect)(module.memoryRequirement).toBeGreaterThan(0);
                (0, globals_1.expect)(module.loadPriority).toBeGreaterThan(0);
            }
            console.log('📋 Available Modules:', availableModules.map(m => ({
                name: m.name,
                version: m.version,
                capabilities: m.capabilities.join(', ')
            })));
        });
        (0, globals_1.test)('should handle module switching', async () => {
            const initialStatus = wasmModuleManager.getModuleStatus();
            // Try switching to fallback module
            const switched = await wasmModuleManager.switchModule('fallback');
            if (switched) {
                const newStatus = wasmModuleManager.getModuleStatus();
                (0, globals_1.expect)(newStatus.module).toBe('fallback');
                (0, globals_1.expect)(newStatus.loaded).toBe(true);
                console.log('✅ Module switching successful:', {
                    from: initialStatus.module,
                    to: newStatus.module
                });
            }
            else {
                console.log('⚠️ Module switching not available in test environment');
            }
        });
        (0, globals_1.test)('should perform health checks', () => {
            const health = wasmModuleManager.healthCheck();
            (0, globals_1.expect)(health.status).toMatch(/healthy|warning|error/);
            (0, globals_1.expect)(health.module).toBeTruthy();
            (0, globals_1.expect)(health.metrics).toBeTruthy();
            (0, globals_1.expect)(health.issues).toBeInstanceOf(Array);
            console.log('🏥 Health Check:', {
                status: health.status,
                issues: health.issues.length,
                performanceScore: health.metrics.performanceScore.toFixed(1)
            });
        });
    });
    (0, globals_1.describe)('WASM Performance Layer Integration', () => {
        (0, globals_1.test)('should initialize with ruv-swarm integration', async () => {
            (0, globals_1.expect)(wasmPerformanceLayer.isWasmInitialized()).toBe(true);
            const metrics = wasmPerformanceLayer.getPerformanceMetrics();
            (0, globals_1.expect)(metrics.loadTime).toBeLessThan(1000); // <1s load time
            (0, globals_1.expect)(metrics.memoryUsage).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(metrics.operationsPerSecond).toBeGreaterThanOrEqual(0);
            console.log('📊 Performance Layer Metrics:', {
                loadTime: `${metrics.loadTime.toFixed(2)}ms`,
                memoryUsage: `${(metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`,
                simdAcceleration: metrics.simdAcceleration,
                operationsPerSecond: metrics.operationsPerSecond.toFixed(0)
            });
        });
        (0, globals_1.test)('should perform neural activation with WASM acceleration', async () => {
            const testSizes = [100, 1000, 10000];
            for (const size of testSizes) {
                const input = new Float32Array(size).map(() => Math.random() * 2 - 1);
                const startTime = performance.now();
                const result = await wasmPerformanceLayer.calculateNeuralActivation(input);
                const endTime = performance.now();
                (0, globals_1.expect)(result).toBeInstanceOf(Float32Array);
                (0, globals_1.expect)(result.length).toBe(size);
                // Validate activation function results (tanh should be in [-1, 1])
                for (let i = 0; i < result.length; i++) {
                    (0, globals_1.expect)(result[i]).toBeGreaterThanOrEqual(-1);
                    (0, globals_1.expect)(result[i]).toBeLessThanOrEqual(1);
                }
                const executionTime = endTime - startTime;
                const throughput = size / (executionTime / 1000);
                (0, globals_1.expect)(executionTime).toBeLessThan(100); // <100ms
                (0, globals_1.expect)(throughput).toBeGreaterThan(1000); // >1K elements/sec
                console.log(`⚡ Neural Activation (${size}): ${executionTime.toFixed(2)}ms, ${(throughput / 1000).toFixed(1)}K elem/sec`);
            }
        });
        (0, globals_1.test)('should optimize connections with WASM acceleration', async () => {
            const testSizes = [100, 500, 1000, 5000];
            for (const size of testSizes) {
                const connections = new Float32Array(size).map(() => Math.random());
                const startTime = performance.now();
                const optimized = await wasmPerformanceLayer.optimizeConnections(connections);
                const endTime = performance.now();
                (0, globals_1.expect)(optimized).toBeInstanceOf(Float32Array);
                (0, globals_1.expect)(optimized.length).toBe(size);
                // Validate optimized connections are in [0, 1] range
                for (let i = 0; i < optimized.length; i++) {
                    (0, globals_1.expect)(optimized[i]).toBeGreaterThanOrEqual(0);
                    (0, globals_1.expect)(optimized[i]).toBeLessThanOrEqual(1);
                }
                const executionTime = endTime - startTime;
                const throughput = size / (executionTime / 1000);
                (0, globals_1.expect)(executionTime).toBeLessThan(50); // <50ms
                (0, globals_1.expect)(throughput).toBeGreaterThan(500); // >500 connections/sec
                console.log(`🔧 Connection Optimization (${size}): ${executionTime.toFixed(2)}ms, ${(throughput / 1000).toFixed(1)}K conn/sec`);
            }
        });
        (0, globals_1.test)('should run comprehensive performance benchmarks', async () => {
            const benchmarkResults = await wasmPerformanceLayer.runPerformanceBenchmark();
            (0, globals_1.expect)(benchmarkResults.length).toBeGreaterThan(0);
            for (const result of benchmarkResults) {
                (0, globals_1.expect)(result.testName).toBeTruthy();
                (0, globals_1.expect)(result.wasmTime).toBeGreaterThan(0);
                (0, globals_1.expect)(result.jsTime).toBeGreaterThan(0);
                (0, globals_1.expect)(result.speedup).toBeGreaterThan(0);
                (0, globals_1.expect)(result.success).toBe(true);
                console.log(`📈 Benchmark: ${result.testName}`);
                console.log(`   WASM: ${result.wasmTime.toFixed(2)}ms`);
                console.log(`   JS: ${result.jsTime.toFixed(2)}ms`);
                console.log(`   Speedup: ${result.speedup.toFixed(2)}x`);
                console.log(`   Memory: ${(result.memoryUsage / 1024 / 1024).toFixed(2)}MB`);
            }
            // Validate overall performance
            const averageSpeedup = benchmarkResults.reduce((sum, r) => sum + r.speedup, 0) / benchmarkResults.length;
            (0, globals_1.expect)(averageSpeedup).toBeGreaterThan(1.0); // Should be faster than JS
            console.log(`🏆 Average Speedup: ${averageSpeedup.toFixed(2)}x`);
        });
        (0, globals_1.test)('should provide SIMD performance report', () => {
            const simdReport = wasmPerformanceLayer.getSIMDPerformanceReport();
            (0, globals_1.expect)(simdReport).toBeTruthy();
            (0, globals_1.expect)(simdReport.length).toBeGreaterThan(0);
            console.log('📊 SIMD Performance Report:');
            console.log(simdReport);
        });
    });
    (0, globals_1.describe)('SIMD Acceleration Layer Integration', () => {
        (0, globals_1.test)('should initialize with SIMD capabilities detection', async () => {
            (0, globals_1.expect)(simdAccelerationLayer.isInitialized()).toBe(true);
            const capabilities = simdAccelerationLayer.getSIMDCapabilities();
            const metrics = simdAccelerationLayer.getPerformanceMetrics();
            (0, globals_1.expect)(capabilities).toBeTruthy();
            (0, globals_1.expect)(metrics).toBeTruthy();
            console.log('🔧 SIMD Capabilities:', {
                supported: capabilities.supported,
                vectorWidth: capabilities.vectorWidth,
                features: capabilities.features.join(', '),
                speedup: `${capabilities.performance.speedup.toFixed(2)}x`
            });
            console.log('📊 SIMD Metrics:', {
                operationsPerSecond: metrics.operationsPerSecond.toFixed(0),
                vectorizationEfficiency: `${(metrics.vectorizationEfficiency * 100).toFixed(1)}%`,
                simdUtilization: `${(metrics.simdUtilization * 100).toFixed(1)}%`
            });
        });
        (0, globals_1.test)('should perform SIMD vector operations', () => {
            const testSizes = [128, 512, 1024, 4096];
            for (const size of testSizes) {
                const vectorA = new Float32Array(size).map(() => Math.random());
                const vectorB = new Float32Array(size).map(() => Math.random());
                const startTime = performance.now();
                const result = simdAccelerationLayer.simdVectorAdd(vectorA, vectorB);
                const endTime = performance.now();
                (0, globals_1.expect)(result).toBeInstanceOf(Float32Array);
                (0, globals_1.expect)(result.length).toBe(size);
                // Validate results
                for (let i = 0; i < Math.min(10, size); i++) {
                    (0, globals_1.expect)(result[i]).toBeCloseTo(vectorA[i] + vectorB[i], 5);
                }
                const executionTime = endTime - startTime;
                const throughput = size / (executionTime / 1000);
                (0, globals_1.expect)(executionTime).toBeLessThan(10); // <10ms
                (0, globals_1.expect)(throughput).toBeGreaterThan(10000); // >10K elements/sec
                console.log(`➕ SIMD Vector Add (${size}): ${executionTime.toFixed(2)}ms, ${(throughput / 1000).toFixed(1)}K elem/sec`);
            }
        });
        (0, globals_1.test)('should perform SIMD matrix operations', () => {
            const matrixSizes = [8, 16, 32, 64]; // Square matrices
            for (const size of matrixSizes) {
                const matrixA = new Float32Array(size * size).map(() => Math.random());
                const matrixB = new Float32Array(size * size).map(() => Math.random());
                const startTime = performance.now();
                const result = simdAccelerationLayer.simdMatrixMultiply(matrixA, matrixB, size, size);
                const endTime = performance.now();
                (0, globals_1.expect)(result).toBeInstanceOf(Float32Array);
                (0, globals_1.expect)(result.length).toBe(size * size);
                const executionTime = endTime - startTime;
                const operationsPerSecond = (size * size * size) / (executionTime / 1000); // O(n³) operations
                (0, globals_1.expect)(executionTime).toBeLessThan(100); // <100ms
                console.log(`🔢 SIMD Matrix Multiply (${size}x${size}): ${executionTime.toFixed(2)}ms, ${(operationsPerSecond / 1000).toFixed(1)}K ops/sec`);
            }
        });
        (0, globals_1.test)('should perform SIMD dot product', () => {
            const testSizes = [100, 1000, 10000];
            for (const size of testSizes) {
                const vectorA = new Float32Array(size).map(() => Math.random());
                const vectorB = new Float32Array(size).map(() => Math.random());
                const startTime = performance.now();
                const result = simdAccelerationLayer.simdDotProduct(vectorA, vectorB);
                const endTime = performance.now();
                (0, globals_1.expect)(typeof result).toBe('number');
                (0, globals_1.expect)(result).toBeGreaterThan(0); // Should be positive for random vectors
                const executionTime = endTime - startTime;
                const throughput = size / (executionTime / 1000);
                (0, globals_1.expect)(executionTime).toBeLessThan(5); // <5ms
                (0, globals_1.expect)(throughput).toBeGreaterThan(50000); // >50K elements/sec
                console.log(`⚡ SIMD Dot Product (${size}): ${executionTime.toFixed(2)}ms, ${(throughput / 1000).toFixed(1)}K elem/sec`);
            }
        });
        (0, globals_1.test)('should run comprehensive SIMD benchmarks', async () => {
            const benchmarkResult = await simdAccelerationLayer.runComprehensiveBenchmark();
            (0, globals_1.expect)(benchmarkResult.results.length).toBeGreaterThan(0);
            (0, globals_1.expect)(benchmarkResult.summary).toBeTruthy();
            const { summary } = benchmarkResult;
            (0, globals_1.expect)(summary.averageSpeedup).toBeGreaterThan(1.0);
            (0, globals_1.expect)(summary.vectorizationRate).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(summary.memoryEfficiency).toBeGreaterThan(0);
            (0, globals_1.expect)(summary.overallPerformance).toBeGreaterThan(0);
            console.log('📊 SIMD Benchmark Summary:', {
                averageSpeedup: `${summary.averageSpeedup.toFixed(2)}x`,
                vectorizationRate: `${(summary.vectorizationRate * 100).toFixed(1)}%`,
                memoryEfficiency: summary.memoryEfficiency.toFixed(2),
                overallPerformance: summary.overallPerformance.toFixed(2)
            });
        });
        (0, globals_1.test)('should provide comprehensive status report', () => {
            const statusReport = simdAccelerationLayer.getStatusReport();
            (0, globals_1.expect)(statusReport).toBeTruthy();
            (0, globals_1.expect)(statusReport.length).toBeGreaterThan(0);
            console.log('📋 SIMD Status Report:');
            console.log(statusReport);
        });
    });
    (0, globals_1.describe)('Performance Regression Tests', () => {
        (0, globals_1.test)('should meet performance targets', async () => {
            const targets = {
                maxLoadTime: 5000, // 5s max load time
                maxMemoryUsage: 50 * 1024 * 1024, // 50MB max memory
                minOperationsPerSecond: 1000, // 1K ops/sec minimum
                maxLatency: 100, // 100ms max latency
                minSpeedup: 1.0 // 1x minimum speedup
            };
            const moduleMetrics = wasmModuleManager.getModuleMetrics();
            const performanceMetrics = wasmPerformanceLayer.getPerformanceMetrics();
            // Check load time
            (0, globals_1.expect)(moduleMetrics.loadTime).toBeLessThan(targets.maxLoadTime);
            // Check memory usage
            (0, globals_1.expect)(moduleMetrics.memoryUsage).toBeLessThan(targets.maxMemoryUsage);
            // Check operations per second
            (0, globals_1.expect)(performanceMetrics.operationsPerSecond).toBeGreaterThan(targets.minOperationsPerSecond);
            // Check latency
            (0, globals_1.expect)(performanceMetrics.averageLatency).toBeLessThan(targets.maxLatency);
            // Check speedup
            (0, globals_1.expect)(performanceMetrics.performanceGain).toBeGreaterThan(targets.minSpeedup);
            console.log('🎯 Performance Targets Validation:', {
                loadTime: `${moduleMetrics.loadTime}ms (target: <${targets.maxLoadTime}ms)`,
                memoryUsage: `${(moduleMetrics.memoryUsage / 1024 / 1024).toFixed(2)}MB (target: <${targets.maxMemoryUsage / 1024 / 1024}MB)`,
                operationsPerSecond: `${performanceMetrics.operationsPerSecond.toFixed(0)} (target: >${targets.minOperationsPerSecond})`,
                latency: `${performanceMetrics.averageLatency.toFixed(2)}ms (target: <${targets.maxLatency}ms)`,
                speedup: `${performanceMetrics.performanceGain.toFixed(2)}x (target: >${targets.minSpeedup}x)`
            });
        });
        (0, globals_1.test)('should maintain consistent performance', async () => {
            const iterations = 50;
            const testSize = 1000;
            const performanceMeasurements = [];
            for (let i = 0; i < iterations; i++) {
                const input = new Float32Array(testSize).map(() => Math.random());
                const startTime = performance.now();
                await wasmPerformanceLayer.calculateNeuralActivation(input);
                const endTime = performance.now();
                performanceMeasurements.push(endTime - startTime);
            }
            const average = performanceMeasurements.reduce((a, b) => a + b, 0) / performanceMeasurements.length;
            const variance = performanceMeasurements.reduce((acc, val) => acc + Math.pow(val - average, 2), 0) / performanceMeasurements.length;
            const standardDeviation = Math.sqrt(variance);
            const coefficientOfVariation = standardDeviation / average;
            (0, globals_1.expect)(coefficientOfVariation).toBeLessThan(0.3); // <30% variation
            console.log('📊 Performance Consistency:', {
                iterations,
                average: `${average.toFixed(2)}ms`,
                standardDeviation: `${standardDeviation.toFixed(2)}ms`,
                coefficientOfVariation: `${(coefficientOfVariation * 100).toFixed(1)}%`
            });
        });
        (0, globals_1.test)('should handle stress testing', async () => {
            const stressDuration = 10000; // 10 seconds
            const batchSize = 5000;
            const startTime = Date.now();
            let operations = 0;
            let totalErrors = 0;
            console.log('🔥 Running 10-second stress test...');
            while (Date.now() - startTime < stressDuration) {
                try {
                    const input = new Float32Array(batchSize).map(() => Math.random());
                    await wasmPerformanceLayer.calculateNeuralActivation(input);
                    operations++;
                }
                catch (error) {
                    totalErrors++;
                }
            }
            const actualDuration = Date.now() - startTime;
            const operationsPerSecond = operations / (actualDuration / 1000);
            const errorRate = totalErrors / (operations + totalErrors);
            (0, globals_1.expect)(operationsPerSecond).toBeGreaterThan(10); // >10 ops/sec
            (0, globals_1.expect)(errorRate).toBeLessThan(0.1); // <10% error rate
            console.log('💪 Stress Test Results:', {
                duration: `${actualDuration}ms`,
                operations,
                operationsPerSecond: operationsPerSecond.toFixed(2),
                errorRate: `${(errorRate * 100).toFixed(2)}%`
            });
        });
    });
    (0, globals_1.describe)('Memory Management Tests', () => {
        (0, globals_1.test)('should manage memory efficiently', async () => {
            const initialMemory = wasmPerformanceLayer.getMemoryUsage();
            // Perform multiple operations
            const testOperations = 100;
            for (let i = 0; i < testOperations; i++) {
                const input = new Float32Array(1000).map(() => Math.random());
                await wasmPerformanceLayer.calculateNeuralActivation(input);
            }
            const finalMemory = wasmPerformanceLayer.getMemoryUsage();
            const memoryGrowth = finalMemory - initialMemory;
            // Memory growth should be reasonable
            (0, globals_1.expect)(memoryGrowth).toBeLessThan(10 * 1024 * 1024); // <10MB growth
            console.log('💾 Memory Management:', {
                initialMemory: `${(initialMemory / 1024 / 1024).toFixed(2)}MB`,
                finalMemory: `${(finalMemory / 1024 / 1024).toFixed(2)}MB`,
                growth: `${(memoryGrowth / 1024 / 1024).toFixed(2)}MB`
            });
        });
        (0, globals_1.test)('should detect memory leaks', async () => {
            const memorySnapshots = [];
            // Take initial memory snapshot
            memorySnapshots.push(wasmPerformanceLayer.getMemoryUsage());
            // Perform operations and take snapshots
            for (let i = 0; i < 10; i++) {
                const input = new Float32Array(5000).map(() => Math.random());
                await wasmPerformanceLayer.calculateNeuralActivation(input);
                // Force garbage collection if available
                if (typeof global !== 'undefined' && global.gc) {
                    global.gc();
                }
                memorySnapshots.push(wasmPerformanceLayer.getMemoryUsage());
            }
            // Check for memory leaks
            const initialMemory = memorySnapshots[0];
            const finalMemory = memorySnapshots[memorySnapshots.length - 1];
            const memoryGrowth = finalMemory - initialMemory;
            // Should not have significant memory growth
            (0, globals_1.expect)(memoryGrowth).toBeLessThan(5 * 1024 * 1024); // <5MB growth
            console.log('🔍 Memory Leak Detection:', {
                initialMemory: `${(initialMemory / 1024 / 1024).toFixed(2)}MB`,
                finalMemory: `${(finalMemory / 1024 / 1024).toFixed(2)}MB`,
                growth: `${(memoryGrowth / 1024 / 1024).toFixed(2)}MB`,
                snapshots: memorySnapshots.length
            });
        });
    });
    (0, globals_1.describe)('Error Handling and Recovery', () => {
        (0, globals_1.test)('should handle invalid input gracefully', async () => {
            const invalidInputs = [
                new Float32Array([NaN, 1, 2]),
                new Float32Array([Infinity, 1, 2]),
                new Float32Array([-Infinity, 1, 2]),
                new Float32Array(0) // Empty array
            ];
            for (const input of invalidInputs) {
                try {
                    const result = await wasmPerformanceLayer.calculateNeuralActivation(input);
                    // If it doesn't throw, result should be valid
                    (0, globals_1.expect)(result).toBeInstanceOf(Float32Array);
                }
                catch (error) {
                    // Should handle errors gracefully
                    (0, globals_1.expect)(error).toBeInstanceOf(Error);
                }
            }
        });
        (0, globals_1.test)('should recover from module failures', async () => {
            // Try to trigger a failure and recovery
            const healthBefore = wasmModuleManager.healthCheck();
            console.log('🏥 Health Before:', {
                status: healthBefore.status,
                issues: healthBefore.issues.length
            });
            // Perform operations that might stress the system
            try {
                const largeInput = new Float32Array(100000).map(() => Math.random());
                await wasmPerformanceLayer.calculateNeuralActivation(largeInput);
            }
            catch (error) {
                console.log('⚠️ Expected failure during stress test:', error.message);
            }
            const healthAfter = wasmModuleManager.healthCheck();
            console.log('🏥 Health After:', {
                status: healthAfter.status,
                issues: healthAfter.issues.length
            });
            // System should still be functional
            (0, globals_1.expect)(healthAfter.status).not.toBe('error');
        });
    });
    (0, globals_1.describe)('Integration with Neural Agent Manager', () => {
        (0, globals_1.test)('should integrate with existing neural infrastructure', async () => {
            // Test that WASM performance layer works with existing neural operations
            const testData = new Float32Array(1000).map(() => Math.random());
            // This should use the WASM-accelerated path
            const result = await wasmPerformanceLayer.calculateNeuralActivation(testData);
            (0, globals_1.expect)(result).toBeInstanceOf(Float32Array);
            (0, globals_1.expect)(result.length).toBe(testData.length);
            // Results should be in expected range for activation function
            for (let i = 0; i < result.length; i++) {
                (0, globals_1.expect)(result[i]).toBeGreaterThanOrEqual(-1);
                (0, globals_1.expect)(result[i]).toBeLessThanOrEqual(1);
            }
            console.log('🔗 Neural Integration Test:', {
                inputSize: testData.length,
                outputSize: result.length,
                sampleResults: result.slice(0, 5).map(x => x.toFixed(3))
            });
        });
        (0, globals_1.test)('should provide performance metrics for monitoring', () => {
            const performanceMetrics = wasmPerformanceLayer.getPerformanceMetrics();
            const moduleMetrics = wasmModuleManager.getModuleMetrics();
            const simdMetrics = simdAccelerationLayer.getPerformanceMetrics();
            // All metrics should be available
            (0, globals_1.expect)(performanceMetrics).toBeTruthy();
            (0, globals_1.expect)(moduleMetrics).toBeTruthy();
            (0, globals_1.expect)(simdMetrics).toBeTruthy();
            // Should have numeric values
            (0, globals_1.expect)(typeof performanceMetrics.operationsPerSecond).toBe('number');
            (0, globals_1.expect)(typeof moduleMetrics.performanceScore).toBe('number');
            (0, globals_1.expect)(typeof simdMetrics.vectorizationEfficiency).toBe('number');
            console.log('📊 Integrated Performance Metrics:', {
                wasmOpsPerSec: performanceMetrics.operationsPerSecond.toFixed(0),
                moduleScore: moduleMetrics.performanceScore.toFixed(1),
                simdEfficiency: `${(simdMetrics.vectorizationEfficiency * 100).toFixed(1)}%`,
                memoryUsage: `${(performanceMetrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,