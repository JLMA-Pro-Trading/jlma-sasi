{"version":3,"names":["cov_2orn7b1xj","actualCoverage","React","createContext","useContext","useState","useEffect","Agent","SwarmContext","s","undefined","useSwarm","f","context","b","Error","SwarmProvider","children","agents","setAgents","repositories","setRepositories","stats","setStats","totalAgents","activeAgents","totalRepositories","tasksCompleted","asiProgress","networkEfficiency","globalContributors","processingUnits","isSwarmActive","setIsSwarmActive","useNeuralMesh","setUseNeuralMesh","neuralMeshHook","serverUrl","enableWasm","enableRealtime","debugMode","initializeMockData","updateStats","metrics","length","combinedAgents","filter","a","neuralId","interval","setInterval","simulateSwarmActivity","clearInterval","mockRepos","id","name","owner","description","totalIssues","completedIssues","openPullRequests","lastActivity","Date","techStack","votes","userVoted","mockAgents","generateMockAgents","count","agentTypes","tasks","owners","Array","from","_","i","Math","floor","random","charAt","toUpperCase","slice","toString","substr","type","status","currentTask","repository","branch","completedTasks","efficiency","progress","position","x","y","z","agent","totalTasks","reduce","sum","avgEfficiency","neuralMeshStats","totalNeurons","totalSynapses","meshConnectivity","neuralActivity","averageActivity","wasmAcceleration","averageLatency","realtime","networkLatency","min","currentAgents","map","shouldUpdate","newStatus","max","startSwarm","stopSwarm","addAgent","isConnected","neuralAgent","createAgent","layer","threshold","newAgent","now","current","removeAgent","voteForProject","repositoryId","repo","addRepository","value","neuralMesh","isInitializing","error","connection","trainMesh","getMeshStatus","clearError","reconnect","toggleNeuralMesh","enabled","_jsx","Provider"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/contexts/SwarmContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'\nimport { useNeuralMesh } from '../hooks/useNeuralMesh'\nimport { NeuralAgent } from '../services/NeuralMeshService'\nimport { Agent } from '../types/agent'\n\nexport { Agent } from '../types/agent'\n\nexport interface SwarmStats {\n  totalAgents: number\n  activeAgents: number\n  totalRepositories: number\n  tasksCompleted: number\n  asiProgress: number\n  networkEfficiency: number\n  globalContributors: number\n  processingUnits: number\n  neuralMeshStats?: {\n    totalNeurons: number\n    totalSynapses: number\n    meshConnectivity: number\n    neuralActivity: number\n    wasmAcceleration: boolean\n    averageLatency: number\n  }\n}\n\nexport interface Repository {\n  id: string\n  name: string\n  owner: string\n  description: string\n  activeAgents: number\n  totalIssues: number\n  completedIssues: number\n  openPullRequests: number\n  lastActivity: Date\n  techStack: string[]\n  votes: number\n  userVoted: boolean\n}\n\n\ninterface SwarmContextType {\n  agents: Agent[]\n  repositories: Repository[]\n  stats: SwarmStats\n  isSwarmActive: boolean\n  startSwarm: () => void\n  stopSwarm: () => void\n  addAgent: (type: Agent['type']) => void\n  removeAgent: (id: string) => void\n  voteForProject: (repositoryId: string) => void\n  addRepository: (repository: Repository) => void\n  // Neural mesh integration\n  neuralMesh: {\n    isConnected: boolean\n    isInitializing: boolean\n    error: string | null\n    metrics: {\n      totalNeurons: number\n      totalSynapses: number\n      averageActivity: number\n      networkEfficiency: number\n      wasmAcceleration: boolean\n    }\n    connection: any\n    trainMesh: (patterns: any[]) => Promise<boolean>\n    getMeshStatus: () => Promise<any>\n    clearError: () => void\n    reconnect: () => Promise<void>\n    toggleNeuralMesh: (enabled: boolean) => void\n  }\n}\n\nconst SwarmContext = createContext<SwarmContextType | undefined>(undefined)\n\nexport const useSwarm = () => {\n  const context = useContext(SwarmContext)\n  if (context === undefined) {\n    throw new Error('useSwarm must be used within a SwarmProvider')\n  }\n  return context\n}\n\ninterface SwarmProviderProps {\n  children: ReactNode\n}\n\nexport const SwarmProvider: React.FC<SwarmProviderProps> = ({ children }) => {\n  const [agents, setAgents] = useState<Agent[]>([])\n  const [repositories, setRepositories] = useState<Repository[]>([])\n  const [stats, setStats] = useState<SwarmStats>({\n    totalAgents: 0,\n    activeAgents: 0,\n    totalRepositories: 0,\n    tasksCompleted: 0,\n    asiProgress: 0,\n    networkEfficiency: 0,\n    globalContributors: 0,\n    processingUnits: 0\n  })\n  const [isSwarmActive, setIsSwarmActive] = useState(false)\n  const [useNeuralMesh, setUseNeuralMesh] = useState(true)\n  \n  // Neural mesh integration\n  const neuralMeshHook = useNeuralMesh({\n    serverUrl: 'ws://localhost:3000',\n    enableWasm: true,\n    enableRealtime: true,\n    debugMode: true\n  })\n\n  // Initialize mock data\n  useEffect(() => {\n    initializeMockData()\n  }, [])\n\n  // Update stats when agents/repositories change\n  useEffect(() => {\n    updateStats()\n  }, [agents, repositories, neuralMeshHook.agents, neuralMeshHook.metrics])\n  \n  // Sync neural mesh agents with regular agents\n  useEffect(() => {\n    if (useNeuralMesh && neuralMeshHook.agents.length > 0) {\n      const combinedAgents = [...agents.filter(a => !a.neuralId), ...neuralMeshHook.agents]\n      setAgents(combinedAgents)\n    }\n  }, [neuralMeshHook.agents, useNeuralMesh])\n\n  // Simulate swarm activity\n  useEffect(() => {\n    if (!isSwarmActive) return\n\n    const interval = setInterval(() => {\n      simulateSwarmActivity()\n    }, 2000)\n\n    return () => clearInterval(interval)\n  }, [isSwarmActive])\n\n  const initializeMockData = () => {\n    // Mock repositories\n    const mockRepos: Repository[] = [\n      {\n        id: 'repo_1',\n        name: 'quantum-compiler',\n        owner: 'QuantumSoft',\n        description: 'Next-generation quantum computing compiler',\n        activeAgents: 5,\n        totalIssues: 47,\n        completedIssues: 32,\n        openPullRequests: 3,\n        lastActivity: new Date(),\n        techStack: ['Rust', 'Python', 'CUDA'],\n        votes: 42,\n        userVoted: false\n      },\n      {\n        id: 'repo_2',\n        name: 'neural-mesh',\n        owner: 'DeepMind',\n        description: 'Distributed neural network framework',\n        activeAgents: 8,\n        totalIssues: 73,\n        completedIssues: 51,\n        openPullRequests: 5,\n        lastActivity: new Date(),\n        techStack: ['Python', 'TensorFlow', 'C++'],        votes: 28,        userVoted: true\n      },\n      {\n        id: 'repo_3',\n        name: 'swarm-intelligence',\n        owner: 'MIT-CSAIL',\n        description: 'Collective AI decision-making system',\n        activeAgents: 12,\n        totalIssues: 95,\n        completedIssues: 67,\n        openPullRequests: 7,\n        lastActivity: new Date(),\n        techStack: ['Go', 'React', 'PostgreSQL'],        votes: 73,        userVoted: false\n      }\n    ]\n\n    // Mock agents\n    const mockAgents: Agent[] = generateMockAgents(25)\n\n    setRepositories(mockRepos)\n    setAgents(mockAgents)\n  }\n\n  const generateMockAgents = (count: number): Agent[] => {\n    const agentTypes: Agent['type'][] = ['researcher', 'coder', 'tester', 'reviewer', 'debugger']\n    const tasks = [\n      'Optimizing quantum algorithms',\n      'Implementing neural pathways',\n      'Testing distributed systems',\n      'Reviewing security protocols',\n      'Debugging memory leaks',\n      'Analyzing performance metrics',\n      'Refactoring legacy code',\n      'Writing unit tests',\n      'Documenting APIs',\n      'Optimizing database queries'\n    ]\n\n    const owners = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank', 'Grace', 'Henry', 'Ivy', 'Jack']\n\n    return Array.from({ length: count }, (_, i) => ({\n      id: `agent_${i}`,\n      name: `${agentTypes[Math.floor(Math.random() * agentTypes.length)].charAt(0).toUpperCase() + agentTypes[Math.floor(Math.random() * agentTypes.length)].slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n      type: agentTypes[Math.floor(Math.random() * agentTypes.length)],\n      status: Math.random() > 0.7 ? 'active' : Math.random() > 0.5 ? 'processing' : 'idle',\n      currentTask: tasks[Math.floor(Math.random() * tasks.length)],\n      repository: repositories[Math.floor(Math.random() * repositories.length)]?.name || 'quantum-compiler',\n      branch: `feature/agent-${i}-${Math.random().toString(36).substr(2, 6)}`,\n      completedTasks: Math.floor(Math.random() * 50),\n      efficiency: Math.random() * 100,\n      progress: Math.random(),\n      position: {\n        x: (Math.random() - 0.5) * 100,\n        y: (Math.random() - 0.5) * 100,\n        z: (Math.random() - 0.5) * 100\n      },\n      owner: owners[Math.floor(Math.random() * owners.length)]\n    }))\n  }\n\n  const updateStats = () => {\n    const activeAgents = agents.filter(agent => agent.status === 'active' || agent.status === 'processing').length\n    const totalTasks = agents.reduce((sum, agent) => sum + agent.completedTasks, 0)\n    const avgEfficiency = agents.reduce((sum, agent) => sum + agent.efficiency, 0) / agents.length\n    \n    // Include neural mesh metrics\n    const neuralMeshStats = useNeuralMesh ? {\n      totalNeurons: neuralMeshHook.metrics.totalNeurons,\n      totalSynapses: neuralMeshHook.metrics.totalSynapses,\n      meshConnectivity: neuralMeshHook.metrics.networkEfficiency,\n      neuralActivity: neuralMeshHook.metrics.averageActivity,\n      wasmAcceleration: neuralMeshHook.metrics.wasmAcceleration,\n      averageLatency: neuralMeshHook.agents.reduce((sum: number, agent: any) => \n        sum + (agent.realtime?.networkLatency || 0), 0) / (neuralMeshHook.agents.length || 1)\n    } : undefined\n\n    setStats({\n      totalAgents: agents.length,\n      activeAgents,\n      totalRepositories: repositories.length,\n      tasksCompleted: totalTasks,\n      asiProgress: Math.min(95, (totalTasks / 1000) * 100),\n      networkEfficiency: useNeuralMesh ? neuralMeshHook.metrics.networkEfficiency : avgEfficiency || 0,\n      globalContributors: Math.floor(Math.random() * 5000) + 15000,\n      processingUnits: Math.floor(agents.length * 42.5) + Math.floor(Math.random() * 200) + 1200,\n      ...(neuralMeshStats && { neuralMeshStats })\n    })\n  }\n\n  const simulateSwarmActivity = () => {\n    setAgents(currentAgents => \n      currentAgents.map(agent => {\n        const shouldUpdate = Math.random() > 0.7\n        if (!shouldUpdate) return agent\n\n        const newStatus = Math.random() > 0.8 ? 'active' : \n                         Math.random() > 0.6 ? 'processing' : \n                         Math.random() > 0.4 ? 'idle' : 'completed'\n\n        const completedTasks = newStatus === 'completed' ? \n                              agent.completedTasks + 1 : \n                              agent.completedTasks\n\n        return {\n          ...agent,\n          status: newStatus,\n          completedTasks,\n          efficiency: Math.max(0, Math.min(100, agent.efficiency + (Math.random() - 0.5) * 10)),\n          progress: Math.max(0, Math.min(1, agent.progress + (Math.random() - 0.4) * 0.1)),\n          position: {\n            x: agent.position.x + (Math.random() - 0.5) * 2,\n            y: agent.position.y + (Math.random() - 0.5) * 2,\n            z: agent.position.z + (Math.random() - 0.5) * 2\n          }\n        }\n      })\n    )\n  }\n\n  const startSwarm = () => {\n    setIsSwarmActive(true)\n  }\n\n  const stopSwarm = () => {\n    setIsSwarmActive(false)\n  }\n\n  const addAgent = async (type: Agent['type']) => {\n    if (useNeuralMesh && neuralMeshHook.isConnected) {\n      // Create neural agent through mesh service\n      const neuralAgent = await neuralMeshHook.createAgent(type, {\n        layer: Math.floor(Math.random() * 6) + 1,\n        threshold: 0.5\n      })\n      \n      if (neuralAgent) {\n        // Agent will be added automatically via useEffect hook\n        return\n      }\n    }\n    \n    // Fallback to regular agent creation\n    const newAgent: Agent = {\n      id: `agent_${Date.now()}`,\n      name: `${type.charAt(0).toUpperCase() + type.slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n      type,\n      status: 'idle',\n      currentTask: 'Initializing...',\n      repository: repositories[0]?.name || 'quantum-compiler',\n      branch: `feature/new-agent-${Math.random().toString(36).substr(2, 6)}`,\n      completedTasks: 0,\n      efficiency: 50,\n      progress: 0,\n      position: {\n        x: (Math.random() - 0.5) * 100,\n        y: (Math.random() - 0.5) * 100,\n        z: (Math.random() - 0.5) * 100\n      },\n      owner: 'Current User'\n    }\n\n    setAgents(current => [...current, newAgent])\n  }\n\n  const removeAgent = (id: string) => {\n    // Remove from neural mesh if it's a neural agent\n    if (useNeuralMesh) {\n      neuralMeshHook.removeAgent(id)\n    }\n    \n    setAgents(current => current.filter(agent => agent.id !== id))\n  }\n\n  const voteForProject = (repositoryId: string) => {\n    setRepositories(current => \n      current.map(repo => \n        repo.id === repositoryId \n          ? { \n              ...repo, \n              votes: repo.userVoted ? repo.votes - 1 : repo.votes + 1,\n              userVoted: !repo.userVoted\n            }\n          : repo\n      )\n    )\n  }\n\n  const addRepository = (repository: Repository) => {\n    setRepositories(current => [...current, repository])\n  }\n\n  const value: SwarmContextType = {\n    agents,\n    repositories,\n    stats,\n    isSwarmActive,\n    startSwarm,\n    stopSwarm,\n    addAgent,\n    removeAgent,\n    voteForProject,\n    addRepository,\n    // Neural mesh specific methods\n    neuralMesh: {\n      isConnected: neuralMeshHook.isConnected,\n      isInitializing: neuralMeshHook.isInitializing,\n      error: neuralMeshHook.error,\n      metrics: neuralMeshHook.metrics,\n      connection: neuralMeshHook.connection,\n      trainMesh: neuralMeshHook.trainMesh,\n      getMeshStatus: neuralMeshHook.getMeshStatus,\n      clearError: neuralMeshHook.clearError,\n      reconnect: neuralMeshHook.reconnect,\n      toggleNeuralMesh: (enabled: boolean) => setUseNeuralMesh(enabled)\n    }\n  }\n\n  return (\n    <SwarmContext.Provider value={value}>\n      {children}\n    </SwarmContext.Provider>\n  )\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}