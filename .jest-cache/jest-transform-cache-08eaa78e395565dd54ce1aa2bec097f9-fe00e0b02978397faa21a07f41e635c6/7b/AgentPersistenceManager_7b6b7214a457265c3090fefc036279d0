7566b4856e0ccbc261e05958cb751c9b
/* istanbul ignore next */
function cov_52xrixujp() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/AgentPersistenceManager.ts";
  var hash = "f0e3a876476e4790006a1932a2ae02d3a9980fdb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/AgentPersistenceManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "1": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 28,
          column: 11
        }
      },
      "2": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "3": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "4": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 46,
          column: 11
        }
      },
      "5": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "6": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 43
        }
      },
      "7": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 63,
          column: 10
        }
      },
      "8": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "9": {
        start: {
          line: 71,
          column: 26
        },
        end: {
          line: 71,
          column: 51
        }
      },
      "10": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "11": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 57
        }
      },
      "12": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "13": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 52
        }
      },
      "14": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 38
        }
      },
      "15": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 39
        }
      },
      "16": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 38
        }
      },
      "17": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 78
        }
      },
      "18": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 84
        }
      },
      "19": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 80
        }
      },
      "20": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 99,
          column: 56
        }
      },
      "21": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 56
        }
      },
      "22": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 45
        }
      },
      "23": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 67
        }
      },
      "24": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 72
        }
      },
      "25": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 46
        }
      },
      "26": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 62
        }
      },
      "27": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 68
        }
      },
      "28": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 44
        }
      },
      "29": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 67
        }
      },
      "30": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 121,
          column: 56
        }
      },
      "31": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 56
        }
      },
      "32": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "33": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "34": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 33
        }
      },
      "35": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 63
        }
      },
      "36": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 198,
          column: 56
        }
      },
      "37": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 56
        }
      },
      "38": {
        start: {
          line: 199,
          column: 24
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "39": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "40": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 32
        }
      },
      "41": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 64
        }
      },
      "42": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "43": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 56
        }
      },
      "44": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 221,
          column: 43
        }
      },
      "45": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "46": {
        start: {
          line: 223,
          column: 25
        },
        end: {
          line: 229,
          column: 8
        }
      },
      "47": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 230,
          column: 360
        }
      },
      "48": {
        start: {
          line: 231,
          column: 29
        },
        end: {
          line: 231,
          column: 58
        }
      },
      "49": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "50": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 96
        }
      },
      "51": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 26
        }
      },
      "52": {
        start: {
          line: 239,
          column: 29
        },
        end: {
          line: 239,
          column: 58
        }
      },
      "53": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 108
        }
      },
      "54": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 24
        }
      },
      "55": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "56": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 56
        }
      },
      "57": {
        start: {
          line: 252,
          column: 26
        },
        end: {
          line: 252,
          column: 43
        }
      },
      "58": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "59": {
        start: {
          line: 254,
          column: 25
        },
        end: {
          line: 256,
          column: 8
        }
      },
      "60": {
        start: {
          line: 257,
          column: 24
        },
        end: {
          line: 257,
          column: 36
        }
      },
      "61": {
        start: {
          line: 258,
          column: 33
        },
        end: {
          line: 258,
          column: 62
        }
      },
      "62": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "63": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 105
        }
      },
      "64": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 264,
          column: 28
        }
      },
      "65": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 28
        }
      },
      "66": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 280,
          column: 14
        }
      },
      "67": {
        start: {
          line: 283,
          column: 33
        },
        end: {
          line: 283,
          column: 62
        }
      },
      "68": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 109
        }
      },
      "69": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 24
        }
      },
      "70": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "71": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 56
        }
      },
      "72": {
        start: {
          line: 296,
          column: 26
        },
        end: {
          line: 296,
          column: 43
        }
      },
      "73": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "74": {
        start: {
          line: 298,
          column: 25
        },
        end: {
          line: 300,
          column: 8
        }
      },
      "75": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 59
        }
      },
      "76": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "77": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 58
        }
      },
      "78": {
        start: {
          line: 305,
          column: 31
        },
        end: {
          line: 305,
          column: 60
        }
      },
      "79": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "80": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 107
        }
      },
      "81": {
        start: {
          line: 312,
          column: 31
        },
        end: {
          line: 312,
          column: 60
        }
      },
      "82": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 112
        }
      },
      "83": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 24
        }
      },
      "84": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "85": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 56
        }
      },
      "86": {
        start: {
          line: 324,
          column: 21
        },
        end: {
          line: 327,
          column: 6
        }
      },
      "87": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 136
        }
      },
      "88": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "89": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 56
        }
      },
      "90": {
        start: {
          line: 337,
          column: 20
        },
        end: {
          line: 337,
          column: 68
        }
      },
      "91": {
        start: {
          line: 338,
          column: 23
        },
        end: {
          line: 338,
          column: 32
        }
      },
      "92": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "93": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 44
        }
      },
      "94": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 36
        }
      },
      "95": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 46
        }
      },
      "96": {
        start: {
          line: 344,
          column: 21
        },
        end: {
          line: 344,
          column: 43
        }
      },
      "97": {
        start: {
          line: 345,
          column: 21
        },
        end: {
          line: 345,
          column: 40
        }
      },
      "98": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 354,
          column: 12
        }
      },
      "99": {
        start: {
          line: 346,
          column: 32
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "100": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "101": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 56
        }
      },
      "102": {
        start: {
          line: 363,
          column: 26
        },
        end: {
          line: 363,
          column: 43
        }
      },
      "103": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "104": {
        start: {
          line: 365,
          column: 32
        },
        end: {
          line: 376,
          column: 14
        }
      },
      "105": {
        start: {
          line: 366,
          column: 29
        },
        end: {
          line: 372,
          column: 10
        }
      },
      "106": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 375,
          column: 17
        }
      },
      "107": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 374,
          column: 340
        }
      },
      "108": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 32
        }
      },
      "109": {
        start: {
          line: 378,
          column: 30
        },
        end: {
          line: 378,
          column: 59
        }
      },
      "110": {
        start: {
          line: 379,
          column: 28
        },
        end: {
          line: 379,
          column: 53
        }
      },
      "111": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 132
        }
      },
      "112": {
        start: {
          line: 383,
          column: 30
        },
        end: {
          line: 383,
          column: 59
        }
      },
      "113": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 103
        }
      },
      "114": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 24
        }
      },
      "115": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "116": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 56
        }
      },
      "117": {
        start: {
          line: 395,
          column: 20
        },
        end: {
          line: 395,
          column: 42
        }
      },
      "118": {
        start: {
          line: 396,
          column: 23
        },
        end: {
          line: 396,
          column: 25
        }
      },
      "119": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 410,
          column: 9
        }
      },
      "120": {
        start: {
          line: 398,
          column: 31
        },
        end: {
          line: 398,
          column: 33
        }
      },
      "121": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 402,
          column: 13
        }
      },
      "122": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 44
        }
      },
      "123": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 41
        }
      },
      "124": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 406,
          column: 13
        }
      },
      "125": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 46
        }
      },
      "126": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 405,
          column: 43
        }
      },
      "127": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 409,
          column: 13
        }
      },
      "128": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 408,
          column: 62
        }
      },
      "129": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 411,
          column: 45
        }
      },
      "130": {
        start: {
          line: 412,
          column: 21
        },
        end: {
          line: 412,
          column: 43
        }
      },
      "131": {
        start: {
          line: 413,
          column: 21
        },
        end: {
          line: 413,
          column: 40
        }
      },
      "132": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 429,
          column: 12
        }
      },
      "133": {
        start: {
          line: 414,
          column: 32
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "134": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "135": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 56
        }
      },
      "136": {
        start: {
          line: 438,
          column: 21
        },
        end: {
          line: 440,
          column: 6
        }
      },
      "137": {
        start: {
          line: 441,
          column: 21
        },
        end: {
          line: 441,
          column: 31
        }
      },
      "138": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 41
        }
      },
      "139": {
        start: {
          line: 442,
          column: 31
        },
        end: {
          line: 442,
          column: 39
        }
      },
      "140": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "141": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 56
        }
      },
      "142": {
        start: {
          line: 451,
          column: 21
        },
        end: {
          line: 453,
          column: 6
        }
      },
      "143": {
        start: {
          line: 454,
          column: 21
        },
        end: {
          line: 454,
          column: 31
        }
      },
      "144": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 41
        }
      },
      "145": {
        start: {
          line: 455,
          column: 31
        },
        end: {
          line: 455,
          column: 39
        }
      },
      "146": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "147": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 56
        }
      },
      "148": {
        start: {
          line: 464,
          column: 23
        },
        end: {
          line: 464,
          column: 53
        }
      },
      "149": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 474,
          column: 9
        }
      },
      "150": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 26
        }
      },
      "151": {
        start: {
          line: 469,
          column: 13
        },
        end: {
          line: 474,
          column: 9
        }
      },
      "152": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 470,
          column: 42
        }
      },
      "153": {
        start: {
          line: 472,
          column: 13
        },
        end: {
          line: 474,
          column: 9
        }
      },
      "154": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 39
        }
      },
      "155": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 25
        }
      },
      "156": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 484,
          column: 9
        }
      },
      "157": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 28
        }
      },
      "158": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 27
        }
      },
      "159": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 485,
          column: 35
        }
      },
      "160": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 486,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 47
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 23
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 68
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 39
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 97
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 25
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 119
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 26
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 196
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 28
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 217
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 23
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 248
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 40
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 292
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 31
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 320
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 47
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 333
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 346,
            column: 24
          },
          end: {
            line: 346,
            column: 25
          }
        },
        loc: {
          start: {
            line: 346,
            column: 32
          },
          end: {
            line: 354,
            column: 9
          }
        },
        line: 346
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 34
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 359
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 365,
            column: 52
          },
          end: {
            line: 365,
            column: 53
          }
        },
        loc: {
          start: {
            line: 365,
            column: 67
          },
          end: {
            line: 376,
            column: 13
          }
        },
        line: 365
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 31
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 391
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 414,
            column: 24
          },
          end: {
            line: 414,
            column: 25
          }
        },
        loc: {
          start: {
            line: 414,
            column: 32
          },
          end: {
            line: 429,
            column: 9
          }
        },
        line: 414
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 22
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 434
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 442,
            column: 24
          },
          end: {
            line: 442,
            column: 25
          }
        },
        loc: {
          start: {
            line: 442,
            column: 31
          },
          end: {
            line: 442,
            column: 39
          }
        },
        line: 442
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 23
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 447
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 455,
            column: 24
          },
          end: {
            line: 455,
            column: 25
          }
        },
        loc: {
          start: {
            line: 455,
            column: 31
          },
          end: {
            line: 455,
            column: 39
          }
        },
        line: 455
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 27
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 460
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 18
          },
          end: {
            line: 487,
            column: 5
          }
        },
        line: 480
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 16,
            column: 45
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 78,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 66
          },
          end: {
            line: 78,
            column: 77
          }
        }, {
          start: {
            line: 78,
            column: 80
          },
          end: {
            line: 78,
            column: 89
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 99,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 99,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "4": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 121,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 121,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "5": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 198,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 198,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "6": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "7": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 218,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 218,
            column: 31
          }
        }, {
          start: {
            line: 218,
            column: 35
          },
          end: {
            line: 218,
            column: 43
          }
        }],
        line: 218
      },
      "8": {
        loc: {
          start: {
            line: 230,
            column: 138
          },
          end: {
            line: 230,
            column: 165
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 138
          },
          end: {
            line: 230,
            column: 157
          }
        }, {
          start: {
            line: 230,
            column: 161
          },
          end: {
            line: 230,
            column: 165
          }
        }],
        line: 230
      },
      "9": {
        loc: {
          start: {
            line: 230,
            column: 167
          },
          end: {
            line: 230,
            column: 189
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 167
          },
          end: {
            line: 230,
            column: 182
          }
        }, {
          start: {
            line: 230,
            column: 186
          },
          end: {
            line: 230,
            column: 189
          }
        }],
        line: 230
      },
      "10": {
        loc: {
          start: {
            line: 230,
            column: 228
          },
          end: {
            line: 230,
            column: 253
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 228
          },
          end: {
            line: 230,
            column: 248
          }
        }, {
          start: {
            line: 230,
            column: 252
          },
          end: {
            line: 230,
            column: 253
          }
        }],
        line: 230
      },
      "11": {
        loc: {
          start: {
            line: 230,
            column: 255
          },
          end: {
            line: 230,
            column: 283
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 255
          },
          end: {
            line: 230,
            column: 278
          }
        }, {
          start: {
            line: 230,
            column: 282
          },
          end: {
            line: 230,
            column: 283
          }
        }],
        line: 230
      },
      "12": {
        loc: {
          start: {
            line: 230,
            column: 305
          },
          end: {
            line: 230,
            column: 330
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 305
          },
          end: {
            line: 230,
            column: 322
          }
        }, {
          start: {
            line: 230,
            column: 326
          },
          end: {
            line: 230,
            column: 330
          }
        }],
        line: 230
      },
      "13": {
        loc: {
          start: {
            line: 230,
            column: 332
          },
          end: {
            line: 230,
            column: 359
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 332
          },
          end: {
            line: 230,
            column: 351
          }
        }, {
          start: {
            line: 230,
            column: 355
          },
          end: {
            line: 230,
            column: 359
          }
        }],
        line: 230
      },
      "14": {
        loc: {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "15": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "16": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 249,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 249,
            column: 31
          }
        }, {
          start: {
            line: 249,
            column: 35
          },
          end: {
            line: 249,
            column: 43
          }
        }],
        line: 249
      },
      "17": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "18": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 264,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 264,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "19": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "20": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 293,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 293,
            column: 31
          }
        }, {
          start: {
            line: 293,
            column: 35
          },
          end: {
            line: 293,
            column: 43
          }
        }],
        line: 293
      },
      "21": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "22": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 309,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 309,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "23": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "24": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 321,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 321,
            column: 31
          }
        }, {
          start: {
            line: 321,
            column: 35
          },
          end: {
            line: 321,
            column: 43
          }
        }],
        line: 321
      },
      "25": {
        loc: {
          start: {
            line: 328,
            column: 113
          },
          end: {
            line: 328,
            column: 133
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 328,
            column: 113
          },
          end: {
            line: 328,
            column: 127
          }
        }, {
          start: {
            line: 328,
            column: 131
          },
          end: {
            line: 328,
            column: 133
          }
        }],
        line: 328
      },
      "26": {
        loc: {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "27": {
        loc: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 334,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 334,
            column: 31
          }
        }, {
          start: {
            line: 334,
            column: 35
          },
          end: {
            line: 334,
            column: 43
          }
        }],
        line: 334
      },
      "28": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "29": {
        loc: {
          start: {
            line: 353,
            column: 32
          },
          end: {
            line: 353,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 353,
            column: 32
          },
          end: {
            line: 353,
            column: 48
          }
        }, {
          start: {
            line: 353,
            column: 52
          },
          end: {
            line: 353,
            column: 56
          }
        }],
        line: 353
      },
      "30": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "31": {
        loc: {
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 360,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 360,
            column: 31
          }
        }, {
          start: {
            line: 360,
            column: 35
          },
          end: {
            line: 360,
            column: 43
          }
        }],
        line: 360
      },
      "32": {
        loc: {
          start: {
            line: 374,
            column: 126
          },
          end: {
            line: 374,
            column: 152
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 126
          },
          end: {
            line: 374,
            column: 144
          }
        }, {
          start: {
            line: 374,
            column: 148
          },
          end: {
            line: 374,
            column: 152
          }
        }],
        line: 374
      },
      "33": {
        loc: {
          start: {
            line: 374,
            column: 154
          },
          end: {
            line: 374,
            column: 175
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 154
          },
          end: {
            line: 374,
            column: 168
          }
        }, {
          start: {
            line: 374,
            column: 172
          },
          end: {
            line: 374,
            column: 175
          }
        }],
        line: 374
      },
      "34": {
        loc: {
          start: {
            line: 374,
            column: 212
          },
          end: {
            line: 374,
            column: 236
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 212
          },
          end: {
            line: 374,
            column: 231
          }
        }, {
          start: {
            line: 374,
            column: 235
          },
          end: {
            line: 374,
            column: 236
          }
        }],
        line: 374
      },
      "35": {
        loc: {
          start: {
            line: 374,
            column: 238
          },
          end: {
            line: 374,
            column: 265
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 238
          },
          end: {
            line: 374,
            column: 260
          }
        }, {
          start: {
            line: 374,
            column: 264
          },
          end: {
            line: 374,
            column: 265
          }
        }],
        line: 374
      },
      "36": {
        loc: {
          start: {
            line: 374,
            column: 286
          },
          end: {
            line: 374,
            column: 310
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 286
          },
          end: {
            line: 374,
            column: 302
          }
        }, {
          start: {
            line: 374,
            column: 306
          },
          end: {
            line: 374,
            column: 310
          }
        }],
        line: 374
      },
      "37": {
        loc: {
          start: {
            line: 374,
            column: 312
          },
          end: {
            line: 374,
            column: 338
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 312
          },
          end: {
            line: 374,
            column: 330
          }
        }, {
          start: {
            line: 374,
            column: 334
          },
          end: {
            line: 374,
            column: 338
          }
        }],
        line: 374
      },
      "38": {
        loc: {
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "39": {
        loc: {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 392,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 392,
            column: 31
          }
        }, {
          start: {
            line: 392,
            column: 35
          },
          end: {
            line: 392,
            column: 43
          }
        }],
        line: 392
      },
      "40": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 410,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 410,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "41": {
        loc: {
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 402,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 402,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "42": {
        loc: {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 406,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 406,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "43": {
        loc: {
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "44": {
        loc: {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "45": {
        loc: {
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 435,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 435,
            column: 31
          }
        }, {
          start: {
            line: 435,
            column: 35
          },
          end: {
            line: 435,
            column: 43
          }
        }],
        line: 435
      },
      "46": {
        loc: {
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "47": {
        loc: {
          start: {
            line: 448,
            column: 12
          },
          end: {
            line: 448,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 448,
            column: 12
          },
          end: {
            line: 448,
            column: 31
          }
        }, {
          start: {
            line: 448,
            column: 35
          },
          end: {
            line: 448,
            column: 43
          }
        }],
        line: 448
      },
      "48": {
        loc: {
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "49": {
        loc: {
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 461,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 461,
            column: 31
          }
        }, {
          start: {
            line: 461,
            column: 35
          },
          end: {
            line: 461,
            column: 43
          }
        }],
        line: 461
      },
      "50": {
        loc: {
          start: {
            line: 466,
            column: 8
          },
          end: {
            line: 474,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 8
          },
          end: {
            line: 474,
            column: 9
          }
        }, {
          start: {
            line: 469,
            column: 13
          },
          end: {
            line: 474,
            column: 9
          }
        }],
        line: 466
      },
      "51": {
        loc: {
          start: {
            line: 469,
            column: 13
          },
          end: {
            line: 474,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 13
          },
          end: {
            line: 474,
            column: 9
          }
        }, {
          start: {
            line: 472,
            column: 13
          },
          end: {
            line: 474,
            column: 9
          }
        }],
        line: 469
      },
      "52": {
        loc: {
          start: {
            line: 469,
            column: 17
          },
          end: {
            line: 469,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 17
          },
          end: {
            line: 469,
            column: 38
          }
        }, {
          start: {
            line: 469,
            column: 42
          },
          end: {
            line: 469,
            column: 59
          }
        }, {
          start: {
            line: 469,
            column: 63
          },
          end: {
            line: 469,
            column: 85
          }
        }],
        line: 469
      },
      "53": {
        loc: {
          start: {
            line: 472,
            column: 13
          },
          end: {
            line: 474,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 13
          },
          end: {
            line: 474,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "54": {
        loc: {
          start: {
            line: 472,
            column: 17
          },
          end: {
            line: 472,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 472,
            column: 17
          },
          end: {
            line: 472,
            column: 43
          }
        }, {
          start: {
            line: 472,
            column: 47
          },
          end: {
            line: 472,
            column: 66
          }
        }],
        line: 472
      },
      "55": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 484,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 484,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/AgentPersistenceManager.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/AgentPersistenceManager.ts"],
      sourcesContent: ["/**\n * AgentPersistenceManager - SQLite Database Layer for Phase 2A\n * Implements TDD-driven database operations with performance monitoring\n * \n * Performance Requirements:\n * - Agent spawn: <75ms\n * - Database operations: <50ms\n * - Memory usage: <50MB per agent\n * - Test coverage: >95%\n */\n\nimport Database, { Database as DatabaseType } from 'better-sqlite3';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { performance } from 'perf_hooks';\nimport type { \n  AgentConfig, \n  AgentMetric, \n  AgentMemoryEntry, \n  SessionState,\n  NeuralWeightRecord,\n  DatabaseConnectionConfig,\n  BatchOperation\n} from '../types/agent';\n\nexport class AgentPersistenceManager {\n  private db: DatabaseType | null = null;\n  private dbPath: string;\n  private config: DatabaseConnectionConfig;\n  private isInitialized: boolean = false;\n  private writeQueue: Array<() => Promise<any>> = [];\n  private isProcessingQueue: boolean = false;\n\n  constructor(dbPath: string = './.swarm/agents.db') {\n    this.dbPath = path.resolve(dbPath);\n    this.config = {\n      path: this.dbPath,\n      timeout: 30000,\n      maxConnections: 5,\n      busyTimeout: 5000,\n      cacheSize: 64000, // 64MB cache\n      mmapSize: 268435456, // 256MB mmap\n      walMode: true,\n      synchronous: 'NORMAL'\n    };\n  }\n\n  /**\n   * Initialize SQLite database with Phase 2A schema and performance optimizations\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Ensure directory exists\n      const dbDir = path.dirname(this.dbPath);\n      if (!fs.existsSync(dbDir)) {\n        fs.mkdirSync(dbDir, { recursive: true });\n      }\n\n      // Initialize database connection\n      this.db = new Database(this.dbPath, {\n        timeout: this.config.timeout,\n        verbose: process.env.NODE_ENV === 'development' ? console.log : undefined\n      });\n\n      // Configure SQLite for performance\n      await this.configureSQLitePerformance();\n\n      // Create schema\n      await this.createSchema();\n\n      // Create indexes for performance\n      await this.createIndexes();\n\n      this.isInitialized = true;\n      console.log('\u2705 AgentPersistenceManager initialized successfully');\n\n    } catch (error) {\n      console.error('\u274C Failed to initialize AgentPersistenceManager:', error);\n      throw new Error(`Database initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Configure SQLite for optimal performance\n   */\n  private async configureSQLitePerformance(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    // Enable WAL mode for concurrent reads\n    this.db.pragma('journal_mode = WAL');\n    \n    // Set synchronous mode for balanced performance/safety\n    this.db.pragma(`synchronous = ${this.config.synchronous}`);\n    \n    // Configure cache size\n    this.db.pragma(`cache_size = -${this.config.cacheSize / 1024}`); // Negative = KB\n    \n    // Use memory for temporary storage\n    this.db.pragma('temp_store = MEMORY');\n    \n    // Configure memory mapping\n    this.db.pragma(`mmap_size = ${this.config.mmapSize}`);\n    \n    // Set busy timeout\n    this.db.pragma(`busy_timeout = ${this.config.busyTimeout}`);\n    \n    // Enable foreign key constraints\n    this.db.pragma('foreign_keys = ON');\n    \n    console.log('\uD83D\uDD27 SQLite performance configuration applied');\n  }\n\n  /**\n   * Create database schema for Phase 2A\n   */\n  private async createSchema(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const schemas = [\n      // Agent Lifecycle Management\n      `CREATE TABLE IF NOT EXISTS agents (\n        id TEXT PRIMARY KEY,\n        type TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'spawning',\n        cognitive_pattern TEXT NOT NULL,\n        network_layers TEXT NOT NULL,\n        learning_rate REAL DEFAULT 0.01,\n        momentum REAL DEFAULT 0.0,\n        created_at INTEGER NOT NULL,\n        last_active INTEGER NOT NULL,\n        memory_usage_mb REAL DEFAULT 0,\n        performance_score REAL DEFAULT 0,\n        spawn_time_ms INTEGER DEFAULT NULL,\n        config_json TEXT DEFAULT '{}',\n        metadata_json TEXT DEFAULT '{}'\n      )`,\n\n      // Neural Network State Persistence\n      `CREATE TABLE IF NOT EXISTS neural_weights (\n        agent_id TEXT NOT NULL,\n        layer_index INTEGER NOT NULL,\n        weight_data BLOB NOT NULL,\n        bias_data BLOB NOT NULL,\n        updated_at INTEGER NOT NULL,\n        checksum TEXT NOT NULL,\n        compression_type TEXT DEFAULT 'gzip',\n        PRIMARY KEY (agent_id, layer_index),\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Agent Memory and Knowledge Base\n      `CREATE TABLE IF NOT EXISTS agent_memory (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        agent_id TEXT NOT NULL,\n        memory_type TEXT NOT NULL,\n        key TEXT NOT NULL,\n        value_data BLOB NOT NULL,\n        importance_score REAL DEFAULT 0.5,\n        access_count INTEGER DEFAULT 0,\n        created_at INTEGER NOT NULL,\n        last_accessed INTEGER NOT NULL,\n        ttl_expires INTEGER DEFAULT NULL,\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Performance Metrics and Monitoring\n      `CREATE TABLE IF NOT EXISTS agent_metrics (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        agent_id TEXT NOT NULL,\n        metric_type TEXT NOT NULL,\n        value REAL NOT NULL,\n        unit TEXT NOT NULL,\n        recorded_at INTEGER NOT NULL,\n        context_json TEXT DEFAULT '{}',\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Cross-Session State Management\n      `CREATE TABLE IF NOT EXISTS session_state (\n        id TEXT PRIMARY KEY,\n        swarm_topology TEXT NOT NULL,\n        active_agents TEXT NOT NULL,\n        coordination_state BLOB NOT NULL,\n        created_at INTEGER NOT NULL,\n        last_checkpoint INTEGER NOT NULL,\n        is_active BOOLEAN DEFAULT TRUE\n      )`\n    ];\n\n    for (const schema of schemas) {\n      this.db.exec(schema);\n    }\n\n    console.log('\uD83D\uDCCB Database schema created successfully');\n  }\n\n  /**\n   * Create indexes for Phase 2A performance requirements\n   */\n  private async createIndexes(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const indexes = [\n      'CREATE INDEX IF NOT EXISTS idx_agents_status ON agents(status, last_active)',\n      'CREATE INDEX IF NOT EXISTS idx_agents_type ON agents(type, status)',\n      'CREATE INDEX IF NOT EXISTS idx_neural_weights_agent ON neural_weights(agent_id)',\n      'CREATE INDEX IF NOT EXISTS idx_agent_memory_type ON agent_memory(agent_id, memory_type)',\n      'CREATE INDEX IF NOT EXISTS idx_agent_memory_importance ON agent_memory(importance_score DESC, last_accessed DESC)',\n      'CREATE INDEX IF NOT EXISTS idx_metrics_agent_type ON agent_metrics(agent_id, metric_type, recorded_at)',\n      'CREATE INDEX IF NOT EXISTS idx_session_active ON session_state(is_active, last_checkpoint)'\n    ];\n\n    for (const index of indexes) {\n      this.db.exec(index);\n    }\n\n    console.log('\uD83D\uDD0D Database indexes created successfully');\n  }\n\n  /**\n   * Save agent configuration to database\n   * Performance target: <50ms\n   */\n  async saveAgent(config: AgentConfig): Promise<AgentConfig> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        INSERT INTO agents (\n          id, type, status, cognitive_pattern, network_layers, learning_rate, momentum,\n          created_at, last_active, memory_usage_mb, performance_score, spawn_time_ms,\n          config_json, metadata_json\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n\n      const result = stmt.run(\n        config.id,\n        config.type,\n        config.status,\n        config.cognitivePattern,\n        JSON.stringify(config.networkLayers),\n        config.learningRate || 0.01,\n        config.momentum || 0.0,\n        config.createdAt,\n        config.lastActive,\n        config.memoryUsageMB || 0,\n        config.performanceScore || 0,\n        config.spawnTimeMs,\n        config.configJson || '{}',\n        config.metadataJson || '{}'\n      );\n\n      const saveTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (saveTime > 50) {\n        console.warn(`\u26A0\uFE0F Agent save time exceeded threshold: ${saveTime.toFixed(2)}ms`);\n      }\n\n      return config;\n\n    } catch (error) {\n      const saveTime = performance.now() - startTime;\n      console.error(`\u274C Failed to save agent ${config.id} (${saveTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve agent by ID\n   * Performance target: <50ms\n   */\n  async getAgent(id: string): Promise<AgentConfig | null> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        SELECT * FROM agents WHERE id = ?\n      `);\n\n      const row = stmt.get(id) as any;\n\n      const retrieveTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (retrieveTime > 50) {\n        console.warn(`\u26A0\uFE0F Agent retrieval time exceeded threshold: ${retrieveTime.toFixed(2)}ms`);\n      }\n\n      if (!row) return null;\n\n      return {\n        id: row.id,\n        type: row.type,\n        cognitivePattern: row.cognitive_pattern,\n        networkLayers: JSON.parse(row.network_layers),\n        learningRate: row.learning_rate,\n        momentum: row.momentum,\n        status: row.status,\n        createdAt: row.created_at,\n        lastActive: row.last_active,\n        memoryUsageMB: row.memory_usage_mb,\n        performanceScore: row.performance_score,\n        spawnTimeMs: row.spawn_time_ms,\n        configJson: row.config_json,\n        metadataJson: row.metadata_json\n      };\n\n    } catch (error) {\n      const retrieveTime = performance.now() - startTime;\n      console.error(`\u274C Failed to retrieve agent ${id} (${retrieveTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Update agent status atomically\n   * Performance target: <50ms\n   */\n  async updateAgentStatus(id: string, status: string): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        UPDATE agents SET status = ?, last_active = ? WHERE id = ?\n      `);\n\n      const result = stmt.run(status, Date.now(), id);\n\n      if (result.changes === 0) {\n        throw new Error(`Agent not found: ${id}`);\n      }\n\n      const updateTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (updateTime > 50) {\n        console.warn(`\u26A0\uFE0F Agent status update time exceeded threshold: ${updateTime.toFixed(2)}ms`);\n      }\n\n    } catch (error) {\n      const updateTime = performance.now() - startTime;\n      console.error(`\u274C Failed to update agent status ${id} (${updateTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Record performance metric\n   */\n  async recordMetric(metric: AgentMetric): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      INSERT INTO agent_metrics (agent_id, metric_type, value, unit, recorded_at, context_json)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      metric.agentId,\n      metric.metricType,\n      metric.value,\n      metric.unit,\n      metric.recordedAt,\n      JSON.stringify(metric.context || {})\n    );\n  }\n\n  /**\n   * Get agent metrics by type\n   */\n  async getAgentMetrics(agentId: string, metricType?: string): Promise<AgentMetric[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    let query = 'SELECT * FROM agent_metrics WHERE agent_id = ?';\n    const params: any[] = [agentId];\n\n    if (metricType) {\n      query += ' AND metric_type = ?';\n      params.push(metricType);\n    }\n\n    query += ' ORDER BY recorded_at DESC';\n\n    const stmt = this.db.prepare(query);\n    const rows = stmt.all(...params) as any[];\n\n    return rows.map(row => ({\n      id: row.id,\n      agentId: row.agent_id,\n      metricType: row.metric_type,\n      value: row.value,\n      unit: row.unit,\n      recordedAt: row.recorded_at,\n      context: JSON.parse(row.context_json || '{}')\n    }));\n  }\n\n  /**\n   * Batch save multiple agents efficiently\n   */\n  async batchSaveAgents(agents: AgentConfig[]): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const transaction = this.db.transaction((agentList: AgentConfig[]) => {\n        const stmt = this.db!.prepare(`\n          INSERT INTO agents (\n            id, type, status, cognitive_pattern, network_layers, learning_rate, momentum,\n            created_at, last_active, memory_usage_mb, performance_score, spawn_time_ms,\n            config_json, metadata_json\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        `);\n\n        for (const agent of agentList) {\n          stmt.run(\n            agent.id,\n            agent.type,\n            agent.status,\n            agent.cognitivePattern,\n            JSON.stringify(agent.networkLayers),\n            agent.learningRate || 0.01,\n            agent.momentum || 0.0,\n            agent.createdAt,\n            agent.lastActive,\n            agent.memoryUsageMB || 0,\n            agent.performanceScore || 0,\n            agent.spawnTimeMs,\n            agent.configJson || '{}',\n            agent.metadataJson || '{}'\n          );\n        }\n      });\n\n      transaction(agents);\n\n      const batchTime = performance.now() - startTime;\n      const avgTime = batchTime / agents.length;\n\n      console.log(`\uD83D\uDCCA Batch saved ${agents.length} agents in ${batchTime.toFixed(2)}ms (avg: ${avgTime.toFixed(2)}ms/agent)`);\n\n    } catch (error) {\n      const batchTime = performance.now() - startTime;\n      console.error(`\u274C Failed to batch save agents (${batchTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all agents with optional filtering\n   */\n  async getAllAgents(filter?: { type?: string; status?: string }): Promise<AgentConfig[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    let query = 'SELECT * FROM agents';\n    const params: any[] = [];\n\n    if (filter) {\n      const conditions: string[] = [];\n      \n      if (filter.type) {\n        conditions.push('type = ?');\n        params.push(filter.type);\n      }\n      \n      if (filter.status) {\n        conditions.push('status = ?');\n        params.push(filter.status);\n      }\n      \n      if (conditions.length > 0) {\n        query += ' WHERE ' + conditions.join(' AND ');\n      }\n    }\n\n    query += ' ORDER BY created_at DESC';\n\n    const stmt = this.db.prepare(query);\n    const rows = stmt.all(...params) as any[];\n\n    return rows.map(row => ({\n      id: row.id,\n      type: row.type,\n      cognitivePattern: row.cognitive_pattern,\n      networkLayers: JSON.parse(row.network_layers),\n      learningRate: row.learning_rate,\n      momentum: row.momentum,\n      status: row.status,\n      createdAt: row.created_at,\n      lastActive: row.last_active,\n      memoryUsageMB: row.memory_usage_mb,\n      performanceScore: row.performance_score,\n      spawnTimeMs: row.spawn_time_ms,\n      configJson: row.config_json,\n      metadataJson: row.metadata_json\n    }));\n  }\n\n  /**\n   * Get database table names (for testing)\n   */\n  async getTables(): Promise<string[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\n    `);\n    \n    const rows = stmt.all() as any[];\n    return rows.map(row => row.name);\n  }\n\n  /**\n   * Get database index names (for testing)\n   */\n  async getIndexes(): Promise<string[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      SELECT name FROM sqlite_master WHERE type='index' AND name NOT LIKE 'sqlite_%'\n    `);\n    \n    const rows = stmt.all() as any[];\n    return rows.map(row => row.name);\n  }\n\n  /**\n   * Get journal mode (for testing)\n   */\n  async getJournalMode(): Promise<string> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const result = this.db.pragma('journal_mode');\n    \n    // Handle both string and object responses from better-sqlite3\n    if (typeof result === 'string') {\n      return result;\n    } else if (Array.isArray(result) && result.length > 0 && result[0].journal_mode) {\n      return result[0].journal_mode;\n    } else if (typeof result === 'object' && result.journal_mode) {\n      return result.journal_mode;\n    }\n    \n    return 'unknown';\n  }\n\n  /**\n   * Close database connection\n   */\n  async close(): Promise<void> {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n    this.isInitialized = false;\n    console.log('\uD83D\uDD12 Database connection closed');\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f0e3a876476e4790006a1932a2ae02d3a9980fdb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_52xrixujp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_52xrixujp();
/**
 * AgentPersistenceManager - SQLite Database Layer for Phase 2A
 * Implements TDD-driven database operations with performance monitoring
 *
 * Performance Requirements:
 * - Agent spawn: <75ms
 * - Database operations: <50ms
 * - Memory usage: <50MB per agent
 * - Test coverage: >95%
 */
import Database from 'better-sqlite3';
import * as path from 'path';
import * as fs from 'fs';
import { performance } from 'perf_hooks';
export class AgentPersistenceManager {
  constructor(dbPath =
  /* istanbul ignore next */
  (cov_52xrixujp().b[0][0]++, './.swarm/agents.db')) {
    /* istanbul ignore next */
    cov_52xrixujp().f[0]++;
    cov_52xrixujp().s[0]++;
    Object.defineProperty(this, "db", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_52xrixujp().s[1]++;
    Object.defineProperty(this, "dbPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_52xrixujp().s[2]++;
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_52xrixujp().s[3]++;
    Object.defineProperty(this, "isInitialized", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    /* istanbul ignore next */
    cov_52xrixujp().s[4]++;
    Object.defineProperty(this, "writeQueue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    /* istanbul ignore next */
    cov_52xrixujp().s[5]++;
    Object.defineProperty(this, "isProcessingQueue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    /* istanbul ignore next */
    cov_52xrixujp().s[6]++;
    this.dbPath = path.resolve(dbPath);
    /* istanbul ignore next */
    cov_52xrixujp().s[7]++;
    this.config = {
      path: this.dbPath,
      timeout: 30000,
      maxConnections: 5,
      busyTimeout: 5000,
      cacheSize: 64000,
      // 64MB cache
      mmapSize: 268435456,
      // 256MB mmap
      walMode: true,
      synchronous: 'NORMAL'
    };
  }
  /**
   * Initialize SQLite database with Phase 2A schema and performance optimizations
   */
  async initialize() {
    /* istanbul ignore next */
    cov_52xrixujp().f[1]++;
    cov_52xrixujp().s[8]++;
    try {
      // Ensure directory exists
      const dbDir =
      /* istanbul ignore next */
      (cov_52xrixujp().s[9]++, path.dirname(this.dbPath));
      /* istanbul ignore next */
      cov_52xrixujp().s[10]++;
      if (!fs.existsSync(dbDir)) {
        /* istanbul ignore next */
        cov_52xrixujp().b[1][0]++;
        cov_52xrixujp().s[11]++;
        fs.mkdirSync(dbDir, {
          recursive: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[1][1]++;
      }
      // Initialize database connection
      cov_52xrixujp().s[12]++;
      this.db = new Database(this.dbPath, {
        timeout: this.config.timeout,
        verbose: process.env.NODE_ENV === 'development' ?
        /* istanbul ignore next */
        (cov_52xrixujp().b[2][0]++, console.log) :
        /* istanbul ignore next */
        (cov_52xrixujp().b[2][1]++, undefined)
      });
      // Configure SQLite for performance
      /* istanbul ignore next */
      cov_52xrixujp().s[13]++;
      await this.configureSQLitePerformance();
      // Create schema
      /* istanbul ignore next */
      cov_52xrixujp().s[14]++;
      await this.createSchema();
      // Create indexes for performance
      /* istanbul ignore next */
      cov_52xrixujp().s[15]++;
      await this.createIndexes();
      /* istanbul ignore next */
      cov_52xrixujp().s[16]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_52xrixujp().s[17]++;
      console.log('✅ AgentPersistenceManager initialized successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_52xrixujp().s[18]++;
      console.error('❌ Failed to initialize AgentPersistenceManager:', error);
      /* istanbul ignore next */
      cov_52xrixujp().s[19]++;
      throw new Error(`Database initialization failed: ${error.message}`);
    }
  }
  /**
   * Configure SQLite for optimal performance
   */
  async configureSQLitePerformance() {
    /* istanbul ignore next */
    cov_52xrixujp().f[2]++;
    cov_52xrixujp().s[20]++;
    if (!this.db) {
      /* istanbul ignore next */
      cov_52xrixujp().b[3][0]++;
      cov_52xrixujp().s[21]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[3][1]++;
    }
    // Enable WAL mode for concurrent reads
    cov_52xrixujp().s[22]++;
    this.db.pragma('journal_mode = WAL');
    // Set synchronous mode for balanced performance/safety
    /* istanbul ignore next */
    cov_52xrixujp().s[23]++;
    this.db.pragma(`synchronous = ${this.config.synchronous}`);
    // Configure cache size
    /* istanbul ignore next */
    cov_52xrixujp().s[24]++;
    this.db.pragma(`cache_size = -${this.config.cacheSize / 1024}`); // Negative = KB
    // Use memory for temporary storage
    /* istanbul ignore next */
    cov_52xrixujp().s[25]++;
    this.db.pragma('temp_store = MEMORY');
    // Configure memory mapping
    /* istanbul ignore next */
    cov_52xrixujp().s[26]++;
    this.db.pragma(`mmap_size = ${this.config.mmapSize}`);
    // Set busy timeout
    /* istanbul ignore next */
    cov_52xrixujp().s[27]++;
    this.db.pragma(`busy_timeout = ${this.config.busyTimeout}`);
    // Enable foreign key constraints
    /* istanbul ignore next */
    cov_52xrixujp().s[28]++;
    this.db.pragma('foreign_keys = ON');
    /* istanbul ignore next */
    cov_52xrixujp().s[29]++;
    console.log('🔧 SQLite performance configuration applied');
  }
  /**
   * Create database schema for Phase 2A
   */
  async createSchema() {
    /* istanbul ignore next */
    cov_52xrixujp().f[3]++;
    cov_52xrixujp().s[30]++;
    if (!this.db) {
      /* istanbul ignore next */
      cov_52xrixujp().b[4][0]++;
      cov_52xrixujp().s[31]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[4][1]++;
    }
    const schemas =
    /* istanbul ignore next */
    (cov_52xrixujp().s[32]++, [
    // Agent Lifecycle Management
    `CREATE TABLE IF NOT EXISTS agents (
        id TEXT PRIMARY KEY,
        type TEXT NOT NULL,
        status TEXT NOT NULL DEFAULT 'spawning',
        cognitive_pattern TEXT NOT NULL,
        network_layers TEXT NOT NULL,
        learning_rate REAL DEFAULT 0.01,
        momentum REAL DEFAULT 0.0,
        created_at INTEGER NOT NULL,
        last_active INTEGER NOT NULL,
        memory_usage_mb REAL DEFAULT 0,
        performance_score REAL DEFAULT 0,
        spawn_time_ms INTEGER DEFAULT NULL,
        config_json TEXT DEFAULT '{}',
        metadata_json TEXT DEFAULT '{}'
      )`,
    // Neural Network State Persistence
    `CREATE TABLE IF NOT EXISTS neural_weights (
        agent_id TEXT NOT NULL,
        layer_index INTEGER NOT NULL,
        weight_data BLOB NOT NULL,
        bias_data BLOB NOT NULL,
        updated_at INTEGER NOT NULL,
        checksum TEXT NOT NULL,
        compression_type TEXT DEFAULT 'gzip',
        PRIMARY KEY (agent_id, layer_index),
        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE
      )`,
    // Agent Memory and Knowledge Base
    `CREATE TABLE IF NOT EXISTS agent_memory (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        agent_id TEXT NOT NULL,
        memory_type TEXT NOT NULL,
        key TEXT NOT NULL,
        value_data BLOB NOT NULL,
        importance_score REAL DEFAULT 0.5,
        access_count INTEGER DEFAULT 0,
        created_at INTEGER NOT NULL,
        last_accessed INTEGER NOT NULL,
        ttl_expires INTEGER DEFAULT NULL,
        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE
      )`,
    // Performance Metrics and Monitoring
    `CREATE TABLE IF NOT EXISTS agent_metrics (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        agent_id TEXT NOT NULL,
        metric_type TEXT NOT NULL,
        value REAL NOT NULL,
        unit TEXT NOT NULL,
        recorded_at INTEGER NOT NULL,
        context_json TEXT DEFAULT '{}',
        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE
      )`,
    // Cross-Session State Management
    `CREATE TABLE IF NOT EXISTS session_state (
        id TEXT PRIMARY KEY,
        swarm_topology TEXT NOT NULL,
        active_agents TEXT NOT NULL,
        coordination_state BLOB NOT NULL,
        created_at INTEGER NOT NULL,
        last_checkpoint INTEGER NOT NULL,
        is_active BOOLEAN DEFAULT TRUE
      )`]);
    /* istanbul ignore next */
    cov_52xrixujp().s[33]++;
    for (const schema of schemas) {
      /* istanbul ignore next */
      cov_52xrixujp().s[34]++;
      this.db.exec(schema);
    }
    /* istanbul ignore next */
    cov_52xrixujp().s[35]++;
    console.log('📋 Database schema created successfully');
  }
  /**
   * Create indexes for Phase 2A performance requirements
   */
  async createIndexes() {
    /* istanbul ignore next */
    cov_52xrixujp().f[4]++;
    cov_52xrixujp().s[36]++;
    if (!this.db) {
      /* istanbul ignore next */
      cov_52xrixujp().b[5][0]++;
      cov_52xrixujp().s[37]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[5][1]++;
    }
    const indexes =
    /* istanbul ignore next */
    (cov_52xrixujp().s[38]++, ['CREATE INDEX IF NOT EXISTS idx_agents_status ON agents(status, last_active)', 'CREATE INDEX IF NOT EXISTS idx_agents_type ON agents(type, status)', 'CREATE INDEX IF NOT EXISTS idx_neural_weights_agent ON neural_weights(agent_id)', 'CREATE INDEX IF NOT EXISTS idx_agent_memory_type ON agent_memory(agent_id, memory_type)', 'CREATE INDEX IF NOT EXISTS idx_agent_memory_importance ON agent_memory(importance_score DESC, last_accessed DESC)', 'CREATE INDEX IF NOT EXISTS idx_metrics_agent_type ON agent_metrics(agent_id, metric_type, recorded_at)', 'CREATE INDEX IF NOT EXISTS idx_session_active ON session_state(is_active, last_checkpoint)']);
    /* istanbul ignore next */
    cov_52xrixujp().s[39]++;
    for (const index of indexes) {
      /* istanbul ignore next */
      cov_52xrixujp().s[40]++;
      this.db.exec(index);
    }
    /* istanbul ignore next */
    cov_52xrixujp().s[41]++;
    console.log('🔍 Database indexes created successfully');
  }
  /**
   * Save agent configuration to database
   * Performance target: <50ms
   */
  async saveAgent(config) {
    /* istanbul ignore next */
    cov_52xrixujp().f[5]++;
    cov_52xrixujp().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[7][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[7][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[6][0]++;
      cov_52xrixujp().s[43]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[6][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_52xrixujp().s[44]++, performance.now());
    /* istanbul ignore next */
    cov_52xrixujp().s[45]++;
    try {
      const stmt =
      /* istanbul ignore next */
      (cov_52xrixujp().s[46]++, this.db.prepare(`
        INSERT INTO agents (
          id, type, status, cognitive_pattern, network_layers, learning_rate, momentum,
          created_at, last_active, memory_usage_mb, performance_score, spawn_time_ms,
          config_json, metadata_json
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `));
      const result =
      /* istanbul ignore next */
      (cov_52xrixujp().s[47]++, stmt.run(config.id, config.type, config.status, config.cognitivePattern, JSON.stringify(config.networkLayers),
      /* istanbul ignore next */
      (cov_52xrixujp().b[8][0]++, config.learningRate) ||
      /* istanbul ignore next */
      (cov_52xrixujp().b[8][1]++, 0.01),
      /* istanbul ignore next */
      (cov_52xrixujp().b[9][0]++, config.momentum) ||
      /* istanbul ignore next */
      (cov_52xrixujp().b[9][1]++, 0.0), config.createdAt, config.lastActive,
      /* istanbul ignore next */
      (cov_52xrixujp().b[10][0]++, config.memoryUsageMB) ||
      /* istanbul ignore next */
      (cov_52xrixujp().b[10][1]++, 0),
      /* istanbul ignore next */
      (cov_52xrixujp().b[11][0]++, config.performanceScore) ||
      /* istanbul ignore next */
      (cov_52xrixujp().b[11][1]++, 0), config.spawnTimeMs,
      /* istanbul ignore next */
      (cov_52xrixujp().b[12][0]++, config.configJson) ||
      /* istanbul ignore next */
      (cov_52xrixujp().b[12][1]++, '{}'),
      /* istanbul ignore next */
      (cov_52xrixujp().b[13][0]++, config.metadataJson) ||
      /* istanbul ignore next */
      (cov_52xrixujp().b[13][1]++, '{}')));
      const saveTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[48]++, performance.now() - startTime);
      // Log performance warning if exceeding threshold
      /* istanbul ignore next */
      cov_52xrixujp().s[49]++;
      if (saveTime > 50) {
        /* istanbul ignore next */
        cov_52xrixujp().b[14][0]++;
        cov_52xrixujp().s[50]++;
        console.warn(`⚠️ Agent save time exceeded threshold: ${saveTime.toFixed(2)}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[14][1]++;
      }
      cov_52xrixujp().s[51]++;
      return config;
    } catch (error) {
      const saveTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[52]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_52xrixujp().s[53]++;
      console.error(`❌ Failed to save agent ${config.id} (${saveTime.toFixed(2)}ms):`, error.message);
      /* istanbul ignore next */
      cov_52xrixujp().s[54]++;
      throw error;
    }
  }
  /**
   * Retrieve agent by ID
   * Performance target: <50ms
   */
  async getAgent(id) {
    /* istanbul ignore next */
    cov_52xrixujp().f[6]++;
    cov_52xrixujp().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[16][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[16][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[15][0]++;
      cov_52xrixujp().s[56]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[15][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_52xrixujp().s[57]++, performance.now());
    /* istanbul ignore next */
    cov_52xrixujp().s[58]++;
    try {
      const stmt =
      /* istanbul ignore next */
      (cov_52xrixujp().s[59]++, this.db.prepare(`
        SELECT * FROM agents WHERE id = ?
      `));
      const row =
      /* istanbul ignore next */
      (cov_52xrixujp().s[60]++, stmt.get(id));
      const retrieveTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[61]++, performance.now() - startTime);
      // Log performance warning if exceeding threshold
      /* istanbul ignore next */
      cov_52xrixujp().s[62]++;
      if (retrieveTime > 50) {
        /* istanbul ignore next */
        cov_52xrixujp().b[17][0]++;
        cov_52xrixujp().s[63]++;
        console.warn(`⚠️ Agent retrieval time exceeded threshold: ${retrieveTime.toFixed(2)}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[17][1]++;
      }
      cov_52xrixujp().s[64]++;
      if (!row) {
        /* istanbul ignore next */
        cov_52xrixujp().b[18][0]++;
        cov_52xrixujp().s[65]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[18][1]++;
      }
      cov_52xrixujp().s[66]++;
      return {
        id: row.id,
        type: row.type,
        cognitivePattern: row.cognitive_pattern,
        networkLayers: JSON.parse(row.network_layers),
        learningRate: row.learning_rate,
        momentum: row.momentum,
        status: row.status,
        createdAt: row.created_at,
        lastActive: row.last_active,
        memoryUsageMB: row.memory_usage_mb,
        performanceScore: row.performance_score,
        spawnTimeMs: row.spawn_time_ms,
        configJson: row.config_json,
        metadataJson: row.metadata_json
      };
    } catch (error) {
      const retrieveTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[67]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_52xrixujp().s[68]++;
      console.error(`❌ Failed to retrieve agent ${id} (${retrieveTime.toFixed(2)}ms):`, error.message);
      /* istanbul ignore next */
      cov_52xrixujp().s[69]++;
      throw error;
    }
  }
  /**
   * Update agent status atomically
   * Performance target: <50ms
   */
  async updateAgentStatus(id, status) {
    /* istanbul ignore next */
    cov_52xrixujp().f[7]++;
    cov_52xrixujp().s[70]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[20][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[20][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[19][0]++;
      cov_52xrixujp().s[71]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[19][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_52xrixujp().s[72]++, performance.now());
    /* istanbul ignore next */
    cov_52xrixujp().s[73]++;
    try {
      const stmt =
      /* istanbul ignore next */
      (cov_52xrixujp().s[74]++, this.db.prepare(`
        UPDATE agents SET status = ?, last_active = ? WHERE id = ?
      `));
      const result =
      /* istanbul ignore next */
      (cov_52xrixujp().s[75]++, stmt.run(status, Date.now(), id));
      /* istanbul ignore next */
      cov_52xrixujp().s[76]++;
      if (result.changes === 0) {
        /* istanbul ignore next */
        cov_52xrixujp().b[21][0]++;
        cov_52xrixujp().s[77]++;
        throw new Error(`Agent not found: ${id}`);
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[21][1]++;
      }
      const updateTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[78]++, performance.now() - startTime);
      // Log performance warning if exceeding threshold
      /* istanbul ignore next */
      cov_52xrixujp().s[79]++;
      if (updateTime > 50) {
        /* istanbul ignore next */
        cov_52xrixujp().b[22][0]++;
        cov_52xrixujp().s[80]++;
        console.warn(`⚠️ Agent status update time exceeded threshold: ${updateTime.toFixed(2)}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[22][1]++;
      }
    } catch (error) {
      const updateTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[81]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_52xrixujp().s[82]++;
      console.error(`❌ Failed to update agent status ${id} (${updateTime.toFixed(2)}ms):`, error.message);
      /* istanbul ignore next */
      cov_52xrixujp().s[83]++;
      throw error;
    }
  }
  /**
   * Record performance metric
   */
  async recordMetric(metric) {
    /* istanbul ignore next */
    cov_52xrixujp().f[8]++;
    cov_52xrixujp().s[84]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[24][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[24][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[23][0]++;
      cov_52xrixujp().s[85]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[23][1]++;
    }
    const stmt =
    /* istanbul ignore next */
    (cov_52xrixujp().s[86]++, this.db.prepare(`
      INSERT INTO agent_metrics (agent_id, metric_type, value, unit, recorded_at, context_json)
      VALUES (?, ?, ?, ?, ?, ?)
    `));
    /* istanbul ignore next */
    cov_52xrixujp().s[87]++;
    stmt.run(metric.agentId, metric.metricType, metric.value, metric.unit, metric.recordedAt, JSON.stringify(
    /* istanbul ignore next */
    (cov_52xrixujp().b[25][0]++, metric.context) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[25][1]++, {})));
  }
  /**
   * Get agent metrics by type
   */
  async getAgentMetrics(agentId, metricType) {
    /* istanbul ignore next */
    cov_52xrixujp().f[9]++;
    cov_52xrixujp().s[88]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[27][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[27][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[26][0]++;
      cov_52xrixujp().s[89]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[26][1]++;
    }
    let query =
    /* istanbul ignore next */
    (cov_52xrixujp().s[90]++, 'SELECT * FROM agent_metrics WHERE agent_id = ?');
    const params =
    /* istanbul ignore next */
    (cov_52xrixujp().s[91]++, [agentId]);
    /* istanbul ignore next */
    cov_52xrixujp().s[92]++;
    if (metricType) {
      /* istanbul ignore next */
      cov_52xrixujp().b[28][0]++;
      cov_52xrixujp().s[93]++;
      query += ' AND metric_type = ?';
      /* istanbul ignore next */
      cov_52xrixujp().s[94]++;
      params.push(metricType);
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[28][1]++;
    }
    cov_52xrixujp().s[95]++;
    query += ' ORDER BY recorded_at DESC';
    const stmt =
    /* istanbul ignore next */
    (cov_52xrixujp().s[96]++, this.db.prepare(query));
    const rows =
    /* istanbul ignore next */
    (cov_52xrixujp().s[97]++, stmt.all(...params));
    /* istanbul ignore next */
    cov_52xrixujp().s[98]++;
    return rows.map(row => {
      /* istanbul ignore next */
      cov_52xrixujp().f[10]++;
      cov_52xrixujp().s[99]++;
      return {
        id: row.id,
        agentId: row.agent_id,
        metricType: row.metric_type,
        value: row.value,
        unit: row.unit,
        recordedAt: row.recorded_at,
        context: JSON.parse(
        /* istanbul ignore next */
        (cov_52xrixujp().b[29][0]++, row.context_json) ||
        /* istanbul ignore next */
        (cov_52xrixujp().b[29][1]++, '{}'))
      };
    });
  }
  /**
   * Batch save multiple agents efficiently
   */
  async batchSaveAgents(agents) {
    /* istanbul ignore next */
    cov_52xrixujp().f[11]++;
    cov_52xrixujp().s[100]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[31][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[31][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[30][0]++;
      cov_52xrixujp().s[101]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[30][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_52xrixujp().s[102]++, performance.now());
    /* istanbul ignore next */
    cov_52xrixujp().s[103]++;
    try {
      const transaction =
      /* istanbul ignore next */
      (cov_52xrixujp().s[104]++, this.db.transaction(agentList => {
        /* istanbul ignore next */
        cov_52xrixujp().f[12]++;
        const stmt =
        /* istanbul ignore next */
        (cov_52xrixujp().s[105]++, this.db.prepare(`
          INSERT INTO agents (
            id, type, status, cognitive_pattern, network_layers, learning_rate, momentum,
            created_at, last_active, memory_usage_mb, performance_score, spawn_time_ms,
            config_json, metadata_json
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `));
        /* istanbul ignore next */
        cov_52xrixujp().s[106]++;
        for (const agent of agentList) {
          /* istanbul ignore next */
          cov_52xrixujp().s[107]++;
          stmt.run(agent.id, agent.type, agent.status, agent.cognitivePattern, JSON.stringify(agent.networkLayers),
          /* istanbul ignore next */
          (cov_52xrixujp().b[32][0]++, agent.learningRate) ||
          /* istanbul ignore next */
          (cov_52xrixujp().b[32][1]++, 0.01),
          /* istanbul ignore next */
          (cov_52xrixujp().b[33][0]++, agent.momentum) ||
          /* istanbul ignore next */
          (cov_52xrixujp().b[33][1]++, 0.0), agent.createdAt, agent.lastActive,
          /* istanbul ignore next */
          (cov_52xrixujp().b[34][0]++, agent.memoryUsageMB) ||
          /* istanbul ignore next */
          (cov_52xrixujp().b[34][1]++, 0),
          /* istanbul ignore next */
          (cov_52xrixujp().b[35][0]++, agent.performanceScore) ||
          /* istanbul ignore next */
          (cov_52xrixujp().b[35][1]++, 0), agent.spawnTimeMs,
          /* istanbul ignore next */
          (cov_52xrixujp().b[36][0]++, agent.configJson) ||
          /* istanbul ignore next */
          (cov_52xrixujp().b[36][1]++, '{}'),
          /* istanbul ignore next */
          (cov_52xrixujp().b[37][0]++, agent.metadataJson) ||
          /* istanbul ignore next */
          (cov_52xrixujp().b[37][1]++, '{}'));
        }
      }));
      /* istanbul ignore next */
      cov_52xrixujp().s[108]++;
      transaction(agents);
      const batchTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[109]++, performance.now() - startTime);
      const avgTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[110]++, batchTime / agents.length);
      /* istanbul ignore next */
      cov_52xrixujp().s[111]++;
      console.log(`📊 Batch saved ${agents.length} agents in ${batchTime.toFixed(2)}ms (avg: ${avgTime.toFixed(2)}ms/agent)`);
    } catch (error) {
      const batchTime =
      /* istanbul ignore next */
      (cov_52xrixujp().s[112]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_52xrixujp().s[113]++;
      console.error(`❌ Failed to batch save agents (${batchTime.toFixed(2)}ms):`, error.message);
      /* istanbul ignore next */
      cov_52xrixujp().s[114]++;
      throw error;
    }
  }
  /**
   * Get all agents with optional filtering
   */
  async getAllAgents(filter) {
    /* istanbul ignore next */
    cov_52xrixujp().f[13]++;
    cov_52xrixujp().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[39][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[39][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[38][0]++;
      cov_52xrixujp().s[116]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[38][1]++;
    }
    let query =
    /* istanbul ignore next */
    (cov_52xrixujp().s[117]++, 'SELECT * FROM agents');
    const params =
    /* istanbul ignore next */
    (cov_52xrixujp().s[118]++, []);
    /* istanbul ignore next */
    cov_52xrixujp().s[119]++;
    if (filter) {
      /* istanbul ignore next */
      cov_52xrixujp().b[40][0]++;
      const conditions =
      /* istanbul ignore next */
      (cov_52xrixujp().s[120]++, []);
      /* istanbul ignore next */
      cov_52xrixujp().s[121]++;
      if (filter.type) {
        /* istanbul ignore next */
        cov_52xrixujp().b[41][0]++;
        cov_52xrixujp().s[122]++;
        conditions.push('type = ?');
        /* istanbul ignore next */
        cov_52xrixujp().s[123]++;
        params.push(filter.type);
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[41][1]++;
      }
      cov_52xrixujp().s[124]++;
      if (filter.status) {
        /* istanbul ignore next */
        cov_52xrixujp().b[42][0]++;
        cov_52xrixujp().s[125]++;
        conditions.push('status = ?');
        /* istanbul ignore next */
        cov_52xrixujp().s[126]++;
        params.push(filter.status);
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[42][1]++;
      }
      cov_52xrixujp().s[127]++;
      if (conditions.length > 0) {
        /* istanbul ignore next */
        cov_52xrixujp().b[43][0]++;
        cov_52xrixujp().s[128]++;
        query += ' WHERE ' + conditions.join(' AND ');
      } else
      /* istanbul ignore next */
      {
        cov_52xrixujp().b[43][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[40][1]++;
    }
    cov_52xrixujp().s[129]++;
    query += ' ORDER BY created_at DESC';
    const stmt =
    /* istanbul ignore next */
    (cov_52xrixujp().s[130]++, this.db.prepare(query));
    const rows =
    /* istanbul ignore next */
    (cov_52xrixujp().s[131]++, stmt.all(...params));
    /* istanbul ignore next */
    cov_52xrixujp().s[132]++;
    return rows.map(row => {
      /* istanbul ignore next */
      cov_52xrixujp().f[14]++;
      cov_52xrixujp().s[133]++;
      return {
        id: row.id,
        type: row.type,
        cognitivePattern: row.cognitive_pattern,
        networkLayers: JSON.parse(row.network_layers),
        learningRate: row.learning_rate,
        momentum: row.momentum,
        status: row.status,
        createdAt: row.created_at,
        lastActive: row.last_active,
        memoryUsageMB: row.memory_usage_mb,
        performanceScore: row.performance_score,
        spawnTimeMs: row.spawn_time_ms,
        configJson: row.config_json,
        metadataJson: row.metadata_json
      };
    });
  }
  /**
   * Get database table names (for testing)
   */
  async getTables() {
    /* istanbul ignore next */
    cov_52xrixujp().f[15]++;
    cov_52xrixujp().s[134]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[45][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[45][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[44][0]++;
      cov_52xrixujp().s[135]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[44][1]++;
    }
    const stmt =
    /* istanbul ignore next */
    (cov_52xrixujp().s[136]++, this.db.prepare(`
      SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'
    `));
    const rows =
    /* istanbul ignore next */
    (cov_52xrixujp().s[137]++, stmt.all());
    /* istanbul ignore next */
    cov_52xrixujp().s[138]++;
    return rows.map(row => {
      /* istanbul ignore next */
      cov_52xrixujp().f[16]++;
      cov_52xrixujp().s[139]++;
      return row.name;
    });
  }
  /**
   * Get database index names (for testing)
   */
  async getIndexes() {
    /* istanbul ignore next */
    cov_52xrixujp().f[17]++;
    cov_52xrixujp().s[140]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[47][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[47][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[46][0]++;
      cov_52xrixujp().s[141]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[46][1]++;
    }
    const stmt =
    /* istanbul ignore next */
    (cov_52xrixujp().s[142]++, this.db.prepare(`
      SELECT name FROM sqlite_master WHERE type='index' AND name NOT LIKE 'sqlite_%'
    `));
    const rows =
    /* istanbul ignore next */
    (cov_52xrixujp().s[143]++, stmt.all());
    /* istanbul ignore next */
    cov_52xrixujp().s[144]++;
    return rows.map(row => {
      /* istanbul ignore next */
      cov_52xrixujp().f[18]++;
      cov_52xrixujp().s[145]++;
      return row.name;
    });
  }
  /**
   * Get journal mode (for testing)
   */
  async getJournalMode() {
    /* istanbul ignore next */
    cov_52xrixujp().f[19]++;
    cov_52xrixujp().s[146]++;
    if (
    /* istanbul ignore next */
    (cov_52xrixujp().b[49][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_52xrixujp().b[49][1]++, !this.db)) {
      /* istanbul ignore next */
      cov_52xrixujp().b[48][0]++;
      cov_52xrixujp().s[147]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[48][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_52xrixujp().s[148]++, this.db.pragma('journal_mode'));
    // Handle both string and object responses from better-sqlite3
    /* istanbul ignore next */
    cov_52xrixujp().s[149]++;
    if (typeof result === 'string') {
      /* istanbul ignore next */
      cov_52xrixujp().b[50][0]++;
      cov_52xrixujp().s[150]++;
      return result;
    } else {
      /* istanbul ignore next */
      cov_52xrixujp().b[50][1]++;
      cov_52xrixujp().s[151]++;
      if (
      /* istanbul ignore next */
      (cov_52xrixujp().b[52][0]++, Array.isArray(result)) &&
      /* istanbul ignore next */
      (cov_52xrixujp().b[52][1]++, result.length > 0) &&
      /* istanbul ignore next */
      (cov_52xrixujp().b[52][2]++, result[0].journal_mode)) {
        /* istanbul ignore next */
        cov_52xrixujp().b[51][0]++;
        cov_52xrixujp().s[152]++;
        return result[0].journal_mode;
      } else {
        /* istanbul ignore next */
        cov_52xrixujp().b[51][1]++;
        cov_52xrixujp().s[153]++;
        if (
        /* istanbul ignore next */
        (cov_52xrixujp().b[54][0]++, typeof result === 'object') &&
        /* istanbul ignore next */
        (cov_52xrixujp().b[54][1]++, result.journal_mode)) {
          /* istanbul ignore next */
          cov_52xrixujp().b[53][0]++;
          cov_52xrixujp().s[154]++;
          return result.journal_mode;
        } else
        /* istanbul ignore next */
        {
          cov_52xrixujp().b[53][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_52xrixujp().s[155]++;
    return 'unknown';
  }
  /**
   * Close database connection
   */
  async close() {
    /* istanbul ignore next */
    cov_52xrixujp().f[20]++;
    cov_52xrixujp().s[156]++;
    if (this.db) {
      /* istanbul ignore next */
      cov_52xrixujp().b[55][0]++;
      cov_52xrixujp().s[157]++;
      this.db.close();
      /* istanbul ignore next */
      cov_52xrixujp().s[158]++;
      this.db = null;
    } else
    /* istanbul ignore next */
    {
      cov_52xrixujp().b[55][1]++;
    }
    cov_52xrixujp().s[159]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_52xrixujp().s[160]++;
    console.log('🔒 Database connection closed');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,