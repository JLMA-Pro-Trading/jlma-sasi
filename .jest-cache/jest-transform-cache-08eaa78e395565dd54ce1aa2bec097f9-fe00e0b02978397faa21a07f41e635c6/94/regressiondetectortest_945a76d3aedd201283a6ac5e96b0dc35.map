{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/regression-detector.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/regression-detector.test.ts"],"sourcesContent":["/**\n * Performance Regression Detection Tests\n * Validates that performance metrics stay within acceptable bounds\n */\n\nimport { performance } from 'perf_hooks';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ninterface PerformanceBaseline {\n  testName: string;\n  baseline: number;\n  threshold: number;\n  timestamp: string;\n}\n\ninterface PerformanceResult {\n  testName: string;\n  duration: number;\n  memoryUsage: number;\n  passed: boolean;\n  regression: boolean;\n}\n\nclass RegressionDetector {\n  private baselines: Map<string, PerformanceBaseline> = new Map();\n  private results: PerformanceResult[] = [];\n  private baselineFile = path.join(__dirname, '../../coverage/performance-baselines.json');\n\n  constructor() {\n    this.loadBaselines();\n  }\n\n  private loadBaselines() {\n    try {\n      if (fs.existsSync(this.baselineFile)) {\n        const data = JSON.parse(fs.readFileSync(this.baselineFile, 'utf8'));\n        data.forEach((baseline: PerformanceBaseline) => {\n          this.baselines.set(baseline.testName, baseline);\n        });\n      }\n    } catch (error) {\n      console.warn('Could not load performance baselines:', error);\n    }\n  }\n\n  private saveBaselines() {\n    const baselineArray = Array.from(this.baselines.values());\n    fs.writeFileSync(this.baselineFile, JSON.stringify(baselineArray, null, 2));\n  }\n\n  async measurePerformance<T>(\n    testName: string,\n    testFunction: () => Promise<T> | T,\n    options: { \n      iterations?: number; \n      warmupIterations?: number;\n      memoryCheck?: boolean;\n    } = {}\n  ): Promise<PerformanceResult> {\n    const { iterations = 5, warmupIterations = 2, memoryCheck = true } = options;\n    \n    // Warmup runs\n    for (let i = 0; i < warmupIterations; i++) {\n      await testFunction();\n    }\n\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n\n    const durations: number[] = [];\n    let initialMemory = 0;\n    let finalMemory = 0;\n\n    if (memoryCheck) {\n      initialMemory = process.memoryUsage().heapUsed;\n    }\n\n    // Performance measurement runs\n    for (let i = 0; i < iterations; i++) {\n      const start = performance.now();\n      await testFunction();\n      const end = performance.now();\n      durations.push(end - start);\n    }\n\n    if (memoryCheck) {\n      finalMemory = process.memoryUsage().heapUsed;\n    }\n\n    // Calculate metrics\n    const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length;\n    const memoryDelta = finalMemory - initialMemory;\n\n    // Check against baseline\n    const baseline = this.baselines.get(testName);\n    let regression = false;\n    let passed = true;\n\n    if (baseline) {\n      // Check for regression (>20% slower than baseline)\n      regression = avgDuration > baseline.baseline * 1.2;\n      passed = avgDuration <= baseline.threshold;\n    } else {\n      // Set new baseline\n      const threshold = avgDuration * 2; // Allow 100% variance for new tests\n      this.baselines.set(testName, {\n        testName,\n        baseline: avgDuration,\n        threshold,\n        timestamp: new Date().toISOString()\n      });\n      this.saveBaselines();\n    }\n\n    const result: PerformanceResult = {\n      testName,\n      duration: avgDuration,\n      memoryUsage: memoryDelta,\n      passed,\n      regression\n    };\n\n    this.results.push(result);\n    return result;\n  }\n\n  generateReport(): string {\n    const totalTests = this.results.length;\n    const passedTests = this.results.filter(r => r.passed).length;\n    const regressions = this.results.filter(r => r.regression).length;\n\n    let report = `\n# Performance Regression Report\n\n## Summary\n- Total Tests: ${totalTests}\n- Passed: ${passedTests}\n- Failed: ${totalTests - passedTests}\n- Regressions Detected: ${regressions}\n\n## Test Results\n`;\n\n    this.results.forEach(result => {\n      const status = result.passed ? '✅' : '❌';\n      const regression = result.regression ? '📈 REGRESSION' : '';\n      report += `\n### ${result.testName} ${status} ${regression}\n- Duration: ${result.duration.toFixed(2)}ms\n- Memory Delta: ${(result.memoryUsage / 1024 / 1024).toFixed(2)}MB\n`;\n    });\n\n    return report;\n  }\n}\n\ndescribe('Performance Regression Detection', () => {\n  let detector: RegressionDetector;\n\n  beforeAll(() => {\n    detector = new RegressionDetector();\n  });\n\n  afterAll(() => {\n    const report = detector.generateReport();\n    const reportPath = path.join(__dirname, '../../coverage/performance-regression-report.md');\n    fs.writeFileSync(reportPath, report);\n    console.log('Performance regression report saved to:', reportPath);\n  });\n\n  describe('Component Rendering Performance', () => {\n    test('AgentList component render time', async () => {\n      const result = await detector.measurePerformance(\n        'AgentList_render',\n        async () => {\n          // Simulate component rendering\n          const start = performance.now();\n          \n          // Mock React component render cycle\n          for (let i = 0; i < 100; i++) {\n            const mockComponent = {\n              agents: Array.from({ length: 50 }, (_, i) => ({\n                id: `agent-${i}`,\n                name: `Agent ${i}`,\n                status: 'active'\n              }))\n            };\n            \n            // Simulate rendering logic\n            mockComponent.agents.forEach(agent => {\n              const element = `<div key=\"${agent.id}\">${agent.name}</div>`;\n            });\n          }\n          \n          return performance.now() - start;\n        },\n        { iterations: 10, memoryCheck: true }\n      );\n\n      expect(result.passed).toBe(true);\n      expect(result.duration).toBeLessThan(100); // 100ms threshold\n      \n      if (result.regression) {\n        console.warn(`Performance regression detected in AgentList rendering: ${result.duration.toFixed(2)}ms`);\n      }\n    });\n\n    test('NeuralMeshVisualization WebGL performance', async () => {\n      const result = await detector.measurePerformance(\n        'NeuralMeshVisualization_webgl',\n        async () => {\n          // Simulate WebGL operations\n          const vertices = new Float32Array(10000);\n          for (let i = 0; i < vertices.length; i++) {\n            vertices[i] = Math.random() * 2 - 1;\n          }\n          \n          // Simulate matrix calculations\n          const matrices = [];\n          for (let i = 0; i < 100; i++) {\n            const matrix = new Array(16).fill(0).map(() => Math.random());\n            matrices.push(matrix);\n          }\n          \n          return vertices.length + matrices.length;\n        },\n        { iterations: 5, memoryCheck: true }\n      );\n\n      expect(result.passed).toBe(true);\n      expect(result.duration).toBeLessThan(50); // 50ms threshold\n    });\n\n    test('SwarmVisualization data processing', async () => {\n      const result = await detector.measurePerformance(\n        'SwarmVisualization_data_processing',\n        async () => {\n          // Simulate large dataset processing\n          const nodes = Array.from({ length: 1000 }, (_, i) => ({\n            id: i,\n            x: Math.random() * 1000,\n            y: Math.random() * 1000,\n            connections: Array.from({ length: Math.floor(Math.random() * 10) }, \n              () => Math.floor(Math.random() * 1000)\n            )\n          }));\n          \n          // Process connections\n          nodes.forEach(node => {\n            node.connections.forEach(connId => {\n              const distance = Math.sqrt(\n                Math.pow(node.x - nodes[connId]?.x || 0, 2) +\n                Math.pow(node.y - nodes[connId]?.y || 0, 2)\n              );\n            });\n          });\n          \n          return nodes.length;\n        },\n        { iterations: 3, memoryCheck: true }\n      );\n\n      expect(result.passed).toBe(true);\n      expect(result.duration).toBeLessThan(200); // 200ms threshold\n    });\n  });\n\n  describe('Data Processing Performance', () => {\n    test('Neural weight compression', async () => {\n      const result = await detector.measurePerformance(\n        'NeuralWeightStorage_compression',\n        async () => {\n          // Simulate neural weight compression\n          const weights = new Float32Array(10000).map(() => Math.random());\n          \n          // Mock compression algorithm\n          const compressed = [];\n          for (let i = 0; i < weights.length; i += 4) {\n            const chunk = weights.slice(i, i + 4);\n            compressed.push(chunk.reduce((a, b) => a + b, 0) / 4);\n          }\n          \n          return compressed.length;\n        },\n        { iterations: 10, memoryCheck: true }\n      );\n\n      expect(result.passed).toBe(true);\n      expect(result.duration).toBeLessThan(30); // 30ms threshold\n    });\n\n    test('Agent persistence operations', async () => {\n      const result = await detector.measurePerformance(\n        'AgentPersistenceManager_operations',\n        async () => {\n          // Simulate database operations\n          const agents = Array.from({ length: 100 }, (_, i) => ({\n            id: `agent-${i}`,\n            state: JSON.stringify({ value: Math.random() }),\n            timestamp: Date.now()\n          }));\n          \n          // Mock serialization\n          const serialized = agents.map(agent => JSON.stringify(agent));\n          const deserialized = serialized.map(data => JSON.parse(data));\n          \n          return deserialized.length;\n        },\n        { iterations: 5, memoryCheck: true }\n      );\n\n      expect(result.passed).toBe(true);\n      expect(result.duration).toBeLessThan(75); // 75ms threshold\n    });\n\n    test('WASM bridge operations', async () => {\n      const result = await detector.measurePerformance(\n        'WasmBridge_operations',\n        async () => {\n          // Simulate WASM bridge operations\n          const data = new Uint8Array(1000);\n          for (let i = 0; i < data.length; i++) {\n            data[i] = Math.floor(Math.random() * 256);\n          }\n          \n          // Mock WASM operations\n          let checksum = 0;\n          for (let i = 0; i < data.length; i++) {\n            checksum = (checksum + data[i]) % 65536;\n          }\n          \n          return checksum;\n        },\n        { iterations: 20, memoryCheck: true }\n      );\n\n      expect(result.passed).toBe(true);\n      expect(result.duration).toBeLessThan(10); // 10ms threshold\n    });\n  });\n\n  describe('Memory Usage Tests', () => {\n    test('Memory leak detection in neural operations', async () => {\n      const initialMemory = process.memoryUsage().heapUsed;\n      \n      // Perform operations that might leak memory\n      for (let i = 0; i < 100; i++) {\n        const largeArray = new Array(1000).fill(0).map(() => Math.random());\n        // Simulate processing\n        largeArray.forEach(val => val * 2);\n      }\n      \n      // Force garbage collection\n      if (global.gc) {\n        global.gc();\n        // Wait a bit for GC to complete\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      const finalMemory = process.memoryUsage().heapUsed;\n      const memoryGrowth = finalMemory - initialMemory;\n      const memoryGrowthMB = memoryGrowth / 1024 / 1024;\n      \n      // Should not grow by more than 10MB\n      expect(memoryGrowthMB).toBeLessThan(10);\n      \n      console.log(`Memory growth: ${memoryGrowthMB.toFixed(2)}MB`);\n    });\n\n    test('Agent state cleanup verification', async () => {\n      const result = await detector.measurePerformance(\n        'AgentState_cleanup',\n        async () => {\n          // Create temporary agent states\n          const states = Array.from({ length: 50 }, (_, i) => ({\n            id: `temp-agent-${i}`,\n            data: new Array(100).fill(0).map(() => Math.random()),\n            connections: new Set(Array.from({ length: 10 }, () => Math.random()))\n          }));\n          \n          // Cleanup\n          states.forEach(state => {\n            state.connections.clear();\n            state.data.length = 0;\n          });\n          \n          return states.length;\n        },\n        { iterations: 5, memoryCheck: true }\n      );\n\n      expect(result.passed).toBe(true);\n      expect(result.memoryUsage).toBeLessThan(5 * 1024 * 1024); // Less than 5MB growth\n    });\n  });\n});"],"version":3}