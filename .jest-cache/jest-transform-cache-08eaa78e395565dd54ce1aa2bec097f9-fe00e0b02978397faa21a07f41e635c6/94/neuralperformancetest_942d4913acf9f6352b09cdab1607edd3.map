{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/neural-performance.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/performance/neural-performance.test.ts"],"sourcesContent":["/**\n * Performance Tests for Neural Agent System\n * Tests performance requirements: <50ms inference, >90% coverage\n */\n\nimport { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { \n  MockNeuralMeshService, \n  PerformanceTestUtils,\n  TestDataGenerator,\n  NeuralAssertions \n} from '../utils/neural-test-utils';\nimport { mockWasmModule, wasmTestUtils } from '../wasm-setup';\nimport { Agent } from '../../src/types/agent';\n\ndescribe('Neural Performance Tests', () => {\n  let neuralService: MockNeuralMeshService;\n  let memoryDetector: ReturnType<typeof PerformanceTestUtils.createMemoryLeakDetector>;\n\n  beforeEach(async () => {\n    neuralService = new MockNeuralMeshService();\n    await neuralService.initialize();\n    memoryDetector = PerformanceTestUtils.createMemoryLeakDetector();\n  });\n\n  afterEach(async () => {\n    await neuralService.disconnect();\n    NeuralAssertions.assertNoMemoryLeaks(memoryDetector);\n  });\n\n  describe('Inference Performance (<50ms target)', () => {\n    test('should complete neural inference within 50ms', async () => {\n      const agent = await neuralService.createNeuralAgent('neural');\n      expect(agent).not.toBeNull();\n\n      const iterations = 100;\n      const times: number[] = [];\n\n      for (let i = 0; i < iterations; i++) {\n        const start = performance.now();\n        await neuralService.updateNeuralAgent(agent!);\n        const end = performance.now();\n        times.push(end - start);\n      }\n\n      const averageTime = times.reduce((a, b) => a + b, 0) / times.length;\n      const maxTime = Math.max(...times);\n      const p95Time = times.sort((a, b) => a - b)[Math.floor(times.length * 0.95)];\n\n      expect(averageTime).toBeLessThan(25); // Target: <25ms average\n      expect(maxTime).toBeLessThan(50);     // Target: <50ms max\n      expect(p95Time).toBeLessThan(40);     // Target: <40ms 95th percentile\n\n      console.log(`Performance Results:\n        Average: ${averageTime.toFixed(2)}ms\n        Max: ${maxTime.toFixed(2)}ms\n        95th percentile: ${p95Time.toFixed(2)}ms`);\n    });\n\n    test('should maintain performance under concurrent load', async () => {\n      const concurrentAgents = 10;\n      const iterations = 50;\n\n      // Create multiple agents\n      const agents = await Promise.all(\n        Array.from({ length: concurrentAgents }, () => \n          neuralService.createNeuralAgent('neural')\n        )\n      );\n\n      expect(agents.every(agent => agent !== null)).toBe(true);\n\n      // Test concurrent updates\n      const startTime = performance.now();\n      \n      for (let i = 0; i < iterations; i++) {\n        await Promise.all(\n          agents.map(agent => neuralService.updateNeuralAgent(agent!))\n        );\n      }\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n      const averageTimePerUpdate = totalTime / (iterations * concurrentAgents);\n\n      expect(averageTimePerUpdate).toBeLessThan(50); // <50ms per update\n      expect(totalTime).toBeLessThan(10000); // <10s total\n\n      console.log(`Concurrent Performance:\n        Total time: ${totalTime.toFixed(2)}ms\n        Average per update: ${averageTimePerUpdate.toFixed(2)}ms\n        Throughput: ${(iterations * concurrentAgents / totalTime * 1000).toFixed(0)} updates/sec`);\n    });\n\n    test('should achieve target throughput for batch operations', async () => {\n      const batchSize = 20;\n      const targetThroughput = 1000; // operations per second\n\n      const agents = await Promise.all(\n        Array.from({ length: batchSize }, () => \n          neuralService.createNeuralAgent('neural')\n        )\n      );\n\n      const startTime = performance.now();\n      await Promise.all(agents.map(agent => neuralService.updateNeuralAgent(agent!)));\n      const endTime = performance.now();\n\n      const duration = (endTime - startTime) / 1000; // Convert to seconds\n      const actualThroughput = batchSize / duration;\n\n      expect(actualThroughput).toBeGreaterThan(targetThroughput);\n\n      console.log(`Batch Performance:\n        Batch size: ${batchSize}\n        Duration: ${duration.toFixed(3)}s\n        Throughput: ${actualThroughput.toFixed(0)} ops/sec`);\n    });\n  });\n\n  describe('WASM Performance Optimization', () => {\n    test('should demonstrate WASM performance benefits', async () => {\n      const testData = wasmTestUtils.createPerformanceData(1000);\n      \n      // Test WASM performance\n      const wasmTime = await wasmTestUtils.benchmarkFunction(\n        () => mockWasmModule.calculateNeuralActivation(testData),\n        100\n      );\n\n      // Test JavaScript fallback performance (simulate)\n      const jsTime = await wasmTestUtils.benchmarkFunction(\n        () => {\n          const result = new Float32Array(testData.length);\n          for (let i = 0; i < testData.length; i++) {\n            result[i] = Math.tanh(testData[i] * 0.5);\n          }\n          return result;\n        },\n        100\n      );\n\n      expect(wasmTime).toBeLessThan(50); // WASM should be fast\n      expect(wasmTime).toBeLessThan(jsTime * 0.8); // WASM should be faster than JS\n\n      console.log(`WASM vs JS Performance:\n        WASM: ${wasmTime.toFixed(2)}ms\n        JS: ${jsTime.toFixed(2)}ms\n        Speedup: ${(jsTime / wasmTime).toFixed(1)}x`);\n    });\n\n    test('should handle large neural computations efficiently', async () => {\n      const largeDataSizes = [1000, 5000, 10000, 50000];\n\n      for (const size of largeDataSizes) {\n        const testData = wasmTestUtils.createPerformanceData(size);\n        \n        const time = await wasmTestUtils.benchmarkFunction(\n          () => mockWasmModule.calculateNeuralActivation(testData),\n          10\n        );\n\n        // Performance should scale reasonably with size\n        const timePerElement = time / size;\n        expect(timePerElement).toBeLessThan(0.001); // <1μs per element\n\n        console.log(`Large Data Performance (${size} elements):\n          Total time: ${time.toFixed(2)}ms\n          Time per element: ${(timePerElement * 1000).toFixed(3)}μs`);\n      }\n    });\n\n    test('should optimize connection matrices efficiently', async () => {\n      const matrixSizes = [100, 500, 1000, 2000];\n\n      for (const size of matrixSizes) {\n        const connections = Array.from({ length: size }, () => Math.random() * 2 - 1);\n        \n        const time = await wasmTestUtils.benchmarkFunction(\n          () => mockWasmModule.optimizeConnections(connections),\n          10\n        );\n\n        expect(time).toBeLessThan(50); // Should complete within 50ms\n\n        console.log(`Connection Optimization (${size} connections):\n          Time: ${time.toFixed(2)}ms\n          Rate: ${(size / time * 1000).toFixed(0)} connections/sec`);\n      }\n    });\n  });\n\n  describe('Memory Performance', () => {\n    test('should maintain stable memory usage under load', async () => {\n      const iterations = 100;\n      const memoryMeasurements: number[] = [];\n\n      for (let i = 0; i < iterations; i++) {\n        // Create and update agent\n        const agent = await neuralService.createNeuralAgent('neural');\n        if (agent) {\n          await neuralService.updateNeuralAgent(agent);\n        }\n\n        // Measure memory every 10 iterations\n        if (i % 10 === 0) {\n          memoryDetector.measure();\n          const usage = process.memoryUsage();\n          memoryMeasurements.push(usage.heapUsed);\n        }\n      }\n\n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n\n      // Analyze memory growth\n      const analysis = memoryDetector.analyze();\n      expect(analysis.leaked).toBe(false);\n\n      // Memory should not grow excessively\n      const initialMemory = memoryMeasurements[0];\n      const finalMemory = memoryMeasurements[memoryMeasurements.length - 1];\n      const growth = finalMemory - initialMemory;\n\n      expect(growth).toBeLessThan(100 * 1024 * 1024); // <100MB growth\n\n      console.log(`Memory Performance:\n        Initial: ${(initialMemory / 1024 / 1024).toFixed(2)}MB\n        Final: ${(finalMemory / 1024 / 1024).toFixed(2)}MB\n        Growth: ${(growth / 1024 / 1024).toFixed(2)}MB`);\n    });\n\n    test('should efficiently manage large agent populations', async () => {\n      const agentCounts = [10, 50, 100, 200];\n\n      for (const count of agentCounts) {\n        const startMemory = process.memoryUsage().heapUsed;\n        \n        // Create agents\n        const agents = await Promise.all(\n          Array.from({ length: count }, () => \n            neuralService.createNeuralAgent('neural')\n          )\n        );\n\n        const endMemory = process.memoryUsage().heapUsed;\n        const memoryPerAgent = (endMemory - startMemory) / count;\n\n        expect(memoryPerAgent).toBeLessThan(1024 * 1024); // <1MB per agent\n\n        // Clean up\n        neuralService.clearAgents();\n\n        console.log(`Memory Efficiency (${count} agents):\n          Memory per agent: ${(memoryPerAgent / 1024).toFixed(2)}KB`);\n      }\n    });\n  });\n\n  describe('Scalability Performance', () => {\n    test('should scale mesh operations linearly', async () => {\n      const meshSizes = [10, 25, 50, 100];\n      const scalingResults: Array<{ size: number; time: number }> = [];\n\n      for (const size of meshSizes) {\n        const agents = await Promise.all(\n          Array.from({ length: size }, () => \n            neuralService.createNeuralAgent('neural')\n          )\n        );\n\n        const startTime = performance.now();\n        await Promise.all(agents.map(agent => neuralService.updateNeuralAgent(agent!)));\n        const endTime = performance.now();\n\n        const time = endTime - startTime;\n        scalingResults.push({ size, time });\n\n        expect(time).toBeLessThan(size * 10); // Linear scaling: <10ms per agent\n\n        console.log(`Scaling Test (${size} agents): ${time.toFixed(2)}ms`);\n      }\n\n      // Verify linear scaling characteristics\n      for (let i = 1; i < scalingResults.length; i++) {\n        const prev = scalingResults[i - 1];\n        const curr = scalingResults[i];\n        \n        const sizeRatio = curr.size / prev.size;\n        const timeRatio = curr.time / prev.time;\n        \n        // Time ratio should not exceed size ratio by more than 50%\n        expect(timeRatio).toBeLessThan(sizeRatio * 1.5);\n      }\n    });\n\n    test('should handle mesh training at scale', async () => {\n      const patternCounts = [100, 500, 1000, 2000];\n\n      for (const count of patternCounts) {\n        const patterns = TestDataGenerator.generateTrainingPatterns(count);\n        \n        const startTime = performance.now();\n        const success = await neuralService.trainMesh(patterns);\n        const endTime = performance.now();\n\n        expect(success).toBe(true);\n        const time = endTime - startTime;\n        expect(time).toBeLessThan(count * 0.1); // <0.1ms per pattern\n\n        console.log(`Training Performance (${count} patterns): ${time.toFixed(2)}ms`);\n      }\n    });\n  });\n\n  describe('Real-time Performance', () => {\n    test('should maintain real-time update frequencies', async () => {\n      const targetFPS = 60; // 60 FPS = ~16.67ms per frame\n      const maxFrameTime = 1000 / targetFPS;\n\n      const agent = await neuralService.createNeuralAgent('neural');\n      expect(agent).not.toBeNull();\n\n      const frameCount = 100;\n      const frameTimes: number[] = [];\n\n      for (let i = 0; i < frameCount; i++) {\n        const frameStart = performance.now();\n        \n        // Simulate real-time update\n        await neuralService.updateNeuralAgent(agent!);\n        \n        const frameEnd = performance.now();\n        const frameTime = frameEnd - frameStart;\n        frameTimes.push(frameTime);\n\n        expect(frameTime).toBeLessThan(maxFrameTime);\n      }\n\n      const averageFrameTime = frameTimes.reduce((a, b) => a + b, 0) / frameTimes.length;\n      const maxFrameTime_actual = Math.max(...frameTimes);\n\n      expect(averageFrameTime).toBeLessThan(maxFrameTime * 0.8); // 80% of budget\n      expect(maxFrameTime_actual).toBeLessThan(maxFrameTime);\n\n      console.log(`Real-time Performance:\n        Target frame time: ${maxFrameTime.toFixed(2)}ms\n        Average frame time: ${averageFrameTime.toFixed(2)}ms\n        Max frame time: ${maxFrameTime_actual.toFixed(2)}ms\n        Achieved FPS: ${(1000 / averageFrameTime).toFixed(1)}`);\n    });\n\n    test('should handle burst workloads efficiently', async () => {\n      const burstSize = 20;\n      const burstCount = 5;\n\n      for (let burst = 0; burst < burstCount; burst++) {\n        const agents = await Promise.all(\n          Array.from({ length: burstSize }, () => \n            neuralService.createNeuralAgent('neural')\n          )\n        );\n\n        const burstStart = performance.now();\n        await Promise.all(agents.map(agent => neuralService.updateNeuralAgent(agent!)));\n        const burstEnd = performance.now();\n\n        const burstTime = burstEnd - burstStart;\n        expect(burstTime).toBeLessThan(100); // <100ms per burst\n\n        console.log(`Burst ${burst + 1} (${burstSize} agents): ${burstTime.toFixed(2)}ms`);\n\n        // Small delay between bursts\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n    });\n  });\n\n  describe('Performance Regression Tests', () => {\n    test('should not regress from baseline performance', async () => {\n      // Baseline performance expectations\n      const baseline = {\n        singleUpdate: 25,      // ms\n        batchUpdate: 50,       // ms for 10 agents\n        meshCreation: 100,     // ms\n        training: 200          // ms for 100 patterns\n      };\n\n      // Test single update performance\n      const agent = await neuralService.createNeuralAgent('neural');\n      const singleStart = performance.now();\n      await neuralService.updateNeuralAgent(agent!);\n      const singleTime = performance.now() - singleStart;\n\n      expect(singleTime).toBeLessThan(baseline.singleUpdate);\n\n      // Test batch update performance\n      const batchAgents = await Promise.all(\n        Array.from({ length: 10 }, () => neuralService.createNeuralAgent('neural'))\n      );\n      const batchStart = performance.now();\n      await Promise.all(batchAgents.map(agent => neuralService.updateNeuralAgent(agent!)));\n      const batchTime = performance.now() - batchStart;\n\n      expect(batchTime).toBeLessThan(baseline.batchUpdate);\n\n      // Test training performance\n      const patterns = TestDataGenerator.generateTrainingPatterns(100);\n      const trainStart = performance.now();\n      await neuralService.trainMesh(patterns);\n      const trainTime = performance.now() - trainStart;\n\n      expect(trainTime).toBeLessThan(baseline.training);\n\n      console.log(`Performance Baseline Validation:\n        Single update: ${singleTime.toFixed(2)}ms (limit: ${baseline.singleUpdate}ms)\n        Batch update: ${batchTime.toFixed(2)}ms (limit: ${baseline.batchUpdate}ms)\n        Training: ${trainTime.toFixed(2)}ms (limit: ${baseline.training}ms)`);\n    });\n\n    test('should maintain performance across test suite', () => {\n      // This test ensures the overall test suite performance\n      const testSuiteStart = Date.now();\n      \n      expect(testSuiteStart).toBeDefined();\n      \n      // The test suite should complete within reasonable time\n      // This is checked by Jest timeout configuration\n    });\n  });\n});"],"version":3}