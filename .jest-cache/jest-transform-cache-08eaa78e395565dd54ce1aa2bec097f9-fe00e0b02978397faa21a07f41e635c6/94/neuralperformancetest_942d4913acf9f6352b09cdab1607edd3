1765bb999c5b439ee187c6c798a91182
"use strict";
/**
 * Performance Tests for Neural Agent System
 * Tests performance requirements: <50ms inference, >90% coverage
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const neural_test_utils_1 = require("../utils/neural-test-utils");
const wasm_setup_1 = require("../wasm-setup");
(0, globals_1.describe)('Neural Performance Tests', () => {
    let neuralService;
    let memoryDetector;
    (0, globals_1.beforeEach)(async () => {
        neuralService = new neural_test_utils_1.MockNeuralMeshService();
        await neuralService.initialize();
        memoryDetector = neural_test_utils_1.PerformanceTestUtils.createMemoryLeakDetector();
    });
    (0, globals_1.afterEach)(async () => {
        await neuralService.disconnect();
        neural_test_utils_1.NeuralAssertions.assertNoMemoryLeaks(memoryDetector);
    });
    (0, globals_1.describe)('Inference Performance (<50ms target)', () => {
        (0, globals_1.test)('should complete neural inference within 50ms', async () => {
            const agent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(agent).not.toBeNull();
            const iterations = 100;
            const times = [];
            for (let i = 0; i < iterations; i++) {
                const start = performance.now();
                await neuralService.updateNeuralAgent(agent);
                const end = performance.now();
                times.push(end - start);
            }
            const averageTime = times.reduce((a, b) => a + b, 0) / times.length;
            const maxTime = Math.max(...times);
            const p95Time = times.sort((a, b) => a - b)[Math.floor(times.length * 0.95)];
            (0, globals_1.expect)(averageTime).toBeLessThan(25); // Target: <25ms average
            (0, globals_1.expect)(maxTime).toBeLessThan(50); // Target: <50ms max
            (0, globals_1.expect)(p95Time).toBeLessThan(40); // Target: <40ms 95th percentile
            console.log(`Performance Results:
        Average: ${averageTime.toFixed(2)}ms
        Max: ${maxTime.toFixed(2)}ms
        95th percentile: ${p95Time.toFixed(2)}ms`);
        });
        (0, globals_1.test)('should maintain performance under concurrent load', async () => {
            const concurrentAgents = 10;
            const iterations = 50;
            // Create multiple agents
            const agents = await Promise.all(Array.from({ length: concurrentAgents }, () => neuralService.createNeuralAgent('neural')));
            (0, globals_1.expect)(agents.every(agent => agent !== null)).toBe(true);
            // Test concurrent updates
            const startTime = performance.now();
            for (let i = 0; i < iterations; i++) {
                await Promise.all(agents.map(agent => neuralService.updateNeuralAgent(agent)));
            }
            const endTime = performance.now();
            const totalTime = endTime - startTime;
            const averageTimePerUpdate = totalTime / (iterations * concurrentAgents);
            (0, globals_1.expect)(averageTimePerUpdate).toBeLessThan(50); // <50ms per update
            (0, globals_1.expect)(totalTime).toBeLessThan(10000); // <10s total
            console.log(`Concurrent Performance:
        Total time: ${totalTime.toFixed(2)}ms
        Average per update: ${averageTimePerUpdate.toFixed(2)}ms
        Throughput: ${(iterations * concurrentAgents / totalTime * 1000).toFixed(0)} updates/sec`);
        });
        (0, globals_1.test)('should achieve target throughput for batch operations', async () => {
            const batchSize = 20;
            const targetThroughput = 1000; // operations per second
            const agents = await Promise.all(Array.from({ length: batchSize }, () => neuralService.createNeuralAgent('neural')));
            const startTime = performance.now();
            await Promise.all(agents.map(agent => neuralService.updateNeuralAgent(agent)));
            const endTime = performance.now();
            const duration = (endTime - startTime) / 1000; // Convert to seconds
            const actualThroughput = batchSize / duration;
            (0, globals_1.expect)(actualThroughput).toBeGreaterThan(targetThroughput);
            console.log(`Batch Performance:
        Batch size: ${batchSize}
        Duration: ${duration.toFixed(3)}s
        Throughput: ${actualThroughput.toFixed(0)} ops/sec`);
        });
    });
    (0, globals_1.describe)('WASM Performance Optimization', () => {
        (0, globals_1.test)('should demonstrate WASM performance benefits', async () => {
            const testData = wasm_setup_1.wasmTestUtils.createPerformanceData(1000);
            // Test WASM performance
            const wasmTime = await wasm_setup_1.wasmTestUtils.benchmarkFunction(() => wasm_setup_1.mockWasmModule.calculateNeuralActivation(testData), 100);
            // Test JavaScript fallback performance (simulate)
            const jsTime = await wasm_setup_1.wasmTestUtils.benchmarkFunction(() => {
                const result = new Float32Array(testData.length);
                for (let i = 0; i < testData.length; i++) {
                    result[i] = Math.tanh(testData[i] * 0.5);
                }
                return result;
            }, 100);
            (0, globals_1.expect)(wasmTime).toBeLessThan(50); // WASM should be fast
            (0, globals_1.expect)(wasmTime).toBeLessThan(jsTime * 0.8); // WASM should be faster than JS
            console.log(`WASM vs JS Performance:
        WASM: ${wasmTime.toFixed(2)}ms
        JS: ${jsTime.toFixed(2)}ms
        Speedup: ${(jsTime / wasmTime).toFixed(1)}x`);
        });
        (0, globals_1.test)('should handle large neural computations efficiently', async () => {
            const largeDataSizes = [1000, 5000, 10000, 50000];
            for (const size of largeDataSizes) {
                const testData = wasm_setup_1.wasmTestUtils.createPerformanceData(size);
                const time = await wasm_setup_1.wasmTestUtils.benchmarkFunction(() => wasm_setup_1.mockWasmModule.calculateNeuralActivation(testData), 10);
                // Performance should scale reasonably with size
                const timePerElement = time / size;
                (0, globals_1.expect)(timePerElement).toBeLessThan(0.001); // <1μs per element
                console.log(`Large Data Performance (${size} elements):
          Total time: ${time.toFixed(2)}ms
          Time per element: ${(timePerElement * 1000).toFixed(3)}μs`);
            }
        });
        (0, globals_1.test)('should optimize connection matrices efficiently', async () => {
            const matrixSizes = [100, 500, 1000, 2000];
            for (const size of matrixSizes) {
                const connections = Array.from({ length: size }, () => Math.random() * 2 - 1);
                const time = await wasm_setup_1.wasmTestUtils.benchmarkFunction(() => wasm_setup_1.mockWasmModule.optimizeConnections(connections), 10);
                (0, globals_1.expect)(time).toBeLessThan(50); // Should complete within 50ms
                console.log(`Connection Optimization (${size} connections):
          Time: ${time.toFixed(2)}ms
          Rate: ${(size / time * 1000).toFixed(0)} connections/sec`);
            }
        });
    });
    (0, globals_1.describe)('Memory Performance', () => {
        (0, globals_1.test)('should maintain stable memory usage under load', async () => {
            const iterations = 100;
            const memoryMeasurements = [];
            for (let i = 0; i < iterations; i++) {
                // Create and update agent
                const agent = await neuralService.createNeuralAgent('neural');
                if (agent) {
                    await neuralService.updateNeuralAgent(agent);
                }
                // Measure memory every 10 iterations
                if (i % 10 === 0) {
                    memoryDetector.measure();
                    const usage = process.memoryUsage();
                    memoryMeasurements.push(usage.heapUsed);
                }
            }
            // Force garbage collection if available
            if (global.gc) {
                global.gc();
            }
            // Analyze memory growth
            const analysis = memoryDetector.analyze();
            (0, globals_1.expect)(analysis.leaked).toBe(false);
            // Memory should not grow excessively
            const initialMemory = memoryMeasurements[0];
            const finalMemory = memoryMeasurements[memoryMeasurements.length - 1];
            const growth = finalMemory - initialMemory;
            (0, globals_1.expect)(growth).toBeLessThan(100 * 1024 * 1024); // <100MB growth
            console.log(`Memory Performance:
        Initial: ${(initialMemory / 1024 / 1024).toFixed(2)}MB
        Final: ${(finalMemory / 1024 / 1024).toFixed(2)}MB
        Growth: ${(growth / 1024 / 1024).toFixed(2)}MB`);
        });
        (0, globals_1.test)('should efficiently manage large agent populations', async () => {
            const agentCounts = [10, 50, 100, 200];
            for (const count of agentCounts) {
                const startMemory = process.memoryUsage().heapUsed;
                // Create agents
                const agents = await Promise.all(Array.from({ length: count }, () => neuralService.createNeuralAgent('neural')));
                const endMemory = process.memoryUsage().heapUsed;
                const memoryPerAgent = (endMemory - startMemory) / count;
                (0, globals_1.expect)(memoryPerAgent).toBeLessThan(1024 * 1024); // <1MB per agent
                // Clean up
                neuralService.clearAgents();
                console.log(`Memory Efficiency (${count} agents):
          Memory per agent: ${(memoryPerAgent / 1024).toFixed(2)}KB`);
            }
        });
    });
    (0, globals_1.describe)('Scalability Performance', () => {
        (0, globals_1.test)('should scale mesh operations linearly', async () => {
            const meshSizes = [10, 25, 50, 100];
            const scalingResults = [];
            for (const size of meshSizes) {
                const agents = await Promise.all(Array.from({ length: size }, () => neuralService.createNeuralAgent('neural')));
                const startTime = performance.now();
                await Promise.all(agents.map(agent => neuralService.updateNeuralAgent(agent)));
                const endTime = performance.now();
                const time = endTime - startTime;
                scalingResults.push({ size, time });
                (0, globals_1.expect)(time).toBeLessThan(size * 10); // Linear scaling: <10ms per agent
                console.log(`Scaling Test (${size} agents): ${time.toFixed(2)}ms`);
            }
            // Verify linear scaling characteristics
            for (let i = 1; i < scalingResults.length; i++) {
                const prev = scalingResults[i - 1];
                const curr = scalingResults[i];
                const sizeRatio = curr.size / prev.size;
                const timeRatio = curr.time / prev.time;
                // Time ratio should not exceed size ratio by more than 50%
                (0, globals_1.expect)(timeRatio).toBeLessThan(sizeRatio * 1.5);
            }
        });
        (0, globals_1.test)('should handle mesh training at scale', async () => {
            const patternCounts = [100, 500, 1000, 2000];
            for (const count of patternCounts) {
                const patterns = neural_test_utils_1.TestDataGenerator.generateTrainingPatterns(count);
                const startTime = performance.now();
                const success = await neuralService.trainMesh(patterns);
                const endTime = performance.now();
                (0, globals_1.expect)(success).toBe(true);
                const time = endTime - startTime;
                (0, globals_1.expect)(time).toBeLessThan(count * 0.1); // <0.1ms per pattern
                console.log(`Training Performance (${count} patterns): ${time.toFixed(2)}ms`);
            }
        });
    });
    (0, globals_1.describe)('Real-time Performance', () => {
        (0, globals_1.test)('should maintain real-time update frequencies', async () => {
            const targetFPS = 60; // 60 FPS = ~16.67ms per frame
            const maxFrameTime = 1000 / targetFPS;
            const agent = await neuralService.createNeuralAgent('neural');
            (0, globals_1.expect)(agent).not.toBeNull();
            const frameCount = 100;
            const frameTimes = [];
            for (let i = 0; i < frameCount; i++) {
                const frameStart = performance.now();
                // Simulate real-time update
                await neuralService.updateNeuralAgent(agent);
                const frameEnd = performance.now();
                const frameTime = frameEnd - frameStart;
                frameTimes.push(frameTime);
                (0, globals_1.expect)(frameTime).toBeLessThan(maxFrameTime);
            }
            const averageFrameTime = frameTimes.reduce((a, b) => a + b, 0) / frameTimes.length;
            const maxFrameTime_actual = Math.max(...frameTimes);
            (0, globals_1.expect)(averageFrameTime).toBeLessThan(maxFrameTime * 0.8); // 80% of budget
            (0, globals_1.expect)(maxFrameTime_actual).toBeLessThan(maxFrameTime);
            console.log(`Real-time Performance:
        Target frame time: ${maxFrameTime.toFixed(2)}ms
        Average frame time: ${averageFrameTime.toFixed(2)}ms
        Max frame time: ${maxFrameTime_actual.toFixed(2)}ms
        Achieved FPS: ${(1000 / averageFrameTime).toFixed(1)}`);
        });
        (0, globals_1.test)('should handle burst workloads efficiently', async () => {
            const burstSize = 20;
            const burstCount = 5;
            for (let burst = 0; burst < burstCount; burst++) {
                const agents = await Promise.all(Array.from({ length: burstSize }, () => neuralService.createNeuralAgent('neural')));
                const burstStart = performance.now();
                await Promise.all(agents.map(agent => neuralService.updateNeuralAgent(agent)));
                const burstEnd = performance.now();
                const burstTime = burstEnd - burstStart;
                (0, globals_1.expect)(burstTime).toBeLessThan(100); // <100ms per burst
                console.log(`Burst ${burst + 1} (${burstSize} agents): ${burstTime.toFixed(2)}ms`);
                // Small delay between bursts
                await new Promise(resolve => setTimeout(resolve, 10));
            }
        });
    });
    (0, globals_1.describe)('Performance Regression Tests', () => {
        (0, globals_1.test)('should not regress from baseline performance', async () => {
            // Baseline performance expectations
            const baseline = {
                singleUpdate: 25, // ms
                batchUpdate: 50, // ms for 10 agents
                meshCreation: 100, // ms
                training: 200 // ms for 100 patterns
            };
            // Test single update performance
            const agent = await neuralService.createNeuralAgent('neural');
            const singleStart = performance.now();
            await neuralService.updateNeuralAgent(agent);
            const singleTime = performance.now() - singleStart;
            (0, globals_1.expect)(singleTime).toBeLessThan(baseline.singleUpdate);
            // Test batch update performance
            const batchAgents = await Promise.all(Array.from({ length: 10 }, () => neuralService.createNeuralAgent('neural')));
            const batchStart = performance.now();
            await Promise.all(batchAgents.map(agent => neuralService.updateNeuralAgent(agent)));
            const batchTime = performance.now() - batchStart;
            (0, globals_1.expect)(batchTime).toBeLessThan(baseline.batchUpdate);
            // Test training performance
            const patterns = neural_test_utils_1.TestDataGenerator.generateTrainingPatterns(100);
            const trainStart = performance.now();
            await neuralService.trainMesh(patterns);
            const trainTime = performance.now() - trainStart;
            (0, globals_1.expect)(trainTime).toBeLessThan(baseline.training);
            console.log(`Performance Baseline Validation:
        Single update: ${singleTime.toFixed(2)}ms (limit: ${baseline.singleUpdate}ms)
        Batch update: ${batchTime.toFixed(2)}ms (limit: ${baseline.batchUpdate}ms)
        Training: ${trainTime.toFixed(2)}ms (limit: ${baseline.training}ms)`);
        });
        (0, globals_1.test)('should maintain performance across test suite', () => {
            // This test ensures the overall test suite performance
            const testSuiteStart = Date.now();
            (0, globals_1.expect)(testSuiteStart).toBeDefined();
            // The test suite should complete within reasonable time
            // This is checked by Jest timeout configuration
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,