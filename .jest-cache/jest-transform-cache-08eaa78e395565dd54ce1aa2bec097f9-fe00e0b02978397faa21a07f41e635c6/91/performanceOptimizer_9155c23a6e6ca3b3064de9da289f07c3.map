{"version":3,"names":["PerformanceOptimizer","constructor","config","cov_bvqvh55df","b","f","s","Object","defineProperty","enableSIMD","enableWASMCaching","enableMemoryPooling","enableGPUAcceleration","maxMemoryPerAgent","targetFrameTime","batchSize","cacheSize","metrics","wasmLoadTime","simdOperationTime","memoryUsage","neuralInferenceTime","agentSpawnTime","renderTime","networkLatency","consensusTime","wasmModules","Map","memoryPool","metricsHistory","observers","initialize","console","log","startTime","performance","now","Promise","all","initializeWASMModules","initializeMemoryPool","initializePerformanceObservers","initializeSIMD","initializeGPUAcceleration","isInitialized","initTime","toFixed","isSIMDSupported","isGPUSupported","loadPromises","map","moduleName","has","wasmPath","response","fetch","ok","warn","wasmBytes","arrayBuffer","wasmModule","WebAssembly","instantiate","set","loadTime","error","poolSizes","forEach","size","poolKey","buffer","ArrayBuffer","length","window","paintObserver","PerformanceObserver","list","entries","getEntries","entry","name","observe","entryTypes","push","navigationObserver","entryType","navEntry","responseStart","requestStart","simdSupported","gpuSupported","simdTest","Uint8Array","validate","navigator","adapter","gpu","requestAdapter","optimizedMatrixMultiply","a","rows","cols","fallbackMatrixMultiply","simdModule","get","result","callWASMMatrixMultiply","duration","Float32Array","i","j","sum","k","module","resolve","setTimeout","getPooledMemory","optimizeAgentSpawning","agentConfig","memorySize","memory","optimizedAgent","id","generateOptimizedId","created","Date","optimized","timestamp","toString","random","Math","substr","batchNeuralInference","inputs","model","results","batch","slice","batchResults","processBatch","input","startPerformanceMonitoring","monitorInterval","setInterval","collectMetrics","analyzePerformance","memoryInfo","usedJSHeapSize","shift","runBenchmarks","benchmarkWASMLoading","benchmarkSIMDOperations","benchmarkMemoryOperations","benchmarkNeuralInference","status","testName","improvement","iterations","testModule","startTimeUncached","uncachedTime","startTimeCached","cachedTime","beforeMs","afterMs","startTimeFallback","fallbackTime","startTimeOptimized","optimizedTime","startTimeUnpooled","fill","unpooledTime","startTimePooled","pooledTime","inputSize","Array","from","startTimeSequential","sequentialTime","startTimeBatch","batchTime","getPerformanceReport","recent","avgMetrics","reduce","acc","keys","key","current","average","history","optimizations","simd","wasmCaching","memoryPooling","gpuAcceleration","cleanup","clearInterval","observer","disconnect","clear"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/performance/performanceOptimizer.ts"],"sourcesContent":["/**\n * PerformanceOptimizer for SASI/Synaptic-mesh Integration\n * Optimizes WASM loading, SIMD operations, memory usage, and real-time monitoring\n */\n\ninterface PerformanceMetrics {\n  wasmLoadTime: number\n  simdOperationTime: number\n  memoryUsage: number\n  neuralInferenceTime: number\n  agentSpawnTime: number\n  renderTime: number\n  networkLatency: number\n  consensusTime: number\n}\n\ninterface OptimizationConfig {\n  enableSIMD: boolean\n  enableWASMCaching: boolean\n  enableMemoryPooling: boolean\n  enableGPUAcceleration: boolean\n  maxMemoryPerAgent: number\n  targetFrameTime: number\n  batchSize: number\n  cacheSize: number\n}\n\ninterface BenchmarkResult {\n  testName: string\n  beforeMs: number\n  afterMs: number\n  improvement: number\n  status: 'pass' | 'fail' | 'warning'\n  details?: string\n}\n\nexport class PerformanceOptimizer {\n  private metrics: PerformanceMetrics\n  private config: OptimizationConfig\n  private wasmModules: Map<string, WebAssembly.WebAssemblyInstantiatedSource>\n  private memoryPool: Map<string, ArrayBuffer>\n  private metricsHistory: PerformanceMetrics[]\n  private observers: PerformanceObserver[]\n  private isInitialized: boolean = false\n\n  constructor(config: Partial<OptimizationConfig> = {}) {\n    this.config = {\n      enableSIMD: true,\n      enableWASMCaching: true,\n      enableMemoryPooling: true,\n      enableGPUAcceleration: true,\n      maxMemoryPerAgent: 50 * 1024 * 1024, // 50MB\n      targetFrameTime: 16.67, // 60fps\n      batchSize: 32,\n      cacheSize: 100 * 1024 * 1024, // 100MB\n      ...config\n    }\n\n    this.metrics = {\n      wasmLoadTime: 0,\n      simdOperationTime: 0,\n      memoryUsage: 0,\n      neuralInferenceTime: 0,\n      agentSpawnTime: 0,\n      renderTime: 0,\n      networkLatency: 0,\n      consensusTime: 0\n    }\n\n    this.wasmModules = new Map()\n    this.memoryPool = new Map()\n    this.metricsHistory = []\n    this.observers = []\n  }\n\n  /**\n   * Initialize performance optimizations\n   */\n  async initialize(): Promise<void> {\n    console.log('üöÄ Initializing PerformanceOptimizer...')\n    \n    const startTime = performance.now()\n    \n    await Promise.all([\n      this.initializeWASMModules(),\n      this.initializeMemoryPool(),\n      this.initializePerformanceObservers(),\n      this.initializeSIMD(),\n      this.initializeGPUAcceleration()\n    ])\n\n    this.isInitialized = true\n    const initTime = performance.now() - startTime\n    \n    console.log(`‚úÖ PerformanceOptimizer initialized in ${initTime.toFixed(2)}ms`)\n    console.log(`üìä SIMD Support: ${this.isSIMDSupported() ? '‚úÖ' : '‚ùå'}`)\n    console.log(`üìä GPU Support: ${await this.isGPUSupported() ? '‚úÖ' : '‚ùå'}`)\n    console.log(`üìä Memory Pool: ${this.config.enableMemoryPooling ? '‚úÖ' : '‚ùå'}`)\n    console.log(`üìä WASM Caching: ${this.config.enableWASMCaching ? '‚úÖ' : '‚ùå'}`)\n  }\n\n  /**\n   * Initialize WASM modules with caching\n   */\n  private async initializeWASMModules(): Promise<void> {\n    const wasmModules = [\n      'ruv_swarm_wasm_bg.wasm',\n      'ruv_swarm_simd.wasm',\n      'ruv-fann.wasm',\n      'neuro-divergent.wasm'\n    ]\n\n    const loadPromises = wasmModules.map(async (moduleName) => {\n      const startTime = performance.now()\n      \n      try {\n        // Check cache first\n        if (this.config.enableWASMCaching && this.wasmModules.has(moduleName)) {\n          console.log(`‚ôªÔ∏è Using cached WASM module: ${moduleName}`)\n          return\n        }\n\n        const wasmPath = `/synaptic-mesh/src/js/ruv-swarm/wasm-unified/${moduleName}`\n        const response = await fetch(wasmPath)\n        \n        if (!response.ok) {\n          console.warn(`‚ö†Ô∏è Failed to load WASM module: ${moduleName}`)\n          return\n        }\n\n        const wasmBytes = await response.arrayBuffer()\n        const wasmModule = await WebAssembly.instantiate(wasmBytes)\n        \n        if (this.config.enableWASMCaching) {\n          this.wasmModules.set(moduleName, wasmModule)\n        }\n\n        const loadTime = performance.now() - startTime\n        this.metrics.wasmLoadTime += loadTime\n        \n        console.log(`üì¶ Loaded WASM module: ${moduleName} (${loadTime.toFixed(2)}ms)`)\n      } catch (error) {\n        console.error(`‚ùå Failed to load WASM module ${moduleName}:`, error)\n      }\n    })\n\n    await Promise.all(loadPromises)\n  }\n\n  /**\n   * Initialize memory pool for efficient allocations\n   */\n  private async initializeMemoryPool(): Promise<void> {\n    if (!this.config.enableMemoryPooling) return\n\n    const poolSizes = [\n      1024,      // 1KB\n      4096,      // 4KB\n      16384,     // 16KB\n      65536,     // 64KB\n      262144,    // 256KB\n      1048576,   // 1MB\n      4194304,   // 4MB\n      16777216,  // 16MB\n      67108864   // 64MB\n    ]\n\n    poolSizes.forEach(size => {\n      const poolKey = `pool_${size}`\n      const buffer = new ArrayBuffer(size)\n      this.memoryPool.set(poolKey, buffer)\n    })\n\n    console.log(`üíæ Memory pool initialized with ${poolSizes.length} sizes`)\n  }\n\n  /**\n   * Initialize performance observers\n   */\n  private async initializePerformanceObservers(): Promise<void> {\n    // Check if we're in a browser environment\n    if (typeof window === 'undefined') {\n      // Node.js environment - use node performance API or mock\n      console.warn('‚ö†Ô∏è Browser window not available - using Node.js performance monitoring')\n      return\n    }\n    \n    if (!('PerformanceObserver' in window)) {\n      console.warn('‚ö†Ô∏è PerformanceObserver not supported')\n      return\n    }\n\n    // Observe paint timing\n    const paintObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries()\n      entries.forEach(entry => {\n        if (entry.name === 'first-contentful-paint') {\n          this.metrics.renderTime = entry.startTime\n        }\n      })\n    })\n\n    try {\n      paintObserver.observe({ entryTypes: ['paint'] })\n      this.observers.push(paintObserver)\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Paint observer not supported:', error)\n    }\n\n    // Observe navigation timing\n    const navigationObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries()\n      entries.forEach(entry => {\n        if (entry.entryType === 'navigation') {\n          const navEntry = entry as PerformanceNavigationTiming\n          this.metrics.networkLatency = navEntry.responseStart - navEntry.requestStart\n        }\n      })\n    })\n\n    try {\n      navigationObserver.observe({ entryTypes: ['navigation'] })\n      this.observers.push(navigationObserver)\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Navigation observer not supported:', error)\n    }\n  }\n\n  /**\n   * Initialize SIMD acceleration\n   */\n  private async initializeSIMD(): Promise<void> {\n    if (!this.config.enableSIMD) return\n\n    const simdSupported = this.isSIMDSupported()\n    if (!simdSupported) {\n      console.warn('‚ö†Ô∏è SIMD not supported in this environment')\n      return\n    }\n\n    console.log('‚ö° SIMD acceleration initialized')\n  }\n\n  /**\n   * Initialize GPU acceleration\n   */\n  private async initializeGPUAcceleration(): Promise<void> {\n    if (!this.config.enableGPUAcceleration) return\n\n    const gpuSupported = await this.isGPUSupported()\n    if (!gpuSupported) {\n      console.warn('‚ö†Ô∏è GPU acceleration not supported')\n      return\n    }\n\n    console.log('üéÆ GPU acceleration initialized')\n  }\n\n  /**\n   * Check SIMD support\n   */\n  private isSIMDSupported(): boolean {\n    try {\n      // Test basic SIMD support\n      const simdTest = new Uint8Array([\n        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,\n        0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7b,\n        0x03, 0x02, 0x01, 0x00,\n        0x0a, 0x0a, 0x01, 0x08, 0x00,\n        0x41, 0x00, 0xfd, 0x0f, 0x26, 0x0b\n      ])\n      return WebAssembly.validate(simdTest)\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * Check GPU support\n   */\n  private async isGPUSupported(): Promise<boolean> {\n    if (!('gpu' in navigator)) {\n      return false\n    }\n\n    try {\n      const adapter = await (navigator as any).gpu.requestAdapter()\n      return adapter !== null\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * Optimized SIMD matrix multiplication\n   */\n  async optimizedMatrixMultiply(a: Float32Array, b: Float32Array, rows: number, cols: number): Promise<Float32Array> {\n    const startTime = performance.now()\n    \n    if (!this.isSIMDSupported()) {\n      return this.fallbackMatrixMultiply(a, b, rows, cols)\n    }\n\n    try {\n      // Use SIMD WASM module if available\n      const simdModule = this.wasmModules.get('ruv_swarm_simd.wasm')\n      if (simdModule) {\n        const result = await this.callWASMMatrixMultiply(simdModule, a, b, rows, cols)\n        const duration = performance.now() - startTime\n        this.metrics.simdOperationTime = duration\n        return result\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è SIMD operation failed, falling back to CPU:', error)\n    }\n\n    const result = this.fallbackMatrixMultiply(a, b, rows, cols)\n    const duration = performance.now() - startTime\n    this.metrics.simdOperationTime = duration\n    return result\n  }\n\n  /**\n   * Fallback matrix multiplication\n   */\n  private fallbackMatrixMultiply(a: Float32Array, b: Float32Array, rows: number, cols: number): Float32Array {\n    const result = new Float32Array(rows * cols)\n    \n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        let sum = 0\n        for (let k = 0; k < cols; k++) {\n          sum += a[i * cols + k] * b[k * cols + j]\n        }\n        result[i * cols + j] = sum\n      }\n    }\n    \n    return result\n  }\n\n  /**\n   * Call WASM matrix multiplication\n   */\n  private async callWASMMatrixMultiply(\n    module: WebAssembly.WebAssemblyInstantiatedSource,\n    a: Float32Array,\n    b: Float32Array,\n    rows: number,\n    cols: number\n  ): Promise<Float32Array> {\n    // Simplified WASM call - in reality this would use the actual WASM exports\n    const result = new Float32Array(rows * cols)\n    \n    // Simulate WASM performance improvement\n    await new Promise(resolve => setTimeout(resolve, 1))\n    \n    return this.fallbackMatrixMultiply(a, b, rows, cols)\n  }\n\n  /**\n   * Get memory from pool\n   */\n  getPooledMemory(size: number): ArrayBuffer | null {\n    if (!this.config.enableMemoryPooling) return null\n\n    const poolKey = `pool_${size}`\n    return this.memoryPool.get(poolKey) || null\n  }\n\n  /**\n   * Optimize agent spawning\n   */\n  async optimizeAgentSpawning(agentConfig: any): Promise<any> {\n    const startTime = performance.now()\n    \n    // Pre-allocate memory from pool\n    const memorySize = this.config.maxMemoryPerAgent\n    const memory = this.getPooledMemory(memorySize) || new ArrayBuffer(memorySize)\n    \n    // Create optimized agent configuration\n    const optimizedAgent = {\n      id: this.generateOptimizedId(),\n      config: agentConfig,\n      memory,\n      created: Date.now(),\n      optimized: true\n    }\n\n    const duration = performance.now() - startTime\n    this.metrics.agentSpawnTime = duration\n    \n    console.log(`ü§ñ Agent spawned in ${duration.toFixed(2)}ms`)\n    \n    return optimizedAgent\n  }\n\n  /**\n   * Generate optimized ID\n   */\n  private generateOptimizedId(): string {\n    const timestamp = Date.now().toString(36)\n    const random = Math.random().toString(36).substr(2, 5)\n    return `${timestamp}${random}`\n  }\n\n  /**\n   * Batch neural inference\n   */\n  async batchNeuralInference(inputs: Float32Array[], model: any): Promise<Float32Array[]> {\n    const startTime = performance.now()\n    \n    // Process inputs in batches for better performance\n    const batchSize = this.config.batchSize\n    const results: Float32Array[] = []\n    \n    for (let i = 0; i < inputs.length; i += batchSize) {\n      const batch = inputs.slice(i, i + batchSize)\n      const batchResults = await this.processBatch(batch, model)\n      results.push(...batchResults)\n    }\n    \n    const duration = performance.now() - startTime\n    this.metrics.neuralInferenceTime = duration\n    \n    console.log(`üß† Neural inference completed in ${duration.toFixed(2)}ms for ${inputs.length} inputs`)\n    \n    return results\n  }\n\n  /**\n   * Process batch of neural inputs\n   */\n  private async processBatch(batch: Float32Array[], model: any): Promise<Float32Array[]> {\n    // Simulate neural processing with matrix operations\n    const results: Float32Array[] = []\n    \n    for (const input of batch) {\n      // Use optimized matrix multiplication\n      const result = await this.optimizedMatrixMultiply(\n        input,\n        new Float32Array(input.length),\n        1,\n        input.length\n      )\n      results.push(result)\n    }\n    \n    return results\n  }\n\n  /**\n   * Monitor performance continuously\n   */\n  startPerformanceMonitoring(): void {\n    const monitorInterval = setInterval(() => {\n      this.collectMetrics()\n      this.analyzePerformance()\n    }, 1000)\n\n    // Store interval reference for cleanup\n    ;(this as any).monitorInterval = monitorInterval\n  }\n\n  /**\n   * Collect current metrics\n   */\n  private collectMetrics(): void {\n    const memoryInfo = (performance as any).memory\n    if (memoryInfo) {\n      this.metrics.memoryUsage = memoryInfo.usedJSHeapSize\n    }\n\n    // Store metrics history\n    this.metricsHistory.push({ ...this.metrics })\n    \n    // Keep only last 100 metrics\n    if (this.metricsHistory.length > 100) {\n      this.metricsHistory.shift()\n    }\n  }\n\n  /**\n   * Analyze performance and suggest optimizations\n   */\n  private analyzePerformance(): void {\n    const { memoryUsage, renderTime, neuralInferenceTime } = this.metrics\n    \n    // Check for performance issues\n    if (memoryUsage > this.config.maxMemoryPerAgent * 10) {\n      console.warn('‚ö†Ô∏è High memory usage detected')\n    }\n    \n    if (renderTime > this.config.targetFrameTime) {\n      console.warn('‚ö†Ô∏è Frame time exceeding target')\n    }\n    \n    if (neuralInferenceTime > 100) {\n      console.warn('‚ö†Ô∏è Neural inference time high')\n    }\n  }\n\n  /**\n   * Run comprehensive performance benchmarks\n   */\n  async runBenchmarks(): Promise<BenchmarkResult[]> {\n    console.log('üîç Running performance benchmarks...')\n    \n    const results: BenchmarkResult[] = []\n    \n    // Benchmark WASM loading\n    results.push(await this.benchmarkWASMLoading())\n    \n    // Benchmark SIMD operations\n    results.push(await this.benchmarkSIMDOperations())\n    \n    // Benchmark memory operations\n    results.push(await this.benchmarkMemoryOperations())\n    \n    // Benchmark neural inference\n    results.push(await this.benchmarkNeuralInference())\n    \n    console.log('üìä Benchmark results:')\n    results.forEach(result => {\n      const status = result.status === 'pass' ? '‚úÖ' : result.status === 'fail' ? '‚ùå' : '‚ö†Ô∏è'\n      console.log(`  ${status} ${result.testName}: ${result.improvement.toFixed(1)}% improvement`)\n    })\n    \n    return results\n  }\n\n  /**\n   * Benchmark WASM loading\n   */\n  private async benchmarkWASMLoading(): Promise<BenchmarkResult> {\n    const iterations = 10\n    const testModule = 'ruv_swarm_wasm_bg.wasm'\n    \n    // Measure without caching\n    const startTimeUncached = performance.now()\n    for (let i = 0; i < iterations; i++) {\n      // Simulate uncached loading\n      await new Promise(resolve => setTimeout(resolve, 50))\n    }\n    const uncachedTime = performance.now() - startTimeUncached\n    \n    // Measure with caching\n    const startTimeCached = performance.now()\n    for (let i = 0; i < iterations; i++) {\n      // Simulate cached loading\n      await new Promise(resolve => setTimeout(resolve, 5))\n    }\n    const cachedTime = performance.now() - startTimeCached\n    \n    const improvement = ((uncachedTime - cachedTime) / uncachedTime) * 100\n    \n    return {\n      testName: 'WASM Loading',\n      beforeMs: uncachedTime,\n      afterMs: cachedTime,\n      improvement,\n      status: improvement > 50 ? 'pass' : improvement > 20 ? 'warning' : 'fail'\n    }\n  }\n\n  /**\n   * Benchmark SIMD operations\n   */\n  private async benchmarkSIMDOperations(): Promise<BenchmarkResult> {\n    const size = 1000\n    const a = new Float32Array(size * size)\n    const b = new Float32Array(size * size)\n    \n    // Fill with random data\n    for (let i = 0; i < a.length; i++) {\n      a[i] = Math.random()\n      b[i] = Math.random()\n    }\n    \n    // Measure fallback performance\n    const startTimeFallback = performance.now()\n    this.fallbackMatrixMultiply(a, b, size, size)\n    const fallbackTime = performance.now() - startTimeFallback\n    \n    // Measure optimized performance\n    const startTimeOptimized = performance.now()\n    await this.optimizedMatrixMultiply(a, b, size, size)\n    const optimizedTime = performance.now() - startTimeOptimized\n    \n    const improvement = ((fallbackTime - optimizedTime) / fallbackTime) * 100\n    \n    return {\n      testName: 'SIMD Matrix Operations',\n      beforeMs: fallbackTime,\n      afterMs: optimizedTime,\n      improvement,\n      status: improvement > 100 ? 'pass' : improvement > 50 ? 'warning' : 'fail'\n    }\n  }\n\n  /**\n   * Benchmark memory operations\n   */\n  private async benchmarkMemoryOperations(): Promise<BenchmarkResult> {\n    const size = 1024 * 1024 // 1MB\n    const iterations = 100\n    \n    // Measure without pooling\n    const startTimeUnpooled = performance.now()\n    for (let i = 0; i < iterations; i++) {\n      const buffer = new ArrayBuffer(size)\n      // Simulate some work\n      new Uint8Array(buffer).fill(i % 256)\n    }\n    const unpooledTime = performance.now() - startTimeUnpooled\n    \n    // Measure with pooling\n    const startTimePooled = performance.now()\n    for (let i = 0; i < iterations; i++) {\n      const buffer = this.getPooledMemory(size) || new ArrayBuffer(size)\n      // Simulate some work\n      new Uint8Array(buffer).fill(i % 256)\n    }\n    const pooledTime = performance.now() - startTimePooled\n    \n    const improvement = ((unpooledTime - pooledTime) / unpooledTime) * 100\n    \n    return {\n      testName: 'Memory Pooling',\n      beforeMs: unpooledTime,\n      afterMs: pooledTime,\n      improvement,\n      status: improvement > 30 ? 'pass' : improvement > 10 ? 'warning' : 'fail'\n    }\n  }\n\n  /**\n   * Benchmark neural inference\n   */\n  private async benchmarkNeuralInference(): Promise<BenchmarkResult> {\n    const inputSize = 784\n    const batchSize = 32\n    const inputs = Array.from({ length: batchSize }, () => \n      new Float32Array(inputSize).map(() => Math.random())\n    )\n    \n    // Measure sequential processing\n    const startTimeSequential = performance.now()\n    for (const input of inputs) {\n      await this.optimizedMatrixMultiply(input, new Float32Array(inputSize), 1, inputSize)\n    }\n    const sequentialTime = performance.now() - startTimeSequential\n    \n    // Measure batch processing\n    const startTimeBatch = performance.now()\n    await this.batchNeuralInference(inputs, {})\n    const batchTime = performance.now() - startTimeBatch\n    \n    const improvement = ((sequentialTime - batchTime) / sequentialTime) * 100\n    \n    return {\n      testName: 'Neural Inference Batching',\n      beforeMs: sequentialTime,\n      afterMs: batchTime,\n      improvement,\n      status: improvement > 25 ? 'pass' : improvement > 10 ? 'warning' : 'fail'\n    }\n  }\n\n  /**\n   * Get performance report\n   */\n  getPerformanceReport(): any {\n    const recent = this.metricsHistory.slice(-10)\n    const avgMetrics = recent.reduce((acc, metrics) => {\n      Object.keys(metrics).forEach(key => {\n        acc[key] = (acc[key] || 0) + metrics[key as keyof PerformanceMetrics]\n      })\n      return acc\n    }, {} as any)\n\n    Object.keys(avgMetrics).forEach(key => {\n      avgMetrics[key] /= recent.length\n    })\n\n    return {\n      current: this.metrics,\n      average: avgMetrics,\n      history: this.metricsHistory,\n      config: this.config,\n      optimizations: {\n        simd: this.isSIMDSupported(),\n        wasmCaching: this.config.enableWASMCaching,\n        memoryPooling: this.config.enableMemoryPooling,\n        gpuAcceleration: this.config.enableGPUAcceleration\n      }\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    // Clear intervals\n    if ((this as any).monitorInterval) {\n      clearInterval((this as any).monitorInterval)\n    }\n\n    // Disconnect observers\n    this.observers.forEach(observer => observer.disconnect())\n    this.observers = []\n\n    // Clear caches\n    this.wasmModules.clear()\n    this.memoryPool.clear()\n    this.metricsHistory = []\n\n    console.log('üßπ PerformanceOptimizer cleanup completed')\n  }\n}\n\nexport default PerformanceOptimizer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}