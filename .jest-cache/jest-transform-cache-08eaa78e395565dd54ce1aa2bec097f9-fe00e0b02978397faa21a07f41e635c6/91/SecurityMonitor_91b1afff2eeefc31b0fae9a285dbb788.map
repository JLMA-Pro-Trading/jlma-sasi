{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityMonitor.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/security/SecurityMonitor.ts"],"sourcesContent":["/**\n * Security Monitor - Real-time Security Monitoring and Alerting\n * Provides continuous security monitoring for the neural agent system\n * \n * Features:\n * - Real-time threat detection\n * - Performance anomaly detection\n * - Security metric collection\n * - Automated incident response\n * - Dashboard integration\n */\n\nimport { EventEmitter } from 'events';\nimport { performance } from 'perf_hooks';\nimport type { SecurityValidator, AuditLog } from './SecurityValidator';\n\nexport interface SecurityMetrics {\n  timestamp: number;\n  systemHealth: number; // 0-100\n  threatLevel: 'low' | 'medium' | 'high' | 'critical';\n  activeThreats: number;\n  blockedAttacks: number;\n  averageResponseTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  networkConnections: number;\n  failedAuthentications: number;\n}\n\nexport interface ThreatDetection {\n  id: string;\n  type: 'sql_injection' | 'buffer_overflow' | 'dos_attack' | 'data_corruption' | 'unauthorized_access';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source: string;\n  timestamp: number;\n  description: string;\n  evidence: any;\n  mitigated: boolean;\n  response?: string;\n}\n\nexport interface SecurityAlert {\n  id: string;\n  timestamp: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  message: string;\n  details: any;\n  acknowledged: boolean;\n  resolvedAt?: number;\n}\n\nexport class SecurityMonitor extends EventEmitter {\n  private isRunning: boolean = false;\n  private securityValidator: SecurityValidator;\n  private metrics: SecurityMetrics[] = [];\n  private threats: ThreatDetection[] = [];\n  private alerts: SecurityAlert[] = [];\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private alertThresholds: any;\n\n  constructor(securityValidator: SecurityValidator) {\n    super();\n    this.securityValidator = securityValidator;\n    \n    this.alertThresholds = {\n      failedAuthAttempts: 5,\n      responseTimeMs: 1000,\n      memoryUsageMB: 500,\n      cpuUsagePercent: 80,\n      threatLevelEscalation: 10 // minutes\n    };\n  }\n\n  /**\n   * Start security monitoring\n   */\n  start(): void {\n    if (this.isRunning) {\n      console.warn('⚠️ Security monitor already running');\n      return;\n    }\n\n    console.log('🛡️ Starting security monitoring...');\n    this.isRunning = true;\n\n    // Start metrics collection\n    this.monitoringInterval = setInterval(() => {\n      this.collectMetrics();\n      this.analyzeThreats();\n      this.checkAlertConditions();\n    }, 5000); // Collect metrics every 5 seconds\n\n    // Set up audit log monitoring\n    this.setupAuditLogMonitoring();\n\n    this.emit('monitoring_started');\n    console.log('✅ Security monitoring active');\n  }\n\n  /**\n   * Stop security monitoring\n   */\n  stop(): void {\n    if (!this.isRunning) return;\n\n    console.log('🛑 Stopping security monitoring...');\n    \n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    this.isRunning = false;\n    this.emit('monitoring_stopped');\n    console.log('✅ Security monitoring stopped');\n  }\n\n  /**\n   * Collect current security metrics\n   */\n  private collectMetrics(): void {\n    const startTime = performance.now();\n\n    // Get system metrics\n    const memoryUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n\n    // Calculate threat level\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 300000 // Last 5 minutes\n    );\n    \n    const threatLevel = this.calculateThreatLevel(recentThreats);\n    const systemHealth = this.calculateSystemHealth();\n\n    const metrics: SecurityMetrics = {\n      timestamp: Date.now(),\n      systemHealth,\n      threatLevel,\n      activeThreats: recentThreats.filter(t => !t.mitigated).length,\n      blockedAttacks: recentThreats.filter(t => t.mitigated).length,\n      averageResponseTime: performance.now() - startTime,\n      memoryUsage: memoryUsage.heapUsed / 1024 / 1024, // MB\n      cpuUsage: (cpuUsage.user + cpuUsage.system) / 1000, // ms\n      networkConnections: 0, // Would be implemented with actual network monitoring\n      failedAuthentications: this.getRecentFailedAuth()\n    };\n\n    this.metrics.push(metrics);\n\n    // Keep only last 1000 metrics (about 1.4 hours at 5s intervals)\n    if (this.metrics.length > 1000) {\n      this.metrics.splice(0, 100);\n    }\n\n    this.emit('metrics_collected', metrics);\n  }\n\n  /**\n   * Analyze threats and detect patterns\n   */\n  private analyzeThreats(): void {\n    const recentAuditLogs = this.securityValidator.getAuditLogs({\n      startTime: Date.now() - 60000 // Last minute\n    });\n\n    for (const log of recentAuditLogs) {\n      this.analyzeAuditLogForThreats(log);\n    }\n\n    // Detect threat patterns\n    this.detectThreatPatterns();\n  }\n\n  /**\n   * Analyze individual audit log for threats\n   */\n  private analyzeAuditLogForThreats(log: AuditLog): void {\n    // SQL injection detection\n    if (log.action === 'sql_validation' && log.details.errors > 0) {\n      this.reportThreat({\n        type: 'sql_injection',\n        severity: 'high',\n        source: log.ipAddress || 'unknown',\n        description: 'SQL injection attempt detected',\n        evidence: log.details\n      });\n    }\n\n    // Rate limit violations (potential DoS)\n    if (log.action === 'rate_limit_exceeded') {\n      this.reportThreat({\n        type: 'dos_attack',\n        severity: 'medium',\n        source: log.details.identifier,\n        description: 'Rate limit exceeded - potential DoS attack',\n        evidence: log.details\n      });\n    }\n\n    // Neural weight corruption\n    if (log.action === 'weight_validation' && !log.details.checksumMatch) {\n      this.reportThreat({\n        type: 'data_corruption',\n        severity: 'critical',\n        source: log.agentId || 'unknown',\n        description: 'Neural weight corruption detected',\n        evidence: log.details\n      });\n    }\n\n    // Suspicious neural inputs\n    if (log.action === 'neural_input_validation' && log.details.extremeValues > 0) {\n      this.reportThreat({\n        type: 'buffer_overflow',\n        severity: 'medium',\n        source: log.agentId || 'unknown',\n        description: 'Potentially malicious neural input detected',\n        evidence: log.details\n      });\n    }\n  }\n\n  /**\n   * Detect threat patterns across multiple events\n   */\n  private detectThreatPatterns(): void {\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 300000 // Last 5 minutes\n    );\n\n    // Detect coordinated attacks\n    const sourceGroups = new Map<string, ThreatDetection[]>();\n    for (const threat of recentThreats) {\n      const threats = sourceGroups.get(threat.source) || [];\n      threats.push(threat);\n      sourceGroups.set(threat.source, threats);\n    }\n\n    // Alert for multiple threats from same source\n    for (const [source, threats] of sourceGroups.entries()) {\n      if (threats.length >= 3) {\n        this.createAlert({\n          severity: 'high',\n          category: 'coordinated_attack',\n          message: `Multiple threats detected from source: ${source}`,\n          details: { source, threatCount: threats.length, threats }\n        });\n      }\n    }\n\n    // Detect escalating threat patterns\n    const criticalThreats = recentThreats.filter(t => t.severity === 'critical');\n    if (criticalThreats.length >= 2) {\n      this.createAlert({\n        severity: 'critical',\n        category: 'threat_escalation',\n        message: 'Multiple critical security threats detected',\n        details: { criticalThreats }\n      });\n    }\n  }\n\n  /**\n   * Report a new threat detection\n   */\n  private reportThreat(threat: Omit<ThreatDetection, 'id' | 'timestamp' | 'mitigated'>): void {\n    const fullThreat: ThreatDetection = {\n      id: `threat_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      timestamp: Date.now(),\n      mitigated: false,\n      ...threat\n    };\n\n    this.threats.push(fullThreat);\n\n    // Auto-mitigation for certain threat types\n    this.attemptAutoMitigation(fullThreat);\n\n    // Create alert for high/critical threats\n    if (threat.severity === 'high' || threat.severity === 'critical') {\n      this.createAlert({\n        severity: threat.severity,\n        category: 'threat_detected',\n        message: `${threat.type} detected: ${threat.description}`,\n        details: fullThreat\n      });\n    }\n\n    this.emit('threat_detected', fullThreat);\n    \n    console.log(`🚨 Security threat detected: ${fullThreat.id} (${threat.severity})`);\n  }\n\n  /**\n   * Attempt automatic mitigation of threats\n   */\n  private attemptAutoMitigation(threat: ThreatDetection): void {\n    let mitigated = false;\n    let response = '';\n\n    switch (threat.type) {\n      case 'dos_attack':\n        // Automatically block source for DoS attacks\n        response = `Rate limiting enforced for source: ${threat.source}`;\n        mitigated = true;\n        break;\n\n      case 'sql_injection':\n        // Log and sanitize - already handled by validator\n        response = 'Input sanitized and logged';\n        mitigated = true;\n        break;\n\n      case 'data_corruption':\n        // Critical - require manual intervention\n        response = 'Manual intervention required';\n        mitigated = false;\n        break;\n\n      case 'buffer_overflow':\n        // Sanitize inputs\n        response = 'Input validation enforced';\n        mitigated = true;\n        break;\n\n      default:\n        response = 'No automatic mitigation available';\n        mitigated = false;\n    }\n\n    threat.mitigated = mitigated;\n    threat.response = response;\n\n    if (mitigated) {\n      console.log(`✅ Threat ${threat.id} automatically mitigated: ${response}`);\n    } else {\n      console.log(`⚠️ Threat ${threat.id} requires manual intervention: ${response}`);\n    }\n  }\n\n  /**\n   * Create a security alert\n   */\n  private createAlert(alert: Omit<SecurityAlert, 'id' | 'timestamp' | 'acknowledged'>): void {\n    const fullAlert: SecurityAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      timestamp: Date.now(),\n      acknowledged: false,\n      ...alert\n    };\n\n    this.alerts.push(fullAlert);\n\n    // Keep only last 500 alerts\n    if (this.alerts.length > 500) {\n      this.alerts.splice(0, 50);\n    }\n\n    this.emit('alert_created', fullAlert);\n\n    const severity = alert.severity.toUpperCase();\n    console.log(`🚨 ${severity} SECURITY ALERT: ${alert.message}`);\n  }\n\n  /**\n   * Check conditions that should trigger alerts\n   */\n  private checkAlertConditions(): void {\n    const currentMetrics = this.metrics[this.metrics.length - 1];\n    if (!currentMetrics) return;\n\n    // Memory usage alert\n    if (currentMetrics.memoryUsage > this.alertThresholds.memoryUsageMB) {\n      this.createAlert({\n        severity: 'medium',\n        category: 'resource_usage',\n        message: `High memory usage: ${currentMetrics.memoryUsage.toFixed(1)}MB`,\n        details: { memoryUsage: currentMetrics.memoryUsage }\n      });\n    }\n\n    // Response time alert\n    if (currentMetrics.averageResponseTime > this.alertThresholds.responseTimeMs) {\n      this.createAlert({\n        severity: 'medium',\n        category: 'performance',\n        message: `Slow response time: ${currentMetrics.averageResponseTime.toFixed(1)}ms`,\n        details: { responseTime: currentMetrics.averageResponseTime }\n      });\n    }\n\n    // System health alert\n    if (currentMetrics.systemHealth < 50) {\n      this.createAlert({\n        severity: 'high',\n        category: 'system_health',\n        message: `Low system health: ${currentMetrics.systemHealth}%`,\n        details: { systemHealth: currentMetrics.systemHealth }\n      });\n    }\n\n    // Threat level escalation\n    if (currentMetrics.threatLevel === 'critical') {\n      this.createAlert({\n        severity: 'critical',\n        category: 'threat_escalation',\n        message: 'Critical threat level reached',\n        details: { threatLevel: currentMetrics.threatLevel, activeThreats: currentMetrics.activeThreats }\n      });\n    }\n  }\n\n  /**\n   * Calculate overall threat level\n   */\n  private calculateThreatLevel(recentThreats: ThreatDetection[]): 'low' | 'medium' | 'high' | 'critical' {\n    if (recentThreats.length === 0) return 'low';\n\n    const criticalCount = recentThreats.filter(t => t.severity === 'critical').length;\n    const highCount = recentThreats.filter(t => t.severity === 'high').length;\n    const mediumCount = recentThreats.filter(t => t.severity === 'medium').length;\n\n    if (criticalCount > 0) return 'critical';\n    if (highCount >= 2) return 'critical';\n    if (highCount >= 1 || mediumCount >= 3) return 'high';\n    if (mediumCount >= 1) return 'medium';\n    \n    return 'low';\n  }\n\n  /**\n   * Calculate system health score\n   */\n  private calculateSystemHealth(): number {\n    let score = 100;\n\n    const currentMetrics = this.metrics[this.metrics.length - 1];\n    if (currentMetrics) {\n      // Deduct for high memory usage\n      if (currentMetrics.memoryUsage > 400) {\n        score -= Math.min(30, (currentMetrics.memoryUsage - 400) / 10);\n      }\n\n      // Deduct for slow response times\n      if (currentMetrics.averageResponseTime > 500) {\n        score -= Math.min(20, (currentMetrics.averageResponseTime - 500) / 50);\n      }\n    }\n\n    // Deduct for active threats\n    const activeThreats = this.threats.filter(t => \n      !t.mitigated && Date.now() - t.timestamp < 300000\n    );\n    score -= activeThreats.length * 10;\n\n    // Deduct for unacknowledged critical alerts\n    const criticalAlerts = this.alerts.filter(a => \n      !a.acknowledged && a.severity === 'critical'\n    );\n    score -= criticalAlerts.length * 15;\n\n    return Math.max(0, Math.round(score));\n  }\n\n  /**\n   * Get recent failed authentication count\n   */\n  private getRecentFailedAuth(): number {\n    const failedAuthLogs = this.securityValidator.getAuditLogs({\n      action: 'authentication_failed',\n      startTime: Date.now() - 300000 // Last 5 minutes\n    });\n    return failedAuthLogs.length;\n  }\n\n  /**\n   * Set up monitoring of audit logs\n   */\n  private setupAuditLogMonitoring(): void {\n    // In a real implementation, this would set up real-time log monitoring\n    // For now, we rely on the periodic analysis in collectMetrics\n  }\n\n  /**\n   * Get current security dashboard data\n   */\n  getSecurityDashboard(): {\n    currentMetrics: SecurityMetrics;\n    threatSummary: { total: number; by_severity: any; by_type: any };\n    alertSummary: { total: number; unacknowledged: number; by_severity: any };\n    recentActivity: (ThreatDetection | SecurityAlert)[];\n  } {\n    const currentMetrics = this.metrics[this.metrics.length - 1] || {\n      timestamp: Date.now(),\n      systemHealth: 100,\n      threatLevel: 'low' as const,\n      activeThreats: 0,\n      blockedAttacks: 0,\n      averageResponseTime: 0,\n      memoryUsage: 0,\n      cpuUsage: 0,\n      networkConnections: 0,\n      failedAuthentications: 0\n    };\n\n    const recentThreats = this.threats.filter(t => \n      Date.now() - t.timestamp < 3600000 // Last hour\n    );\n\n    const recentAlerts = this.alerts.filter(a => \n      Date.now() - a.timestamp < 3600000 // Last hour\n    );\n\n    const threatBySeverity = {\n      critical: recentThreats.filter(t => t.severity === 'critical').length,\n      high: recentThreats.filter(t => t.severity === 'high').length,\n      medium: recentThreats.filter(t => t.severity === 'medium').length,\n      low: recentThreats.filter(t => t.severity === 'low').length\n    };\n\n    const threatByType = recentThreats.reduce((acc, threat) => {\n      acc[threat.type] = (acc[threat.type] || 0) + 1;\n      return acc;\n    }, {} as any);\n\n    const alertBySeverity = {\n      critical: recentAlerts.filter(a => a.severity === 'critical').length,\n      high: recentAlerts.filter(a => a.severity === 'high').length,\n      medium: recentAlerts.filter(a => a.severity === 'medium').length,\n      low: recentAlerts.filter(a => a.severity === 'low').length\n    };\n\n    const recentActivity = [...recentThreats, ...recentAlerts]\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, 20);\n\n    return {\n      currentMetrics,\n      threatSummary: {\n        total: recentThreats.length,\n        by_severity: threatBySeverity,\n        by_type: threatByType\n      },\n      alertSummary: {\n        total: recentAlerts.length,\n        unacknowledged: recentAlerts.filter(a => !a.acknowledged).length,\n        by_severity: alertBySeverity\n      },\n      recentActivity\n    };\n  }\n\n  /**\n   * Acknowledge an alert\n   */\n  acknowledgeAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      this.emit('alert_acknowledged', alert);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Resolve an alert\n   */\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.resolvedAt = Date.now();\n      this.emit('alert_resolved', alert);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get security metrics history\n   */\n  getMetricsHistory(hours: number = 1): SecurityMetrics[] {\n    const cutoff = Date.now() - (hours * 60 * 60 * 1000);\n    return this.metrics.filter(m => m.timestamp > cutoff);\n  }\n\n  /**\n   * Clean up old data\n   */\n  cleanup(): void {\n    const cutoff = Date.now() - (24 * 60 * 60 * 1000); // 24 hours\n\n    this.threats = this.threats.filter(t => t.timestamp > cutoff);\n    this.alerts = this.alerts.filter(a => a.timestamp > cutoff);\n    this.metrics = this.metrics.filter(m => m.timestamp > cutoff);\n\n    console.log('🧹 Security monitor cleanup completed');\n  }\n}"],"version":3}