{"version":3,"names":["cov_1w0722gq02","actualCoverage","useState","useEffect","useRef","useCallback","NeuralMeshService","s","useNeuralMesh","props","b","f","state","setState","connection","agents","isConnected","isInitializing","error","metrics","totalNeurons","totalSynapses","averageActivity","networkEfficiency","wasmAcceleration","serviceRef","reconnectTimeoutRef","config","serverUrl","transport","enableWasm","enableRealtime","debugMode","current","service","on","prev","clearTimeout","setTimeout","initializeService","message","agent","map","a","id","status","total_neurons","total_synapses","activity_level","efficiency_score","isWasmEnabled","results","console","log","initialize","disconnect","createAgent","type","createNeuralAgent","updateAgent","updatedAgent","updateNeuralAgent","removeAgent","agentId","filter","trainMesh","patterns","success","getMeshStatus","clearError","reconnect","neuralAgentCount","length","activeNeuralAgents"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/hooks/useNeuralMesh.ts"],"sourcesContent":["/**\n * React Hook for Neural Mesh Integration\n * \n * Provides React components with access to the neural mesh service,\n * real-time agent updates, and WASM-accelerated computations.\n */\n\nimport { useState, useEffect, useRef, useCallback } from 'react'\nimport { NeuralMeshService, NeuralAgent, NeuralMeshConnection } from '../services/NeuralMeshService'\nimport { Agent } from '../types/agent'\n\nexport interface UseNeuralMeshProps {\n  serverUrl?: string\n  enableWasm?: boolean\n  enableRealtime?: boolean\n  debugMode?: boolean\n}\n\nexport interface NeuralMeshState {\n  connection: NeuralMeshConnection | null\n  agents: NeuralAgent[]\n  isConnected: boolean\n  isInitializing: boolean\n  error: string | null\n  metrics: {\n    totalNeurons: number\n    totalSynapses: number\n    averageActivity: number\n    networkEfficiency: number\n    wasmAcceleration: boolean\n  }\n}\n\nexport const useNeuralMesh = (props: UseNeuralMeshProps = {}) => {\n  const [state, setState] = useState<NeuralMeshState>({\n    connection: null,\n    agents: [],\n    isConnected: false,\n    isInitializing: false,\n    error: null,\n    metrics: {\n      totalNeurons: 0,\n      totalSynapses: 0,\n      averageActivity: 0,\n      networkEfficiency: 0,\n      wasmAcceleration: false\n    }\n  })\n\n  const serviceRef = useRef<NeuralMeshService | null>(null)\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  // Initialize neural mesh service\n  useEffect(() => {\n    const config = {\n      serverUrl: props.serverUrl || 'ws://localhost:3000',\n      transport: 'websocket' as const,\n      enableWasm: props.enableWasm !== false,\n      enableRealtime: props.enableRealtime !== false,\n      debugMode: props.debugMode || false\n    }\n\n    serviceRef.current = new NeuralMeshService(config)\n    \n    // Set up event listeners\n    const service = serviceRef.current\n    \n    service.on('connected', (connection: NeuralMeshConnection) => {\n      setState(prev => ({\n        ...prev,\n        connection,\n        isConnected: true,\n        isInitializing: false,\n        error: null\n      }))\n    })\n\n    service.on('disconnected', (connection: NeuralMeshConnection) => {\n      setState(prev => ({\n        ...prev,\n        connection,\n        isConnected: false,\n        error: 'Disconnected from neural mesh'\n      }))\n      \n      // Attempt to reconnect after 3 seconds\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current)\n      }\n      reconnectTimeoutRef.current = setTimeout(() => {\n        initializeService()\n      }, 3000)\n    })\n\n    service.on('error', (error: Error) => {\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        isInitializing: false\n      }))\n    })\n\n    service.on('agent_created', (agent: NeuralAgent) => {\n      setState(prev => ({\n        ...prev,\n        agents: [...prev.agents, agent]\n      }))\n    })\n\n    service.on('agent_updated', (agent: NeuralAgent) => {\n      setState(prev => ({\n        ...prev,\n        agents: prev.agents.map(a => a.id === agent.id ? agent : a)\n      }))\n    })\n\n    service.on('status_update', (status: any) => {\n      setState(prev => ({\n        ...prev,\n        metrics: {\n          ...prev.metrics,\n          totalNeurons: status.metrics?.total_neurons || 0,\n          totalSynapses: status.metrics?.total_synapses || 0,\n          averageActivity: status.metrics?.activity_level || 0,\n          networkEfficiency: status.metrics?.efficiency_score || 0,\n          wasmAcceleration: service.isWasmEnabled()\n        }\n      }))\n    })\n\n    service.on('mesh_trained', (results: any) => {\n      if (props.debugMode) {\n        console.log('ðŸ§  Neural mesh training completed:', results)\n      }\n    })\n\n    // Initialize the service\n    const initializeService = async () => {\n      setState(prev => ({ ...prev, isInitializing: true, error: null }))\n      \n      try {\n        await service.initialize()\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          error: error.message,\n          isInitializing: false\n        }))\n      }\n    }\n\n    initializeService()\n\n    // Cleanup\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current)\n      }\n      service.disconnect()\n    }\n  }, [props.serverUrl, props.enableWasm, props.enableRealtime, props.debugMode])\n\n  // Create a new neural agent\n  const createAgent = useCallback(async (type: Agent['type'], config?: any): Promise<NeuralAgent | null> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const agent = await serviceRef.current.createNeuralAgent(type, config)\n      return agent\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Update an existing agent\n  const updateAgent = useCallback(async (agent: NeuralAgent): Promise<NeuralAgent | null> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const updatedAgent = await serviceRef.current.updateNeuralAgent(agent)\n      return updatedAgent\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Remove an agent\n  const removeAgent = useCallback((agentId: string): void => {\n    setState(prev => ({\n      ...prev,\n      agents: prev.agents.filter(agent => agent.id !== agentId)\n    }))\n  }, [])\n\n  // Train the neural mesh\n  const trainMesh = useCallback(async (patterns: any[]): Promise<boolean> => {\n    if (!serviceRef.current) return false\n    \n    try {\n      const success = await serviceRef.current.trainMesh(patterns)\n      return success\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return false\n    }\n  }, [])\n\n  // Get mesh status\n  const getMeshStatus = useCallback(async (): Promise<any> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const status = await serviceRef.current.getMeshStatus()\n      return status\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }))\n  }, [])\n\n  // Manually reconnect\n  const reconnect = useCallback(async () => {\n    if (!serviceRef.current) return\n    \n    setState(prev => ({ ...prev, isInitializing: true, error: null }))\n    \n    try {\n      await serviceRef.current.initialize()\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        isInitializing: false\n      }))\n    }\n  }, [])\n\n  return {\n    // State\n    ...state,\n    \n    // Actions\n    createAgent,\n    updateAgent,\n    removeAgent,\n    trainMesh,\n    getMeshStatus,\n    clearError,\n    reconnect,\n    \n    // Computed values\n    neuralAgentCount: state.agents.length,\n    activeNeuralAgents: state.agents.filter(a => a.status === 'active' || a.status === 'processing').length,\n    isWasmEnabled: serviceRef.current?.isWasmEnabled() || false,\n    \n    // Service reference (for advanced usage)\n    service: serviceRef.current\n  }\n}"],"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","ignoreList":[]}