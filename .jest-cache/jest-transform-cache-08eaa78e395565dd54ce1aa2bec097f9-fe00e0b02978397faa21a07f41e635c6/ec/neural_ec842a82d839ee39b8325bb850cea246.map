{"version":3,"names":["cov_1fq7x8l2hi","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","AgentState","exports","NeuralAgentError","Error","constructor","message","code","agentId","details","Object","defineProperty","WASMError","operation","PerformanceError","metric","value","threshold"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/types/neural.ts"],"sourcesContent":["/**\n * Neural Agent Type Definitions for SASI Integration\n * Comprehensive TypeScript interfaces for neural agent system\n */\n\nexport enum AgentState {\n  INITIALIZING = 'initializing',\n  ACTIVE = 'active',\n  LEARNING = 'learning',\n  IDLE = 'idle',\n  TERMINATING = 'terminating',\n  ERROR = 'error'\n}\n\nexport interface NeuralConfiguration {\n  type: 'mlp' | 'lstm' | 'cnn' | 'transformer' | 'custom';\n  architecture: number[]; // Layer sizes [input, hidden1, hidden2, ..., output]\n  activationFunction?: 'relu' | 'sigmoid' | 'tanh' | 'leaky_relu' | 'gelu';\n  learningRate?: number;\n  momentum?: number;\n  regularization?: {\n    type: 'l1' | 'l2' | 'dropout';\n    value: number;\n  };\n  simdOptimized?: boolean;\n  customConfig?: Record<string, any>;\n}\n\nexport interface NeuralAgent {\n  id: string;\n  config: NeuralConfiguration;\n  network: any; // WASM network instance\n  state: AgentState;\n  createdAt: number;\n  lastActive: number;\n  memoryUsage: number; // bytes\n  totalInferences: number;\n  averageInferenceTime: number; // ms\n  learningProgress: number; // 0-1\n  connectionStrength: number; // 0-1\n  metadata?: Record<string, any>;\n}\n\nexport interface PerformanceMetrics {\n  totalAgentsSpawned: number;\n  averageSpawnTime: number; // ms\n  averageInferenceTime: number; // ms\n  memoryUsage: number; // bytes\n  activeLearningTasks: number;\n  systemHealthScore: number; // 0-100\n}\n\nexport interface LearningSession {\n  sessionId: string;\n  agentId: string;\n  startTime: number;\n  duration: number;\n  epochs: number;\n  finalAccuracy: number;\n  dataPoints: number;\n  convergenceEpoch: number;\n}\n\nexport interface NetworkTopology {\n  nodes: Array<{\n    id: string;\n    type: string;\n    state: AgentState;\n    performance: number;\n    memoryUsage: number;\n  }>;\n  connections: Array<[string, string, number]>; // [from, to, strength]\n  totalNodes: number;\n  activeConnections: number;\n  networkHealth: number; // 0-100\n}\n\nexport interface AgentMetrics {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'idle' | 'learning' | 'error';\n  performance: number;\n  memoryUsage: number;\n  lastActivity: number;\n  totalTasks: number;\n  successRate: number;\n  learningProgress: number;\n  connections: string[];\n}\n\nexport interface SwarmStatistics {\n  totalAgents: number;\n  activeAgents: number;\n  averagePerformance: number;\n  totalMemoryUsage: number;\n  totalTasks: number;\n  systemHealth: number;\n  networkTopology: NetworkTopology;\n  learningMetrics: {\n    activeSessions: number;\n    completedSessions: number;\n    averageAccuracy: number;\n    knowledgeTransfers: number;\n  };\n}\n\n// SASI Integration Types\n\nexport interface SASIAgent {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'idle' | 'learning' | 'error';\n  performance: number;\n  memoryUsage: number;\n  lastActivity: number;\n  totalTasks: number;\n  successRate: number;\n  learningProgress: number;\n  connections: string[];\n  neuralAgent?: NeuralAgent; // Optional neural backing\n}\n\nexport interface SASISwarmData {\n  agents: SASIAgent[];\n  statistics: SwarmStatistics;\n  topology: NetworkTopology;\n  isNeuralEnabled: boolean;\n  performanceMetrics: PerformanceMetrics;\n}\n\n// Performance Integration Types\n\nexport interface PerformanceTarget {\n  agentSpawnTime: number; // ms\n  inferenceTime: number; // ms  \n  memoryPerAgent: number; // bytes\n  wasmOperationTime: number; // ms\n}\n\nexport interface PerformanceAlert {\n  type: 'spawn_time' | 'inference_time' | 'memory_usage' | 'system_health';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  value: number;\n  threshold: number;\n  timestamp: number;\n  agentId?: string;\n}\n\nexport interface PerformanceReport {\n  timestamp: number;\n  targets: PerformanceTarget;\n  current: {\n    averageSpawnTime: number;\n    averageInferenceTime: number;\n    memoryUsage: number;\n    wasmOperationTime: number;\n  };\n  alerts: PerformanceAlert[];\n  healthScore: number;\n  recommendations: string[];\n}\n\n// WASM Integration Types\n\nexport interface WASMModule {\n  createNeuralNetwork(config: NeuralConfiguration): Promise<any>;\n  runInference(network: any, inputs: number[]): Promise<number[]>;\n  trainNetwork(network: any, data: TrainingData[], epochs: number): Promise<TrainingResult>;\n  serializeWeights(network: any): Promise<ArrayBuffer>;\n  deserializeWeights(network: any, weights: ArrayBuffer, influence?: number): Promise<void>;\n  getMemoryUsage(): number;\n  enableSIMD: boolean;\n  destroyNetwork?(network: any): void;\n}\n\nexport interface TrainingData {\n  inputs: number[];\n  outputs: number[];\n}\n\nexport interface TrainingResult {\n  accuracy: number;\n  loss: number;\n  convergenceEpoch?: number;\n  trainingTime: number;\n}\n\n// Database Types\n\nexport interface AgentStateRecord {\n  agentId: string;\n  state: AgentState;\n  config: NeuralConfiguration;\n  createdAt: number;\n  lastActive: number;\n  metadata: string; // JSON\n}\n\nexport interface WeightsRecord {\n  agentId: string;\n  weights: ArrayBuffer;\n  savedAt: number;\n  checksum: string;\n}\n\nexport interface LearningRecord {\n  sessionId: string;\n  agentId: string;\n  startTime: number;\n  duration: number;\n  accuracy: number;\n  metadata: string; // JSON\n}\n\n// Event Types\n\nexport interface AgentEventData {\n  agentId: string;\n  timestamp: number;\n  [key: string]: any;\n}\n\nexport interface AgentSpawnedEvent extends AgentEventData {\n  spawnTime: number;\n  config: NeuralConfiguration;\n  memoryUsage: number;\n}\n\nexport interface InferenceCompleteEvent extends AgentEventData {\n  inferenceTime: number;\n  inputSize: number;\n  outputSize: number;\n}\n\nexport interface LearningCompleteEvent extends AgentEventData {\n  sessionId: string;\n  duration: number;\n  finalAccuracy: number;\n  epochs: number;\n}\n\nexport interface AgentTerminatedEvent extends AgentEventData {\n  reason?: string;\n}\n\nexport interface KnowledgeSharedEvent extends AgentEventData {\n  sourceAgentId: string;\n  targetAgentIds: string[];\n}\n\n// Configuration Types\n\nexport interface NeuralSystemConfig {\n  manager: {\n    maxAgents: number;\n    memoryLimitPerAgent: number;\n    inferenceTimeout: number;\n    simdEnabled: boolean;\n    crossLearningEnabled: boolean;\n    persistenceEnabled: boolean;\n    performanceMonitoring: boolean;\n  };\n  performance: {\n    targets: PerformanceTarget;\n    alertThresholds: Record<string, number>;\n    monitoringInterval: number;\n  };\n  wasm: {\n    modulePath: string;\n    simdVariant: boolean;\n    memorySize: number;\n  };\n  database: {\n    enabled: boolean;\n    path: string;\n    backupInterval: number;\n  };\n}\n\n// Utility Types\n\nexport type AgentID = string;\nexport type NetworkID = string;\nexport type SessionID = string;\n\nexport interface PartialNeuralAgent extends Partial<NeuralAgent> {\n  id: string;\n}\n\nexport interface PartialSASIAgent extends Partial<SASIAgent> {\n  id: string;\n  name: string;\n}\n\n// Error Types\n\nexport class NeuralAgentError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public agentId?: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'NeuralAgentError';\n  }\n}\n\nexport class WASMError extends Error {\n  constructor(\n    message: string,\n    public operation: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'WASMError';\n  }\n}\n\nexport class PerformanceError extends Error {\n  constructor(\n    message: string,\n    public metric: string,\n    public value: number,\n    public threshold: number\n  ) {\n    super(message);\n    this.name = 'PerformanceError';\n  }\n}\n\n// Export all types\nexport type {\n  NeuralConfiguration,\n  NeuralAgent,\n  PerformanceMetrics,\n  LearningSession,\n  NetworkTopology,\n  AgentMetrics,\n  SwarmStatistics,\n  SASIAgent,\n  SASISwarmData,\n  PerformanceTarget,\n  PerformanceAlert,\n  PerformanceReport,\n  WASMModule,\n  TrainingData,\n  TrainingResult,\n  AgentStateRecord,\n  WeightsRecord,\n  LearningRecord,\n  AgentEventData,\n  AgentSpawnedEvent,\n  InferenceCompleteEvent,\n  LearningCompleteEvent,\n  AgentTerminatedEvent,\n  KnowledgeSharedEvent,\n  NeuralSystemConfig\n};"],"mappings":"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","ignoreList":[]}