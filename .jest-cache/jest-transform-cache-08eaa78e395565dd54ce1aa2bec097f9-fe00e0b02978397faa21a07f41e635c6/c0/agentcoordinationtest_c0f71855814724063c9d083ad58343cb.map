{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/coordination/agent-coordination.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/coordination/agent-coordination.test.ts"],"sourcesContent":["/**\n * Agent Coordination Tests for Phase 2A\n * Tests multi-agent coordination, swarm behavior, and neural mesh interactions\n */\n\nimport { jest } from '@jest/globals';\nimport { \n  coordinationMocks,\n  coordinationTestUtils,\n  mockCrossSessionCoordination \n} from '../coordination-setup';\nimport { performanceTestUtils, PERFORMANCE_THRESHOLDS } from '../performance-setup';\n\ndescribe('Agent Coordination', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  describe('Swarm Initialization and Management', () => {\n    test('should initialize swarm within performance threshold', async () => {\n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'swarm-initialization',\n        async () => {\n          return await coordinationMocks.swarm.initializeSwarm();\n        }\n      );\n      \n      // Assert swarm initialized quickly\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD * 2); // 100ms\n      \n      // Verify swarm properties\n      expect(result).toBeDefined();\n      expect(result.swarmId).toBeDefined();\n      expect(result.topology).toBe('mesh');\n      expect(result.status).toBe('active');\n    });\n    \n    test('should spawn multiple agents efficiently', async () => {\n      const agentTypes = ['researcher', 'coder', 'analyst', 'tester', 'coordinator'];\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'multi-agent-spawn',\n        async () => {\n          const agents = [];\n          for (const type of agentTypes) {\n            const agent = await coordinationMocks.swarm.spawnAgent(type, [`${type}_capability`]);\n            agents.push(agent);\n          }\n          return agents;\n        }\n      );\n      \n      // Assert all agents spawned within threshold\n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.AGENT_SPAWN_TIME * agentTypes.length);\n      \n      // Verify all agents created\n      expect(result).toHaveLength(agentTypes.length);\n      result.forEach((agent: any, index: number) => {\n        expect(agent.type).toBe(agentTypes[index]);\n        expect(agent.status).toBe('active');\n      });\n    });\n    \n    test('should handle swarm status monitoring efficiently', async () => {\n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'swarm-status',\n        async () => {\n          return coordinationMocks.swarm.getSwarmStatus();\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      \n      expect(result).toBeDefined();\n      expect(result.swarmId).toBeDefined();\n      expect(result.coordinationEfficiency).toBeGreaterThan(0.8); // >80% efficiency\n    });\n  });\n  \n  describe('Task Orchestration', () => {\n    test('should orchestrate tasks with minimal coordination overhead', async () => {\n      const task = 'Analyze neural network performance and optimize parameters';\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'task-orchestration',\n        async () => {\n          return await coordinationMocks.swarm.orchestrateTask(task, 'parallel');\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      \n      expect(result).toBeDefined();\n      expect(result.task).toBe(task);\n      expect(result.strategy).toBe('parallel');\n      expect(result.assignedAgents).toHaveLength(2);\n    });\n    \n    test('should coordinate parallel task execution', async () => {\n      const tasks = [\n        { id: 'task-1', type: 'analysis', priority: 'high' },\n        { id: 'task-2', type: 'optimization', priority: 'medium' },\n        { id: 'task-3', type: 'validation', priority: 'high' }\n      ];\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'parallel-coordination',\n        async () => {\n          return await coordinationMocks.tasks.coordinateParallelTasks(tasks);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD * 2); // 100ms for multiple tasks\n      \n      expect(result).toBeDefined();\n      expect(result.tasks).toHaveLength(tasks.length);\n      expect(result.strategy).toBe('parallel');\n    });\n    \n    test('should handle task dependencies efficiently', async () => {\n      const dependencies = [\n        { id: 'dep-1', status: 'completed', dependsOn: [] },\n        { id: 'dep-2', status: 'pending', dependsOn: ['dep-1'] },\n        { id: 'dep-3', status: 'pending', dependsOn: ['dep-1', 'dep-2'] }\n      ];\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'dependency-resolution',\n        async () => {\n          return await coordinationMocks.tasks.handleTaskDependencies(dependencies);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      \n      expect(result.resolved).toHaveLength(1); // dep-1 is completed\n      expect(result.pending).toHaveLength(2); // dep-2, dep-3 are pending\n      expect(result.resolutionPlan).toBeDefined();\n    });\n  });\n  \n  describe('Agent Communication', () => {\n    test('should broadcast messages efficiently to all agents', async () => {\n      const message = coordinationMocks.communication.createMessage(\n        'TASK_ASSIGNMENT',\n        { task: 'Optimize neural weights', priority: 'high' },\n        'coordinator-agent'\n      );\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'message-broadcast',\n        async () => {\n          await coordinationMocks.communication.broadcastMessage(message);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      expect(coordinationMocks.communication.broadcastMessage).toHaveBeenCalledWith(message);\n    });\n    \n    test('should handle direct agent-to-agent communication', async () => {\n      const message = coordinationMocks.communication.createMessage(\n        'KNOWLEDGE_SHARE',\n        { weights: [0.1, 0.2, 0.3], accuracy: 0.95 },\n        'agent-001',\n        'agent-002'\n      );\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'direct-communication',\n        async () => {\n          await coordinationMocks.communication.sendDirectMessage(message);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      expect(coordinationMocks.communication.sendDirectMessage).toHaveBeenCalledWith(message);\n    });\n    \n    test('should manage communication channels efficiently', async () => {\n      const channels = ['neural-updates', 'task-coordination', 'performance-monitoring'];\n      \n      const { duration } = await performanceTestUtils.measureAsyncOperation(\n        'channel-management',\n        async () => {\n          for (const channel of channels) {\n            await coordinationMocks.communication.subscribeToChannel(channel);\n          }\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      expect(coordinationMocks.communication.subscribeToChannel).toHaveBeenCalledTimes(channels.length);\n    });\n  });\n  \n  describe('Memory Coordination', () => {\n    test('should store and retrieve shared memory efficiently', async () => {\n      const memoryKey = 'swarm-coordination-state';\n      const memoryValue = {\n        activeAgents: ['agent-001', 'agent-002', 'agent-003'],\n        currentTasks: ['task-alpha', 'task-beta'],\n        performanceMetrics: { efficiency: 0.92, throughput: 1250 }\n      };\n      \n      // Test memory storage\n      const { duration: storeDuration } = await performanceTestUtils.measureAsyncOperation(\n        'memory-store',\n        async () => {\n          return await coordinationMocks.memory.storeSharedMemory(memoryKey, memoryValue);\n        }\n      );\n      \n      expect(storeDuration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      \n      // Test memory retrieval\n      const { result, duration: retrieveDuration } = await performanceTestUtils.measureAsyncOperation(\n        'memory-retrieve',\n        async () => {\n          return await coordinationMocks.memory.retrieveSharedMemory(memoryKey);\n        }\n      );\n      \n      expect(retrieveDuration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      expect(result.key).toBe(memoryKey);\n    });\n    \n    test('should synchronize memory across agents efficiently', async () => {\n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'memory-sync',\n        async () => {\n          return await coordinationMocks.memory.syncMemoryAcrossAgents();\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD * 2); // 100ms for sync operation\n      \n      expect(result.syncedAgents).toHaveLength(3);\n      expect(result.success).toBe(true);\n    });\n    \n    test('should monitor memory usage and prevent overconsumption', async () => {\n      const memoryUsage = coordinationMocks.memory.getMemoryUsage();\n      \n      expect(memoryUsage.totalMemory).toBeGreaterThan(0);\n      expect(memoryUsage.usedMemory).toBeLessThan(memoryUsage.totalMemory);\n      \n      // Ensure individual agents don't exceed threshold\n      Object.values(memoryUsage.agentMemoryMap).forEach((agentMemory: any) => {\n        expect(agentMemory).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_USAGE_PER_AGENT);\n      });\n    });\n  });\n  \n  describe('Neural Mesh Coordination', () => {\n    test('should establish neural mesh connections efficiently', async () => {\n      const agents = ['neural-agent-001', 'neural-agent-002', 'neural-agent-003'];\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'mesh-connection',\n        async () => {\n          return await coordinationMocks.neuralMesh.establishMeshConnection(agents);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD * 2); // 100ms for mesh setup\n      \n      expect(result.connectedAgents).toEqual(agents);\n      expect(result.topology).toBe('full_mesh');\n      expect(result.connectionStrength).toBeGreaterThan(0.9); // >90% connection strength\n    });\n    \n    test('should propagate neural updates across mesh efficiently', async () => {\n      const neuralUpdates = [\n        { layer: 0, weights: [0.1, 0.2, 0.3] },\n        { layer: 1, weights: [0.4, 0.5, 0.6] }\n      ];\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'neural-propagation',\n        async () => {\n          return await coordinationMocks.neuralMesh.propagateNeuralUpdates('neural-agent-001', neuralUpdates);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.KNOWLEDGE_SHARING);\n      expect(result.propagationTime).toBeLessThan(50); // <50ms propagation\n      expect(result.targetAgents).toHaveLength(2);\n    });\n    \n    test('should synchronize neural states across agents', async () => {\n      const agents = ['neural-agent-001', 'neural-agent-002', 'neural-agent-003'];\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'neural-sync',\n        async () => {\n          return await coordinationMocks.neuralMesh.synchronizeNeuralStates(agents);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      expect(result.synchronizedAgents).toEqual(agents);\n      expect(result.convergenceScore).toBeGreaterThan(0.8); // >80% convergence\n    });\n    \n    test('should analyze mesh topology for optimization', async () => {\n      const topology = coordinationMocks.neuralMesh.getMeshTopology();\n      \n      expect(topology.nodes).toHaveLength(3);\n      expect(topology.edges).toHaveLength(3); // Full mesh = n*(n-1)/2 = 3\n      expect(topology.density).toBe(1.0); // Fully connected\n      expect(topology.averagePathLength).toBe(1.0); // Direct connections\n      \n      // Verify all connection weights are strong\n      topology.edges.forEach((edge: any) => {\n        expect(edge.weight).toBeGreaterThan(0.8);\n      });\n    });\n  });\n  \n  describe('Performance Coordination', () => {\n    test('should monitor swarm performance in real-time', async () => {\n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'performance-monitoring',\n        async () => {\n          return coordinationMocks.performance.monitorSwarmPerformance();\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      \n      expect(result.averageTaskCompletionTime).toBeLessThan(500); // <500ms average\n      expect(result.coordinationOverhead).toBeLessThan(50); // <50ms overhead\n      expect(result.resourceUtilization).toBeGreaterThan(0.7); // >70% utilization\n      \n      // Verify agent efficiency scores\n      Object.values(result.agentEfficiencyScores).forEach((score: any) => {\n        expect(score).toBeGreaterThan(0.8); // >80% efficiency\n      });\n    });\n    \n    test('should optimize resource allocation dynamically', async () => {\n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'resource-optimization',\n        async () => {\n          return await coordinationMocks.performance.optimizeResourceAllocation();\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD * 4); // 200ms for optimization\n      \n      expect(result.improvements).toHaveLength(2);\n      result.improvements.forEach((improvement: any) => {\n        expect(improvement.type).toBeDefined();\n        expect(improvement.improvement).toContain('% ');\n      });\n    });\n    \n    test('should detect and report coordination bottlenecks', async () => {\n      const bottlenecks = coordinationMocks.performance.detectCoordinationBottlenecks();\n      \n      expect(Array.isArray(bottlenecks)).toBe(true);\n      \n      bottlenecks.forEach((bottleneck: any) => {\n        expect(bottleneck.type).toBeDefined();\n        expect(bottleneck.severity).toMatch(/low|medium|high|critical/);\n        expect(bottleneck.suggestedFix).toBeDefined();\n      });\n    });\n  });\n  \n  describe('Cross-Session Coordination Persistence', () => {\n    test('should save coordination state efficiently', async () => {\n      const swarmId = 'persistent-swarm-001';\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'coordination-state-save',\n        async () => {\n          return await mockCrossSessionCoordination.saveCoordinationState(swarmId);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE);\n      \n      expect(result.swarmId).toBe(swarmId);\n      expect(result.agentStates).toHaveLength(3);\n      expect(result.taskStates).toHaveLength(2);\n      expect(result.memorySnapshot).toBeDefined();\n    });\n    \n    test('should restore coordination state within threshold', async () => {\n      const swarmId = 'persistent-swarm-001';\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'coordination-state-restore',\n        async () => {\n          return await mockCrossSessionCoordination.restoreCoordinationState(swarmId);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.CROSS_SESSION_RESTORE);\n      \n      expect(result.swarmId).toBe(swarmId);\n      expect(result.restoredAgents).toBe(3);\n      expect(result.restoredTasks).toBe(2);\n      expect(result.continuityScore).toBeGreaterThan(0.9); // >90% continuity\n    });\n    \n    test('should validate session continuity', async () => {\n      const beforeState = {\n        agentCount: 3,\n        taskProgress: 0.6,\n        memoryUsage: 150 * 1024 * 1024 // 150MB\n      };\n      \n      const afterState = {\n        agentCount: 3,\n        taskProgress: 0.8,\n        memoryUsage: 155 * 1024 * 1024 // 155MB\n      };\n      \n      const { result, duration } = await performanceTestUtils.measureAsyncOperation(\n        'continuity-validation',\n        async () => {\n          return await mockCrossSessionCoordination.validateSessionContinuity(beforeState, afterState);\n        }\n      );\n      \n      expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COORDINATION_OVERHEAD);\n      \n      expect(result.continuityScore).toBeGreaterThan(0.9);\n      expect(result.preservedData).toContain('agent_states');\n      expect(result.preservedData).toContain('task_progress');\n      expect(result.lostData).toHaveLength(0);\n      expect(result.recoveryTime).toBeLessThan(200); // <200ms recovery\n    });\n  });\n  \n  describe('Coordination Scenarios', () => {\n    test('should handle complex multi-stage workflows', async () => {\n      const scenario = {\n        name: 'Complex Multi-Stage Workflow',\n        taskType: 'research',\n        agentCount: 5,\n        coordinationPattern: 'sequential'\n      };\n      \n      const { result, duration } = await coordinationTestUtils.measureCoordinationPerformance(\n        async () => {\n          return await coordinationTestUtils.simulateCoordinationScenario(scenario);\n        }\n      );\n      \n      coordinationTestUtils.validateCoordinationThresholds(result.performance);\n      \n      expect(result.result.swarm).toBeDefined();\n      expect(result.result.agents).toHaveLength(scenario.agentCount);\n      expect(result.result.task).toBeDefined();\n    });\n    \n    test('should execute all coordination scenarios successfully', async () => {\n      const scenarios = coordinationTestUtils.generateCoordinationScenarios();\n      \n      for (const scenario of scenarios) {\n        const { result } = await coordinationTestUtils.measureCoordinationPerformance(\n          async () => {\n            return await coordinationTestUtils.simulateCoordinationScenario(scenario);\n          }\n        );\n        \n        expect(result.result.swarm).toBeDefined();\n        expect(result.result.agents).toHaveLength(scenario.agentCount);\n        \n        console.log(`✅ Scenario '${scenario.name}' completed successfully`);\n      }\n    });\n  });\n  \n  describe('Error Handling and Resilience', () => {\n    test('should handle agent failures gracefully', async () => {\n      // Simulate agent failure\n      const failingAgent = 'failing-agent-001';\n      coordinationMocks.swarm.terminateAgent = jest.fn().mockResolvedValue(undefined);\n      \n      await coordinationMocks.swarm.terminateAgent(failingAgent);\n      \n      // Verify swarm continues functioning\n      const swarmStatus = coordinationMocks.swarm.getSwarmStatus();\n      expect(swarmStatus.coordinationEfficiency).toBeGreaterThan(0.8); // Still >80% efficient\n    });\n    \n    test('should recover from communication failures', async () => {\n      // Simulate communication failure\n      coordinationMocks.communication.broadcastMessage.mockRejectedValueOnce(\n        new Error('Communication network unavailable')\n      );\n      \n      const message = coordinationMocks.communication.createMessage(\n        'STATUS_UPDATE',\n        { status: 'active' },\n        'test-agent'\n      );\n      \n      // Should handle failure gracefully\n      await expect(\n        coordinationMocks.communication.broadcastMessage(message)\n      ).rejects.toThrow('Communication network unavailable');\n      \n      // Verify system can recover\n      coordinationMocks.communication.broadcastMessage.mockResolvedValueOnce(undefined);\n      await expect(\n        coordinationMocks.communication.broadcastMessage(message)\n      ).resolves.not.toThrow();\n    });\n  });\n});\n\n// Hook for coordination tracking\nafterEach(async () => {\n  await new Promise(resolve => setTimeout(resolve, 10));\n  const hookResult = await coordinationTestUtils.mockHooksExecution(\n    'post-edit',\n    { \n      file: 'agent-coordination.test.ts',\n      operation: 'coordination_test_completion',\n      performance: 'coordination_thresholds_met'\n    }\n  );\n  expect(hookResult.executed).toBe(true);\n});"],"version":3}