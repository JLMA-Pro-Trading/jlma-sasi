e955e365b8abd5f72015586abc941940
/* istanbul ignore next */
function cov_1w22o48ia7() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/components/NeuralMeshVisualization.tsx";
  var hash = "8e88d2dba07383620f1916da45041d41c35e1719";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/components/NeuralMeshVisualization.tsx",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 39
        },
        end: {
          line: 400,
          column: 1
        }
      },
      "1": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "2": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 29
        }
      },
      "3": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 32
        }
      },
      "4": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "5": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 35
        }
      },
      "6": {
        start: {
          line: 18,
          column: 40
        },
        end: {
          line: 18,
          column: 54
        }
      },
      "7": {
        start: {
          line: 19,
          column: 54
        },
        end: {
          line: 19,
          column: 72
        }
      },
      "8": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 21,
          column: 44
        }
      },
      "9": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "10": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "11": {
        start: {
          line: 24,
          column: 25
        },
        end: {
          line: 24,
          column: 54
        }
      },
      "12": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 48
        }
      },
      "13": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 29,
          column: 19
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 19
        }
      },
      "16": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "17": {
        start: {
          line: 31,
          column: 26
        },
        end: {
          line: 31,
          column: 42
        }
      },
      "18": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 32
        }
      },
      "19": {
        start: {
          line: 34,
          column: 26
        },
        end: {
          line: 34,
          column: 43
        }
      },
      "20": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 57
        }
      },
      "21": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 37,
          column: 109
        }
      },
      "22": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 44
        }
      },
      "23": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "24": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "25": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 68
        }
      },
      "26": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 46
        }
      },
      "27": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 61
        }
      },
      "28": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 51
        }
      },
      "29": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 37
        }
      },
      "30": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 43
        }
      },
      "31": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 39
        }
      },
      "32": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 33
        }
      },
      "33": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 40
        }
      },
      "34": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 56
        }
      },
      "35": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 33
        }
      },
      "36": {
        start: {
          line: 64,
          column: 33
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "37": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 66,
          column: 27
        }
      },
      "38": {
        start: {
          line: 66,
          column: 20
        },
        end: {
          line: 66,
          column: 27
        }
      },
      "39": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 71
        }
      },
      "40": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 48
        }
      },
      "41": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 72
        }
      },
      "42": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 60
        }
      },
      "43": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "44": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 67
        }
      },
      "45": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 26
        }
      },
      "46": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 85
        }
      },
      "47": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 41
        }
      },
      "48": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 89,
          column: 36
        }
      },
      "49": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 85,
          column: 19
        }
      },
      "50": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 19
        }
      },
      "51": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 28
        }
      },
      "52": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "53": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 38
        }
      },
      "54": {
        start: {
          line: 91,
          column: 26
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "55": {
        start: {
          line: 93,
          column: 29
        },
        end: {
          line: 93,
          column: 66
        }
      },
      "56": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 32
        }
      },
      "57": {
        start: {
          line: 96,
          column: 33
        },
        end: {
          line: 96,
          column: 74
        }
      },
      "58": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 51
        }
      },
      "59": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 43
        }
      },
      "60": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 53
        }
      },
      "61": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 54
        }
      },
      "62": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 36
        }
      },
      "63": {
        start: {
          line: 103,
          column: 27
        },
        end: {
          line: 103,
          column: 67
        }
      },
      "64": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 42
        }
      },
      "65": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 30
        }
      },
      "66": {
        start: {
          line: 108,
          column: 33
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "67": {
        start: {
          line: 110,
          column: 27
        },
        end: {
          line: 110,
          column: 76
        }
      },
      "68": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 36
        }
      },
      "69": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 30
        }
      },
      "70": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "71": {
        start: {
          line: 114,
          column: 25
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "72": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 115,
          column: 88
        }
      },
      "73": {
        start: {
          line: 116,
          column: 34
        },
        end: {
          line: 120,
          column: 14
        }
      },
      "74": {
        start: {
          line: 121,
          column: 30
        },
        end: {
          line: 121,
          column: 74
        }
      },
      "75": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "76": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 45
        }
      },
      "77": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 33
        }
      },
      "78": {
        start: {
          line: 128,
          column: 30
        },
        end: {
          line: 156,
          column: 5
        }
      },
      "79": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 130,
          column: 19
        }
      },
      "80": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 19
        }
      },
      "81": {
        start: {
          line: 131,
          column: 22
        },
        end: {
          line: 131,
          column: 38
        }
      },
      "82": {
        start: {
          line: 132,
          column: 29
        },
        end: {
          line: 132,
          column: 51
        }
      },
      "83": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "84": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "85": {
        start: {
          line: 135,
          column: 44
        },
        end: {
          line: 135,
          column: 86
        }
      },
      "86": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 40
        }
      },
      "87": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 69
        }
      },
      "88": {
        start: {
          line: 137,
          column: 49
        },
        end: {
          line: 137,
          column: 67
        }
      },
      "89": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 44
        }
      },
      "90": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "91": {
        start: {
          line: 143,
          column: 27
        },
        end: {
          line: 143,
          column: 58
        }
      },
      "92": {
        start: {
          line: 144,
          column: 23
        },
        end: {
          line: 144,
          column: 47
        }
      },
      "93": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "94": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 47
        }
      },
      "95": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 47
        }
      },
      "96": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 37
        }
      },
      "97": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 46
        }
      },
      "98": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 188,
          column: 5
        }
      },
      "99": {
        start: {
          line: 159,
          column: 28
        },
        end: {
          line: 159,
          column: 50
        }
      },
      "100": {
        start: {
          line: 161,
          column: 25
        },
        end: {
          line: 161,
          column: 58
        }
      },
      "101": {
        start: {
          line: 162,
          column: 21
        },
        end: {
          line: 162,
          column: 66
        }
      },
      "102": {
        start: {
          line: 164,
          column: 25
        },
        end: {
          line: 164,
          column: 68
        }
      },
      "103": {
        start: {
          line: 166,
          column: 25
        },
        end: {
          line: 171,
          column: 10
        }
      },
      "104": {
        start: {
          line: 172,
          column: 21
        },
        end: {
          line: 172,
          column: 55
        }
      },
      "105": {
        start: {
          line: 174,
          column: 22
        },
        end: {
          line: 174,
          column: 49
        }
      },
      "106": {
        start: {
          line: 175,
          column: 23
        },
        end: {
          line: 175,
          column: 74
        }
      },
      "107": {
        start: {
          line: 176,
          column: 25
        },
        end: {
          line: 176,
          column: 145
        }
      },
      "108": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 37
        }
      },
      "109": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 54
        }
      },
      "110": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 187,
          column: 10
        }
      },
      "111": {
        start: {
          line: 190,
          column: 29
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "112": {
        start: {
          line: 191,
          column: 28
        },
        end: {
          line: 191,
          column: 50
        }
      },
      "113": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 47
        }
      },
      "114": {
        start: {
          line: 195,
          column: 25
        },
        end: {
          line: 195,
          column: 43
        }
      },
      "115": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 84
        }
      },
      "116": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 62
        }
      },
      "117": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 87
        }
      },
      "118": {
        start: {
          line: 200,
          column: 22
        },
        end: {
          line: 200,
          column: 54
        }
      },
      "119": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 41
        }
      },
      "120": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "121": {
        start: {
          line: 204,
          column: 35
        },
        end: {
          line: 204,
          column: 92
        }
      },
      "122": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 67
        }
      },
      "123": {
        start: {
          line: 209,
          column: 30
        },
        end: {
          line: 234,
          column: 5
        }
      },
      "124": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 211,
          column: 19
        }
      },
      "125": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 19
        }
      },
      "126": {
        start: {
          line: 212,
          column: 22
        },
        end: {
          line: 212,
          column: 38
        }
      },
      "127": {
        start: {
          line: 213,
          column: 35
        },
        end: {
          line: 213,
          column: 57
        }
      },
      "128": {
        start: {
          line: 214,
          column: 22
        },
        end: {
          line: 214,
          column: 44
        }
      },
      "129": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 218,
          column: 11
        }
      },
      "130": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 36
        }
      },
      "131": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 35
        }
      },
      "132": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 233,
          column: 11
        }
      },
      "133": {
        start: {
          line: 222,
          column: 31
        },
        end: {
          line: 222,
          column: 73
        }
      },
      "134": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 224,
          column: 23
        }
      },
      "135": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 23
        }
      },
      "136": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 232,
          column: 15
        }
      },
      "137": {
        start: {
          line: 226,
          column: 35
        },
        end: {
          line: 226,
          column: 54
        }
      },
      "138": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 228,
          column: 27
        }
      },
      "139": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 27
        }
      },
      "140": {
        start: {
          line: 229,
          column: 35
        },
        end: {
          line: 229,
          column: 83
        }
      },
      "141": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 66
        }
      },
      "142": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 43
        }
      },
      "143": {
        start: {
          line: 236,
          column: 37
        },
        end: {
          line: 255,
          column: 5
        }
      },
      "144": {
        start: {
          line: 237,
          column: 25
        },
        end: {
          line: 240,
          column: 10
        }
      },
      "145": {
        start: {
          line: 241,
          column: 25
        },
        end: {
          line: 245,
          column: 10
        }
      },
      "146": {
        start: {
          line: 246,
          column: 21
        },
        end: {
          line: 246,
          column: 55
        }
      },
      "147": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 254,
          column: 10
        }
      },
      "148": {
        start: {
          line: 257,
          column: 40
        },
        end: {
          line: 293,
          column: 5
        }
      },
      "149": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 259,
          column: 19
        }
      },
      "150": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 19
        }
      },
      "151": {
        start: {
          line: 260,
          column: 22
        },
        end: {
          line: 260,
          column: 38
        }
      },
      "152": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "153": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 50
        }
      },
      "154": {
        start: {
          line: 266,
          column: 26
        },
        end: {
          line: 266,
          column: 28
        }
      },
      "155": {
        start: {
          line: 267,
          column: 23
        },
        end: {
          line: 267,
          column: 25
        }
      },
      "156": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 279,
          column: 11
        }
      },
      "157": {
        start: {
          line: 269,
          column: 24
        },
        end: {
          line: 269,
          column: 38
        }
      },
      "158": {
        start: {
          line: 270,
          column: 29
        },
        end: {
          line: 270,
          column: 62
        }
      },
      "159": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "160": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 277,
          column: 17
        }
      },
      "161": {
        start: {
          line: 273,
          column: 29
        },
        end: {
          line: 273,
          column: 30
        }
      },
      "162": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 143
        }
      },
      "163": {
        start: {
          line: 275,
          column: 34
        },
        end: {
          line: 275,
          column: 78
        }
      },
      "164": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 276,
          column: 59
        }
      },
      "165": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "166": {
        start: {
          line: 281,
          column: 29
        },
        end: {
          line: 281,
          column: 55
        }
      },
      "167": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 94
        }
      },
      "168": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 88
        }
      },
      "169": {
        start: {
          line: 284,
          column: 29
        },
        end: {
          line: 289,
          column: 14
        }
      },
      "170": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 75
        }
      },
      "171": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 47
        }
      },
      "172": {
        start: {
          line: 295,
          column: 34
        },
        end: {
          line: 315,
          column: 5
        }
      },
      "173": {
        start: {
          line: 296,
          column: 28
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "174": {
        start: {
          line: 297,
          column: 25
        },
        end: {
          line: 297,
          column: 54
        }
      },
      "175": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 84
        }
      },
      "176": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 85
        }
      },
      "177": {
        start: {
          line: 301,
          column: 29
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "178": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 303,
          column: 23
        }
      },
      "179": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 23
        }
      },
      "180": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 73
        }
      },
      "181": {
        start: {
          line: 305,
          column: 31
        },
        end: {
          line: 305,
          column: 90
        }
      },
      "182": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "183": {
        start: {
          line: 307,
          column: 36
        },
        end: {
          line: 307,
          column: 56
        }
      },
      "184": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "185": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 63
        }
      },
      "186": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 57
        }
      },
      "187": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 54
        }
      },
      "188": {
        start: {
          line: 317,
          column: 31
        },
        end: {
          line: 328,
          column: 5
        }
      },
      "189": {
        start: {
          line: 318,
          column: 24
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "190": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 320,
          column: 23
        }
      },
      "191": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 23
        }
      },
      "192": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 37
        }
      },
      "193": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 76
        }
      },
      "194": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 68
        }
      },
      "195": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 18
        }
      },
      "196": {
        start: {
          line: 330,
          column: 35
        },
        end: {
          line: 347,
          column: 5
        }
      },
      "197": {
        start: {
          line: 331,
          column: 21
        },
        end: {
          line: 331,
          column: 39
        }
      },
      "198": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 341,
          column: 11
        }
      },
      "199": {
        start: {
          line: 335,
          column: 28
        },
        end: {
          line: 335,
          column: 93
        }
      },
      "200": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 47
        }
      },
      "201": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 340,
          column: 13
        }
      },
      "202": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 45
        }
      },
      "203": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 346,
          column: 11
        }
      },
      "204": {
        start: {
          line: 344,
          column: 29
        },
        end: {
          line: 344,
          column: 53
        }
      },
      "205": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 62
        }
      },
      "206": {
        start: {
          line: 349,
          column: 24
        },
        end: {
          line: 358,
          column: 5
        }
      },
      "207": {
        start: {
          line: 350,
          column: 22
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "208": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 34
        }
      },
      "209": {
        start: {
          line: 359,
          column: 28
        },
        end: {
          line: 372,
          column: 5
        }
      },
      "210": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "211": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 65
        }
      },
      "212": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 62
        }
      },
      "213": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 58
        }
      },
      "214": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 368,
          column: 63
        }
      },
      "215": {
        start: {
          line: 370,
          column: 16
        },
        end: {
          line: 370,
          column: 60
        }
      },
      "216": {
        start: {
          line: 373,
          column: 25
        },
        end: {
          line: 384,
          column: 5
        }
      },
      "217": {
        start: {
          line: 374,
          column: 27
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "218": {
        start: {
          line: 381,
          column: 26
        },
        end: {
          line: 381,
          column: 71
        }
      },
      "219": {
        start: {
          line: 382,
          column: 30
        },
        end: {
          line: 382,
          column: 55
        }
      },
      "220": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 61
        }
      },
      "221": {
        start: {
          line: 386,
          column: 20
        },
        end: {
          line: 397,
          column: 5
        }
      },
      "222": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 389,
          column: 9
        }
      },
      "223": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 57
        }
      },
      "224": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "225": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 73
        }
      },
      "226": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 42
        }
      },
      "227": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 39
        }
      },
      "228": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 396,
          column: 39
        }
      },
      "229": {
        start: {
          line: 399,
          column: 4
        },
        end: {
          line: 399,
          column: 1470
        }
      },
      "230": {
        start: {
          line: 399,
          column: 771
        },
        end: {
          line: 399,
          column: 801
        }
      },
      "231": {
        start: {
          line: 399,
          column: 925
        },
        end: {
          line: 399,
          column: 957
        }
      },
      "232": {
        start: {
          line: 399,
          column: 1085
        },
        end: {
          line: 399,
          column: 1120
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 12,
            column: 40
          }
        },
        loc: {
          start: {
            line: 12,
            column: 106
          },
          end: {
            line: 400,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 14
          },
          end: {
            line: 27,
            column: 15
          }
        },
        loc: {
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 33
          },
          end: {
            line: 64,
            column: 34
          }
        },
        loc: {
          start: {
            line: 64,
            column: 39
          },
          end: {
            line: 70,
            column: 13
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 72,
            column: 19
          },
          end: {
            line: 72,
            column: 20
          }
        },
        loc: {
          start: {
            line: 72,
            column: 25
          },
          end: {
            line: 75,
            column: 13
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 83,
            column: 14
          },
          end: {
            line: 83,
            column: 15
          }
        },
        loc: {
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 83
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 91,
            column: 26
          },
          end: {
            line: 91,
            column: 27
          }
        },
        loc: {
          start: {
            line: 91,
            column: 37
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 91
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 108,
            column: 33
          },
          end: {
            line: 108,
            column: 34
          }
        },
        loc: {
          start: {
            line: 108,
            column: 44
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 108
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 128,
            column: 30
          },
          end: {
            line: 128,
            column: 31
          }
        },
        loc: {
          start: {
            line: 128,
            column: 36
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 128
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 135,
            column: 35
          },
          end: {
            line: 135,
            column: 36
          }
        },
        loc: {
          start: {
            line: 135,
            column: 44
          },
          end: {
            line: 135,
            column: 86
          }
        },
        line: 135
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 137,
            column: 41
          },
          end: {
            line: 137,
            column: 42
          }
        },
        loc: {
          start: {
            line: 137,
            column: 49
          },
          end: {
            line: 137,
            column: 67
          }
        },
        line: 137
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 142,
            column: 29
          },
          end: {
            line: 142,
            column: 30
          }
        },
        loc: {
          start: {
            line: 142,
            column: 38
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 142
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 158,
            column: 29
          },
          end: {
            line: 158,
            column: 30
          }
        },
        loc: {
          start: {
            line: 158,
            column: 40
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 158
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 190,
            column: 30
          }
        },
        loc: {
          start: {
            line: 190,
            column: 46
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 190
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 209,
            column: 30
          },
          end: {
            line: 209,
            column: 31
          }
        },
        loc: {
          start: {
            line: 209,
            column: 36
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 209
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 216,
            column: 35
          },
          end: {
            line: 216,
            column: 36
          }
        },
        loc: {
          start: {
            line: 216,
            column: 43
          },
          end: {
            line: 218,
            column: 9
          }
        },
        line: 216
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 221,
            column: 29
          },
          end: {
            line: 221,
            column: 30
          }
        },
        loc: {
          start: {
            line: 221,
            column: 38
          },
          end: {
            line: 233,
            column: 9
          }
        },
        line: 221
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 225,
            column: 55
          },
          end: {
            line: 225,
            column: 56
          }
        },
        loc: {
          start: {
            line: 225,
            column: 67
          },
          end: {
            line: 232,
            column: 13
          }
        },
        line: 225
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 236,
            column: 37
          },
          end: {
            line: 236,
            column: 38
          }
        },
        loc: {
          start: {
            line: 236,
            column: 57
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 236
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 257,
            column: 40
          },
          end: {
            line: 257,
            column: 41
          }
        },
        loc: {
          start: {
            line: 257,
            column: 46
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 257
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 268,
            column: 29
          },
          end: {
            line: 268,
            column: 30
          }
        },
        loc: {
          start: {
            line: 268,
            column: 38
          },
          end: {
            line: 279,
            column: 9
          }
        },
        line: 268
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 295,
            column: 34
          },
          end: {
            line: 295,
            column: 35
          }
        },
        loc: {
          start: {
            line: 295,
            column: 60
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 295
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 296,
            column: 28
          },
          end: {
            line: 296,
            column: 29
          }
        },
        loc: {
          start: {
            line: 296,
            column: 39
          },
          end: {
            line: 300,
            column: 9
          }
        },
        line: 296
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 301,
            column: 29
          },
          end: {
            line: 301,
            column: 30
          }
        },
        loc: {
          start: {
            line: 301,
            column: 40
          },
          end: {
            line: 312,
            column: 9
          }
        },
        line: 301
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 317,
            column: 31
          },
          end: {
            line: 317,
            column: 32
          }
        },
        loc: {
          start: {
            line: 317,
            column: 37
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 317
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 318,
            column: 24
          },
          end: {
            line: 318,
            column: 25
          }
        },
        loc: {
          start: {
            line: 318,
            column: 30
          },
          end: {
            line: 326,
            column: 9
          }
        },
        line: 318
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 330,
            column: 35
          },
          end: {
            line: 330,
            column: 36
          }
        },
        loc: {
          start: {
            line: 330,
            column: 41
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 330
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 333,
            column: 39
          },
          end: {
            line: 333,
            column: 40
          }
        },
        loc: {
          start: {
            line: 333,
            column: 47
          },
          end: {
            line: 341,
            column: 9
          }
        },
        line: 333
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 343,
            column: 39
          },
          end: {
            line: 343,
            column: 40
          }
        },
        loc: {
          start: {
            line: 343,
            column: 53
          },
          end: {
            line: 346,
            column: 9
          }
        },
        line: 343
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 349,
            column: 24
          },
          end: {
            line: 349,
            column: 25
          }
        },
        loc: {
          start: {
            line: 349,
            column: 34
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 349
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 359,
            column: 28
          },
          end: {
            line: 359,
            column: 29
          }
        },
        loc: {
          start: {
            line: 359,
            column: 44
          },
          end: {
            line: 372,
            column: 5
          }
        },
        line: 359
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 373,
            column: 25
          },
          end: {
            line: 373,
            column: 26
          }
        },
        loc: {
          start: {
            line: 373,
            column: 45
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 373
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 386,
            column: 20
          },
          end: {
            line: 386,
            column: 21
          }
        },
        loc: {
          start: {
            line: 386,
            column: 26
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 386
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 399,
            column: 765
          },
          end: {
            line: 399,
            column: 766
          }
        },
        loc: {
          start: {
            line: 399,
            column: 771
          },
          end: {
            line: 399,
            column: 801
          }
        },
        line: 399
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 399,
            column: 919
          },
          end: {
            line: 399,
            column: 920
          }
        },
        loc: {
          start: {
            line: 399,
            column: 925
          },
          end: {
            line: 399,
            column: 957
          }
        },
        line: 399
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 399,
            column: 1079
          },
          end: {
            line: 399,
            column: 1080
          }
        },
        loc: {
          start: {
            line: 399,
            column: 1085
          },
          end: {
            line: 399,
            column: 1120
          }
        },
        line: 399
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 29,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 29,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 66,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 66,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 65,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 65,
            column: 26
          }
        }, {
          start: {
            line: 65,
            column: 30
          },
          end: {
            line: 65,
            column: 37
          }
        }, {
          start: {
            line: 65,
            column: 41
          },
          end: {
            line: 65,
            column: 50
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 85,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 85,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "4": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 29
          }
        }, {
          start: {
            line: 84,
            column: 33
          },
          end: {
            line: 84,
            column: 46
          }
        }],
        line: 84
      },
      "5": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 130,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 130,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "6": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "7": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: 151,
            column: 17
          },
          end: {
            line: 154,
            column: 13
          }
        }],
        line: 145
      },
      "8": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "9": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 33
          }
        }, {
          start: {
            line: 203,
            column: 37
          },
          end: {
            line: 203,
            column: 88
          }
        }],
        line: 203
      },
      "10": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 211,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 211,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "11": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 224,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 224,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "12": {
        loc: {
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 228,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 228,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "13": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 259,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 259,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "14": {
        loc: {
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 258,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 258,
            column: 29
          }
        }, {
          start: {
            line: 258,
            column: 33
          },
          end: {
            line: 258,
            column: 65
          }
        }],
        line: 258
      },
      "15": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "16": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "17": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "18": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 303,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 303,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "19": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "20": {
        loc: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "21": {
        loc: {
          start: {
            line: 308,
            column: 20
          },
          end: {
            line: 308,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 308,
            column: 20
          },
          end: {
            line: 308,
            column: 40
          }
        }, {
          start: {
            line: 308,
            column: 44
          },
          end: {
            line: 308,
            column: 70
          }
        }],
        line: 308
      },
      "22": {
        loc: {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 320,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 320,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "23": {
        loc: {
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 319,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 319,
            column: 36
          }
        }, {
          start: {
            line: 319,
            column: 40
          },
          end: {
            line: 319,
            column: 57
          }
        }, {
          start: {
            line: 319,
            column: 61
          },
          end: {
            line: 319,
            column: 79
          }
        }],
        line: 319
      },
      "24": {
        loc: {
          start: {
            line: 338,
            column: 12
          },
          end: {
            line: 340,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 12
          },
          end: {
            line: 340,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "25": {
        loc: {
          start: {
            line: 357,
            column: 15
          },
          end: {
            line: 357,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 15
          },
          end: {
            line: 357,
            column: 26
          }
        }, {
          start: {
            line: 357,
            column: 30
          },
          end: {
            line: 357,
            column: 33
          }
        }],
        line: 357
      },
      "26": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 361,
            column: 12
          },
          end: {
            line: 362,
            column: 65
          }
        }, {
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 364,
            column: 62
          }
        }, {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 366,
            column: 58
          }
        }, {
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 368,
            column: 63
          }
        }, {
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 370,
            column: 60
          }
        }],
        line: 360
      },
      "27": {
        loc: {
          start: {
            line: 381,
            column: 42
          },
          end: {
            line: 381,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 42
          },
          end: {
            line: 381,
            column: 58
          }
        }, {
          start: {
            line: 381,
            column: 62
          },
          end: {
            line: 381,
            column: 70
          }
        }],
        line: 381
      },
      "28": {
        loc: {
          start: {
            line: 387,
            column: 8
          },
          end: {
            line: 389,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 8
          },
          end: {
            line: 389,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      },
      "29": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 393,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 393,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "30": {
        loc: {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 390,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 390,
            column: 31
          }
        }, {
          start: {
            line: 390,
            column: 35
          },
          end: {
            line: 390,
            column: 51
          }
        }],
        line: 390
      },
      "31": {
        loc: {
          start: {
            line: 399,
            column: 523
          },
          end: {
            line: 399,
            column: 614
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 399,
            column: 523
          },
          end: {
            line: 399,
            column: 551
          }
        }, {
          start: {
            line: 399,
            column: 555
          },
          end: {
            line: 399,
            column: 614
          }
        }],
        line: 399
      },
      "32": {
        loc: {
          start: {
            line: 399,
            column: 708
          },
          end: {
            line: 399,
            column: 754
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 399,
            column: 741
          },
          end: {
            line: 399,
            column: 749
          }
        }, {
          start: {
            line: 399,
            column: 752
          },
          end: {
            line: 399,
            column: 754
          }
        }],
        line: 399
      },
      "33": {
        loc: {
          start: {
            line: 399,
            column: 860
          },
          end: {
            line: 399,
            column: 908
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 399,
            column: 895
          },
          end: {
            line: 399,
            column: 903
          }
        }, {
          start: {
            line: 399,
            column: 906
          },
          end: {
            line: 399,
            column: 908
          }
        }],
        line: 399
      },
      "34": {
        loc: {
          start: {
            line: 399,
            column: 1017
          },
          end: {
            line: 399,
            column: 1068
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 399,
            column: 1055
          },
          end: {
            line: 399,
            column: 1063
          }
        }, {
          start: {
            line: 399,
            column: 1066
          },
          end: {
            line: 399,
            column: 1068
          }
        }],
        line: 399
      },
      "35": {
        loc: {
          start: {
            line: 399,
            column: 1235
          },
          end: {
            line: 399,
            column: 1461
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 399,
            column: 1235
          },
          end: {
            line: 399,
            column: 1245
          }
        }, {
          start: {
            line: 399,
            column: 1250
          },
          end: {
            line: 399,
            column: 1460
          }
        }],
        line: 399
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/components/NeuralMeshVisualization.tsx",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/components/NeuralMeshVisualization.tsx"],
      sourcesContent: ["/**\n * Neural Mesh Visualization Component\n * \n * Enhanced Three.js visualization that displays real-time neural mesh data\n * from the Synaptic MCP server, including neural activity, synaptic connections,\n * and WASM performance metrics.\n */\n\nimport React, { useRef, useEffect, useState, useCallback } from 'react'\nimport * as THREE from 'three'\nimport { Agent } from '../types/agent'\nimport { NeuralAgent } from '../services/NeuralMeshService'\nimport '../styles/SwarmVisualization.css'\n\ninterface NeuralMeshVisualizationProps {\n  agents: Agent[]\n  neuralAgents: NeuralAgent[]\n  isActive: boolean\n  meshMetrics: {\n    totalNeurons: number\n    totalSynapses: number\n    averageActivity: number\n    networkEfficiency: number\n    wasmAcceleration: boolean\n  }\n  onAgentClick?: (agent: Agent) => void\n}\n\ninterface NeuralNode {\n  id: string\n  position: THREE.Vector3\n  mesh: THREE.Mesh\n  connections: THREE.Line[]\n  activity: number\n  type: 'sensory' | 'motor' | 'inter' | 'pyramidal' | 'purkinje'\n  layer: number\n}\n\ninterface SynapticConnection {\n  id: string\n  source: string\n  target: string\n  line: THREE.Line\n  weight: number\n  activity: number\n}\n\nexport const NeuralMeshVisualization: React.FC<NeuralMeshVisualizationProps> = ({\n  agents,\n  neuralAgents,\n  isActive,\n  meshMetrics,\n  onAgentClick\n}) => {\n  const mountRef = useRef<HTMLDivElement>(null)\n  const sceneRef = useRef<THREE.Scene>()\n  const rendererRef = useRef<THREE.WebGLRenderer>()\n  const cameraRef = useRef<THREE.PerspectiveCamera>()\n  const animationIdRef = useRef<number>()\n  const [webglError, setWebglError] = useState<string | null>(null)\n  const [visualizationMode, setVisualizationMode] = useState<'neural' | 'activity' | 'connections'>('neural')\n  \n  // Neural mesh state\n  const neuralNodesRef = useRef<Map<string, NeuralNode>>(new Map())\n  const connectionsRef = useRef<Map<string, SynapticConnection>>(new Map())\n  const activityWaveRef = useRef<THREE.Points>()\n  const raycasterRef = useRef<THREE.Raycaster>(new THREE.Raycaster())\n  const mouseRef = useRef<THREE.Vector2>(new THREE.Vector2())\n\n  // Initialize Three.js scene with neural mesh setup\n  useEffect(() => {\n    if (!mountRef.current) return\n\n    try {\n      const mount = mountRef.current\n      setWebglError(null)\n\n      // Create scene\n      const scene = new THREE.Scene()\n      scene.background = new THREE.Color(0x000510)\n      \n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, mount.clientWidth / mount.clientHeight, 0.1, 1000)\n      camera.position.set(0, 50, 100)\n      camera.lookAt(0, 0, 0)\n      \n      // Create renderer\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true,\n        preserveDrawingBuffer: false,\n        powerPreference: 'high-performance'\n      })\n      renderer.setSize(mount.clientWidth, mount.clientHeight)\n      renderer.shadowMap.enabled = true\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap\n      \n      mount.appendChild(renderer.domElement)\n      \n      // Store references\n      sceneRef.current = scene\n      rendererRef.current = renderer\n      cameraRef.current = camera\n      \n      // Add lighting\n      setupLighting(scene)\n      \n      // Create neural mesh base structure\n      createNeuralMeshBase(scene)\n      \n      // Add mouse interaction\n      setupMouseInteraction(mount, camera, scene)\n      \n      // Start animation loop\n      startAnimationLoop()\n      \n      // Handle window resize\n      const handleResize = () => {\n        if (!mount || !camera || !renderer) return\n        \n        camera.aspect = mount.clientWidth / mount.clientHeight\n        camera.updateProjectionMatrix()\n        renderer.setSize(mount.clientWidth, mount.clientHeight)\n      }\n      \n      window.addEventListener('resize', handleResize)\n      \n      return () => {\n        window.removeEventListener('resize', handleResize)\n        cleanup()\n      }\n    } catch (error) {\n      console.error('Neural mesh visualization initialization failed:', error)\n      setWebglError(error.message)\n    }\n  }, [])\n\n  // Update neural agents visualization\n  useEffect(() => {\n    if (!sceneRef.current || !neuralAgents) return\n    \n    updateNeuralNodes()\n    updateConnections()\n    updateActivityVisualization()\n  }, [neuralAgents, meshMetrics])\n\n  // Setup lighting for neural mesh\n  const setupLighting = (scene: THREE.Scene) => {\n    // Ambient light\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.3)\n    scene.add(ambientLight)\n    \n    // Main directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8)\n    directionalLight.position.set(50, 100, 50)\n    directionalLight.castShadow = true\n    directionalLight.shadow.mapSize.width = 2048\n    directionalLight.shadow.mapSize.height = 2048\n    scene.add(directionalLight)\n    \n    // Neural activity glow light\n    const neuralGlow = new THREE.PointLight(0x00ffff, 0.5, 200)\n    neuralGlow.position.set(0, 20, 0)\n    scene.add(neuralGlow)\n  }\n\n  // Create base neural mesh structure\n  const createNeuralMeshBase = (scene: THREE.Scene) => {\n    // Create neural mesh grid\n    const gridHelper = new THREE.GridHelper(200, 20, 0x0088ff, 0x004488)\n    gridHelper.position.y = -10\n    scene.add(gridHelper)\n    \n    // Create layer indicators\n    for (let layer = 1; layer <= 6; layer++) {\n      const layerGeometry = new THREE.RingGeometry(layer * 15, layer * 15 + 1, 32)\n      const layerMaterial = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(layer / 6, 0.7, 0.3),\n        transparent: true,\n        opacity: 0.2\n      })\n      const layerRing = new THREE.Mesh(layerGeometry, layerMaterial)\n      layerRing.rotation.x = -Math.PI / 2\n      layerRing.position.y = layer * 5\n      scene.add(layerRing)\n    }\n  }\n\n  // Update neural nodes based on neural agents\n  const updateNeuralNodes = () => {\n    if (!sceneRef.current) return\n    \n    const scene = sceneRef.current\n    const currentNodes = neuralNodesRef.current\n    \n    // Remove nodes that no longer exist\n    for (const [nodeId, node] of currentNodes.entries()) {\n      if (!neuralAgents.find(agent => agent.neuralProperties.neuronId === nodeId)) {\n        scene.remove(node.mesh)\n        node.connections.forEach(conn => scene.remove(conn))\n        currentNodes.delete(nodeId)\n      }\n    }\n    \n    // Add or update nodes\n    neuralAgents.forEach(agent => {\n      const nodeId = agent.neuralProperties.neuronId\n      let node = currentNodes.get(nodeId)\n      \n      if (!node) {\n        // Create new neural node\n        node = createNeuralNode(agent)\n        currentNodes.set(nodeId, node)\n        scene.add(node.mesh)\n      } else {\n        // Update existing node\n        updateNeuralNode(node, agent)\n      }\n    })\n  }\n\n  // Create a neural node mesh\n  const createNeuralNode = (agent: NeuralAgent): NeuralNode => {\n    const neuralProps = agent.neuralProperties\n    \n    // Determine node size based on type and activity\n    const baseSize = getNodeSize(neuralProps.nodeType)\n    const size = baseSize * (1 + neuralProps.activation * 0.5)\n    \n    // Create node geometry\n    const geometry = getNodeGeometry(neuralProps.nodeType, size)\n    \n    // Create node material\n    const material = new THREE.MeshPhongMaterial({\n      color: getNodeColor(neuralProps.nodeType, neuralProps.activation),\n      transparent: true,\n      opacity: 0.8 + neuralProps.activation * 0.2,\n      emissive: new THREE.Color().setHSL(neuralProps.activation, 0.5, 0.1)\n    })\n    \n    const mesh = new THREE.Mesh(geometry, material)\n    \n    // Position based on layer and random spread\n    const angle = Math.random() * Math.PI * 2\n    const radius = neuralProps.layer * 15 + (Math.random() - 0.5) * 10\n    const position = new THREE.Vector3(\n      Math.cos(angle) * radius,\n      neuralProps.layer * 5 + (Math.random() - 0.5) * 3,\n      Math.sin(angle) * radius\n    )\n    \n    mesh.position.copy(position)\n    mesh.userData = { agent, nodeType: 'neural' }\n    \n    return {\n      id: neuralProps.neuronId,\n      position,\n      mesh,\n      connections: [],\n      activity: neuralProps.activation,\n      type: neuralProps.nodeType,\n      layer: neuralProps.layer\n    }\n  }\n\n  // Update neural node appearance\n  const updateNeuralNode = (node: NeuralNode, agent: NeuralAgent) => {\n    const neuralProps = agent.neuralProperties\n    \n    // Update activity\n    node.activity = neuralProps.activation\n    \n    // Update material\n    const material = node.mesh.material as THREE.MeshPhongMaterial\n    material.color = getNodeColor(neuralProps.nodeType, neuralProps.activation)\n    material.opacity = 0.8 + neuralProps.activation * 0.2\n    material.emissive = new THREE.Color().setHSL(neuralProps.activation, 0.5, 0.1)\n    \n    // Update scale based on activity\n    const scale = 1 + neuralProps.activation * 0.3\n    node.mesh.scale.setScalar(scale)\n    \n    // Add spike animation\n    if (neuralProps.lastSpike && Date.now() - neuralProps.lastSpike.getTime() < 1000) {\n      const spikeIntensity = 1 - (Date.now() - neuralProps.lastSpike.getTime()) / 1000\n      material.emissive.setHSL(0.6, 1, spikeIntensity * 0.5)\n    }\n  }\n\n  // Update synaptic connections\n  const updateConnections = () => {\n    if (!sceneRef.current) return\n    \n    const scene = sceneRef.current\n    const currentConnections = connectionsRef.current\n    const nodes = neuralNodesRef.current\n    \n    // Clear existing connections\n    currentConnections.forEach(conn => {\n      scene.remove(conn.line)\n    })\n    currentConnections.clear()\n    \n    // Create new connections based on neural agents\n    neuralAgents.forEach(agent => {\n      const sourceNode = nodes.get(agent.neuralProperties.neuronId)\n      if (!sourceNode) return\n      \n      agent.neuralProperties.connections.forEach(targetId => {\n        const targetNode = nodes.get(targetId)\n        if (!targetNode) return\n        \n        const connection = createSynapticConnection(sourceNode, targetNode)\n        currentConnections.set(connection.id, connection)\n        scene.add(connection.line)\n      })\n    })\n  }\n\n  // Create synaptic connection\n  const createSynapticConnection = (source: NeuralNode, target: NeuralNode): SynapticConnection => {\n    const geometry = new THREE.BufferGeometry().setFromPoints([\n      source.position,\n      target.position\n    ])\n    \n    const material = new THREE.LineBasicMaterial({\n      color: 0x00aaff,\n      transparent: true,\n      opacity: 0.3\n    })\n    \n    const line = new THREE.Line(geometry, material)\n    \n    return {\n      id: `${source.id}-${target.id}`,\n      source: source.id,\n      target: target.id,\n      line,\n      weight: 1.0,\n      activity: 0\n    }\n  }\n\n  // Update activity visualization\n  const updateActivityVisualization = () => {\n    if (!sceneRef.current || visualizationMode !== 'activity') return\n    \n    const scene = sceneRef.current\n    \n    // Remove existing activity wave\n    if (activityWaveRef.current) {\n      scene.remove(activityWaveRef.current)\n    }\n    \n    // Create activity wave visualization\n    const particles = []\n    const colors = []\n    \n    neuralAgents.forEach(agent => {\n      const pos = agent.position\n      const activity = agent.neuralProperties.activation\n      \n      // Create particles for active neurons\n      if (activity > 0.1) {\n        for (let i = 0; i < Math.floor(activity * 10); i++) {\n          particles.push(\n            pos.x + (Math.random() - 0.5) * 10,\n            pos.y + (Math.random() - 0.5) * 10,\n            pos.z + (Math.random() - 0.5) * 10\n          )\n          \n          const color = new THREE.Color().setHSL(activity, 0.8, 0.6)\n          colors.push(color.r, color.g, color.b)\n        }\n      }\n    })\n    \n    if (particles.length > 0) {\n      const geometry = new THREE.BufferGeometry()\n      geometry.setAttribute('position', new THREE.Float32BufferAttribute(particles, 3))\n      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3))\n      \n      const material = new THREE.PointsMaterial({\n        size: 2,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8\n      })\n      \n      activityWaveRef.current = new THREE.Points(geometry, material)\n      scene.add(activityWaveRef.current)\n    }\n  }\n\n  // Mouse interaction setup\n  const setupMouseInteraction = (mount: HTMLDivElement, camera: THREE.PerspectiveCamera, scene: THREE.Scene) => {\n    const onMouseMove = (event: MouseEvent) => {\n      const rect = mount.getBoundingClientRect()\n      mouseRef.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1\n      mouseRef.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1\n    }\n    \n    const onMouseClick = (event: MouseEvent) => {\n      if (!raycasterRef.current) return\n      \n      raycasterRef.current.setFromCamera(mouseRef.current, camera)\n      const intersects = raycasterRef.current.intersectObjects(scene.children, true)\n      \n      if (intersects.length > 0) {\n        const intersected = intersects[0].object\n        if (intersected.userData && intersected.userData.agent) {\n          onAgentClick?.(intersected.userData.agent)\n        }\n      }\n    }\n    \n    mount.addEventListener('mousemove', onMouseMove)\n    mount.addEventListener('click', onMouseClick)\n  }\n\n  // Animation loop\n  const startAnimationLoop = () => {\n    const animate = () => {\n      if (!rendererRef.current || !sceneRef.current || !cameraRef.current) return\n      \n      // Update neural activity animations\n      updateNeuralAnimations()\n      \n      // Render scene\n      rendererRef.current.render(sceneRef.current, cameraRef.current)\n      \n      animationIdRef.current = requestAnimationFrame(animate)\n    }\n    \n    animate()\n  }\n\n  // Update neural animations\n  const updateNeuralAnimations = () => {\n    const time = Date.now() * 0.001\n    \n    // Animate neural nodes\n    neuralNodesRef.current.forEach(node => {\n      // Breathing animation based on activity\n      const breathe = 1 + Math.sin(time * 2 + node.activity * 10) * 0.1 * node.activity\n      node.mesh.scale.setScalar(breathe)\n      \n      // Rotation based on type\n      if (node.type === 'pyramidal') {\n        node.mesh.rotation.y += 0.01\n      }\n    })\n    \n    // Animate connections\n    connectionsRef.current.forEach(connection => {\n      const material = connection.line.material as THREE.LineBasicMaterial\n      material.opacity = 0.3 + Math.sin(time * 3) * 0.1\n    })\n  }\n\n  // Utility functions\n  const getNodeSize = (type: string): number => {\n    const sizes = {\n      'sensory': 1.5,\n      'motor': 1.8,\n      'inter': 1.0,\n      'pyramidal': 2.0,\n      'purkinje': 2.5\n    }\n    return sizes[type] || 1.0\n  }\n\n  const getNodeGeometry = (type: string, size: number): THREE.BufferGeometry => {\n    switch (type) {\n      case 'pyramidal':\n        return new THREE.ConeGeometry(size, size * 2, 8)\n      case 'purkinje':\n        return new THREE.SphereGeometry(size, 16, 16)\n      case 'sensory':\n        return new THREE.OctahedronGeometry(size)\n      case 'motor':\n        return new THREE.BoxGeometry(size, size, size)\n      default:\n        return new THREE.SphereGeometry(size, 8, 8)\n    }\n  }\n\n  const getNodeColor = (type: string, activity: number): THREE.Color => {\n    const baseColors = {\n      'sensory': 0x00ff00,\n      'motor': 0xff0000,\n      'inter': 0x0000ff,\n      'pyramidal': 0xffff00,\n      'purkinje': 0xff00ff\n    }\n    \n    const baseColor = new THREE.Color(baseColors[type] || 0x888888)\n    const activityColor = new THREE.Color(0xffffff)\n    \n    return baseColor.lerp(activityColor, activity * 0.5)\n  }\n\n  // Cleanup\n  const cleanup = () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current)\n    }\n    \n    if (rendererRef.current && mountRef.current) {\n      mountRef.current.removeChild(rendererRef.current.domElement)\n      rendererRef.current.dispose()\n    }\n    \n    // Clear neural state\n    neuralNodesRef.current.clear()\n    connectionsRef.current.clear()\n  }\n\n  // Render component\n  return (\n    <div className=\"swarm-visualization\">\n      <div className=\"neural-controls\">\n        <div className=\"neural-stats\">\n          <span>Neurons: {meshMetrics.totalNeurons}</span>\n          <span>Synapses: {meshMetrics.totalSynapses}</span>\n          <span>Activity: {(meshMetrics.averageActivity * 100).toFixed(1)}%</span>\n          <span>Efficiency: {(meshMetrics.networkEfficiency * 100).toFixed(1)}%</span>\n          {meshMetrics.wasmAcceleration && <span className=\"wasm-badge\">WASM</span>}\n        </div>\n        \n        <div className=\"visualization-modes\">\n          <button \n            className={visualizationMode === 'neural' ? 'active' : ''}\n            onClick={() => setVisualizationMode('neural')}\n          >\n            Neural Nodes\n          </button>\n          <button \n            className={visualizationMode === 'activity' ? 'active' : ''}\n            onClick={() => setVisualizationMode('activity')}\n          >\n            Activity Wave\n          </button>\n          <button \n            className={visualizationMode === 'connections' ? 'active' : ''}\n            onClick={() => setVisualizationMode('connections')}\n          >\n            Connections\n          </button>\n        </div>\n      </div>\n      \n      <div ref={mountRef} className=\"visualization-container\">\n        {webglError && (\n          <div className=\"webgl-error\">\n            <h3>WebGL Error</h3>\n            <p>{webglError}</p>\n            <p>Neural mesh visualization requires WebGL support.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8e88d2dba07383620f1916da45041d41c35e1719"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1w22o48ia7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1w22o48ia7();
import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
/**
 * Neural Mesh Visualization Component
 *
 * Enhanced Three.js visualization that displays real-time neural mesh data
 * from the Synaptic MCP server, including neural activity, synaptic connections,
 * and WASM performance metrics.
 */
import React, { useRef, useEffect, useState } from 'react';
import * as THREE from 'three';
import '../styles/SwarmVisualization.css';
/* istanbul ignore next */
cov_1w22o48ia7().s[0]++;
export const NeuralMeshVisualization = ({
  agents,
  neuralAgents,
  isActive,
  meshMetrics,
  onAgentClick
}) => {
  /* istanbul ignore next */
  cov_1w22o48ia7().f[0]++;
  const mountRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[1]++, useRef(null));
  const sceneRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[2]++, useRef());
  const rendererRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[3]++, useRef());
  const cameraRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[4]++, useRef());
  const animationIdRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[5]++, useRef());
  const [webglError, setWebglError] =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[6]++, useState(null));
  const [visualizationMode, setVisualizationMode] =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[7]++, useState('neural'));
  // Neural mesh state
  const neuralNodesRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[8]++, useRef(new Map()));
  const connectionsRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[9]++, useRef(new Map()));
  const activityWaveRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[10]++, useRef());
  const raycasterRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[11]++, useRef(new THREE.Raycaster()));
  const mouseRef =
  /* istanbul ignore next */
  (cov_1w22o48ia7().s[12]++, useRef(new THREE.Vector2()));
  // Initialize Three.js scene with neural mesh setup
  /* istanbul ignore next */
  cov_1w22o48ia7().s[13]++;
  useEffect(() => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[1]++;
    cov_1w22o48ia7().s[14]++;
    if (!mountRef.current) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[0][0]++;
      cov_1w22o48ia7().s[15]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[0][1]++;
    }
    cov_1w22o48ia7().s[16]++;
    try {
      const mount =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[17]++, mountRef.current);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[18]++;
      setWebglError(null);
      // Create scene
      const scene =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[19]++, new THREE.Scene());
      /* istanbul ignore next */
      cov_1w22o48ia7().s[20]++;
      scene.background = new THREE.Color(0x000510);
      // Create camera
      const camera =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[21]++, new THREE.PerspectiveCamera(75, mount.clientWidth / mount.clientHeight, 0.1, 1000));
      /* istanbul ignore next */
      cov_1w22o48ia7().s[22]++;
      camera.position.set(0, 50, 100);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[23]++;
      camera.lookAt(0, 0, 0);
      // Create renderer
      const renderer =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[24]++, new THREE.WebGLRenderer({
        antialias: true,
        alpha: true,
        preserveDrawingBuffer: false,
        powerPreference: 'high-performance'
      }));
      /* istanbul ignore next */
      cov_1w22o48ia7().s[25]++;
      renderer.setSize(mount.clientWidth, mount.clientHeight);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[26]++;
      renderer.shadowMap.enabled = true;
      /* istanbul ignore next */
      cov_1w22o48ia7().s[27]++;
      renderer.shadowMap.type = THREE.PCFSoftShadowMap;
      /* istanbul ignore next */
      cov_1w22o48ia7().s[28]++;
      mount.appendChild(renderer.domElement);
      // Store references
      /* istanbul ignore next */
      cov_1w22o48ia7().s[29]++;
      sceneRef.current = scene;
      /* istanbul ignore next */
      cov_1w22o48ia7().s[30]++;
      rendererRef.current = renderer;
      /* istanbul ignore next */
      cov_1w22o48ia7().s[31]++;
      cameraRef.current = camera;
      // Add lighting
      /* istanbul ignore next */
      cov_1w22o48ia7().s[32]++;
      setupLighting(scene);
      // Create neural mesh base structure
      /* istanbul ignore next */
      cov_1w22o48ia7().s[33]++;
      createNeuralMeshBase(scene);
      // Add mouse interaction
      /* istanbul ignore next */
      cov_1w22o48ia7().s[34]++;
      setupMouseInteraction(mount, camera, scene);
      // Start animation loop
      /* istanbul ignore next */
      cov_1w22o48ia7().s[35]++;
      startAnimationLoop();
      // Handle window resize
      /* istanbul ignore next */
      cov_1w22o48ia7().s[36]++;
      const handleResize = () => {
        /* istanbul ignore next */
        cov_1w22o48ia7().f[2]++;
        cov_1w22o48ia7().s[37]++;
        if (
        /* istanbul ignore next */
        (cov_1w22o48ia7().b[2][0]++, !mount) ||
        /* istanbul ignore next */
        (cov_1w22o48ia7().b[2][1]++, !camera) ||
        /* istanbul ignore next */
        (cov_1w22o48ia7().b[2][2]++, !renderer)) {
          /* istanbul ignore next */
          cov_1w22o48ia7().b[1][0]++;
          cov_1w22o48ia7().s[38]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1w22o48ia7().b[1][1]++;
        }
        cov_1w22o48ia7().s[39]++;
        camera.aspect = mount.clientWidth / mount.clientHeight;
        /* istanbul ignore next */
        cov_1w22o48ia7().s[40]++;
        camera.updateProjectionMatrix();
        /* istanbul ignore next */
        cov_1w22o48ia7().s[41]++;
        renderer.setSize(mount.clientWidth, mount.clientHeight);
      };
      /* istanbul ignore next */
      cov_1w22o48ia7().s[42]++;
      window.addEventListener('resize', handleResize);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[43]++;
      return () => {
        /* istanbul ignore next */
        cov_1w22o48ia7().f[3]++;
        cov_1w22o48ia7().s[44]++;
        window.removeEventListener('resize', handleResize);
        /* istanbul ignore next */
        cov_1w22o48ia7().s[45]++;
        cleanup();
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1w22o48ia7().s[46]++;
      console.error('Neural mesh visualization initialization failed:', error);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[47]++;
      setWebglError(error.message);
    }
  }, []);
  // Update neural agents visualization
  /* istanbul ignore next */
  cov_1w22o48ia7().s[48]++;
  useEffect(() => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[4]++;
    cov_1w22o48ia7().s[49]++;
    if (
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[4][0]++, !sceneRef.current) ||
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[4][1]++, !neuralAgents)) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[3][0]++;
      cov_1w22o48ia7().s[50]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[3][1]++;
    }
    cov_1w22o48ia7().s[51]++;
    updateNeuralNodes();
    /* istanbul ignore next */
    cov_1w22o48ia7().s[52]++;
    updateConnections();
    /* istanbul ignore next */
    cov_1w22o48ia7().s[53]++;
    updateActivityVisualization();
  }, [neuralAgents, meshMetrics]);
  // Setup lighting for neural mesh
  /* istanbul ignore next */
  cov_1w22o48ia7().s[54]++;
  const setupLighting = scene => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[5]++;
    // Ambient light
    const ambientLight =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[55]++, new THREE.AmbientLight(0x404040, 0.3));
    /* istanbul ignore next */
    cov_1w22o48ia7().s[56]++;
    scene.add(ambientLight);
    // Main directional light
    const directionalLight =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[57]++, new THREE.DirectionalLight(0xffffff, 0.8));
    /* istanbul ignore next */
    cov_1w22o48ia7().s[58]++;
    directionalLight.position.set(50, 100, 50);
    /* istanbul ignore next */
    cov_1w22o48ia7().s[59]++;
    directionalLight.castShadow = true;
    /* istanbul ignore next */
    cov_1w22o48ia7().s[60]++;
    directionalLight.shadow.mapSize.width = 2048;
    /* istanbul ignore next */
    cov_1w22o48ia7().s[61]++;
    directionalLight.shadow.mapSize.height = 2048;
    /* istanbul ignore next */
    cov_1w22o48ia7().s[62]++;
    scene.add(directionalLight);
    // Neural activity glow light
    const neuralGlow =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[63]++, new THREE.PointLight(0x00ffff, 0.5, 200));
    /* istanbul ignore next */
    cov_1w22o48ia7().s[64]++;
    neuralGlow.position.set(0, 20, 0);
    /* istanbul ignore next */
    cov_1w22o48ia7().s[65]++;
    scene.add(neuralGlow);
  };
  // Create base neural mesh structure
  /* istanbul ignore next */
  cov_1w22o48ia7().s[66]++;
  const createNeuralMeshBase = scene => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[6]++;
    // Create neural mesh grid
    const gridHelper =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[67]++, new THREE.GridHelper(200, 20, 0x0088ff, 0x004488));
    /* istanbul ignore next */
    cov_1w22o48ia7().s[68]++;
    gridHelper.position.y = -10;
    /* istanbul ignore next */
    cov_1w22o48ia7().s[69]++;
    scene.add(gridHelper);
    // Create layer indicators
    /* istanbul ignore next */
    cov_1w22o48ia7().s[70]++;
    for (let layer =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[71]++, 1); layer <= 6; layer++) {
      const layerGeometry =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[72]++, new THREE.RingGeometry(layer * 15, layer * 15 + 1, 32));
      const layerMaterial =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[73]++, new THREE.MeshBasicMaterial({
        color: new THREE.Color().setHSL(layer / 6, 0.7, 0.3),
        transparent: true,
        opacity: 0.2
      }));
      const layerRing =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[74]++, new THREE.Mesh(layerGeometry, layerMaterial));
      /* istanbul ignore next */
      cov_1w22o48ia7().s[75]++;
      layerRing.rotation.x = -Math.PI / 2;
      /* istanbul ignore next */
      cov_1w22o48ia7().s[76]++;
      layerRing.position.y = layer * 5;
      /* istanbul ignore next */
      cov_1w22o48ia7().s[77]++;
      scene.add(layerRing);
    }
  };
  // Update neural nodes based on neural agents
  /* istanbul ignore next */
  cov_1w22o48ia7().s[78]++;
  const updateNeuralNodes = () => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[7]++;
    cov_1w22o48ia7().s[79]++;
    if (!sceneRef.current) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[5][0]++;
      cov_1w22o48ia7().s[80]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[5][1]++;
    }
    const scene =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[81]++, sceneRef.current);
    const currentNodes =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[82]++, neuralNodesRef.current);
    // Remove nodes that no longer exist
    /* istanbul ignore next */
    cov_1w22o48ia7().s[83]++;
    for (const [nodeId, node] of currentNodes.entries()) {
      /* istanbul ignore next */
      cov_1w22o48ia7().s[84]++;
      if (!neuralAgents.find(agent => {
        /* istanbul ignore next */
        cov_1w22o48ia7().f[8]++;
        cov_1w22o48ia7().s[85]++;
        return agent.neuralProperties.neuronId === nodeId;
      })) {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[6][0]++;
        cov_1w22o48ia7().s[86]++;
        scene.remove(node.mesh);
        /* istanbul ignore next */
        cov_1w22o48ia7().s[87]++;
        node.connections.forEach(conn => {
          /* istanbul ignore next */
          cov_1w22o48ia7().f[9]++;
          cov_1w22o48ia7().s[88]++;
          return scene.remove(conn);
        });
        /* istanbul ignore next */
        cov_1w22o48ia7().s[89]++;
        currentNodes.delete(nodeId);
      } else
      /* istanbul ignore next */
      {
        cov_1w22o48ia7().b[6][1]++;
      }
    }
    // Add or update nodes
    /* istanbul ignore next */
    cov_1w22o48ia7().s[90]++;
    neuralAgents.forEach(agent => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[10]++;
      const nodeId =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[91]++, agent.neuralProperties.neuronId);
      let node =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[92]++, currentNodes.get(nodeId));
      /* istanbul ignore next */
      cov_1w22o48ia7().s[93]++;
      if (!node) {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[7][0]++;
        cov_1w22o48ia7().s[94]++;
        // Create new neural node
        node = createNeuralNode(agent);
        /* istanbul ignore next */
        cov_1w22o48ia7().s[95]++;
        currentNodes.set(nodeId, node);
        /* istanbul ignore next */
        cov_1w22o48ia7().s[96]++;
        scene.add(node.mesh);
      } else {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[7][1]++;
        cov_1w22o48ia7().s[97]++;
        // Update existing node
        updateNeuralNode(node, agent);
      }
    });
  };
  // Create a neural node mesh
  /* istanbul ignore next */
  cov_1w22o48ia7().s[98]++;
  const createNeuralNode = agent => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[11]++;
    const neuralProps =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[99]++, agent.neuralProperties);
    // Determine node size based on type and activity
    const baseSize =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[100]++, getNodeSize(neuralProps.nodeType));
    const size =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[101]++, baseSize * (1 + neuralProps.activation * 0.5));
    // Create node geometry
    const geometry =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[102]++, getNodeGeometry(neuralProps.nodeType, size));
    // Create node material
    const material =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[103]++, new THREE.MeshPhongMaterial({
      color: getNodeColor(neuralProps.nodeType, neuralProps.activation),
      transparent: true,
      opacity: 0.8 + neuralProps.activation * 0.2,
      emissive: new THREE.Color().setHSL(neuralProps.activation, 0.5, 0.1)
    }));
    const mesh =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[104]++, new THREE.Mesh(geometry, material));
    // Position based on layer and random spread
    const angle =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[105]++, Math.random() * Math.PI * 2);
    const radius =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[106]++, neuralProps.layer * 15 + (Math.random() - 0.5) * 10);
    const position =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[107]++, new THREE.Vector3(Math.cos(angle) * radius, neuralProps.layer * 5 + (Math.random() - 0.5) * 3, Math.sin(angle) * radius));
    /* istanbul ignore next */
    cov_1w22o48ia7().s[108]++;
    mesh.position.copy(position);
    /* istanbul ignore next */
    cov_1w22o48ia7().s[109]++;
    mesh.userData = {
      agent,
      nodeType: 'neural'
    };
    /* istanbul ignore next */
    cov_1w22o48ia7().s[110]++;
    return {
      id: neuralProps.neuronId,
      position,
      mesh,
      connections: [],
      activity: neuralProps.activation,
      type: neuralProps.nodeType,
      layer: neuralProps.layer
    };
  };
  // Update neural node appearance
  /* istanbul ignore next */
  cov_1w22o48ia7().s[111]++;
  const updateNeuralNode = (node, agent) => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[12]++;
    const neuralProps =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[112]++, agent.neuralProperties);
    // Update activity
    /* istanbul ignore next */
    cov_1w22o48ia7().s[113]++;
    node.activity = neuralProps.activation;
    // Update material
    const material =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[114]++, node.mesh.material);
    /* istanbul ignore next */
    cov_1w22o48ia7().s[115]++;
    material.color = getNodeColor(neuralProps.nodeType, neuralProps.activation);
    /* istanbul ignore next */
    cov_1w22o48ia7().s[116]++;
    material.opacity = 0.8 + neuralProps.activation * 0.2;
    /* istanbul ignore next */
    cov_1w22o48ia7().s[117]++;
    material.emissive = new THREE.Color().setHSL(neuralProps.activation, 0.5, 0.1);
    // Update scale based on activity
    const scale =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[118]++, 1 + neuralProps.activation * 0.3);
    /* istanbul ignore next */
    cov_1w22o48ia7().s[119]++;
    node.mesh.scale.setScalar(scale);
    // Add spike animation
    /* istanbul ignore next */
    cov_1w22o48ia7().s[120]++;
    if (
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[9][0]++, neuralProps.lastSpike) &&
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[9][1]++, Date.now() - neuralProps.lastSpike.getTime() < 1000)) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[8][0]++;
      const spikeIntensity =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[121]++, 1 - (Date.now() - neuralProps.lastSpike.getTime()) / 1000);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[122]++;
      material.emissive.setHSL(0.6, 1, spikeIntensity * 0.5);
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[8][1]++;
    }
  };
  // Update synaptic connections
  /* istanbul ignore next */
  cov_1w22o48ia7().s[123]++;
  const updateConnections = () => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[13]++;
    cov_1w22o48ia7().s[124]++;
    if (!sceneRef.current) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[10][0]++;
      cov_1w22o48ia7().s[125]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[10][1]++;
    }
    const scene =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[126]++, sceneRef.current);
    const currentConnections =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[127]++, connectionsRef.current);
    const nodes =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[128]++, neuralNodesRef.current);
    // Clear existing connections
    /* istanbul ignore next */
    cov_1w22o48ia7().s[129]++;
    currentConnections.forEach(conn => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[14]++;
      cov_1w22o48ia7().s[130]++;
      scene.remove(conn.line);
    });
    /* istanbul ignore next */
    cov_1w22o48ia7().s[131]++;
    currentConnections.clear();
    // Create new connections based on neural agents
    /* istanbul ignore next */
    cov_1w22o48ia7().s[132]++;
    neuralAgents.forEach(agent => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[15]++;
      const sourceNode =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[133]++, nodes.get(agent.neuralProperties.neuronId));
      /* istanbul ignore next */
      cov_1w22o48ia7().s[134]++;
      if (!sourceNode) {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[11][0]++;
        cov_1w22o48ia7().s[135]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1w22o48ia7().b[11][1]++;
      }
      cov_1w22o48ia7().s[136]++;
      agent.neuralProperties.connections.forEach(targetId => {
        /* istanbul ignore next */
        cov_1w22o48ia7().f[16]++;
        const targetNode =
        /* istanbul ignore next */
        (cov_1w22o48ia7().s[137]++, nodes.get(targetId));
        /* istanbul ignore next */
        cov_1w22o48ia7().s[138]++;
        if (!targetNode) {
          /* istanbul ignore next */
          cov_1w22o48ia7().b[12][0]++;
          cov_1w22o48ia7().s[139]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1w22o48ia7().b[12][1]++;
        }
        const connection =
        /* istanbul ignore next */
        (cov_1w22o48ia7().s[140]++, createSynapticConnection(sourceNode, targetNode));
        /* istanbul ignore next */
        cov_1w22o48ia7().s[141]++;
        currentConnections.set(connection.id, connection);
        /* istanbul ignore next */
        cov_1w22o48ia7().s[142]++;
        scene.add(connection.line);
      });
    });
  };
  // Create synaptic connection
  /* istanbul ignore next */
  cov_1w22o48ia7().s[143]++;
  const createSynapticConnection = (source, target) => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[17]++;
    const geometry =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[144]++, new THREE.BufferGeometry().setFromPoints([source.position, target.position]));
    const material =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[145]++, new THREE.LineBasicMaterial({
      color: 0x00aaff,
      transparent: true,
      opacity: 0.3
    }));
    const line =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[146]++, new THREE.Line(geometry, material));
    /* istanbul ignore next */
    cov_1w22o48ia7().s[147]++;
    return {
      id: `${source.id}-${target.id}`,
      source: source.id,
      target: target.id,
      line,
      weight: 1.0,
      activity: 0
    };
  };
  // Update activity visualization
  /* istanbul ignore next */
  cov_1w22o48ia7().s[148]++;
  const updateActivityVisualization = () => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[18]++;
    cov_1w22o48ia7().s[149]++;
    if (
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[14][0]++, !sceneRef.current) ||
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[14][1]++, visualizationMode !== 'activity')) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[13][0]++;
      cov_1w22o48ia7().s[150]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[13][1]++;
    }
    const scene =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[151]++, sceneRef.current);
    // Remove existing activity wave
    /* istanbul ignore next */
    cov_1w22o48ia7().s[152]++;
    if (activityWaveRef.current) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[15][0]++;
      cov_1w22o48ia7().s[153]++;
      scene.remove(activityWaveRef.current);
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[15][1]++;
    }
    // Create activity wave visualization
    const particles =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[154]++, []);
    const colors =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[155]++, []);
    /* istanbul ignore next */
    cov_1w22o48ia7().s[156]++;
    neuralAgents.forEach(agent => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[19]++;
      const pos =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[157]++, agent.position);
      const activity =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[158]++, agent.neuralProperties.activation);
      // Create particles for active neurons
      /* istanbul ignore next */
      cov_1w22o48ia7().s[159]++;
      if (activity > 0.1) {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[16][0]++;
        cov_1w22o48ia7().s[160]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1w22o48ia7().s[161]++, 0); i < Math.floor(activity * 10); i++) {
          /* istanbul ignore next */
          cov_1w22o48ia7().s[162]++;
          particles.push(pos.x + (Math.random() - 0.5) * 10, pos.y + (Math.random() - 0.5) * 10, pos.z + (Math.random() - 0.5) * 10);
          const color =
          /* istanbul ignore next */
          (cov_1w22o48ia7().s[163]++, new THREE.Color().setHSL(activity, 0.8, 0.6));
          /* istanbul ignore next */
          cov_1w22o48ia7().s[164]++;
          colors.push(color.r, color.g, color.b);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1w22o48ia7().b[16][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1w22o48ia7().s[165]++;
    if (particles.length > 0) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[17][0]++;
      const geometry =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[166]++, new THREE.BufferGeometry());
      /* istanbul ignore next */
      cov_1w22o48ia7().s[167]++;
      geometry.setAttribute('position', new THREE.Float32BufferAttribute(particles, 3));
      /* istanbul ignore next */
      cov_1w22o48ia7().s[168]++;
      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
      const material =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[169]++, new THREE.PointsMaterial({
        size: 2,
        vertexColors: true,
        transparent: true,
        opacity: 0.8
      }));
      /* istanbul ignore next */
      cov_1w22o48ia7().s[170]++;
      activityWaveRef.current = new THREE.Points(geometry, material);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[171]++;
      scene.add(activityWaveRef.current);
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[17][1]++;
    }
  };
  // Mouse interaction setup
  /* istanbul ignore next */
  cov_1w22o48ia7().s[172]++;
  const setupMouseInteraction = (mount, camera, scene) => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[20]++;
    cov_1w22o48ia7().s[173]++;
    const onMouseMove = event => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[21]++;
      const rect =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[174]++, mount.getBoundingClientRect());
      /* istanbul ignore next */
      cov_1w22o48ia7().s[175]++;
      mouseRef.current.x = (event.clientX - rect.left) / rect.width * 2 - 1;
      /* istanbul ignore next */
      cov_1w22o48ia7().s[176]++;
      mouseRef.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
    };
    /* istanbul ignore next */
    cov_1w22o48ia7().s[177]++;
    const onMouseClick = event => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[22]++;
      cov_1w22o48ia7().s[178]++;
      if (!raycasterRef.current) {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[18][0]++;
        cov_1w22o48ia7().s[179]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1w22o48ia7().b[18][1]++;
      }
      cov_1w22o48ia7().s[180]++;
      raycasterRef.current.setFromCamera(mouseRef.current, camera);
      const intersects =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[181]++, raycasterRef.current.intersectObjects(scene.children, true));
      /* istanbul ignore next */
      cov_1w22o48ia7().s[182]++;
      if (intersects.length > 0) {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[19][0]++;
        const intersected =
        /* istanbul ignore next */
        (cov_1w22o48ia7().s[183]++, intersects[0].object);
        /* istanbul ignore next */
        cov_1w22o48ia7().s[184]++;
        if (
        /* istanbul ignore next */
        (cov_1w22o48ia7().b[21][0]++, intersected.userData) &&
        /* istanbul ignore next */
        (cov_1w22o48ia7().b[21][1]++, intersected.userData.agent)) {
          /* istanbul ignore next */
          cov_1w22o48ia7().b[20][0]++;
          cov_1w22o48ia7().s[185]++;
          onAgentClick?.(intersected.userData.agent);
        } else
        /* istanbul ignore next */
        {
          cov_1w22o48ia7().b[20][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1w22o48ia7().b[19][1]++;
      }
    };
    /* istanbul ignore next */
    cov_1w22o48ia7().s[186]++;
    mount.addEventListener('mousemove', onMouseMove);
    /* istanbul ignore next */
    cov_1w22o48ia7().s[187]++;
    mount.addEventListener('click', onMouseClick);
  };
  // Animation loop
  /* istanbul ignore next */
  cov_1w22o48ia7().s[188]++;
  const startAnimationLoop = () => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[23]++;
    cov_1w22o48ia7().s[189]++;
    const animate = () => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[24]++;
      cov_1w22o48ia7().s[190]++;
      if (
      /* istanbul ignore next */
      (cov_1w22o48ia7().b[23][0]++, !rendererRef.current) ||
      /* istanbul ignore next */
      (cov_1w22o48ia7().b[23][1]++, !sceneRef.current) ||
      /* istanbul ignore next */
      (cov_1w22o48ia7().b[23][2]++, !cameraRef.current)) {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[22][0]++;
        cov_1w22o48ia7().s[191]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1w22o48ia7().b[22][1]++;
      }
      // Update neural activity animations
      cov_1w22o48ia7().s[192]++;
      updateNeuralAnimations();
      // Render scene
      /* istanbul ignore next */
      cov_1w22o48ia7().s[193]++;
      rendererRef.current.render(sceneRef.current, cameraRef.current);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[194]++;
      animationIdRef.current = requestAnimationFrame(animate);
    };
    /* istanbul ignore next */
    cov_1w22o48ia7().s[195]++;
    animate();
  };
  // Update neural animations
  /* istanbul ignore next */
  cov_1w22o48ia7().s[196]++;
  const updateNeuralAnimations = () => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[25]++;
    const time =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[197]++, Date.now() * 0.001);
    // Animate neural nodes
    /* istanbul ignore next */
    cov_1w22o48ia7().s[198]++;
    neuralNodesRef.current.forEach(node => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[26]++;
      // Breathing animation based on activity
      const breathe =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[199]++, 1 + Math.sin(time * 2 + node.activity * 10) * 0.1 * node.activity);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[200]++;
      node.mesh.scale.setScalar(breathe);
      // Rotation based on type
      /* istanbul ignore next */
      cov_1w22o48ia7().s[201]++;
      if (node.type === 'pyramidal') {
        /* istanbul ignore next */
        cov_1w22o48ia7().b[24][0]++;
        cov_1w22o48ia7().s[202]++;
        node.mesh.rotation.y += 0.01;
      } else
      /* istanbul ignore next */
      {
        cov_1w22o48ia7().b[24][1]++;
      }
    });
    // Animate connections
    /* istanbul ignore next */
    cov_1w22o48ia7().s[203]++;
    connectionsRef.current.forEach(connection => {
      /* istanbul ignore next */
      cov_1w22o48ia7().f[27]++;
      const material =
      /* istanbul ignore next */
      (cov_1w22o48ia7().s[204]++, connection.line.material);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[205]++;
      material.opacity = 0.3 + Math.sin(time * 3) * 0.1;
    });
  };
  // Utility functions
  /* istanbul ignore next */
  cov_1w22o48ia7().s[206]++;
  const getNodeSize = type => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[28]++;
    const sizes =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[207]++, {
      'sensory': 1.5,
      'motor': 1.8,
      'inter': 1.0,
      'pyramidal': 2.0,
      'purkinje': 2.5
    });
    /* istanbul ignore next */
    cov_1w22o48ia7().s[208]++;
    return /* istanbul ignore next */(cov_1w22o48ia7().b[25][0]++, sizes[type]) ||
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[25][1]++, 1.0);
  };
  /* istanbul ignore next */
  cov_1w22o48ia7().s[209]++;
  const getNodeGeometry = (type, size) => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[29]++;
    cov_1w22o48ia7().s[210]++;
    switch (type) {
      case 'pyramidal':
        /* istanbul ignore next */
        cov_1w22o48ia7().b[26][0]++;
        cov_1w22o48ia7().s[211]++;
        return new THREE.ConeGeometry(size, size * 2, 8);
      case 'purkinje':
        /* istanbul ignore next */
        cov_1w22o48ia7().b[26][1]++;
        cov_1w22o48ia7().s[212]++;
        return new THREE.SphereGeometry(size, 16, 16);
      case 'sensory':
        /* istanbul ignore next */
        cov_1w22o48ia7().b[26][2]++;
        cov_1w22o48ia7().s[213]++;
        return new THREE.OctahedronGeometry(size);
      case 'motor':
        /* istanbul ignore next */
        cov_1w22o48ia7().b[26][3]++;
        cov_1w22o48ia7().s[214]++;
        return new THREE.BoxGeometry(size, size, size);
      default:
        /* istanbul ignore next */
        cov_1w22o48ia7().b[26][4]++;
        cov_1w22o48ia7().s[215]++;
        return new THREE.SphereGeometry(size, 8, 8);
    }
  };
  /* istanbul ignore next */
  cov_1w22o48ia7().s[216]++;
  const getNodeColor = (type, activity) => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[30]++;
    const baseColors =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[217]++, {
      'sensory': 0x00ff00,
      'motor': 0xff0000,
      'inter': 0x0000ff,
      'pyramidal': 0xffff00,
      'purkinje': 0xff00ff
    });
    const baseColor =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[218]++, new THREE.Color(
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[27][0]++, baseColors[type]) ||
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[27][1]++, 0x888888)));
    const activityColor =
    /* istanbul ignore next */
    (cov_1w22o48ia7().s[219]++, new THREE.Color(0xffffff));
    /* istanbul ignore next */
    cov_1w22o48ia7().s[220]++;
    return baseColor.lerp(activityColor, activity * 0.5);
  };
  // Cleanup
  /* istanbul ignore next */
  cov_1w22o48ia7().s[221]++;
  const cleanup = () => {
    /* istanbul ignore next */
    cov_1w22o48ia7().f[31]++;
    cov_1w22o48ia7().s[222]++;
    if (animationIdRef.current) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[28][0]++;
      cov_1w22o48ia7().s[223]++;
      cancelAnimationFrame(animationIdRef.current);
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[28][1]++;
    }
    cov_1w22o48ia7().s[224]++;
    if (
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[30][0]++, rendererRef.current) &&
    /* istanbul ignore next */
    (cov_1w22o48ia7().b[30][1]++, mountRef.current)) {
      /* istanbul ignore next */
      cov_1w22o48ia7().b[29][0]++;
      cov_1w22o48ia7().s[225]++;
      mountRef.current.removeChild(rendererRef.current.domElement);
      /* istanbul ignore next */
      cov_1w22o48ia7().s[226]++;
      rendererRef.current.dispose();
    } else
    /* istanbul ignore next */
    {
      cov_1w22o48ia7().b[29][1]++;
    }
    // Clear neural state
    cov_1w22o48ia7().s[227]++;
    neuralNodesRef.current.clear();
    /* istanbul ignore next */
    cov_1w22o48ia7().s[228]++;
    connectionsRef.current.clear();
  };
  // Render component
  /* istanbul ignore next */
  cov_1w22o48ia7().s[229]++;
  return _jsxs("div", {
    className: "swarm-visualization",
    children: [_jsxs("div", {
      className: "neural-controls",
      children: [_jsxs("div", {
        className: "neural-stats",
        children: [_jsxs("span", {
          children: ["Neurons: ", meshMetrics.totalNeurons]
        }), _jsxs("span", {
          children: ["Synapses: ", meshMetrics.totalSynapses]
        }), _jsxs("span", {
          children: ["Activity: ", (meshMetrics.averageActivity * 100).toFixed(1), "%"]
        }), _jsxs("span", {
          children: ["Efficiency: ", (meshMetrics.networkEfficiency * 100).toFixed(1), "%"]
        }),
        /* istanbul ignore next */
        (cov_1w22o48ia7().b[31][0]++, meshMetrics.wasmAcceleration) &&
        /* istanbul ignore next */
        (cov_1w22o48ia7().b[31][1]++, _jsx("span", {
          className: "wasm-badge",
          children: "WASM"
        }))]
      }), _jsxs("div", {
        className: "visualization-modes",
        children: [_jsx("button", {
          className: visualizationMode === 'neural' ?
          /* istanbul ignore next */
          (cov_1w22o48ia7().b[32][0]++, 'active') :
          /* istanbul ignore next */
          (cov_1w22o48ia7().b[32][1]++, ''),
          onClick: () => {
            /* istanbul ignore next */
            cov_1w22o48ia7().f[32]++;
            cov_1w22o48ia7().s[230]++;
            return setVisualizationMode('neural');
          },
          children: "Neural Nodes"
        }), _jsx("button", {
          className: visualizationMode === 'activity' ?
          /* istanbul ignore next */
          (cov_1w22o48ia7().b[33][0]++, 'active') :
          /* istanbul ignore next */
          (cov_1w22o48ia7().b[33][1]++, ''),
          onClick: () => {
            /* istanbul ignore next */
            cov_1w22o48ia7().f[33]++;
            cov_1w22o48ia7().s[231]++;
            return setVisualizationMode('activity');
          },
          children: "Activity Wave"
        }), _jsx("button", {
          className: visualizationMode === 'connections' ?
          /* istanbul ignore next */
          (cov_1w22o48ia7().b[34][0]++, 'active') :
          /* istanbul ignore next */
          (cov_1w22o48ia7().b[34][1]++, ''),
          onClick: () => {
            /* istanbul ignore next */
            cov_1w22o48ia7().f[34]++;
            cov_1w22o48ia7().s[232]++;
            return setVisualizationMode('connections');
          },
          children: "Connections"
        })]
      })]
    }), _jsx("div", {
      ref: mountRef,
      className: "visualization-container",
      children:
      /* istanbul ignore next */
      (cov_1w22o48ia7().b[35][0]++, webglError) &&
      /* istanbul ignore next */
      (cov_1w22o48ia7().b[35][1]++, _jsxs("div", {
        className: "webgl-error",
        children: [_jsx("h3", {
          children: "WebGL Error"
        }), _jsx("p", {
          children: webglError
        }), _jsx("p", {
          children: "Neural mesh visualization requires WebGL support."
        })]
      }))
    })]
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,