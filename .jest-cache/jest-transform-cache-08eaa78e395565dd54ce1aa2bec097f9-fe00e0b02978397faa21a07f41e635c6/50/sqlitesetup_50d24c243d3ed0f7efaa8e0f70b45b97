8d539d86a08ab45153d2d95a855d1e9d
"use strict";
/**
 * SQLite Persistence Test Setup for Phase 2A
 * Specialized setup for SQLite database testing with neural agent persistence
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.persistencePerformanceMonitor = exports.sqliteTestUtils = exports.mockSQLiteDB = exports.MockSQLiteDatabase = exports.PERFORMANCE_METRICS_SCHEMA = exports.KNOWLEDGE_SHARING_SCHEMA = exports.TRAINING_SESSIONS_SCHEMA = exports.AGENT_STATE_SCHEMA = exports.TEST_DB_PATH = void 0;
const globals_1 = require("@jest/globals");
// Mock SQLite3 module if not available
globals_1.jest.mock('sqlite3', () => ({
    Database: globals_1.jest.fn().mockImplementation(() => mockDatabase),
    verbose: globals_1.jest.fn().mockReturnThis(),
    OPEN_READWRITE: 0x00000002,
    OPEN_CREATE: 0x00000004,
    OPEN_READONLY: 0x00000001
}), { virtual: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
// Mock SQLite3 for testing environment
const mockDatabase = {
    run: globals_1.jest.fn(),
    get: globals_1.jest.fn(),
    all: globals_1.jest.fn(),
    each: globals_1.jest.fn(),
    prepare: globals_1.jest.fn(),
    exec: globals_1.jest.fn(),
    close: globals_1.jest.fn(),
    serialize: globals_1.jest.fn(),
    parallelize: globals_1.jest.fn()
};
const mockStatement = {
    run: globals_1.jest.fn(),
    get: globals_1.jest.fn(),
    all: globals_1.jest.fn(),
    each: globals_1.jest.fn(),
    bind: globals_1.jest.fn(),
    reset: globals_1.jest.fn(),
    finalize: globals_1.jest.fn()
};
// Create test database directory
const testDbDir = path.join(process.cwd(), 'tests', 'temp-db');
if (!fs.existsSync(testDbDir)) {
    fs.mkdirSync(testDbDir, { recursive: true });
}
// Test database path
exports.TEST_DB_PATH = path.join(testDbDir, 'test-neural-agents.db');
// Agent State Schema for testing
exports.AGENT_STATE_SCHEMA = `
  CREATE TABLE IF NOT EXISTS agent_states (
    id TEXT PRIMARY KEY,
    agent_type TEXT NOT NULL,
    neural_config TEXT NOT NULL,
    weights BLOB,
    biases BLOB,
    created_at INTEGER NOT NULL,
    last_active INTEGER NOT NULL,
    total_inferences INTEGER DEFAULT 0,
    average_inference_time REAL DEFAULT 0,
    learning_progress REAL DEFAULT 0,
    memory_usage INTEGER DEFAULT 0,
    state INTEGER DEFAULT 0,
    performance_metrics TEXT
  );
`;
exports.TRAINING_SESSIONS_SCHEMA = `
  CREATE TABLE IF NOT EXISTS training_sessions (
    session_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    start_time INTEGER NOT NULL,
    end_time INTEGER,
    epochs INTEGER NOT NULL,
    data_points INTEGER NOT NULL,
    initial_accuracy REAL,
    final_accuracy REAL,
    training_data TEXT,
    convergence_epoch INTEGER,
    FOREIGN KEY (agent_id) REFERENCES agent_states (id)
  );
`;
exports.KNOWLEDGE_SHARING_SCHEMA = `
  CREATE TABLE IF NOT EXISTS knowledge_sharing (
    id TEXT PRIMARY KEY,
    source_agent_id TEXT NOT NULL,
    target_agent_id TEXT NOT NULL,
    shared_at INTEGER NOT NULL,
    knowledge_type TEXT NOT NULL,
    knowledge_data TEXT,
    success BOOLEAN DEFAULT 1,
    FOREIGN KEY (source_agent_id) REFERENCES agent_states (id),
    FOREIGN KEY (target_agent_id) REFERENCES agent_states (id)
  );
`;
exports.PERFORMANCE_METRICS_SCHEMA = `
  CREATE TABLE IF NOT EXISTS performance_metrics (
    id TEXT PRIMARY KEY,
    agent_id TEXT,
    metric_type TEXT NOT NULL,
    metric_value REAL NOT NULL,
    recorded_at INTEGER NOT NULL,
    metadata TEXT,
    FOREIGN KEY (agent_id) REFERENCES agent_states (id)
  );
`;
// Mock Database Interface for testing
class MockSQLiteDatabase {
    constructor() {
        Object.defineProperty(this, "statements", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        // Initialize mock data structures
        this.data.set('agent_states', []);
        this.data.set('training_sessions', []);
        this.data.set('knowledge_sharing', []);
        this.data.set('performance_metrics', []);
    }
    run(sql, params = [], callback) {
        if (sql.includes('INSERT INTO agent_states')) {
            const agentData = this.parseInsertData(sql, params);
            const agents = this.data.get('agent_states') || [];
            agents.push(agentData);
            this.data.set('agent_states', agents);
        }
        if (callback)
            callback(null);
    }
    get(sql, params = [], callback) {
        let result = null;
        if (sql.includes('SELECT * FROM agent_states WHERE id = ?')) {
            const agents = this.data.get('agent_states') || [];
            result = agents.find(agent => agent.id === params[0]);
        }
        if (callback)
            callback(null, result);
    }
    all(sql, params = [], callback) {
        let results = [];
        if (sql.includes('SELECT * FROM agent_states')) {
            results = this.data.get('agent_states') || [];
        }
        else if (sql.includes('SELECT * FROM training_sessions')) {
            results = this.data.get('training_sessions') || [];
        }
        if (callback)
            callback(null, results);
    }
    prepare(sql) {
        const statement = {
            ...mockStatement,
            run: globals_1.jest.fn((params, callback) => {
                this.run(sql, params, callback);
            }),
            get: globals_1.jest.fn((params, callback) => {
                this.get(sql, params, callback);
            }),
            all: globals_1.jest.fn((params, callback) => {
                this.all(sql, params, callback);
            })
        };
        this.statements.set(sql, statement);
        return statement;
    }
    close() {
        this.data.clear();
        this.statements.clear();
    }
    parseInsertData(sql, params) {
        // Simple mock data parsing for testing
        return {
            id: params[0] || 'test-agent-' + Date.now(),
            agent_type: params[1] || 'mlp',
            neural_config: params[2] || '{}',
            created_at: params[3] || Date.now(),
            last_active: params[4] || Date.now()
        };
    }
    // Test utilities
    getTestData(table) {
        return this.data.get(table) || [];
    }
    setTestData(table, data) {
        this.data.set(table, data);
    }
    clearTestData() {
        this.data.forEach((_, key) => this.data.set(key, []));
    }
}
exports.MockSQLiteDatabase = MockSQLiteDatabase;
// Global mock database instance
exports.mockSQLiteDB = new MockSQLiteDatabase();
// SQLite Test Utilities
exports.sqliteTestUtils = {
    /**
     * Create a test database with schema
     */
    createTestDatabase: async () => {
        const db = new MockSQLiteDatabase();
        return db;
    },
    /**
     * Generate test agent state data
     */
    generateAgentStateData: (overrides = {}) => ({
        id: 'test-agent-' + Math.random().toString(36).substr(2, 9),
        agent_type: 'mlp',
        neural_config: JSON.stringify({
            type: 'mlp',
            architecture: [10, 5, 1],
            activationFunction: 'relu'
        }),
        weights: Buffer.from(new Float32Array(100)),
        biases: Buffer.from(new Float32Array(16)),
        created_at: Date.now(),
        last_active: Date.now(),
        total_inferences: 0,
        average_inference_time: 0,
        learning_progress: 0,
        memory_usage: 1024 * 1024, // 1MB
        state: 0, // ACTIVE
        performance_metrics: JSON.stringify({
            successRate: 0.95,
            averageResponseTime: 45
        }),
        ...overrides
    }),
    /**
     * Generate test training session data
     */
    generateTrainingSessionData: (agentId, overrides = {}) => ({
        session_id: 'session-' + Math.random().toString(36).substr(2, 9),
        agent_id: agentId,
        start_time: Date.now() - 10000,
        end_time: Date.now(),
        epochs: 10,
        data_points: 100,
        initial_accuracy: 0.5,
        final_accuracy: 0.85,
        training_data: JSON.stringify([
            { inputs: [1, 2, 3], outputs: [0.8] }
        ]),
        convergence_epoch: 8,
        ...overrides
    }),
    /**
     * Generate test knowledge sharing data
     */
    generateKnowledgeSharingData: (sourceId, targetId, overrides = {}) => ({
        id: 'share-' + Math.random().toString(36).substr(2, 9),
        source_agent_id: sourceId,
        target_agent_id: targetId,
        shared_at: Date.now(),
        knowledge_type: 'weights',
        knowledge_data: JSON.stringify({
            weights: Array.from({ length: 100 }, () => Math.random())
        }),
        success: true,
        ...overrides
    }),
    /**
     * Generate test performance metrics
     */
    generatePerformanceMetrics: (agentId, overrides = {}) => ({
        id: 'metric-' + Math.random().toString(36).substr(2, 9),
        agent_id: agentId,
        metric_type: 'inference_time',
        metric_value: 45.5,
        recorded_at: Date.now(),
        metadata: JSON.stringify({
            inputSize: 10,
            outputSize: 1,
            memoryUsage: 1024 * 1024
        }),
        ...overrides
    }),
    /**
     * Assert persistence performance (<75ms for saves, <100ms for loads)
     */
    assertPersistencePerformance: (operationType, startTime, endTime) => {
        const duration = endTime - startTime;
        if (operationType === 'save' || operationType === 'spawn') {
            expect(duration).toBeLessThan(75); // <75ms for spawn/save operations
        }
        else if (operationType === 'load' || operationType === 'inference') {
            expect(duration).toBeLessThan(100); // <100ms for load/inference operations
        }
    },
    /**
     * Validate cross-session persistence
     */
    validateCrossSessionPersistence: async (db, agentId) => {
        // Simulate session end and restart
        const agentData = db.getTestData('agent_states').find(a => a.id === agentId);
        expect(agentData).toBeDefined();
        // Create new database instance (simulating app restart)
        const newDb = new MockSQLiteDatabase();
        newDb.setTestData('agent_states', [agentData]);
        // Verify data persists across sessions
        const restoredAgent = newDb.getTestData('agent_states').find(a => a.id === agentId);
        expect(restoredAgent).toEqual(agentData);
        return newDb;
    },
    /**
     * Test data migration scenarios
     */
    testDataMigration: async (fromVersion, toVersion) => {
        // Mock migration logic for testing
        const migrationSteps = {
            '1.0.0': {
                '2.0.0': [
                    'ALTER TABLE agent_states ADD COLUMN coordination_data TEXT',
                    'CREATE INDEX idx_agent_states_last_active ON agent_states(last_active)'
                ]
            }
        };
        return migrationSteps[fromVersion]?.[toVersion] || [];
    }
};
// Performance monitoring for persistence operations
exports.persistencePerformanceMonitor = {
    startTime: Date.now(),
    measureOperation: (operationName, operation) => {
        const start = performance.now();
        return operation().then(result => {
            const end = performance.now();
            const duration = end - start;
            exports.sqliteTestUtils.assertPersistencePerformance(operationName, start, end);
            return result;
        });
    }
};
// Global test hooks for SQLite
beforeEach(() => {
    exports.mockSQLiteDB.clearTestData();
    globals_1.jest.clearAllMocks();
});
afterEach(() => {
    exports.mockSQLiteDB.clearTestData();
});
// Setup console for SQLite testing
console.log('💾 SQLite persistence test setup initialized');
console.log('🗃️ Mock database configured for Phase 2A testing');
console.log('⚡ Performance monitoring enabled (<75ms spawn, <100ms inference)');
console.log('🔄 Cross-session persistence validation ready');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,