{"version":3,"names":["WASMNeuralLoader","constructor","modules","Map","loadingPromises","performanceMetrics","loadTimes","initTimes","memoryUsage","inferenceLatencies","browserCapabilities","agentPool","maxAgents","memoryLimit","detectCapabilities","capabilities","wasm","simd","threads","webgpu","bulk_memory","reference_types","sharedArrayBuffer","SharedArrayBuffer","WebAssembly","instantiate","simdTestBytes","Uint8Array","compile","e","console","warn","message","bulkMemoryBytes","navigator","gpu","adapter","requestAdapter","error","log","loadModule","moduleName","options","startTime","performance","now","has","get","loadPromise","_loadModuleInternal","set","module","delete","loadTime","push","toFixed","moduleVariant","_selectModuleVariant","modulePath","_getModulePath","_loadWASMFromPath","fallbackPath","Error","forceMinimal","variant","basePath","path","response","fetch","ok","status","statusText","bytes","arrayBuffer","instance","exports","memory","createNeuralAgent","config","length","_performMemoryCleanup","agent","id","Date","Math","random","toString","substr","network","_createNetwork","createdAt","lastUsed","_estimateMemoryUsage","inferenceCount","avgInferenceTime","initTime","runInference","agentId","input","find","a","output","_runNetworkInference","inferenceTime","currentTime","maxAge","beforeCount","filter","age","removedCount","window","gc","_getCurrentMemoryUsage","getPerformanceMetrics","avgLoadTime","reduce","b","avgInitTime","currentMemoryUsage","activeAgents","Number","memoryUtilization","totalInferences","performanceTargetsMet","inferenceLatency","agentCapacity","run","Promise","resolve","setTimeout","map","x","tanh","baseMemory","layerMemory","layers","usedJSHeapSize","total","WASMCompatibilityTester","runCompatibilityTests","loader","results","timestamp","toISOString","userAgent","loadTest","performanceTest","memoryTest","agentTest","errors","testInput","Array","from","result","agents","i","metrics"],"sources":["wasm-loader.js"],"sourcesContent":["/**\n * WASM Loading and Initialization System for ruv-FANN\n * Optimized for <100ms inference latency with memory-efficient module management\n */\n\nclass WASMNeuralLoader {\n    constructor() {\n        this.modules = new Map();\n        this.loadingPromises = new Map();\n        this.performanceMetrics = {\n            loadTimes: [],\n            initTimes: [],\n            memoryUsage: [],\n            inferenceLatencies: []\n        };\n        this.browserCapabilities = null;\n        this.agentPool = [];\n        this.maxAgents = 25;\n        this.memoryLimit = 2 * 1024 * 1024 * 1024; // 2GB\n    }\n\n    /**\n     * Detect browser capabilities and WASM features\n     */\n    async detectCapabilities() {\n        if (this.browserCapabilities) {\n            return this.browserCapabilities;\n        }\n\n        const capabilities = {\n            wasm: false,\n            simd: false,\n            threads: false,\n            webgpu: false,\n            bulk_memory: false,\n            reference_types: false,\n            sharedArrayBuffer: typeof SharedArrayBuffer !== 'undefined'\n        };\n\n        try {\n            // Test basic WASM support\n            if (typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function') {\n                capabilities.wasm = true;\n\n                // Test SIMD support\n                try {\n                    const simdTestBytes = new Uint8Array([\n                        0x00, 0x61, 0x73, 0x6d, // WASM magic\n                        0x01, 0x00, 0x00, 0x00, // version\n                        0x01, 0x05, 0x01, 0x60, 0x00, 0x00, // type section\n                        0x03, 0x02, 0x01, 0x00, // function section\n                        0x0a, 0x09, 0x01, 0x07, 0x00, 0xfd, 0x00, 0xfd, 0x0f, 0x0b // code with SIMD\n                    ]);\n                    await WebAssembly.compile(simdTestBytes);\n                    capabilities.simd = true;\n                } catch (e) {\n                    console.warn('SIMD not supported:', e.message);\n                }\n\n                // Test bulk memory operations\n                try {\n                    const bulkMemoryBytes = new Uint8Array([\n                        0x00, 0x61, 0x73, 0x6d, // WASM magic\n                        0x01, 0x00, 0x00, 0x00, // version\n                        0x05, 0x03, 0x01, 0x00, 0x00, // memory section\n                        0x0a, 0x07, 0x01, 0x05, 0x00, 0xfc, 0x08, 0x00, 0x00, 0x0b // bulk memory instruction\n                    ]);\n                    await WebAssembly.compile(bulkMemoryBytes);\n                    capabilities.bulk_memory = true;\n                } catch (e) {\n                    console.warn('Bulk memory not supported:', e.message);\n                }\n\n                // Test WebGPU support\n                if (navigator.gpu) {\n                    try {\n                        const adapter = await navigator.gpu.requestAdapter();\n                        if (adapter) {\n                            capabilities.webgpu = true;\n                        }\n                    } catch (e) {\n                        console.warn('WebGPU not supported:', e.message);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('Error detecting WASM capabilities:', error);\n        }\n\n        this.browserCapabilities = capabilities;\n        console.log('Browser capabilities detected:', capabilities);\n        return capabilities;\n    }\n\n    /**\n     * Load WASM module with fallback strategy\n     */\n    async loadModule(moduleName, options = {}) {\n        const startTime = performance.now();\n\n        if (this.modules.has(moduleName)) {\n            return this.modules.get(moduleName);\n        }\n\n        if (this.loadingPromises.has(moduleName)) {\n            return this.loadingPromises.get(moduleName);\n        }\n\n        const loadPromise = this._loadModuleInternal(moduleName, options);\n        this.loadingPromises.set(moduleName, loadPromise);\n\n        try {\n            const module = await loadPromise;\n            this.modules.set(moduleName, module);\n            this.loadingPromises.delete(moduleName);\n\n            const loadTime = performance.now() - startTime;\n            this.performanceMetrics.loadTimes.push(loadTime);\n            console.log(`Module ${moduleName} loaded in ${loadTime.toFixed(2)}ms`);\n\n            return module;\n        } catch (error) {\n            this.loadingPromises.delete(moduleName);\n            throw error;\n        }\n    }\n\n    /**\n     * Internal module loading with fallback\n     */\n    async _loadModuleInternal(moduleName, options) {\n        const capabilities = await this.detectCapabilities();\n        \n        // Determine best module variant\n        const moduleVariant = this._selectModuleVariant(capabilities, options);\n        const modulePath = this._getModulePath(moduleName, moduleVariant);\n\n        console.log(`Loading ${moduleName} variant: ${moduleVariant}`);\n\n        try {\n            // Try loading the optimal variant first\n            return await this._loadWASMFromPath(modulePath);\n        } catch (error) {\n            console.warn(`Failed to load optimal variant ${moduleVariant}:`, error);\n\n            // Fallback to minimal variant\n            if (moduleVariant !== 'minimal') {\n                console.log(`Falling back to minimal variant for ${moduleName}`);\n                const fallbackPath = this._getModulePath(moduleName, 'minimal');\n                return await this._loadWASMFromPath(fallbackPath);\n            }\n\n            throw new Error(`Failed to load ${moduleName}: ${error.message}`);\n        }\n    }\n\n    /**\n     * Select optimal module variant based on capabilities\n     */\n    _selectModuleVariant(capabilities, options) {\n        if (options.forceMinimal) {\n            return 'minimal';\n        }\n\n        if (capabilities.simd && capabilities.bulk_memory && capabilities.webgpu) {\n            return 'optimal';\n        } else if (capabilities.simd && capabilities.bulk_memory) {\n            return 'simd';\n        } else if (capabilities.wasm) {\n            return 'standard';\n        }\n\n        return 'minimal';\n    }\n\n    /**\n     * Get module path based on variant\n     */\n    _getModulePath(moduleName, variant) {\n        const basePath = './wasm/';\n        const fallbackPath = './wasm/fallback/';\n\n        switch (variant) {\n            case 'optimal':\n                return `${basePath}ruv_fann_bg.wasm`;\n            case 'simd':\n                return `${basePath}ruv_swarm_simd.wasm`;\n            case 'standard':\n                return `${basePath}ruv_fann.wasm`;\n            case 'minimal':\n                return `${fallbackPath}ruv_fann_bg.wasm`;\n            default:\n                return `${basePath}ruv_fann_bg.wasm`;\n        }\n    }\n\n    /**\n     * Load WASM from specific path\n     */\n    async _loadWASMFromPath(path) {\n        const response = await fetch(path);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch WASM: ${response.status} ${response.statusText}`);\n        }\n\n        const bytes = await response.arrayBuffer();\n        const module = await WebAssembly.compile(bytes);\n        const instance = await WebAssembly.instantiate(module);\n\n        return {\n            module,\n            instance,\n            exports: instance.exports,\n            memory: instance.exports.memory\n        };\n    }\n\n    /**\n     * Create neural agent with memory management\n     */\n    async createNeuralAgent(config = {}) {\n        if (this.agentPool.length >= this.maxAgents) {\n            // Memory pressure - try to free up space\n            await this._performMemoryCleanup();\n            \n            if (this.agentPool.length >= this.maxAgents) {\n                throw new Error(`Maximum agent limit reached (${this.maxAgents})`);\n            }\n        }\n\n        const startTime = performance.now();\n        \n        try {\n            const module = await this.loadModule('ruv-fann');\n            \n            // Create agent instance\n            const agent = {\n                id: `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n                module,\n                network: this._createNetwork(module, config),\n                createdAt: Date.now(),\n                lastUsed: Date.now(),\n                memoryUsage: this._estimateMemoryUsage(config),\n                inferenceCount: 0,\n                avgInferenceTime: 0\n            };\n\n            this.agentPool.push(agent);\n            \n            const initTime = performance.now() - startTime;\n            this.performanceMetrics.initTimes.push(initTime);\n            \n            console.log(`Neural agent ${agent.id} created in ${initTime.toFixed(2)}ms`);\n            \n            return agent;\n        } catch (error) {\n            console.error('Failed to create neural agent:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Run inference with performance monitoring\n     */\n    async runInference(agentId, input) {\n        const agent = this.agentPool.find(a => a.id === agentId);\n        if (!agent) {\n            throw new Error(`Agent ${agentId} not found`);\n        }\n\n        const startTime = performance.now();\n        \n        try {\n            // Update last used timestamp\n            agent.lastUsed = Date.now();\n            \n            // Run neural network inference\n            const output = await this._runNetworkInference(agent.network, input);\n            \n            const inferenceTime = performance.now() - startTime;\n            \n            // Update metrics\n            agent.inferenceCount++;\n            agent.avgInferenceTime = (agent.avgInferenceTime * (agent.inferenceCount - 1) + inferenceTime) / agent.inferenceCount;\n            this.performanceMetrics.inferenceLatencies.push(inferenceTime);\n            \n            // Check performance target\n            if (inferenceTime > 100) {\n                console.warn(`Inference time ${inferenceTime.toFixed(2)}ms exceeds 100ms target for agent ${agentId}`);\n            }\n            \n            return {\n                output,\n                inferenceTime,\n                agentId\n            };\n        } catch (error) {\n            console.error(`Inference failed for agent ${agentId}:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Memory management and cleanup\n     */\n    async _performMemoryCleanup() {\n        console.log('Performing memory cleanup...');\n        \n        const currentTime = Date.now();\n        const maxAge = 5 * 60 * 1000; // 5 minutes\n        \n        // Remove old unused agents\n        const beforeCount = this.agentPool.length;\n        this.agentPool = this.agentPool.filter(agent => {\n            const age = currentTime - agent.lastUsed;\n            if (age > maxAge) {\n                console.log(`Removing aged agent ${agent.id} (age: ${(age / 1000).toFixed(1)}s)`);\n                return false;\n            }\n            return true;\n        });\n        \n        const removedCount = beforeCount - this.agentPool.length;\n        if (removedCount > 0) {\n            console.log(`Cleaned up ${removedCount} aged agents`);\n        }\n        \n        // Force garbage collection if available\n        if (window.gc) {\n            window.gc();\n        }\n        \n        // Update memory usage metrics\n        const memoryUsage = this._getCurrentMemoryUsage();\n        this.performanceMetrics.memoryUsage.push(memoryUsage);\n        \n        if (memoryUsage > this.memoryLimit * 0.8) {\n            console.warn(`Memory usage ${(memoryUsage / 1024 / 1024 / 1024).toFixed(2)}GB approaching limit`);\n        }\n    }\n\n    /**\n     * Get performance metrics\n     */\n    getPerformanceMetrics() {\n        const avgLoadTime = this.performanceMetrics.loadTimes.reduce((a, b) => a + b, 0) / this.performanceMetrics.loadTimes.length || 0;\n        const avgInitTime = this.performanceMetrics.initTimes.reduce((a, b) => a + b, 0) / this.performanceMetrics.initTimes.length || 0;\n        const avgInferenceTime = this.performanceMetrics.inferenceLatencies.reduce((a, b) => a + b, 0) / this.performanceMetrics.inferenceLatencies.length || 0;\n        const currentMemoryUsage = this._getCurrentMemoryUsage();\n        \n        return {\n            activeAgents: this.agentPool.length,\n            maxAgents: this.maxAgents,\n            avgLoadTime: Number(avgLoadTime.toFixed(2)),\n            avgInitTime: Number(avgInitTime.toFixed(2)),\n            avgInferenceTime: Number(avgInferenceTime.toFixed(2)),\n            currentMemoryUsage: Number((currentMemoryUsage / 1024 / 1024).toFixed(2)), // MB\n            memoryLimit: Number((this.memoryLimit / 1024 / 1024).toFixed(2)), // MB\n            memoryUtilization: Number((currentMemoryUsage / this.memoryLimit * 100).toFixed(1)), // %\n            totalInferences: this.performanceMetrics.inferenceLatencies.length,\n            browserCapabilities: this.browserCapabilities,\n            performanceTargetsMet: {\n                inferenceLatency: avgInferenceTime < 100,\n                memoryLimit: currentMemoryUsage < this.memoryLimit,\n                agentCapacity: this.agentPool.length <= this.maxAgents\n            }\n        };\n    }\n\n    /**\n     * Helper methods\n     */\n    _createNetwork(module, config) {\n        // This would integrate with the actual WASM neural network\n        return {\n            run: (input) => this._runNetworkInference(null, input),\n            config\n        };\n    }\n\n    async _runNetworkInference(network, input) {\n        // Simulate neural network inference\n        // In real implementation, this would call WASM functions\n        await new Promise(resolve => setTimeout(resolve, Math.random() * 50)); // 0-50ms\n        return input.map(x => Math.tanh(x * 0.5 + Math.random() * 0.1));\n    }\n\n    _estimateMemoryUsage(config) {\n        // Estimate memory usage based on network configuration\n        const baseMemory = 1024 * 1024; // 1MB base\n        const layerMemory = (config.layers || [10, 10, 1]).reduce((a, b) => a + b, 0) * 1000; // ~1KB per neuron\n        return baseMemory + layerMemory;\n    }\n\n    _getCurrentMemoryUsage() {\n        // Estimate current memory usage\n        if (performance.memory) {\n            return performance.memory.usedJSHeapSize;\n        }\n        \n        // Fallback estimation\n        return this.agentPool.reduce((total, agent) => total + agent.memoryUsage, 0);\n    }\n}\n\n// Cross-browser compatibility testing\nclass WASMCompatibilityTester {\n    static async runCompatibilityTests() {\n        const loader = new WASMNeuralLoader();\n        const results = {\n            timestamp: new Date().toISOString(),\n            userAgent: navigator.userAgent,\n            capabilities: null,\n            loadTest: false,\n            performanceTest: false,\n            memoryTest: false,\n            agentTest: false,\n            errors: []\n        };\n\n        try {\n            // Test 1: Capability detection\n            results.capabilities = await loader.detectCapabilities();\n            console.log('✓ Capability detection passed');\n\n            // Test 2: Module loading\n            try {\n                await loader.loadModule('ruv-fann');\n                results.loadTest = true;\n                console.log('✓ Module loading passed');\n            } catch (error) {\n                results.errors.push(`Load test failed: ${error.message}`);\n            }\n\n            // Test 3: Performance test\n            try {\n                const agent = await loader.createNeuralAgent({\n                    layers: [10, 5, 1]\n                });\n                \n                const testInput = Array.from({length: 10}, () => Math.random());\n                const result = await loader.runInference(agent.id, testInput);\n                \n                if (result.inferenceTime < 100) {\n                    results.performanceTest = true;\n                    console.log(`✓ Performance test passed (${result.inferenceTime.toFixed(2)}ms)`);\n                } else {\n                    results.errors.push(`Performance test failed: ${result.inferenceTime.toFixed(2)}ms > 100ms`);\n                }\n            } catch (error) {\n                results.errors.push(`Performance test failed: ${error.message}`);\n            }\n\n            // Test 4: Memory test (create multiple agents)\n            try {\n                const agents = [];\n                for (let i = 0; i < 5; i++) {\n                    const agent = await loader.createNeuralAgent({\n                        layers: [5, 3, 1]\n                    });\n                    agents.push(agent);\n                }\n                \n                const metrics = loader.getPerformanceMetrics();\n                if (metrics.memoryUtilization < 80) {\n                    results.memoryTest = true;\n                    console.log(`✓ Memory test passed (${metrics.memoryUtilization}% utilization)`);\n                } else {\n                    results.errors.push(`Memory test failed: ${metrics.memoryUtilization}% > 80%`);\n                }\n                \n                results.agentTest = metrics.activeAgents === 5;\n                console.log(`✓ Agent test: ${metrics.activeAgents}/5 agents created`);\n            } catch (error) {\n                results.errors.push(`Memory/Agent test failed: ${error.message}`);\n            }\n\n        } catch (error) {\n            results.errors.push(`Compatibility test failed: ${error.message}`);\n        }\n\n        return results;\n    }\n}\n\n// Export for different environments\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { WASMNeuralLoader, WASMCompatibilityTester };\n} else if (typeof window !== 'undefined') {\n    window.WASMNeuralLoader = WASMNeuralLoader;\n    window.WASMCompatibilityTester = WASMCompatibilityTester;\n}"],"mappings":"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","ignoreList":[]}