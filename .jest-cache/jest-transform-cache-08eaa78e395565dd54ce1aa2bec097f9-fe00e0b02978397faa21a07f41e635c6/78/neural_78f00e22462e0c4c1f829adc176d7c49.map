{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/types/neural.ts","mappings":";AAAA;;;GAGG;;;AAEH,IAAY,UAOX;AAPD,WAAY,UAAU;IACpB,2CAA6B,CAAA;IAC7B,+BAAiB,CAAA;IACjB,mCAAqB,CAAA;IACrB,2BAAa,CAAA;IACb,yCAA2B,CAAA;IAC3B,6BAAe,CAAA;AACjB,CAAC,EAPW,UAAU,0BAAV,UAAU,QAOrB;AA6RD,cAAc;AAEd,MAAa,gBAAiB,SAAQ,KAAK;IACzC,YACE,OAAe,EACR,IAAY,EACZ,OAAgB,EAChB,OAAa;QAEpB,KAAK,CAAC,OAAO,CAAC,CAAC;QAJf;;;;mBAAO,IAAI;WAAQ;QACnB;;;;mBAAO,OAAO;WAAS;QACvB;;;;mBAAO,OAAO;WAAM;QAGpB,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACjC,CAAC;CACF;AAVD,4CAUC;AAED,MAAa,SAAU,SAAQ,KAAK;IAClC,YACE,OAAe,EACR,SAAiB,EACjB,OAAa;QAEpB,KAAK,CAAC,OAAO,CAAC,CAAC;QAHf;;;;mBAAO,SAAS;WAAQ;QACxB;;;;mBAAO,OAAO;WAAM;QAGpB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;IAC1B,CAAC;CACF;AATD,8BASC;AAED,MAAa,gBAAiB,SAAQ,KAAK;IACzC,YACE,OAAe,EACR,MAAc,EACd,KAAa,EACb,SAAiB;QAExB,KAAK,CAAC,OAAO,CAAC,CAAC;QAJf;;;;mBAAO,MAAM;WAAQ;QACrB;;;;mBAAO,KAAK;WAAQ;QACpB;;;;mBAAO,SAAS;WAAQ;QAGxB,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACjC,CAAC;CACF;AAVD,4CAUC;AA+FD,8DAA8D","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/types/neural.ts"],"sourcesContent":["/**\n * Neural Agent Type Definitions for SASI Integration\n * Comprehensive TypeScript interfaces for neural agent system\n */\n\nexport enum AgentState {\n  INITIALIZING = 'initializing',\n  ACTIVE = 'active',\n  LEARNING = 'learning',\n  IDLE = 'idle',\n  TERMINATING = 'terminating',\n  ERROR = 'error'\n}\n\nexport interface NeuralConfiguration {\n  type: 'mlp' | 'lstm' | 'cnn' | 'transformer' | 'custom';\n  architecture: number[]; // Layer sizes [input, hidden1, hidden2, ..., output]\n  activationFunction?: 'relu' | 'sigmoid' | 'tanh' | 'leaky_relu' | 'gelu';\n  learningRate?: number;\n  momentum?: number;\n  regularization?: {\n    type: 'l1' | 'l2' | 'dropout';\n    value: number;\n  };\n  simdOptimized?: boolean;\n  customConfig?: Record<string, any>;\n}\n\nexport interface NeuralAgent {\n  id: string;\n  config: NeuralConfiguration;\n  network: any; // WASM network instance\n  state: AgentState;\n  createdAt: number;\n  lastActive: number;\n  memoryUsage: number; // bytes\n  totalInferences: number;\n  averageInferenceTime: number; // ms\n  learningProgress: number; // 0-1\n  connectionStrength: number; // 0-1\n  metadata?: Record<string, any>;\n}\n\nexport interface PerformanceMetrics {\n  totalAgentsSpawned: number;\n  averageSpawnTime: number; // ms\n  averageInferenceTime: number; // ms\n  memoryUsage: number; // bytes\n  activeLearningTasks: number;\n  systemHealthScore: number; // 0-100\n}\n\nexport interface LearningSession {\n  sessionId: string;\n  agentId: string;\n  startTime: number;\n  duration: number;\n  epochs: number;\n  finalAccuracy: number;\n  dataPoints: number;\n  convergenceEpoch: number;\n}\n\nexport interface NetworkTopology {\n  nodes: Array<{\n    id: string;\n    type: string;\n    state: AgentState;\n    performance: number;\n    memoryUsage: number;\n  }>;\n  connections: Array<[string, string, number]>; // [from, to, strength]\n  totalNodes: number;\n  activeConnections: number;\n  networkHealth: number; // 0-100\n}\n\nexport interface AgentMetrics {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'idle' | 'learning' | 'error';\n  performance: number;\n  memoryUsage: number;\n  lastActivity: number;\n  totalTasks: number;\n  successRate: number;\n  learningProgress: number;\n  connections: string[];\n}\n\nexport interface SwarmStatistics {\n  totalAgents: number;\n  activeAgents: number;\n  averagePerformance: number;\n  totalMemoryUsage: number;\n  totalTasks: number;\n  systemHealth: number;\n  networkTopology: NetworkTopology;\n  learningMetrics: {\n    activeSessions: number;\n    completedSessions: number;\n    averageAccuracy: number;\n    knowledgeTransfers: number;\n  };\n}\n\n// SASI Integration Types\n\nexport interface SASIAgent {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'idle' | 'learning' | 'error';\n  performance: number;\n  memoryUsage: number;\n  lastActivity: number;\n  totalTasks: number;\n  successRate: number;\n  learningProgress: number;\n  connections: string[];\n  neuralAgent?: NeuralAgent; // Optional neural backing\n}\n\nexport interface SASISwarmData {\n  agents: SASIAgent[];\n  statistics: SwarmStatistics;\n  topology: NetworkTopology;\n  isNeuralEnabled: boolean;\n  performanceMetrics: PerformanceMetrics;\n}\n\n// Performance Integration Types\n\nexport interface PerformanceTarget {\n  agentSpawnTime: number; // ms\n  inferenceTime: number; // ms  \n  memoryPerAgent: number; // bytes\n  wasmOperationTime: number; // ms\n}\n\nexport interface PerformanceAlert {\n  type: 'spawn_time' | 'inference_time' | 'memory_usage' | 'system_health';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  value: number;\n  threshold: number;\n  timestamp: number;\n  agentId?: string;\n}\n\nexport interface PerformanceReport {\n  timestamp: number;\n  targets: PerformanceTarget;\n  current: {\n    averageSpawnTime: number;\n    averageInferenceTime: number;\n    memoryUsage: number;\n    wasmOperationTime: number;\n  };\n  alerts: PerformanceAlert[];\n  healthScore: number;\n  recommendations: string[];\n}\n\n// WASM Integration Types\n\nexport interface WASMModule {\n  createNeuralNetwork(config: NeuralConfiguration): Promise<any>;\n  runInference(network: any, inputs: number[]): Promise<number[]>;\n  trainNetwork(network: any, data: TrainingData[], epochs: number): Promise<TrainingResult>;\n  serializeWeights(network: any): Promise<ArrayBuffer>;\n  deserializeWeights(network: any, weights: ArrayBuffer, influence?: number): Promise<void>;\n  getMemoryUsage(): number;\n  enableSIMD: boolean;\n  destroyNetwork?(network: any): void;\n}\n\nexport interface TrainingData {\n  inputs: number[];\n  outputs: number[];\n}\n\nexport interface TrainingResult {\n  accuracy: number;\n  loss: number;\n  convergenceEpoch?: number;\n  trainingTime: number;\n}\n\n// Database Types\n\nexport interface AgentStateRecord {\n  agentId: string;\n  state: AgentState;\n  config: NeuralConfiguration;\n  createdAt: number;\n  lastActive: number;\n  metadata: string; // JSON\n}\n\nexport interface WeightsRecord {\n  agentId: string;\n  weights: ArrayBuffer;\n  savedAt: number;\n  checksum: string;\n}\n\nexport interface LearningRecord {\n  sessionId: string;\n  agentId: string;\n  startTime: number;\n  duration: number;\n  accuracy: number;\n  metadata: string; // JSON\n}\n\n// Event Types\n\nexport interface AgentEventData {\n  agentId: string;\n  timestamp: number;\n  [key: string]: any;\n}\n\nexport interface AgentSpawnedEvent extends AgentEventData {\n  spawnTime: number;\n  config: NeuralConfiguration;\n  memoryUsage: number;\n}\n\nexport interface InferenceCompleteEvent extends AgentEventData {\n  inferenceTime: number;\n  inputSize: number;\n  outputSize: number;\n}\n\nexport interface LearningCompleteEvent extends AgentEventData {\n  sessionId: string;\n  duration: number;\n  finalAccuracy: number;\n  epochs: number;\n}\n\nexport interface AgentTerminatedEvent extends AgentEventData {\n  reason?: string;\n}\n\nexport interface KnowledgeSharedEvent extends AgentEventData {\n  sourceAgentId: string;\n  targetAgentIds: string[];\n}\n\n// Configuration Types\n\nexport interface NeuralSystemConfig {\n  manager: {\n    maxAgents: number;\n    memoryLimitPerAgent: number;\n    inferenceTimeout: number;\n    simdEnabled: boolean;\n    crossLearningEnabled: boolean;\n    persistenceEnabled: boolean;\n    performanceMonitoring: boolean;\n  };\n  performance: {\n    targets: PerformanceTarget;\n    alertThresholds: Record<string, number>;\n    monitoringInterval: number;\n  };\n  wasm: {\n    modulePath: string;\n    simdVariant: boolean;\n    memorySize: number;\n  };\n  database: {\n    enabled: boolean;\n    path: string;\n    backupInterval: number;\n  };\n}\n\n// Utility Types\n\nexport type AgentID = string;\nexport type NetworkID = string;\nexport type SessionID = string;\n\nexport interface PartialNeuralAgent extends Partial<NeuralAgent> {\n  id: string;\n}\n\nexport interface PartialSASIAgent extends Partial<SASIAgent> {\n  id: string;\n  name: string;\n}\n\n// Error Types\n\nexport class NeuralAgentError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public agentId?: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'NeuralAgentError';\n  }\n}\n\nexport class WASMError extends Error {\n  constructor(\n    message: string,\n    public operation: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'WASMError';\n  }\n}\n\nexport class PerformanceError extends Error {\n  constructor(\n    message: string,\n    public metric: string,\n    public value: number,\n    public threshold: number\n  ) {\n    super(message);\n    this.name = 'PerformanceError';\n  }\n}\n\n// Additional missing types for PerformanceIntegration\n\nexport interface NeuralPerformanceSnapshot {\n  timestamp: number;\n  agentId: string;\n  spawnTime: number;\n  inferenceTime: number;\n  memoryUsage: number;\n  systemHealth: number;\n  cpuUsage: number;\n  neuralActivity: number;\n  totalNeurons: number;\n  totalSynapses: number;\n  meshConnectivity: number;\n  wasmAcceleration: boolean;\n  accuracy?: number;\n  performance?: number;\n  latency?: number;\n  memory?: number;\n}\n\nexport interface SystemHealthMetrics {\n  overallScore: number;\n  componentScores: {\n    neural: number;\n    memory: number;\n    performance: number;\n    network: number;\n    wasm: number;\n  };\n  activeAlerts: any[];\n  recommendations: string[];\n  uptime: number;\n  lastCheck: Date;\n}\n\n// Extended PerformanceAlert interface with missing properties\nexport interface ExtendedPerformanceAlert extends PerformanceAlert {\n  id: string;\n  acknowledged: boolean;\n  resolvedAt?: number;\n  details?: any;\n}\n\n// Enhanced NeuralAgent interface with required properties\nexport interface EnhancedNeuralAgent extends NeuralAgent {\n  neuralProperties: {\n    neuronId: string;\n    meshId: string;\n    nodeType: 'sensory' | 'motor' | 'inter' | 'pyramidal' | 'purkinje';\n    layer: number;\n    threshold: number;\n    activation: number;\n    connections: string[];\n    spikeHistory: number[];\n    lastSpike?: Date;\n  };\n  type: 'researcher' | 'coder' | 'tester' | 'reviewer' | 'debugger' | 'neural' | 'synaptic' | 'worker';\n  capabilities: string[];\n  realtime?: {\n    cpuUsage: number;\n    memoryUsage: number;\n    networkLatency: number;\n  };\n}\n\n// Extended PerformanceMetrics interface\nexport interface ExtendedPerformanceMetrics extends PerformanceMetrics {\n  totalAgents: number;\n  activeAgents: number;\n  systemHealth: number;\n  totalNeurons: number;\n  totalSynapses: number;\n  meshConnectivity: number;\n  neuralActivity: number;\n  wasmAcceleration: boolean;\n  avgInferenceTime?: number; // Alternative to averageInferenceTime\n}\n\n// NeuralAgentManagerConfig interface\nexport interface NeuralAgentManagerConfig {\n  maxAgents: number;\n  memoryLimitPerAgent: number;\n  performanceMonitoring: boolean;\n  simdEnabled: boolean;\n  crossLearningEnabled: boolean;\n  persistenceEnabled: boolean;\n  inferenceTimeout: number;\n}\n\n// Timer type for Node.js compatibility\nexport type NodeTimer = ReturnType<typeof setTimeout>;\n\n// Types are already exported above as interfaces and classes;"],"version":3}