65249331cf4d1bf185dd7a53256304da
"use strict";
/**
 * Neural Agent Type Definitions for SASI Integration
 * Comprehensive TypeScript interfaces for neural agent system
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceError = exports.WASMError = exports.NeuralAgentError = exports.AgentState = void 0;
var AgentState;
(function (AgentState) {
    AgentState["INITIALIZING"] = "initializing";
    AgentState["ACTIVE"] = "active";
    AgentState["LEARNING"] = "learning";
    AgentState["IDLE"] = "idle";
    AgentState["TERMINATING"] = "terminating";
    AgentState["ERROR"] = "error";
})(AgentState || (exports.AgentState = AgentState = {}));
// Error Types
class NeuralAgentError extends Error {
    constructor(message, code, agentId, details) {
        super(message);
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code
        });
        Object.defineProperty(this, "agentId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: agentId
        });
        Object.defineProperty(this, "details", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: details
        });
        this.name = 'NeuralAgentError';
    }
}
exports.NeuralAgentError = NeuralAgentError;
class WASMError extends Error {
    constructor(message, operation, details) {
        super(message);
        Object.defineProperty(this, "operation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: operation
        });
        Object.defineProperty(this, "details", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: details
        });
        this.name = 'WASMError';
    }
}
exports.WASMError = WASMError;
class PerformanceError extends Error {
    constructor(message, metric, value, threshold) {
        super(message);
        Object.defineProperty(this, "metric", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metric
        });
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
        });
        Object.defineProperty(this, "threshold", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: threshold
        });
        this.name = 'PerformanceError';
    }
}
exports.PerformanceError = PerformanceError;
// Types are already exported above as interfaces and classes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,