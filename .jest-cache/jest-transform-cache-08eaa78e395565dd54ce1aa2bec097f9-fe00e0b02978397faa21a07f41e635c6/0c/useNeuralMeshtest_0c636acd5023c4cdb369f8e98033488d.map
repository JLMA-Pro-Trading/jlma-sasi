{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/hooks/useNeuralMesh.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/hooks/useNeuralMesh.test.ts"],"sourcesContent":["/**\n * Comprehensive Unit Tests for useNeuralMesh Hook\n * Target: 95%+ coverage for custom hook functionality\n */\n\nimport { renderHook, act, waitFor } from '@testing-library/react';\nimport { useNeuralMesh } from '../../../src/hooks/useNeuralMesh';\n\n// Mock the neural mesh service\njest.mock('../../../src/services/NeuralMeshService', () => ({\n  NeuralMeshService: jest.fn().mockImplementation(() => ({\n    initialize: jest.fn().mockResolvedValue(true),\n    addNode: jest.fn().mockResolvedValue('node-123'),\n    removeNode: jest.fn().mockResolvedValue(undefined),\n    createConnection: jest.fn().mockResolvedValue(undefined),\n    updateConnection: jest.fn().mockResolvedValue(undefined),\n    removeConnection: jest.fn().mockResolvedValue(undefined),\n    propagateSignal: jest.fn().mockResolvedValue({ output: 0.75 }),\n    learn: jest.fn().mockResolvedValue({\n      epochs: 10,\n      finalError: 0.05,\n      convergence: true\n    }),\n    optimizeTopology: jest.fn().mockResolvedValue(undefined),\n    getPerformanceMetrics: jest.fn().mockReturnValue({\n      propagationTime: 12,\n      learningRate: 0.001,\n      networkEfficiency: 0.88,\n      memoryUsage: 2048,\n      nodeUtilization: 0.72\n    }),\n    getConnections: jest.fn().mockReturnValue([]),\n    getNodeCount: jest.fn().mockReturnValue(0),\n    isInitialized: jest.fn().mockReturnValue(true),\n    saveState: jest.fn().mockResolvedValue({}),\n    restoreState: jest.fn().mockResolvedValue(undefined),\n    exportMesh: jest.fn().mockResolvedValue('{}'),\n    shutdown: jest.fn().mockResolvedValue(undefined),\n    on: jest.fn(),\n    off: jest.fn(),\n    emit: jest.fn()\n  }))\n}));\n\ndescribe('useNeuralMesh Hook - Comprehensive Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Initialization', () => {\n    test('should initialize with default configuration', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      expect(result.current.isLoading).toBe(true);\n      expect(result.current.isInitialized).toBe(false);\n      expect(result.current.error).toBeNull();\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n        expect(result.current.isLoading).toBe(false);\n      });\n    });\n\n    test('should initialize with custom configuration', async () => {\n      const config = {\n        maxNodes: 50,\n        learningRate: 0.002,\n        activationFunction: 'relu'\n      };\n\n      const { result } = renderHook(() => useNeuralMesh(config));\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n    });\n\n    test('should handle initialization errors', async () => {\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockRejectedValue(new Error('Init failed')),\n        on: jest.fn(),\n        off: jest.fn(),\n        shutdown: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.error).toBe('Failed to initialize neural mesh: Init failed');\n        expect(result.current.isInitialized).toBe(false);\n      });\n    });\n\n    test('should retry initialization on failure', async () => {\n      const mockInitialize = jest.fn()\n        .mockRejectedValueOnce(new Error('First attempt failed'))\n        .mockResolvedValueOnce(true);\n\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: mockInitialize,\n        isInitialized: jest.fn().mockReturnValue(true),\n        on: jest.fn(),\n        off: jest.fn(),\n        shutdown: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useNeuralMesh({ retryAttempts: 2 }));\n\n      await act(async () => {\n        await result.current.retryInitialization();\n      });\n\n      expect(mockInitialize).toHaveBeenCalledTimes(2);\n    });\n\n    test('should cleanup on unmount', () => {\n      const mockShutdown = jest.fn();\n      const mockOff = jest.fn();\n\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        shutdown: mockShutdown,\n        on: jest.fn(),\n        off: mockOff\n      }));\n\n      const { unmount } = renderHook(() => useNeuralMesh());\n\n      unmount();\n\n      expect(mockShutdown).toHaveBeenCalled();\n      expect(mockOff).toHaveBeenCalled();\n    });\n  });\n\n  describe('Node Management', () => {\n    test('should add nodes successfully', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      let nodeId: string = '';\n      await act(async () => {\n        nodeId = await result.current.addNode({\n          type: 'processor',\n          activationFunction: 'tanh'\n        });\n      });\n\n      expect(nodeId).toBe('node-123');\n      expect(result.current.nodeCount).toBe(0); // Mock returns 0\n    });\n\n    test('should remove nodes successfully', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        await result.current.removeNode('node-123');\n      });\n\n      // Should not throw errors\n    });\n\n    test('should handle node operation errors', async () => {\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        addNode: jest.fn().mockRejectedValue(new Error('Node add failed')),\n        isInitialized: jest.fn().mockReturnValue(true),\n        on: jest.fn(),\n        off: jest.fn(),\n        shutdown: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.addNode({ type: 'processor' });\n        } catch (error) {\n          expect(error.message).toBe('Node add failed');\n        }\n      });\n    });\n\n    test('should validate node configurations', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.addNode({ type: '' } as any);\n        } catch (error) {\n          expect(error.message).toContain('Invalid node configuration');\n        }\n      });\n    });\n  });\n\n  describe('Connection Management', () => {\n    test('should create connections successfully', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        await result.current.createConnection('node1', 'node2', 0.5);\n      });\n\n      // Should not throw errors\n    });\n\n    test('should update connection weights', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        await result.current.updateConnection('node1', 'node2', 0.8);\n      });\n\n      // Should not throw errors\n    });\n\n    test('should remove connections', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        await result.current.removeConnection('node1', 'node2');\n      });\n\n      // Should not throw errors\n    });\n\n    test('should validate connection parameters', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.createConnection('', 'node2', 0.5);\n        } catch (error) {\n          expect(error.message).toContain('Invalid connection parameters');\n        }\n      });\n    });\n  });\n\n  describe('Signal Propagation', () => {\n    test('should propagate signals successfully', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      let output: any;\n      await act(async () => {\n        output = await result.current.propagateSignal({ input: 1.0 });\n      });\n\n      expect(output.output).toBe(0.75);\n    });\n\n    test('should handle empty signal inputs', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      let output: any;\n      await act(async () => {\n        output = await result.current.propagateSignal({});\n      });\n\n      expect(output).toBeDefined();\n    });\n\n    test('should validate signal inputs', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.propagateSignal(null as any);\n        } catch (error) {\n          expect(error.message).toContain('Invalid signal input');\n        }\n      });\n    });\n\n    test('should handle propagation errors', async () => {\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        propagateSignal: jest.fn().mockRejectedValue(new Error('Propagation failed')),\n        isInitialized: jest.fn().mockReturnValue(true),\n        on: jest.fn(),\n        off: jest.fn(),\n        shutdown: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.propagateSignal({ input: 1.0 });\n        } catch (error) {\n          expect(error.message).toBe('Propagation failed');\n        }\n      });\n    });\n  });\n\n  describe('Learning and Training', () => {\n    test('should train mesh successfully', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      const trainingData = [\n        { inputs: { input: 0.0 }, outputs: { output: 0.0 } },\n        { inputs: { input: 1.0 }, outputs: { output: 1.0 } }\n      ];\n\n      let session: any;\n      await act(async () => {\n        session = await result.current.trainMesh(trainingData, 10);\n      });\n\n      expect(session.epochs).toBe(10);\n      expect(session.finalError).toBe(0.05);\n      expect(session.convergence).toBe(true);\n    });\n\n    test('should handle training errors', async () => {\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        learn: jest.fn().mockRejectedValue(new Error('Training failed')),\n        isInitialized: jest.fn().mockReturnValue(true),\n        on: jest.fn(),\n        off: jest.fn(),\n        shutdown: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.trainMesh([], 10);\n        } catch (error) {\n          expect(error.message).toBe('Training failed');\n        }\n      });\n    });\n\n    test('should validate training data', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.trainMesh([], 10);\n        } catch (error) {\n          expect(error.message).toContain('Training data cannot be empty');\n        }\n      });\n    });\n\n    test('should validate training epochs', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      const trainingData = [\n        { inputs: { input: 1.0 }, outputs: { output: 1.0 } }\n      ];\n\n      await act(async () => {\n        try {\n          await result.current.trainMesh(trainingData, -1);\n        } catch (error) {\n          expect(error.message).toContain('Epochs must be positive');\n        }\n      });\n    });\n  });\n\n  describe('Optimization', () => {\n    test('should optimize topology successfully', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        await result.current.optimizeTopology();\n      });\n\n      // Should not throw errors\n    });\n\n    test('should handle optimization errors', async () => {\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        optimizeTopology: jest.fn().mockRejectedValue(new Error('Optimization failed')),\n        isInitialized: jest.fn().mockReturnValue(true),\n        on: jest.fn(),\n        off: jest.fn(),\n        shutdown: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.optimizeTopology();\n        } catch (error) {\n          expect(error.message).toBe('Optimization failed');\n        }\n      });\n    });\n\n    test('should track optimization metrics', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      const metrics = result.current.getMetrics();\n\n      expect(metrics.propagationTime).toBe(12);\n      expect(metrics.networkEfficiency).toBe(0.88);\n      expect(metrics.memoryUsage).toBe(2048);\n      expect(metrics.nodeUtilization).toBe(0.72);\n    });\n  });\n\n  describe('State Management', () => {\n    test('should save and restore state', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      let savedState: any;\n      await act(async () => {\n        savedState = await result.current.saveState();\n      });\n\n      expect(savedState).toBeDefined();\n\n      await act(async () => {\n        await result.current.restoreState(savedState);\n      });\n\n      // Should not throw errors\n    });\n\n    test('should export mesh data', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      let exportData: string = '';\n      await act(async () => {\n        exportData = await result.current.exportMesh('json');\n      });\n\n      expect(exportData).toBe('{}');\n    });\n\n    test('should handle state operation errors', async () => {\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        saveState: jest.fn().mockRejectedValue(new Error('Save failed')),\n        isInitialized: jest.fn().mockReturnValue(true),\n        on: jest.fn(),\n        off: jest.fn(),\n        shutdown: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.saveState();\n        } catch (error) {\n          expect(error.message).toBe('Save failed');\n        }\n      });\n    });\n  });\n\n  describe('Event Handling', () => {\n    test('should handle mesh events correctly', async () => {\n      let eventCallback: Function;\n      const mockOn = jest.fn((event, callback) => {\n        if (event === 'nodeAdded') {\n          eventCallback = callback;\n        }\n      });\n\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        isInitialized: jest.fn().mockReturnValue(true),\n        getNodeCount: jest.fn().mockReturnValue(1),\n        on: mockOn,\n        off: jest.fn(),\n        shutdown: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Simulate event\n      act(() => {\n        if (eventCallback) {\n          eventCallback({ nodeId: 'new-node' });\n        }\n      });\n\n      expect(result.current.nodeCount).toBe(1);\n    });\n\n    test('should clean up event listeners', () => {\n      const mockOff = jest.fn();\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        on: jest.fn(),\n        off: mockOff,\n        shutdown: jest.fn()\n      }));\n\n      const { unmount } = renderHook(() => useNeuralMesh());\n\n      unmount();\n\n      expect(mockOff).toHaveBeenCalled();\n    });\n  });\n\n  describe('Performance and Memory', () => {\n    test('should throttle frequent operations', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Rapidly call propagateSignal multiple times\n      const signals = Array(10).fill({ input: 1.0 });\n      \n      await act(async () => {\n        await Promise.all(signals.map(signal => \n          result.current.propagateSignal(signal)\n        ));\n      });\n\n      // Should handle rapid calls efficiently\n    });\n\n    test('should memoize expensive computations', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      const metrics1 = result.current.getMetrics();\n      const metrics2 = result.current.getMetrics();\n\n      // Should return the same reference for unchanged data\n      expect(metrics1).toBe(metrics2);\n    });\n\n    test('should handle memory pressure gracefully', async () => {\n      const { result } = renderHook(() => useNeuralMesh({ \n        maxNodes: 1000,\n        memoryLimit: 1024 * 1024 // 1MB limit\n      }));\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Should initialize without errors even with memory constraints\n    });\n  });\n\n  describe('Error Recovery', () => {\n    test('should recover from temporary failures', async () => {\n      const mockService = {\n        initialize: jest.fn().mockResolvedValue(true),\n        propagateSignal: jest.fn()\n          .mockRejectedValueOnce(new Error('Temporary failure'))\n          .mockResolvedValueOnce({ output: 0.5 }),\n        isInitialized: jest.fn().mockReturnValue(true),\n        on: jest.fn(),\n        off: jest.fn(),\n        shutdown: jest.fn()\n      };\n\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => mockService);\n\n      const { result } = renderHook(() => useNeuralMesh({ \n        retryAttempts: 2,\n        retryDelay: 10\n      }));\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // First call should fail, second should succeed with retry\n      let output: any;\n      await act(async () => {\n        try {\n          output = await result.current.propagateSignal({ input: 1.0 });\n        } catch (error) {\n          // Retry should be attempted automatically\n        }\n      });\n\n      expect(mockService.propagateSignal).toHaveBeenCalledTimes(1);\n    });\n\n    test('should clear errors after successful operations', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      // Set error state\n      act(() => {\n        (result.current as any).setError('Test error');\n      });\n\n      expect(result.current.error).toBe('Test error');\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Successful operation should clear error\n      await act(async () => {\n        await result.current.propagateSignal({ input: 1.0 });\n      });\n\n      expect(result.current.error).toBeNull();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle invalid configurations gracefully', () => {\n      const invalidConfig = {\n        maxNodes: -1,\n        learningRate: 'invalid',\n        activationFunction: null\n      };\n\n      const { result } = renderHook(() => useNeuralMesh(invalidConfig as any));\n\n      // Should not crash and use fallback values\n      expect(result.current).toBeDefined();\n    });\n\n    test('should handle service unavailability', async () => {\n      const { NeuralMeshService } = require('../../../src/services/NeuralMeshService');\n      NeuralMeshService.mockImplementationOnce(() => null);\n\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.error).toContain('service unavailable');\n      });\n    });\n\n    test('should handle concurrent state updates', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Simulate concurrent operations\n      await act(async () => {\n        await Promise.all([\n          result.current.addNode({ type: 'processor' }),\n          result.current.propagateSignal({ input: 1.0 }),\n          result.current.optimizeTopology()\n        ]);\n      });\n\n      // Should handle concurrent operations without conflicts\n    });\n\n    test('should handle special numeric values', async () => {\n      const { result } = renderHook(() => useNeuralMesh());\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Test with special float values\n      await act(async () => {\n        try {\n          await result.current.createConnection('node1', 'node2', NaN);\n        } catch (error) {\n          expect(error.message).toContain('Invalid weight');\n        }\n      });\n\n      await act(async () => {\n        try {\n          await result.current.createConnection('node1', 'node2', Infinity);\n        } catch (error) {\n          expect(error.message).toContain('Invalid weight');\n        }\n      });\n    });\n  });\n});"],"version":3}