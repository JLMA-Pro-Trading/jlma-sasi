c048c2f44c2d53e6aae28bbba839290c
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const McpService_1 = require("../services/McpService");
require("../styles/McpToolsDashboard.css");
const McpToolsDashboard = () => {
    const [servers, setServers] = (0, react_1.useState)([]);
    const [selectedServer, setSelectedServer] = (0, react_1.useState)(null);
    const [metrics, setMetrics] = (0, react_1.useState)(null);
    const [isLoading, setIsLoading] = (0, react_1.useState)(true);
    const [toolFilter, setToolFilter] = (0, react_1.useState)('');
    const [selectedTool, setSelectedTool] = (0, react_1.useState)(null);
    const [executionResults, setExecutionResults] = (0, react_1.useState)([]);
    const [isExecuting, setIsExecuting] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        // Initialize MCP server discovery
        initializeMcpDiscovery();
        // Set up periodic health checks
        const healthCheckInterval = setInterval(() => {
            performHealthChecks();
        }, 30000); // Check every 30 seconds
        return () => clearInterval(healthCheckInterval);
    }, []);
    const initializeMcpDiscovery = async () => {
        try {
            setIsLoading(true);
            // Initialize MCP service
            await McpService_1.mcpService.initialize();
            // Get discovered servers
            const discoveredServers = McpService_1.mcpService.getServers();
            setServers(discoveredServers);
            // Get metrics
            const currentMetrics = McpService_1.mcpService.getMetrics();
            setMetrics(currentMetrics);
        }
        catch (error) {
            console.error('Failed to initialize MCP discovery:', error);
        }
        finally {
            setIsLoading(false);
        }
    };
    const refreshServers = async () => {
        try {
            const updatedServers = await McpService_1.mcpService.refreshServers();
            setServers(updatedServers);
            const currentMetrics = McpService_1.mcpService.getMetrics();
            setMetrics(currentMetrics);
        }
        catch (error) {
            console.error('Failed to refresh servers:', error);
        }
    };
    const updateMetrics = async () => {
        try {
            const currentMetrics = McpService_1.mcpService.getMetrics();
            setMetrics(currentMetrics);
        }
        catch (error) {
            console.error('Failed to update metrics:', error);
        }
    };
    const performHealthChecks = async () => {
        try {
            // Get updated servers from service
            const updatedServers = McpService_1.mcpService.getServers();
            setServers(updatedServers);
            const currentMetrics = McpService_1.mcpService.getMetrics();
            setMetrics(currentMetrics);
        }
        catch (error) {
            console.error('Failed to perform health checks:', error);
        }
    };
    const executeTool = async (tool, parameters) => {
        if (!selectedServer)
            return;
        setIsExecuting(true);
        try {
            const result = await McpService_1.mcpService.executeTool(selectedServer, tool.name, parameters);
            setExecutionResults(prev => [result, ...prev.slice(0, 19)]); // Keep last 20 results
            // Refresh servers to get updated stats
            const updatedServers = McpService_1.mcpService.getServers();
            setServers(updatedServers);
            // Update metrics
            const currentMetrics = McpService_1.mcpService.getMetrics();
            setMetrics(currentMetrics);
        }
        catch (error) {
            console.error('Tool execution failed:', error);
            // Create error result
            const errorResult = {
                toolName: tool.name,
                parameters,
                timestamp: new Date(),
                success: false,
                response: null,
                duration: 0,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
            setExecutionResults(prev => [errorResult, ...prev.slice(0, 19)]);
        }
        finally {
            setIsExecuting(false);
        }
    };
    const getServerStatusColor = (status) => {
        switch (status) {
            case 'connected': return '#4CAF50';
            case 'disconnected': return '#FF9800';
            case 'error': return '#F44336';
            default: return '#757575';
        }
    };
    const getHealthScoreColor = (score) => {
        if (score >= 90)
            return '#4CAF50';
        if (score >= 70)
            return '#FF9800';
        return '#F44336';
    };
    const filteredTools = selectedServer
        ? servers.find(s => s.id === selectedServer)?.tools?.filter(tool => tool.name.toLowerCase().includes(toolFilter.toLowerCase()) ||
            tool.description.toLowerCase().includes(toolFilter.toLowerCase()) ||
            tool.category.toLowerCase().includes(toolFilter.toLowerCase())) || []
        : [];
    if (isLoading) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "mcp-dashboard loading", children: (0, jsx_runtime_1.jsxs)("div", { className: "loading-spinner", children: [(0, jsx_runtime_1.jsx)("div", { className: "spinner" }), (0, jsx_runtime_1.jsx)("p", { children: "Discovering MCP servers..." })] }) }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "mcp-dashboard", children: [(0, jsx_runtime_1.jsxs)("div", { className: "mcp-header", children: [(0, jsx_runtime_1.jsx)("h2", { className: "mcp-title", children: "MCP Tools Dashboard" }), (0, jsx_runtime_1.jsxs)("div", { className: "mcp-metrics-summary", children: [(0, jsx_runtime_1.jsxs)("div", { className: "metric-item", children: [(0, jsx_runtime_1.jsx)("span", { className: "metric-label", children: "Servers" }), (0, jsx_runtime_1.jsx)("span", { className: "metric-value", children: servers.length })] }), (0, jsx_runtime_1.jsxs)("div", { className: "metric-item", children: [(0, jsx_runtime_1.jsx)("span", { className: "metric-label", children: "Tools" }), (0, jsx_runtime_1.jsx)("span", { className: "metric-value", children: servers.reduce((sum, s) => sum + s.tools.length, 0) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "metric-item", children: [(0, jsx_runtime_1.jsx)("span", { className: "metric-label", children: "Success Rate" }), (0, jsx_runtime_1.jsxs)("span", { className: "metric-value", children: [metrics ? ((metrics.successfulRequests / metrics.totalRequests) * 100).toFixed(1) : '0.0', "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "metric-item", children: [(0, jsx_runtime_1.jsx)("span", { className: "metric-label", children: "Avg Response" }), (0, jsx_runtime_1.jsxs)("span", { className: "metric-value", children: [metrics ? metrics.averageResponseTime : 0, "ms"] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "mcp-content", children: [(0, jsx_runtime_1.jsxs)("div", { className: "mcp-sidebar", children: [(0, jsx_runtime_1.jsx)("h3", { children: "MCP Servers" }), (0, jsx_runtime_1.jsx)("div", { className: "server-list", children: servers.map(server => ((0, jsx_runtime_1.jsxs)("div", { className: `server-item ${selectedServer === server.id ? 'selected' : ''}`, onClick: () => setSelectedServer(server.id), children: [(0, jsx_runtime_1.jsxs)("div", { className: "server-header", children: [(0, jsx_runtime_1.jsx)("div", { className: "server-name", children: server.name }), (0, jsx_runtime_1.jsx)("div", { className: "server-status", style: { backgroundColor: getServerStatusColor(server.status) } })] }), (0, jsx_runtime_1.jsxs)("div", { className: "server-details", children: [(0, jsx_runtime_1.jsxs)("div", { className: "server-version", children: ["v", server.version] }), (0, jsx_runtime_1.jsx)("div", { className: "server-type", children: server.type })] }), (0, jsx_runtime_1.jsxs)("div", { className: "server-health", children: [(0, jsx_runtime_1.jsxs)("div", { className: "health-score", style: { color: getHealthScoreColor(server.healthScore) }, children: [server.healthScore.toFixed(0), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "health-bar", children: (0, jsx_runtime_1.jsx)("div", { className: "health-fill", style: {
                                                            width: `${server.healthScore}%`,
                                                            backgroundColor: getHealthScoreColor(server.healthScore)
                                                        } }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "server-tools-count", children: [server.tools.length, " tools"] })] }, server.id))) })] }), (0, jsx_runtime_1.jsx)("div", { className: "mcp-main", children: selectedServer ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "tools-header", children: [(0, jsx_runtime_1.jsxs)("h3", { children: ["Tools for ", servers.find(s => s.id === selectedServer)?.name] }), (0, jsx_runtime_1.jsx)("input", { type: "text", placeholder: "Filter tools...", value: toolFilter, onChange: (e) => setToolFilter(e.target.value), className: "tool-filter" })] }), (0, jsx_runtime_1.jsx)("div", { className: "tools-grid", children: filteredTools.map((tool, index) => ((0, jsx_runtime_1.jsxs)("div", { className: `tool-card ${selectedTool?.name === tool.name ? 'selected' : ''}`, onClick: () => setSelectedTool(tool), children: [(0, jsx_runtime_1.jsxs)("div", { className: "tool-header", children: [(0, jsx_runtime_1.jsx)("h4", { className: "tool-name", children: tool.name }), (0, jsx_runtime_1.jsx)("span", { className: "tool-category", children: tool.category })] }), (0, jsx_runtime_1.jsx)("p", { className: "tool-description", children: tool.description }), (0, jsx_runtime_1.jsxs)("div", { className: "tool-stats", children: [(0, jsx_runtime_1.jsxs)("div", { className: "stat", children: [(0, jsx_runtime_1.jsx)("span", { className: "stat-label", children: "Usage:" }), (0, jsx_runtime_1.jsx)("span", { className: "stat-value", children: tool.usageCount })] }), (0, jsx_runtime_1.jsxs)("div", { className: "stat", children: [(0, jsx_runtime_1.jsx)("span", { className: "stat-label", children: "Success:" }), (0, jsx_runtime_1.jsxs)("span", { className: "stat-value", children: [tool.successRate.toFixed(1), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "stat", children: [(0, jsx_runtime_1.jsx)("span", { className: "stat-label", children: "Avg Time:" }), (0, jsx_runtime_1.jsxs)("span", { className: "stat-value", children: [tool.averageResponseTime, "ms"] })] })] }), tool.lastUsed && ((0, jsx_runtime_1.jsxs)("div", { className: "tool-last-used", children: ["Last used: ", tool.lastUsed.toLocaleTimeString()] }))] }, index))) })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "no-server-selected", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Select a server to view its tools" }), (0, jsx_runtime_1.jsx)("p", { children: "Choose an MCP server from the sidebar to explore its available tools and performance metrics." })] })) }), selectedTool && ((0, jsx_runtime_1.jsxs)("div", { className: "mcp-execution-panel", children: [(0, jsx_runtime_1.jsxs)("h3", { children: ["Execute Tool: ", selectedTool.name] }), (0, jsx_runtime_1.jsxs)("div", { className: "execution-form", children: [(0, jsx_runtime_1.jsxs)("div", { className: "parameters-section", children: [(0, jsx_runtime_1.jsx)("h4", { children: "Parameters" }), (0, jsx_runtime_1.jsx)("div", { className: "parameters-grid", children: Object.entries(selectedTool.parameters).map(([key, type]) => ((0, jsx_runtime_1.jsxs)("div", { className: "parameter-input", children: [(0, jsx_runtime_1.jsx)("label", { children: key }), (0, jsx_runtime_1.jsx)("input", { type: type === 'number' ? 'number' : 'text', placeholder: `Enter ${key} (${type})`, className: "parameter-field" })] }, key))) })] }), (0, jsx_runtime_1.jsx)("button", { className: "execute-button", onClick: () => executeTool(selectedTool, {}), disabled: isExecuting, children: isExecuting ? 'Executing...' : 'Execute Tool' })] }), executionResults.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "execution-results", children: [(0, jsx_runtime_1.jsx)("h4", { children: "Recent Executions" }), (0, jsx_runtime_1.jsx)("div", { className: "results-list", children: executionResults.slice(0, 5).map((result, index) => ((0, jsx_runtime_1.jsxs)("div", { className: `result-item ${result.success ? 'success' : 'error'}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "result-header", children: [(0, jsx_runtime_1.jsx)("span", { className: "result-tool", children: result.toolName }), (0, jsx_runtime_1.jsx)("span", { className: "result-time", children: result.timestamp.toLocaleTimeString() }), (0, jsx_runtime_1.jsxs)("span", { className: "result-duration", children: [result.duration, "ms"] })] }), (0, jsx_runtime_1.jsx)("div", { className: "result-response", children: result.response })] }, index))) })] }))] }))] })] }));
};
exports.default = McpToolsDashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,