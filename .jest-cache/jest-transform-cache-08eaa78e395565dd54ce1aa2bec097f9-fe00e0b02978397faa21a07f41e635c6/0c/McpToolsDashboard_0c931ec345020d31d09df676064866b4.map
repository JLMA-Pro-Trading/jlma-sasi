{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/components/McpToolsDashboard.tsx","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/components/McpToolsDashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { mcpService, McpServer, McpTool, McpMetrics, McpExecutionResult } from '../services/McpService'\nimport '../styles/McpToolsDashboard.css'\n\n\nconst McpToolsDashboard: React.FC = () => {\n  const [servers, setServers] = useState<McpServer[]>([])\n  const [selectedServer, setSelectedServer] = useState<string | null>(null)\n  const [metrics, setMetrics] = useState<McpMetrics | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [toolFilter, setToolFilter] = useState('')\n  const [selectedTool, setSelectedTool] = useState<McpTool | null>(null)\n  const [executionResults, setExecutionResults] = useState<McpExecutionResult[]>([])\n  const [isExecuting, setIsExecuting] = useState(false)\n\n  useEffect(() => {\n    // Initialize MCP server discovery\n    initializeMcpDiscovery()\n    \n    // Set up periodic health checks\n    const healthCheckInterval = setInterval(() => {\n      performHealthChecks()\n    }, 30000) // Check every 30 seconds\n\n    return () => clearInterval(healthCheckInterval)\n  }, [])\n\n  const initializeMcpDiscovery = async () => {\n    try {\n      setIsLoading(true)\n      \n      // Initialize MCP service\n      await mcpService.initialize()\n      \n      // Get discovered servers\n      const discoveredServers = mcpService.getServers()\n      setServers(discoveredServers)\n      \n      // Get metrics\n      const currentMetrics = mcpService.getMetrics()\n      setMetrics(currentMetrics)\n      \n    } catch (error) {\n      console.error('Failed to initialize MCP discovery:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const refreshServers = async () => {\n    try {\n      const updatedServers = await mcpService.refreshServers()\n      setServers(updatedServers)\n      \n      const currentMetrics = mcpService.getMetrics()\n      setMetrics(currentMetrics)\n    } catch (error) {\n      console.error('Failed to refresh servers:', error)\n    }\n  }\n\n  const updateMetrics = async () => {\n    try {\n      const currentMetrics = mcpService.getMetrics()\n      setMetrics(currentMetrics)\n    } catch (error) {\n      console.error('Failed to update metrics:', error)\n    }\n  }\n\n  const performHealthChecks = async () => {\n    try {\n      // Get updated servers from service\n      const updatedServers = mcpService.getServers()\n      setServers(updatedServers)\n      \n      const currentMetrics = mcpService.getMetrics()\n      setMetrics(currentMetrics)\n    } catch (error) {\n      console.error('Failed to perform health checks:', error)\n    }\n  }\n\n  const executeTool = async (tool: McpTool, parameters: Record<string, any>) => {\n    if (!selectedServer) return\n    \n    setIsExecuting(true)\n    \n    try {\n      const result = await mcpService.executeTool(selectedServer, tool.name, parameters)\n      \n      setExecutionResults(prev => [result, ...prev.slice(0, 19)]) // Keep last 20 results\n      \n      // Refresh servers to get updated stats\n      const updatedServers = mcpService.getServers()\n      setServers(updatedServers)\n      \n      // Update metrics\n      const currentMetrics = mcpService.getMetrics()\n      setMetrics(currentMetrics)\n      \n    } catch (error) {\n      console.error('Tool execution failed:', error)\n      \n      // Create error result\n      const errorResult: McpExecutionResult = {\n        toolName: tool.name,\n        parameters,\n        timestamp: new Date(),\n        success: false,\n        response: null,\n        duration: 0,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n      \n      setExecutionResults(prev => [errorResult, ...prev.slice(0, 19)])\n    } finally {\n      setIsExecuting(false)\n    }\n  }\n\n  const getServerStatusColor = (status: string): string => {\n    switch (status) {\n      case 'connected': return '#4CAF50'\n      case 'disconnected': return '#FF9800'\n      case 'error': return '#F44336'\n      default: return '#757575'\n    }\n  }\n\n  const getHealthScoreColor = (score: number): string => {\n    if (score >= 90) return '#4CAF50'\n    if (score >= 70) return '#FF9800'\n    return '#F44336'\n  }\n\n  const filteredTools = selectedServer\n    ? servers.find(s => s.id === selectedServer)?.tools?.filter(tool =>\n        tool.name.toLowerCase().includes(toolFilter.toLowerCase()) ||\n        tool.description.toLowerCase().includes(toolFilter.toLowerCase()) ||\n        tool.category.toLowerCase().includes(toolFilter.toLowerCase())\n      ) || []\n    : []\n\n  if (isLoading) {\n    return (\n      <div className=\"mcp-dashboard loading\">\n        <div className=\"loading-spinner\">\n          <div className=\"spinner\"></div>\n          <p>Discovering MCP servers...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"mcp-dashboard\">\n      {/* Header */}\n      <div className=\"mcp-header\">\n        <h2 className=\"mcp-title\">MCP Tools Dashboard</h2>\n        <div className=\"mcp-metrics-summary\">\n          <div className=\"metric-item\">\n            <span className=\"metric-label\">Servers</span>\n            <span className=\"metric-value\">{servers.length}</span>\n          </div>\n          <div className=\"metric-item\">\n            <span className=\"metric-label\">Tools</span>\n            <span className=\"metric-value\">{servers.reduce((sum, s) => sum + s.tools.length, 0)}</span>\n          </div>\n          <div className=\"metric-item\">\n            <span className=\"metric-label\">Success Rate</span>\n            <span className=\"metric-value\">\n              {metrics ? ((metrics.successfulRequests / metrics.totalRequests) * 100).toFixed(1) : '0.0'}%\n            </span>\n          </div>\n          <div className=\"metric-item\">\n            <span className=\"metric-label\">Avg Response</span>\n            <span className=\"metric-value\">{metrics ? metrics.averageResponseTime : 0}ms</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"mcp-content\">\n        {/* Server List */}\n        <div className=\"mcp-sidebar\">\n          <h3>MCP Servers</h3>\n          <div className=\"server-list\">\n            {servers.map(server => (\n              <div\n                key={server.id}\n                className={`server-item ${selectedServer === server.id ? 'selected' : ''}`}\n                onClick={() => setSelectedServer(server.id)}\n              >\n                <div className=\"server-header\">\n                  <div className=\"server-name\">{server.name}</div>\n                  <div\n                    className=\"server-status\"\n                    style={{ backgroundColor: getServerStatusColor(server.status) }}\n                  />\n                </div>\n                <div className=\"server-details\">\n                  <div className=\"server-version\">v{server.version}</div>\n                  <div className=\"server-type\">{server.type}</div>\n                </div>\n                <div className=\"server-health\">\n                  <div className=\"health-score\" style={{ color: getHealthScoreColor(server.healthScore) }}>\n                    {server.healthScore.toFixed(0)}%\n                  </div>\n                  <div className=\"health-bar\">\n                    <div\n                      className=\"health-fill\"\n                      style={{\n                        width: `${server.healthScore}%`,\n                        backgroundColor: getHealthScoreColor(server.healthScore)\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"server-tools-count\">{server.tools.length} tools</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Tool Details */}\n        <div className=\"mcp-main\">\n          {selectedServer ? (\n            <>\n              <div className=\"tools-header\">\n                <h3>Tools for {servers.find(s => s.id === selectedServer)?.name}</h3>\n                <input\n                  type=\"text\"\n                  placeholder=\"Filter tools...\"\n                  value={toolFilter}\n                  onChange={(e) => setToolFilter(e.target.value)}\n                  className=\"tool-filter\"\n                />\n              </div>\n              \n              <div className=\"tools-grid\">\n                {filteredTools.map((tool, index) => (\n                  <div\n                    key={index}\n                    className={`tool-card ${selectedTool?.name === tool.name ? 'selected' : ''}`}\n                    onClick={() => setSelectedTool(tool)}\n                  >\n                    <div className=\"tool-header\">\n                      <h4 className=\"tool-name\">{tool.name}</h4>\n                      <span className=\"tool-category\">{tool.category}</span>\n                    </div>\n                    <p className=\"tool-description\">{tool.description}</p>\n                    <div className=\"tool-stats\">\n                      <div className=\"stat\">\n                        <span className=\"stat-label\">Usage:</span>\n                        <span className=\"stat-value\">{tool.usageCount}</span>\n                      </div>\n                      <div className=\"stat\">\n                        <span className=\"stat-label\">Success:</span>\n                        <span className=\"stat-value\">{tool.successRate.toFixed(1)}%</span>\n                      </div>\n                      <div className=\"stat\">\n                        <span className=\"stat-label\">Avg Time:</span>\n                        <span className=\"stat-value\">{tool.averageResponseTime}ms</span>\n                      </div>\n                    </div>\n                    {tool.lastUsed && (\n                      <div className=\"tool-last-used\">\n                        Last used: {tool.lastUsed.toLocaleTimeString()}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </>\n          ) : (\n            <div className=\"no-server-selected\">\n              <h3>Select a server to view its tools</h3>\n              <p>Choose an MCP server from the sidebar to explore its available tools and performance metrics.</p>\n            </div>\n          )}\n        </div>\n\n        {/* Tool Execution Panel */}\n        {selectedTool && (\n          <div className=\"mcp-execution-panel\">\n            <h3>Execute Tool: {selectedTool.name}</h3>\n            <div className=\"execution-form\">\n              <div className=\"parameters-section\">\n                <h4>Parameters</h4>\n                <div className=\"parameters-grid\">\n                  {Object.entries(selectedTool.parameters).map(([key, type]) => (\n                    <div key={key} className=\"parameter-input\">\n                      <label>{key}</label>\n                      <input\n                        type={type === 'number' ? 'number' : 'text'}\n                        placeholder={`Enter ${key} (${type})`}\n                        className=\"parameter-field\"\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <button\n                className=\"execute-button\"\n                onClick={() => executeTool(selectedTool, {})}\n                disabled={isExecuting}\n              >\n                {isExecuting ? 'Executing...' : 'Execute Tool'}\n              </button>\n            </div>\n            \n            {executionResults.length > 0 && (\n              <div className=\"execution-results\">\n                <h4>Recent Executions</h4>\n                <div className=\"results-list\">\n                  {executionResults.slice(0, 5).map((result, index) => (\n                    <div key={index} className={`result-item ${result.success ? 'success' : 'error'}`}>\n                      <div className=\"result-header\">\n                        <span className=\"result-tool\">{result.toolName}</span>\n                        <span className=\"result-time\">{result.timestamp.toLocaleTimeString()}</span>\n                        <span className=\"result-duration\">{result.duration}ms</span>\n                      </div>\n                      <div className=\"result-response\">{result.response}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default McpToolsDashboard"],"version":3}