75c67c11c13a71a66046836203cccfec
"use strict";
/**
 * React Hook for Neural Mesh Integration
 *
 * Provides React components with access to the neural mesh service,
 * real-time agent updates, and WASM-accelerated computations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useNeuralMesh = void 0;
const react_1 = require("react");
const NeuralMeshService_1 = require("../services/NeuralMeshService");
const useNeuralMesh = (props = {}) => {
    const [state, setState] = (0, react_1.useState)({
        connection: null,
        agents: [],
        isConnected: false,
        isInitializing: false,
        error: null,
        metrics: {
            totalNeurons: 0,
            totalSynapses: 0,
            averageActivity: 0,
            networkEfficiency: 0,
            wasmAcceleration: false
        }
    });
    const serviceRef = (0, react_1.useRef)(null);
    const reconnectTimeoutRef = (0, react_1.useRef)(null);
    // Initialize neural mesh service
    (0, react_1.useEffect)(() => {
        const config = {
            serverUrl: props.serverUrl || 'ws://localhost:3000',
            transport: 'websocket',
            enableWasm: props.enableWasm !== false,
            enableRealtime: props.enableRealtime !== false,
            debugMode: props.debugMode || false
        };
        serviceRef.current = new NeuralMeshService_1.NeuralMeshService(config);
        // Set up event listeners
        const service = serviceRef.current;
        service.on('connected', (connection) => {
            setState(prev => ({
                ...prev,
                connection,
                isConnected: true,
                isInitializing: false,
                error: null
            }));
        });
        service.on('disconnected', (connection) => {
            setState(prev => ({
                ...prev,
                connection,
                isConnected: false,
                error: 'Disconnected from neural mesh'
            }));
            // Attempt to reconnect after 3 seconds
            if (reconnectTimeoutRef.current) {
                clearTimeout(reconnectTimeoutRef.current);
            }
            reconnectTimeoutRef.current = setTimeout(() => {
                initializeService();
            }, 3000);
        });
        service.on('error', (error) => {
            setState(prev => ({
                ...prev,
                error: error.message,
                isInitializing: false
            }));
        });
        service.on('agent_created', (agent) => {
            setState(prev => ({
                ...prev,
                agents: [...prev.agents, agent]
            }));
        });
        service.on('agent_updated', (agent) => {
            setState(prev => ({
                ...prev,
                agents: prev.agents.map(a => a.id === agent.id ? agent : a)
            }));
        });
        service.on('status_update', (status) => {
            setState(prev => ({
                ...prev,
                metrics: {
                    ...prev.metrics,
                    totalNeurons: status.metrics?.total_neurons || 0,
                    totalSynapses: status.metrics?.total_synapses || 0,
                    averageActivity: status.metrics?.activity_level || 0,
                    networkEfficiency: status.metrics?.efficiency_score || 0,
                    wasmAcceleration: service.isWasmEnabled()
                }
            }));
        });
        service.on('mesh_trained', (results) => {
            if (props.debugMode) {
                console.log('ðŸ§  Neural mesh training completed:', results);
            }
        });
        // Initialize the service
        const initializeService = async () => {
            setState(prev => ({ ...prev, isInitializing: true, error: null }));
            try {
                await service.initialize();
            }
            catch (error) {
                setState(prev => ({
                    ...prev,
                    error: error.message,
                    isInitializing: false
                }));
            }
        };
        initializeService();
        // Cleanup
        return () => {
            if (reconnectTimeoutRef.current) {
                clearTimeout(reconnectTimeoutRef.current);
            }
            service.disconnect();
        };
    }, [props.serverUrl, props.enableWasm, props.enableRealtime, props.debugMode]);
    // Create a new neural agent
    const createAgent = (0, react_1.useCallback)(async (type, config) => {
        if (!serviceRef.current)
            return null;
        try {
            const agent = await serviceRef.current.createNeuralAgent({ type, ...config });
            return agent;
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                error: error.message
            }));
            return null;
        }
    }, []);
    // Update an existing agent
    const updateAgent = (0, react_1.useCallback)(async (agent) => {
        if (!serviceRef.current)
            return null;
        try {
            const updatedAgent = await serviceRef.current.updateNeuralAgent(agent.id, agent);
            return updatedAgent;
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                error: error.message
            }));
            return null;
        }
    }, []);
    // Remove an agent
    const removeAgent = (0, react_1.useCallback)((agentId) => {
        setState(prev => ({
            ...prev,
            agents: prev.agents.filter(agent => agent.id !== agentId)
        }));
    }, []);
    // Train the neural mesh
    const trainMesh = (0, react_1.useCallback)(async (patterns) => {
        if (!serviceRef.current)
            return false;
        try {
            const success = await serviceRef.current.trainMesh(patterns);
            return success;
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                error: error.message
            }));
            return false;
        }
    }, []);
    // Get mesh status
    const getMeshStatus = (0, react_1.useCallback)(async () => {
        if (!serviceRef.current)
            return null;
        try {
            const status = await serviceRef.current.getMeshStatus();
            return status;
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                error: error.message
            }));
            return null;
        }
    }, []);
    // Clear error
    const clearError = (0, react_1.useCallback)(() => {
        setState(prev => ({ ...prev, error: null }));
    }, []);
    // Manually reconnect
    const reconnect = (0, react_1.useCallback)(async () => {
        if (!serviceRef.current)
            return;
        setState(prev => ({ ...prev, isInitializing: true, error: null }));
        try {
            await serviceRef.current.initialize();
        }
        catch (error) {
            setState(prev => ({
                ...prev,
                error: error.message,
                isInitializing: false
            }));
        }
    }, []);
    return {
        // State
        ...state,
        // Actions
        createAgent,
        updateAgent,
        removeAgent,
        trainMesh,
        getMeshStatus,
        clearError,
        reconnect,
        // Computed values
        neuralAgentCount: state.agents.length,
        activeNeuralAgents: state.agents.filter(a => a.status === 'active' || a.status === 'processing').length,
        isWasmEnabled: serviceRef.current?.isWasmEnabled() || false,
        // Service reference (for advanced usage)
        service: serviceRef.current
    };
};
exports.useNeuralMesh = useNeuralMesh;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,