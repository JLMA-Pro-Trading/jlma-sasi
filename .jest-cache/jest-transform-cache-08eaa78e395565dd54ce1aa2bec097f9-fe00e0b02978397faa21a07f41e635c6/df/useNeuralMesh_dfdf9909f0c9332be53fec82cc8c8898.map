{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/hooks/useNeuralMesh.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/hooks/useNeuralMesh.ts"],"sourcesContent":["/**\n * React Hook for Neural Mesh Integration\n * \n * Provides React components with access to the neural mesh service,\n * real-time agent updates, and WASM-accelerated computations.\n */\n\nimport { useState, useEffect, useRef, useCallback } from 'react'\nimport { NeuralMeshService, NeuralAgent, NeuralMeshConnection } from '../services/NeuralMeshService'\nimport { Agent } from '../types/agent'\n\nexport interface UseNeuralMeshProps {\n  serverUrl?: string\n  enableWasm?: boolean\n  enableRealtime?: boolean\n  debugMode?: boolean\n}\n\nexport interface NeuralMeshState {\n  connection: NeuralMeshConnection | null\n  agents: NeuralAgent[]\n  isConnected: boolean\n  isInitializing: boolean\n  error: string | null\n  metrics: {\n    totalNeurons: number\n    totalSynapses: number\n    averageActivity: number\n    networkEfficiency: number\n    wasmAcceleration: boolean\n  }\n}\n\nexport const useNeuralMesh = (props: UseNeuralMeshProps = {}) => {\n  const [state, setState] = useState<NeuralMeshState>({\n    connection: null,\n    agents: [],\n    isConnected: false,\n    isInitializing: false,\n    error: null,\n    metrics: {\n      totalNeurons: 0,\n      totalSynapses: 0,\n      averageActivity: 0,\n      networkEfficiency: 0,\n      wasmAcceleration: false\n    }\n  })\n\n  const serviceRef = useRef<NeuralMeshService | null>(null)\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  // Initialize neural mesh service\n  useEffect(() => {\n    const config = {\n      serverUrl: props.serverUrl || 'ws://localhost:3000',\n      transport: 'websocket' as const,\n      enableWasm: props.enableWasm !== false,\n      enableRealtime: props.enableRealtime !== false,\n      debugMode: props.debugMode || false\n    }\n\n    serviceRef.current = new NeuralMeshService(config)\n    \n    // Set up event listeners\n    const service = serviceRef.current\n    \n    service.on('connected', (connection: NeuralMeshConnection) => {\n      setState(prev => ({\n        ...prev,\n        connection,\n        isConnected: true,\n        isInitializing: false,\n        error: null\n      }))\n    })\n\n    service.on('disconnected', (connection: NeuralMeshConnection) => {\n      setState(prev => ({\n        ...prev,\n        connection,\n        isConnected: false,\n        error: 'Disconnected from neural mesh'\n      }))\n      \n      // Attempt to reconnect after 3 seconds\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current)\n      }\n      reconnectTimeoutRef.current = setTimeout(() => {\n        initializeService()\n      }, 3000)\n    })\n\n    service.on('error', (error: Error) => {\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        isInitializing: false\n      }))\n    })\n\n    service.on('agent_created', (agent: NeuralAgent) => {\n      setState(prev => ({\n        ...prev,\n        agents: [...prev.agents, agent]\n      }))\n    })\n\n    service.on('agent_updated', (agent: NeuralAgent) => {\n      setState(prev => ({\n        ...prev,\n        agents: prev.agents.map(a => a.id === agent.id ? agent : a)\n      }))\n    })\n\n    service.on('status_update', (status: any) => {\n      setState(prev => ({\n        ...prev,\n        metrics: {\n          ...prev.metrics,\n          totalNeurons: status.metrics?.total_neurons || 0,\n          totalSynapses: status.metrics?.total_synapses || 0,\n          averageActivity: status.metrics?.activity_level || 0,\n          networkEfficiency: status.metrics?.efficiency_score || 0,\n          wasmAcceleration: service.isWasmEnabled()\n        }\n      }))\n    })\n\n    service.on('mesh_trained', (results: any) => {\n      if (props.debugMode) {\n        console.log('🧠 Neural mesh training completed:', results)\n      }\n    })\n\n    // Initialize the service\n    const initializeService = async () => {\n      setState(prev => ({ ...prev, isInitializing: true, error: null }))\n      \n      try {\n        await service.initialize()\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          error: error.message,\n          isInitializing: false\n        }))\n      }\n    }\n\n    initializeService()\n\n    // Cleanup\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current)\n      }\n      service.disconnect()\n    }\n  }, [props.serverUrl, props.enableWasm, props.enableRealtime, props.debugMode])\n\n  // Create a new neural agent\n  const createAgent = useCallback(async (type: Agent['type'], config?: any): Promise<NeuralAgent | null> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const agent = await serviceRef.current.createNeuralAgent({ type, ...config })\n      return agent\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Update an existing agent\n  const updateAgent = useCallback(async (agent: NeuralAgent): Promise<NeuralAgent | null> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const updatedAgent = await serviceRef.current.updateNeuralAgent(agent.id, agent)\n      return updatedAgent\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Remove an agent\n  const removeAgent = useCallback((agentId: string): void => {\n    setState(prev => ({\n      ...prev,\n      agents: prev.agents.filter(agent => agent.id !== agentId)\n    }))\n  }, [])\n\n  // Train the neural mesh\n  const trainMesh = useCallback(async (patterns: any[]): Promise<boolean> => {\n    if (!serviceRef.current) return false\n    \n    try {\n      const success = await serviceRef.current.trainMesh(patterns)\n      return success\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return false\n    }\n  }, [])\n\n  // Get mesh status\n  const getMeshStatus = useCallback(async (): Promise<any> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const status = await serviceRef.current.getMeshStatus()\n      return status\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }))\n  }, [])\n\n  // Manually reconnect\n  const reconnect = useCallback(async () => {\n    if (!serviceRef.current) return\n    \n    setState(prev => ({ ...prev, isInitializing: true, error: null }))\n    \n    try {\n      await serviceRef.current.initialize()\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        isInitializing: false\n      }))\n    }\n  }, [])\n\n  return {\n    // State\n    ...state,\n    \n    // Actions\n    createAgent,\n    updateAgent,\n    removeAgent,\n    trainMesh,\n    getMeshStatus,\n    clearError,\n    reconnect,\n    \n    // Computed values\n    neuralAgentCount: state.agents.length,\n    activeNeuralAgents: state.agents.filter(a => a.status === 'active' || a.status === 'processing').length,\n    isWasmEnabled: serviceRef.current?.isWasmEnabled() || false,\n    \n    // Service reference (for advanced usage)\n    service: serviceRef.current\n  }\n}"],"version":3}