e41359453128161f5e545d42521c824d
/* istanbul ignore next */
function cov_1w0722gq02() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/hooks/useNeuralMesh.ts";
  var hash = "98ac2204cfbe76781dda572ca46fe2372689e6c6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/hooks/useNeuralMesh.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 29
        },
        end: {
          line: 231,
          column: 1
        }
      },
      "1": {
        start: {
          line: 10,
          column: 30
        },
        end: {
          line: 23,
          column: 6
        }
      },
      "2": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 35
        }
      },
      "3": {
        start: {
          line: 25,
          column: 32
        },
        end: {
          line: 25,
          column: 44
        }
      },
      "4": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 121,
          column: 83
        }
      },
      "5": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "6": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 59
        }
      },
      "7": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "8": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 46,
          column: 11
        }
      },
      "9": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 45,
          column: 16
        }
      },
      "10": {
        start: {
          line: 39,
          column: 30
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "11": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "12": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 53,
          column: 16
        }
      },
      "13": {
        start: {
          line: 48,
          column: 30
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "14": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "15": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 58
        }
      },
      "16": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 21
        }
      },
      "17": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 36
        }
      },
      "18": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "19": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 16
        }
      },
      "20": {
        start: {
          line: 63,
          column: 30
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "21": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "22": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 73,
          column: 16
        }
      },
      "23": {
        start: {
          line: 70,
          column: 30
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "24": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "25": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 79,
          column: 16
        }
      },
      "26": {
        start: {
          line: 76,
          column: 30
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "27": {
        start: {
          line: 78,
          column: 45
        },
        end: {
          line: 78,
          column: 74
        }
      },
      "28": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "29": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 92,
          column: 16
        }
      },
      "30": {
        start: {
          line: 82,
          column: 30
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "31": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "32": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "33": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 75
        }
      },
      "34": {
        start: {
          line: 100,
          column: 34
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "35": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 79
        }
      },
      "36": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 76
        }
      },
      "37": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "38": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 43
        }
      },
      "39": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 110,
          column: 20
        }
      },
      "40": {
        start: {
          line: 106,
          column: 34
        },
        end: {
          line: 110,
          column: 17
        }
      },
      "41": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 28
        }
      },
      "42": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "43": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "44": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 58
        }
      },
      "45": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 33
        }
      },
      "46": {
        start: {
          line: 123,
          column: 24
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "47": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "48": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "49": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "50": {
        start: {
          line: 127,
          column: 26
        },
        end: {
          line: 127,
          column: 82
        }
      },
      "51": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 25
        }
      },
      "52": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 134,
          column: 16
        }
      },
      "53": {
        start: {
          line: 131,
          column: 30
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "54": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 24
        }
      },
      "55": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 153,
          column: 10
        }
      },
      "56": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 141,
          column: 24
        }
      },
      "57": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 24
        }
      },
      "58": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "59": {
        start: {
          line: 143,
          column: 33
        },
        end: {
          line: 143,
          column: 82
        }
      },
      "60": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 32
        }
      },
      "61": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 150,
          column: 16
        }
      },
      "62": {
        start: {
          line: 147,
          column: 30
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "63": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 24
        }
      },
      "64": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "65": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 159,
          column: 12
        }
      },
      "66": {
        start: {
          line: 156,
          column: 26
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "67": {
        start: {
          line: 158,
          column: 48
        },
        end: {
          line: 158,
          column: 68
        }
      },
      "68": {
        start: {
          line: 162,
          column: 22
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "69": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 164,
          column: 25
        }
      },
      "70": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 25
        }
      },
      "71": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "72": {
        start: {
          line: 166,
          column: 28
        },
        end: {
          line: 166,
          column: 72
        }
      },
      "73": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 27
        }
      },
      "74": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 173,
          column: 16
        }
      },
      "75": {
        start: {
          line: 170,
          column: 30
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "76": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 25
        }
      },
      "77": {
        start: {
          line: 178,
          column: 26
        },
        end: {
          line: 192,
          column: 10
        }
      },
      "78": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 180,
          column: 24
        }
      },
      "79": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 24
        }
      },
      "80": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "81": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 182,
          column: 67
        }
      },
      "82": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 26
        }
      },
      "83": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 189,
          column: 16
        }
      },
      "84": {
        start: {
          line: 186,
          column: 30
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "85": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 24
        }
      },
      "86": {
        start: {
          line: 194,
          column: 23
        },
        end: {
          line: 196,
          column: 10
        }
      },
      "87": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 53
        }
      },
      "88": {
        start: {
          line: 195,
          column: 26
        },
        end: {
          line: 195,
          column: 50
        }
      },
      "89": {
        start: {
          line: 198,
          column: 22
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "90": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 200,
          column: 19
        }
      },
      "91": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 19
        }
      },
      "92": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 75
        }
      },
      "93": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 72
        }
      },
      "94": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "95": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 50
        }
      },
      "96": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 210,
          column: 16
        }
      },
      "97": {
        start: {
          line: 206,
          column: 30
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "98": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 230,
          column: 6
        }
      },
      "99": {
        start: {
          line: 226,
          column: 53
        },
        end: {
          line: 226,
          column: 103
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 29
          },
          end: {
            line: 9,
            column: 30
          }
        },
        loc: {
          start: {
            line: 9,
            column: 45
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 14
          },
          end: {
            line: 27,
            column: 15
          }
        },
        loc: {
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 32
          },
          end: {
            line: 38,
            column: 33
          }
        },
        loc: {
          start: {
            line: 38,
            column: 48
          },
          end: {
            line: 46,
            column: 9
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 22
          }
        },
        loc: {
          start: {
            line: 39,
            column: 30
          },
          end: {
            line: 45,
            column: 13
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 35
          },
          end: {
            line: 47,
            column: 36
          }
        },
        loc: {
          start: {
            line: 47,
            column: 51
          },
          end: {
            line: 61,
            column: 9
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 48,
            column: 21
          },
          end: {
            line: 48,
            column: 22
          }
        },
        loc: {
          start: {
            line: 48,
            column: 30
          },
          end: {
            line: 53,
            column: 13
          }
        },
        line: 48
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 58,
            column: 53
          },
          end: {
            line: 58,
            column: 54
          }
        },
        loc: {
          start: {
            line: 58,
            column: 59
          },
          end: {
            line: 60,
            column: 13
          }
        },
        line: 58
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 62,
            column: 29
          }
        },
        loc: {
          start: {
            line: 62,
            column: 39
          },
          end: {
            line: 68,
            column: 9
          }
        },
        line: 62
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 63,
            column: 21
          },
          end: {
            line: 63,
            column: 22
          }
        },
        loc: {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 67,
            column: 13
          }
        },
        line: 63
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 69,
            column: 36
          },
          end: {
            line: 69,
            column: 37
          }
        },
        loc: {
          start: {
            line: 69,
            column: 47
          },
          end: {
            line: 74,
            column: 9
          }
        },
        line: 69
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 70,
            column: 21
          },
          end: {
            line: 70,
            column: 22
          }
        },
        loc: {
          start: {
            line: 70,
            column: 30
          },
          end: {
            line: 73,
            column: 13
          }
        },
        line: 70
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 75,
            column: 36
          },
          end: {
            line: 75,
            column: 37
          }
        },
        loc: {
          start: {
            line: 75,
            column: 47
          },
          end: {
            line: 80,
            column: 9
          }
        },
        line: 75
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 76,
            column: 22
          }
        },
        loc: {
          start: {
            line: 76,
            column: 30
          },
          end: {
            line: 79,
            column: 13
          }
        },
        line: 76
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 78,
            column: 40
          },
          end: {
            line: 78,
            column: 41
          }
        },
        loc: {
          start: {
            line: 78,
            column: 45
          },
          end: {
            line: 78,
            column: 74
          }
        },
        line: 78
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 81,
            column: 36
          },
          end: {
            line: 81,
            column: 37
          }
        },
        loc: {
          start: {
            line: 81,
            column: 48
          },
          end: {
            line: 93,
            column: 9
          }
        },
        line: 81
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 82,
            column: 22
          }
        },
        loc: {
          start: {
            line: 82,
            column: 30
          },
          end: {
            line: 92,
            column: 13
          }
        },
        line: 82
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 94,
            column: 35
          },
          end: {
            line: 94,
            column: 36
          }
        },
        loc: {
          start: {
            line: 94,
            column: 48
          },
          end: {
            line: 98,
            column: 9
          }
        },
        line: 94
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 100,
            column: 34
          },
          end: {
            line: 100,
            column: 35
          }
        },
        loc: {
          start: {
            line: 100,
            column: 46
          },
          end: {
            line: 112,
            column: 9
          }
        },
        line: 100
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 101,
            column: 21
          },
          end: {
            line: 101,
            column: 22
          }
        },
        loc: {
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 101,
            column: 76
          }
        },
        line: 101
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 106,
            column: 25
          },
          end: {
            line: 106,
            column: 26
          }
        },
        loc: {
          start: {
            line: 106,
            column: 34
          },
          end: {
            line: 110,
            column: 17
          }
        },
        line: 106
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 115,
            column: 15
          },
          end: {
            line: 115,
            column: 16
          }
        },
        loc: {
          start: {
            line: 115,
            column: 21
          },
          end: {
            line: 120,
            column: 9
          }
        },
        line: 115
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 123,
            column: 36
          },
          end: {
            line: 123,
            column: 37
          }
        },
        loc: {
          start: {
            line: 123,
            column: 60
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 123
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 131,
            column: 21
          },
          end: {
            line: 131,
            column: 22
          }
        },
        loc: {
          start: {
            line: 131,
            column: 30
          },
          end: {
            line: 134,
            column: 13
          }
        },
        line: 131
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 139,
            column: 36
          },
          end: {
            line: 139,
            column: 37
          }
        },
        loc: {
          start: {
            line: 139,
            column: 53
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 139
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 147,
            column: 22
          }
        },
        loc: {
          start: {
            line: 147,
            column: 30
          },
          end: {
            line: 150,
            column: 13
          }
        },
        line: 147
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 155,
            column: 36
          },
          end: {
            line: 155,
            column: 37
          }
        },
        loc: {
          start: {
            line: 155,
            column: 49
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 155
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 156,
            column: 17
          },
          end: {
            line: 156,
            column: 18
          }
        },
        loc: {
          start: {
            line: 156,
            column: 26
          },
          end: {
            line: 159,
            column: 9
          }
        },
        line: 156
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 158,
            column: 39
          },
          end: {
            line: 158,
            column: 40
          }
        },
        loc: {
          start: {
            line: 158,
            column: 48
          },
          end: {
            line: 158,
            column: 68
          }
        },
        line: 158
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 162,
            column: 34
          },
          end: {
            line: 162,
            column: 35
          }
        },
        loc: {
          start: {
            line: 162,
            column: 54
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 162
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 170,
            column: 21
          },
          end: {
            line: 170,
            column: 22
          }
        },
        loc: {
          start: {
            line: 170,
            column: 30
          },
          end: {
            line: 173,
            column: 13
          }
        },
        line: 170
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 178,
            column: 38
          },
          end: {
            line: 178,
            column: 39
          }
        },
        loc: {
          start: {
            line: 178,
            column: 50
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 178
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 186,
            column: 21
          },
          end: {
            line: 186,
            column: 22
          }
        },
        loc: {
          start: {
            line: 186,
            column: 30
          },
          end: {
            line: 189,
            column: 13
          }
        },
        line: 186
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 194,
            column: 35
          },
          end: {
            line: 194,
            column: 36
          }
        },
        loc: {
          start: {
            line: 194,
            column: 41
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 194
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 195,
            column: 18
          }
        },
        loc: {
          start: {
            line: 195,
            column: 26
          },
          end: {
            line: 195,
            column: 50
          }
        },
        line: 195
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 198,
            column: 34
          },
          end: {
            line: 198,
            column: 35
          }
        },
        loc: {
          start: {
            line: 198,
            column: 46
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 198
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 201,
            column: 17
          },
          end: {
            line: 201,
            column: 18
          }
        },
        loc: {
          start: {
            line: 201,
            column: 26
          },
          end: {
            line: 201,
            column: 72
          }
        },
        line: 201
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 206,
            column: 21
          },
          end: {
            line: 206,
            column: 22
          }
        },
        loc: {
          start: {
            line: 206,
            column: 30
          },
          end: {
            line: 210,
            column: 13
          }
        },
        line: 206
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 226,
            column: 48
          },
          end: {
            line: 226,
            column: 49
          }
        },
        loc: {
          start: {
            line: 226,
            column: 53
          },
          end: {
            line: 226,
            column: 103
          }
        },
        line: 226
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 9,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 9,
            column: 38
          },
          end: {
            line: 9,
            column: 40
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 29,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 29,
            column: 38
          }
        }, {
          start: {
            line: 29,
            column: 42
          },
          end: {
            line: 29,
            column: 63
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 23
          },
          end: {
            line: 33,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 23
          },
          end: {
            line: 33,
            column: 38
          }
        }, {
          start: {
            line: 33,
            column: 42
          },
          end: {
            line: 33,
            column: 47
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 45
          },
          end: {
            line: 78,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 65
          },
          end: {
            line: 78,
            column: 70
          }
        }, {
          start: {
            line: 78,
            column: 73
          },
          end: {
            line: 78,
            column: 74
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 34
          },
          end: {
            line: 86,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 34
          },
          end: {
            line: 86,
            column: 63
          }
        }, {
          start: {
            line: 86,
            column: 67
          },
          end: {
            line: 86,
            column: 68
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 87,
            column: 35
          },
          end: {
            line: 87,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 35
          },
          end: {
            line: 87,
            column: 65
          }
        }, {
          start: {
            line: 87,
            column: 69
          },
          end: {
            line: 87,
            column: 70
          }
        }],
        line: 87
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 37
          },
          end: {
            line: 88,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 37
          },
          end: {
            line: 88,
            column: 67
          }
        }, {
          start: {
            line: 88,
            column: 71
          },
          end: {
            line: 88,
            column: 72
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 39
          },
          end: {
            line: 89,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 39
          },
          end: {
            line: 89,
            column: 71
          }
        }, {
          start: {
            line: 89,
            column: 75
          },
          end: {
            line: 89,
            column: 76
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "10": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 125,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 125,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 141,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 141,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "13": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 164,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 164,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "14": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 180,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 180,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "15": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 200,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 200,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "16": {
        loc: {
          start: {
            line: 226,
            column: 53
          },
          end: {
            line: 226,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 53
          },
          end: {
            line: 226,
            column: 74
          }
        }, {
          start: {
            line: 226,
            column: 78
          },
          end: {
            line: 226,
            column: 103
          }
        }],
        line: 226
      },
      "17": {
        loc: {
          start: {
            line: 227,
            column: 23
          },
          end: {
            line: 227,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 23
          },
          end: {
            line: 227,
            column: 58
          }
        }, {
          start: {
            line: 227,
            column: 62
          },
          end: {
            line: 227,
            column: 67
          }
        }],
        line: 227
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/hooks/useNeuralMesh.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/hooks/useNeuralMesh.ts"],
      sourcesContent: ["/**\n * React Hook for Neural Mesh Integration\n * \n * Provides React components with access to the neural mesh service,\n * real-time agent updates, and WASM-accelerated computations.\n */\n\nimport { useState, useEffect, useRef, useCallback } from 'react'\nimport { NeuralMeshService, NeuralAgent, NeuralMeshConnection } from '../services/NeuralMeshService'\nimport { Agent } from '../types/agent'\n\nexport interface UseNeuralMeshProps {\n  serverUrl?: string\n  enableWasm?: boolean\n  enableRealtime?: boolean\n  debugMode?: boolean\n}\n\nexport interface NeuralMeshState {\n  connection: NeuralMeshConnection | null\n  agents: NeuralAgent[]\n  isConnected: boolean\n  isInitializing: boolean\n  error: string | null\n  metrics: {\n    totalNeurons: number\n    totalSynapses: number\n    averageActivity: number\n    networkEfficiency: number\n    wasmAcceleration: boolean\n  }\n}\n\nexport const useNeuralMesh = (props: UseNeuralMeshProps = {}) => {\n  const [state, setState] = useState<NeuralMeshState>({\n    connection: null,\n    agents: [],\n    isConnected: false,\n    isInitializing: false,\n    error: null,\n    metrics: {\n      totalNeurons: 0,\n      totalSynapses: 0,\n      averageActivity: 0,\n      networkEfficiency: 0,\n      wasmAcceleration: false\n    }\n  })\n\n  const serviceRef = useRef<NeuralMeshService | null>(null)\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  // Initialize neural mesh service\n  useEffect(() => {\n    const config = {\n      serverUrl: props.serverUrl || 'ws://localhost:3000',\n      transport: 'websocket' as const,\n      enableWasm: props.enableWasm !== false,\n      enableRealtime: props.enableRealtime !== false,\n      debugMode: props.debugMode || false\n    }\n\n    serviceRef.current = new NeuralMeshService(config)\n    \n    // Set up event listeners\n    const service = serviceRef.current\n    \n    service.on('connected', (connection: NeuralMeshConnection) => {\n      setState(prev => ({\n        ...prev,\n        connection,\n        isConnected: true,\n        isInitializing: false,\n        error: null\n      }))\n    })\n\n    service.on('disconnected', (connection: NeuralMeshConnection) => {\n      setState(prev => ({\n        ...prev,\n        connection,\n        isConnected: false,\n        error: 'Disconnected from neural mesh'\n      }))\n      \n      // Attempt to reconnect after 3 seconds\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current)\n      }\n      reconnectTimeoutRef.current = setTimeout(() => {\n        initializeService()\n      }, 3000)\n    })\n\n    service.on('error', (error: Error) => {\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        isInitializing: false\n      }))\n    })\n\n    service.on('agent_created', (agent: NeuralAgent) => {\n      setState(prev => ({\n        ...prev,\n        agents: [...prev.agents, agent]\n      }))\n    })\n\n    service.on('agent_updated', (agent: NeuralAgent) => {\n      setState(prev => ({\n        ...prev,\n        agents: prev.agents.map(a => a.id === agent.id ? agent : a)\n      }))\n    })\n\n    service.on('status_update', (status: any) => {\n      setState(prev => ({\n        ...prev,\n        metrics: {\n          ...prev.metrics,\n          totalNeurons: status.metrics?.total_neurons || 0,\n          totalSynapses: status.metrics?.total_synapses || 0,\n          averageActivity: status.metrics?.activity_level || 0,\n          networkEfficiency: status.metrics?.efficiency_score || 0,\n          wasmAcceleration: service.isWasmEnabled()\n        }\n      }))\n    })\n\n    service.on('mesh_trained', (results: any) => {\n      if (props.debugMode) {\n        console.log('\uD83E\uDDE0 Neural mesh training completed:', results)\n      }\n    })\n\n    // Initialize the service\n    const initializeService = async () => {\n      setState(prev => ({ ...prev, isInitializing: true, error: null }))\n      \n      try {\n        await service.initialize()\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          error: error.message,\n          isInitializing: false\n        }))\n      }\n    }\n\n    initializeService()\n\n    // Cleanup\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current)\n      }\n      service.disconnect()\n    }\n  }, [props.serverUrl, props.enableWasm, props.enableRealtime, props.debugMode])\n\n  // Create a new neural agent\n  const createAgent = useCallback(async (type: Agent['type'], config?: any): Promise<NeuralAgent | null> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const agent = await serviceRef.current.createNeuralAgent(type, config)\n      return agent\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Update an existing agent\n  const updateAgent = useCallback(async (agent: NeuralAgent): Promise<NeuralAgent | null> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const updatedAgent = await serviceRef.current.updateNeuralAgent(agent)\n      return updatedAgent\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Remove an agent\n  const removeAgent = useCallback((agentId: string): void => {\n    setState(prev => ({\n      ...prev,\n      agents: prev.agents.filter(agent => agent.id !== agentId)\n    }))\n  }, [])\n\n  // Train the neural mesh\n  const trainMesh = useCallback(async (patterns: any[]): Promise<boolean> => {\n    if (!serviceRef.current) return false\n    \n    try {\n      const success = await serviceRef.current.trainMesh(patterns)\n      return success\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return false\n    }\n  }, [])\n\n  // Get mesh status\n  const getMeshStatus = useCallback(async (): Promise<any> => {\n    if (!serviceRef.current) return null\n    \n    try {\n      const status = await serviceRef.current.getMeshStatus()\n      return status\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }))\n      return null\n    }\n  }, [])\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }))\n  }, [])\n\n  // Manually reconnect\n  const reconnect = useCallback(async () => {\n    if (!serviceRef.current) return\n    \n    setState(prev => ({ ...prev, isInitializing: true, error: null }))\n    \n    try {\n      await serviceRef.current.initialize()\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        isInitializing: false\n      }))\n    }\n  }, [])\n\n  return {\n    // State\n    ...state,\n    \n    // Actions\n    createAgent,\n    updateAgent,\n    removeAgent,\n    trainMesh,\n    getMeshStatus,\n    clearError,\n    reconnect,\n    \n    // Computed values\n    neuralAgentCount: state.agents.length,\n    activeNeuralAgents: state.agents.filter(a => a.status === 'active' || a.status === 'processing').length,\n    isWasmEnabled: serviceRef.current?.isWasmEnabled() || false,\n    \n    // Service reference (for advanced usage)\n    service: serviceRef.current\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "98ac2204cfbe76781dda572ca46fe2372689e6c6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1w0722gq02 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1w0722gq02();
/**
 * React Hook for Neural Mesh Integration
 *
 * Provides React components with access to the neural mesh service,
 * real-time agent updates, and WASM-accelerated computations.
 */
import { useState, useEffect, useRef, useCallback } from 'react';
import { NeuralMeshService } from '../services/NeuralMeshService';
/* istanbul ignore next */
cov_1w0722gq02().s[0]++;
export const useNeuralMesh = (props =
/* istanbul ignore next */
(cov_1w0722gq02().b[0][0]++, {})) => {
  /* istanbul ignore next */
  cov_1w0722gq02().f[0]++;
  const [state, setState] =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[1]++, useState({
    connection: null,
    agents: [],
    isConnected: false,
    isInitializing: false,
    error: null,
    metrics: {
      totalNeurons: 0,
      totalSynapses: 0,
      averageActivity: 0,
      networkEfficiency: 0,
      wasmAcceleration: false
    }
  }));
  const serviceRef =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[2]++, useRef(null));
  const reconnectTimeoutRef =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[3]++, useRef(null));
  // Initialize neural mesh service
  /* istanbul ignore next */
  cov_1w0722gq02().s[4]++;
  useEffect(() => {
    /* istanbul ignore next */
    cov_1w0722gq02().f[1]++;
    const config =
    /* istanbul ignore next */
    (cov_1w0722gq02().s[5]++, {
      serverUrl:
      /* istanbul ignore next */
      (cov_1w0722gq02().b[1][0]++, props.serverUrl) ||
      /* istanbul ignore next */
      (cov_1w0722gq02().b[1][1]++, 'ws://localhost:3000'),
      transport: 'websocket',
      enableWasm: props.enableWasm !== false,
      enableRealtime: props.enableRealtime !== false,
      debugMode:
      /* istanbul ignore next */
      (cov_1w0722gq02().b[2][0]++, props.debugMode) ||
      /* istanbul ignore next */
      (cov_1w0722gq02().b[2][1]++, false)
    });
    /* istanbul ignore next */
    cov_1w0722gq02().s[6]++;
    serviceRef.current = new NeuralMeshService(config);
    // Set up event listeners
    const service =
    /* istanbul ignore next */
    (cov_1w0722gq02().s[7]++, serviceRef.current);
    /* istanbul ignore next */
    cov_1w0722gq02().s[8]++;
    service.on('connected', connection => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[2]++;
      cov_1w0722gq02().s[9]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[3]++;
        cov_1w0722gq02().s[10]++;
        return {
          ...prev,
          connection,
          isConnected: true,
          isInitializing: false,
          error: null
        };
      });
    });
    /* istanbul ignore next */
    cov_1w0722gq02().s[11]++;
    service.on('disconnected', connection => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[4]++;
      cov_1w0722gq02().s[12]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[5]++;
        cov_1w0722gq02().s[13]++;
        return {
          ...prev,
          connection,
          isConnected: false,
          error: 'Disconnected from neural mesh'
        };
      });
      // Attempt to reconnect after 3 seconds
      /* istanbul ignore next */
      cov_1w0722gq02().s[14]++;
      if (reconnectTimeoutRef.current) {
        /* istanbul ignore next */
        cov_1w0722gq02().b[3][0]++;
        cov_1w0722gq02().s[15]++;
        clearTimeout(reconnectTimeoutRef.current);
      } else
      /* istanbul ignore next */
      {
        cov_1w0722gq02().b[3][1]++;
      }
      cov_1w0722gq02().s[16]++;
      reconnectTimeoutRef.current = setTimeout(() => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[6]++;
        cov_1w0722gq02().s[17]++;
        initializeService();
      }, 3000);
    });
    /* istanbul ignore next */
    cov_1w0722gq02().s[18]++;
    service.on('error', error => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[7]++;
      cov_1w0722gq02().s[19]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[8]++;
        cov_1w0722gq02().s[20]++;
        return {
          ...prev,
          error: error.message,
          isInitializing: false
        };
      });
    });
    /* istanbul ignore next */
    cov_1w0722gq02().s[21]++;
    service.on('agent_created', agent => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[9]++;
      cov_1w0722gq02().s[22]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[10]++;
        cov_1w0722gq02().s[23]++;
        return {
          ...prev,
          agents: [...prev.agents, agent]
        };
      });
    });
    /* istanbul ignore next */
    cov_1w0722gq02().s[24]++;
    service.on('agent_updated', agent => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[11]++;
      cov_1w0722gq02().s[25]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[12]++;
        cov_1w0722gq02().s[26]++;
        return {
          ...prev,
          agents: prev.agents.map(a => {
            /* istanbul ignore next */
            cov_1w0722gq02().f[13]++;
            cov_1w0722gq02().s[27]++;
            return a.id === agent.id ?
            /* istanbul ignore next */
            (cov_1w0722gq02().b[4][0]++, agent) :
            /* istanbul ignore next */
            (cov_1w0722gq02().b[4][1]++, a);
          })
        };
      });
    });
    /* istanbul ignore next */
    cov_1w0722gq02().s[28]++;
    service.on('status_update', status => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[14]++;
      cov_1w0722gq02().s[29]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[15]++;
        cov_1w0722gq02().s[30]++;
        return {
          ...prev,
          metrics: {
            ...prev.metrics,
            totalNeurons:
            /* istanbul ignore next */
            (cov_1w0722gq02().b[5][0]++, status.metrics?.total_neurons) ||
            /* istanbul ignore next */
            (cov_1w0722gq02().b[5][1]++, 0),
            totalSynapses:
            /* istanbul ignore next */
            (cov_1w0722gq02().b[6][0]++, status.metrics?.total_synapses) ||
            /* istanbul ignore next */
            (cov_1w0722gq02().b[6][1]++, 0),
            averageActivity:
            /* istanbul ignore next */
            (cov_1w0722gq02().b[7][0]++, status.metrics?.activity_level) ||
            /* istanbul ignore next */
            (cov_1w0722gq02().b[7][1]++, 0),
            networkEfficiency:
            /* istanbul ignore next */
            (cov_1w0722gq02().b[8][0]++, status.metrics?.efficiency_score) ||
            /* istanbul ignore next */
            (cov_1w0722gq02().b[8][1]++, 0),
            wasmAcceleration: service.isWasmEnabled()
          }
        };
      });
    });
    /* istanbul ignore next */
    cov_1w0722gq02().s[31]++;
    service.on('mesh_trained', results => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[16]++;
      cov_1w0722gq02().s[32]++;
      if (props.debugMode) {
        /* istanbul ignore next */
        cov_1w0722gq02().b[9][0]++;
        cov_1w0722gq02().s[33]++;
        console.log('🧠 Neural mesh training completed:', results);
      } else
      /* istanbul ignore next */
      {
        cov_1w0722gq02().b[9][1]++;
      }
    });
    // Initialize the service
    /* istanbul ignore next */
    cov_1w0722gq02().s[34]++;
    const initializeService = async () => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[17]++;
      cov_1w0722gq02().s[35]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[18]++;
        cov_1w0722gq02().s[36]++;
        return {
          ...prev,
          isInitializing: true,
          error: null
        };
      });
      /* istanbul ignore next */
      cov_1w0722gq02().s[37]++;
      try {
        /* istanbul ignore next */
        cov_1w0722gq02().s[38]++;
        await service.initialize();
      } catch (error) {
        /* istanbul ignore next */
        cov_1w0722gq02().s[39]++;
        setState(prev => {
          /* istanbul ignore next */
          cov_1w0722gq02().f[19]++;
          cov_1w0722gq02().s[40]++;
          return {
            ...prev,
            error: error.message,
            isInitializing: false
          };
        });
      }
    };
    /* istanbul ignore next */
    cov_1w0722gq02().s[41]++;
    initializeService();
    // Cleanup
    /* istanbul ignore next */
    cov_1w0722gq02().s[42]++;
    return () => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[20]++;
      cov_1w0722gq02().s[43]++;
      if (reconnectTimeoutRef.current) {
        /* istanbul ignore next */
        cov_1w0722gq02().b[10][0]++;
        cov_1w0722gq02().s[44]++;
        clearTimeout(reconnectTimeoutRef.current);
      } else
      /* istanbul ignore next */
      {
        cov_1w0722gq02().b[10][1]++;
      }
      cov_1w0722gq02().s[45]++;
      service.disconnect();
    };
  }, [props.serverUrl, props.enableWasm, props.enableRealtime, props.debugMode]);
  // Create a new neural agent
  const createAgent =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[46]++, useCallback(async (type, config) => {
    /* istanbul ignore next */
    cov_1w0722gq02().f[21]++;
    cov_1w0722gq02().s[47]++;
    if (!serviceRef.current) {
      /* istanbul ignore next */
      cov_1w0722gq02().b[11][0]++;
      cov_1w0722gq02().s[48]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1w0722gq02().b[11][1]++;
    }
    cov_1w0722gq02().s[49]++;
    try {
      const agent =
      /* istanbul ignore next */
      (cov_1w0722gq02().s[50]++, await serviceRef.current.createNeuralAgent(type, config));
      /* istanbul ignore next */
      cov_1w0722gq02().s[51]++;
      return agent;
    } catch (error) {
      /* istanbul ignore next */
      cov_1w0722gq02().s[52]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[22]++;
        cov_1w0722gq02().s[53]++;
        return {
          ...prev,
          error: error.message
        };
      });
      /* istanbul ignore next */
      cov_1w0722gq02().s[54]++;
      return null;
    }
  }, []));
  // Update an existing agent
  const updateAgent =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[55]++, useCallback(async agent => {
    /* istanbul ignore next */
    cov_1w0722gq02().f[23]++;
    cov_1w0722gq02().s[56]++;
    if (!serviceRef.current) {
      /* istanbul ignore next */
      cov_1w0722gq02().b[12][0]++;
      cov_1w0722gq02().s[57]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1w0722gq02().b[12][1]++;
    }
    cov_1w0722gq02().s[58]++;
    try {
      const updatedAgent =
      /* istanbul ignore next */
      (cov_1w0722gq02().s[59]++, await serviceRef.current.updateNeuralAgent(agent));
      /* istanbul ignore next */
      cov_1w0722gq02().s[60]++;
      return updatedAgent;
    } catch (error) {
      /* istanbul ignore next */
      cov_1w0722gq02().s[61]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[24]++;
        cov_1w0722gq02().s[62]++;
        return {
          ...prev,
          error: error.message
        };
      });
      /* istanbul ignore next */
      cov_1w0722gq02().s[63]++;
      return null;
    }
  }, []));
  // Remove an agent
  const removeAgent =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[64]++, useCallback(agentId => {
    /* istanbul ignore next */
    cov_1w0722gq02().f[25]++;
    cov_1w0722gq02().s[65]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[26]++;
      cov_1w0722gq02().s[66]++;
      return {
        ...prev,
        agents: prev.agents.filter(agent => {
          /* istanbul ignore next */
          cov_1w0722gq02().f[27]++;
          cov_1w0722gq02().s[67]++;
          return agent.id !== agentId;
        })
      };
    });
  }, []));
  // Train the neural mesh
  const trainMesh =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[68]++, useCallback(async patterns => {
    /* istanbul ignore next */
    cov_1w0722gq02().f[28]++;
    cov_1w0722gq02().s[69]++;
    if (!serviceRef.current) {
      /* istanbul ignore next */
      cov_1w0722gq02().b[13][0]++;
      cov_1w0722gq02().s[70]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1w0722gq02().b[13][1]++;
    }
    cov_1w0722gq02().s[71]++;
    try {
      const success =
      /* istanbul ignore next */
      (cov_1w0722gq02().s[72]++, await serviceRef.current.trainMesh(patterns));
      /* istanbul ignore next */
      cov_1w0722gq02().s[73]++;
      return success;
    } catch (error) {
      /* istanbul ignore next */
      cov_1w0722gq02().s[74]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[29]++;
        cov_1w0722gq02().s[75]++;
        return {
          ...prev,
          error: error.message
        };
      });
      /* istanbul ignore next */
      cov_1w0722gq02().s[76]++;
      return false;
    }
  }, []));
  // Get mesh status
  const getMeshStatus =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[77]++, useCallback(async () => {
    /* istanbul ignore next */
    cov_1w0722gq02().f[30]++;
    cov_1w0722gq02().s[78]++;
    if (!serviceRef.current) {
      /* istanbul ignore next */
      cov_1w0722gq02().b[14][0]++;
      cov_1w0722gq02().s[79]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1w0722gq02().b[14][1]++;
    }
    cov_1w0722gq02().s[80]++;
    try {
      const status =
      /* istanbul ignore next */
      (cov_1w0722gq02().s[81]++, await serviceRef.current.getMeshStatus());
      /* istanbul ignore next */
      cov_1w0722gq02().s[82]++;
      return status;
    } catch (error) {
      /* istanbul ignore next */
      cov_1w0722gq02().s[83]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[31]++;
        cov_1w0722gq02().s[84]++;
        return {
          ...prev,
          error: error.message
        };
      });
      /* istanbul ignore next */
      cov_1w0722gq02().s[85]++;
      return null;
    }
  }, []));
  // Clear error
  const clearError =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[86]++, useCallback(() => {
    /* istanbul ignore next */
    cov_1w0722gq02().f[32]++;
    cov_1w0722gq02().s[87]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[33]++;
      cov_1w0722gq02().s[88]++;
      return {
        ...prev,
        error: null
      };
    });
  }, []));
  // Manually reconnect
  const reconnect =
  /* istanbul ignore next */
  (cov_1w0722gq02().s[89]++, useCallback(async () => {
    /* istanbul ignore next */
    cov_1w0722gq02().f[34]++;
    cov_1w0722gq02().s[90]++;
    if (!serviceRef.current) {
      /* istanbul ignore next */
      cov_1w0722gq02().b[15][0]++;
      cov_1w0722gq02().s[91]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1w0722gq02().b[15][1]++;
    }
    cov_1w0722gq02().s[92]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[35]++;
      cov_1w0722gq02().s[93]++;
      return {
        ...prev,
        isInitializing: true,
        error: null
      };
    });
    /* istanbul ignore next */
    cov_1w0722gq02().s[94]++;
    try {
      /* istanbul ignore next */
      cov_1w0722gq02().s[95]++;
      await serviceRef.current.initialize();
    } catch (error) {
      /* istanbul ignore next */
      cov_1w0722gq02().s[96]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_1w0722gq02().f[36]++;
        cov_1w0722gq02().s[97]++;
        return {
          ...prev,
          error: error.message,
          isInitializing: false
        };
      });
    }
  }, []));
  /* istanbul ignore next */
  cov_1w0722gq02().s[98]++;
  return {
    // State
    ...state,
    // Actions
    createAgent,
    updateAgent,
    removeAgent,
    trainMesh,
    getMeshStatus,
    clearError,
    reconnect,
    // Computed values
    neuralAgentCount: state.agents.length,
    activeNeuralAgents: state.agents.filter(a => {
      /* istanbul ignore next */
      cov_1w0722gq02().f[37]++;
      cov_1w0722gq02().s[99]++;
      return /* istanbul ignore next */(cov_1w0722gq02().b[16][0]++, a.status === 'active') ||
      /* istanbul ignore next */
      (cov_1w0722gq02().b[16][1]++, a.status === 'processing');
    }).length,
    isWasmEnabled:
    /* istanbul ignore next */
    (cov_1w0722gq02().b[17][0]++, serviceRef.current?.isWasmEnabled()) ||
    /* istanbul ignore next */
    (cov_1w0722gq02().b[17][1]++, false),
    // Service reference (for advanced usage)
    service: serviceRef.current
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,