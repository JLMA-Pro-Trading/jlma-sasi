{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/performance/WasmModuleManager.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/performance/WasmModuleManager.ts"],"sourcesContent":["/**\n * WASM Module Manager - Issue #19\n * \n * This module provides comprehensive WASM module loading and management\n * with automatic fallback and performance optimization.\n * \n * Features:\n * - Dynamic WASM module loading\n * - Automatic fallback management\n * - Performance optimization\n * - Module lifecycle management\n * - Resource cleanup\n * - Error handling and recovery\n */\n\nimport { WasmPerformanceLayer } from './WasmPerformanceLayer'\nimport { SIMDAccelerationLayer } from './SIMDAccelerationLayer'\n\ninterface WasmModuleConfig {\n  preferredModule: 'ruv-swarm' | 'production' | 'fallback'\n  enableSIMD: boolean\n  memoryLimit: number\n  loadTimeout: number\n  retryAttempts: number\n  enableProfiling: boolean\n  enableAutoFallback: boolean\n}\n\ninterface WasmModuleStatus {\n  loaded: boolean\n  module: string\n  version: string\n  capabilities: string[]\n  memoryUsage: number\n  loadTime: number\n  errorCount: number\n  lastError?: string\n}\n\ninterface WasmModuleMetrics {\n  loadTime: number\n  memoryUsage: number\n  operationsPerSecond: number\n  errorRate: number\n  uptime: number\n  performanceScore: number\n}\n\ninterface WasmModuleInfo {\n  name: string\n  description: string\n  version: string\n  capabilities: string[]\n  memoryRequirement: number\n  loadPriority: number\n  available: boolean\n}\n\nexport class WasmModuleManager {\n  private config: WasmModuleConfig\n  private performanceLayer: WasmPerformanceLayer\n  private simdLayer: SIMDAccelerationLayer\n  private moduleStatus: WasmModuleStatus\n  private moduleMetrics: WasmModuleMetrics\n  private availableModules: Map<string, WasmModuleInfo> = new Map()\n  private isInitialized = false\n  private startTime = 0\n  private performanceHistory: number[] = []\n  private errorHistory: string[] = []\n\n  constructor(config: Partial<WasmModuleConfig> = {}) {\n    this.config = {\n      preferredModule: 'ruv-swarm',\n      enableSIMD: true,\n      memoryLimit: 50 * 1024 * 1024, // 50MB\n      loadTimeout: 10000, // 10 seconds\n      retryAttempts: 3,\n      enableProfiling: true,\n      enableAutoFallback: true,\n      ...config\n    }\n    \n    this.performanceLayer = new WasmPerformanceLayer()\n    this.simdLayer = new SIMDAccelerationLayer()\n    this.moduleStatus = this.initializeModuleStatus()\n    this.moduleMetrics = this.initializeModuleMetrics()\n    \n    this.initializeAvailableModules()\n  }\n\n  /**\n   * Initialize the WASM module manager\n   */\n  async initialize(): Promise<boolean> {\n    this.startTime = Date.now()\n    \n    try {\n      console.log('🚀 Initializing WASM Module Manager...')\n      console.log('⚙️ Configuration:', this.config)\n      \n      // Initialize SIMD layer first\n      if (this.config.enableSIMD) {\n        await this.simdLayer.initialize()\n      }\n      \n      // Attempt to load preferred module\n      let success = false\n      \n      if (this.config.preferredModule === 'ruv-swarm') {\n        success = await this.loadRuvSwarmModule()\n      } else if (this.config.preferredModule === 'production') {\n        success = await this.loadProductionModule()\n      } else {\n        success = await this.loadFallbackModule()\n      }\n      \n      // Auto-fallback if enabled and preferred module failed\n      if (!success && this.config.enableAutoFallback) {\n        success = await this.attemptAutoFallback()\n      }\n      \n      if (!success) {\n        throw new Error('Failed to load any WASM module')\n      }\n      \n      // Initialize performance layer\n      await this.performanceLayer.initialize()\n      \n      // Start performance monitoring\n      if (this.config.enableProfiling) {\n        this.startPerformanceMonitoring()\n      }\n      \n      this.isInitialized = true\n      this.moduleMetrics.loadTime = Date.now() - this.startTime\n      \n      console.log('✅ WASM Module Manager initialized successfully')\n      console.log(`📊 Status: ${this.moduleStatus.module} loaded in ${this.moduleMetrics.loadTime}ms`)\n      \n      return true\n      \n    } catch (error) {\n      console.error('❌ WASM Module Manager initialization failed:', error)\n      this.handleError(error.message)\n      return false\n    }\n  }\n\n  /**\n   * Initialize available modules registry\n   */\n  private initializeAvailableModules(): void {\n    this.availableModules.set('ruv-swarm', {\n      name: 'ruv-swarm',\n      description: 'High-performance neural network swarm orchestration',\n      version: '1.0.18',\n      capabilities: ['SIMD', 'neural-networks', 'swarm-orchestration', 'memory-pool'],\n      memoryRequirement: 16 * 1024 * 1024, // 16MB\n      loadPriority: 1,\n      available: true\n    })\n    \n    this.availableModules.set('production', {\n      name: 'production',\n      description: 'Production-ready WASM neural runtime',\n      version: '1.0.0',\n      capabilities: ['SIMD', 'neural-networks', 'performance-monitoring'],\n      memoryRequirement: 8 * 1024 * 1024, // 8MB\n      loadPriority: 2,\n      available: true\n    })\n    \n    this.availableModules.set('fallback', {\n      name: 'fallback',\n      description: 'Development fallback WASM bridge',\n      version: '1.0.0',\n      capabilities: ['neural-networks', 'basic-operations'],\n      memoryRequirement: 4 * 1024 * 1024, // 4MB\n      loadPriority: 3,\n      available: true\n    })\n  }\n\n  /**\n   * Initialize module status\n   */\n  private initializeModuleStatus(): WasmModuleStatus {\n    return {\n      loaded: false,\n      module: 'none',\n      version: '0.0.0',\n      capabilities: [],\n      memoryUsage: 0,\n      loadTime: 0,\n      errorCount: 0\n    }\n  }\n\n  /**\n   * Initialize module metrics\n   */\n  private initializeModuleMetrics(): WasmModuleMetrics {\n    return {\n      loadTime: 0,\n      memoryUsage: 0,\n      operationsPerSecond: 0,\n      errorRate: 0,\n      uptime: 0,\n      performanceScore: 0\n    }\n  }\n\n  /**\n   * Load ruv-swarm WASM module\n   */\n  private async loadRuvSwarmModule(): Promise<boolean> {\n    try {\n      console.log('🔄 Loading ruv-swarm WASM module...')\n      \n      const moduleInfo = this.availableModules.get('ruv-swarm')!\n      \n      // Check memory requirements\n      if (moduleInfo.memoryRequirement > this.config.memoryLimit) {\n        console.warn(`⚠️ ruv-swarm requires ${moduleInfo.memoryRequirement} bytes, limit is ${this.config.memoryLimit}`)\n      }\n      \n      // Load with timeout\n      const loadPromise = this.performanceLayer.initialize()\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Load timeout')), this.config.loadTimeout)\n      })\n      \n      await Promise.race([loadPromise, timeoutPromise])\n      \n      if (this.performanceLayer.isUsingRuvSwarm()) {\n        this.updateModuleStatus('ruv-swarm', moduleInfo)\n        console.log('✅ ruv-swarm WASM module loaded successfully')\n        return true\n      }\n      \n      return false\n      \n    } catch (error) {\n      console.warn('⚠️ Failed to load ruv-swarm WASM module:', error.message)\n      this.handleError(error.message)\n      return false\n    }\n  }\n\n  /**\n   * Load production WASM module\n   */\n  private async loadProductionModule(): Promise<boolean> {\n    try {\n      console.log('🔄 Loading production WASM module...')\n      \n      const moduleInfo = this.availableModules.get('production')!\n      \n      // Initialize performance layer (will use production bridge)\n      await this.performanceLayer.initialize()\n      \n      if (this.performanceLayer.isWasmInitialized()) {\n        this.updateModuleStatus('production', moduleInfo)\n        console.log('✅ Production WASM module loaded successfully')\n        return true\n      }\n      \n      return false\n      \n    } catch (error) {\n      console.warn('⚠️ Failed to load production WASM module:', error.message)\n      this.handleError(error.message)\n      return false\n    }\n  }\n\n  /**\n   * Load fallback WASM module\n   */\n  private async loadFallbackModule(): Promise<boolean> {\n    try {\n      console.log('🔄 Loading fallback WASM module...')\n      \n      const moduleInfo = this.availableModules.get('fallback')!\n      \n      // Initialize performance layer (will use fallback bridge)\n      await this.performanceLayer.initialize()\n      \n      if (this.performanceLayer.isWasmInitialized()) {\n        this.updateModuleStatus('fallback', moduleInfo)\n        console.log('✅ Fallback WASM module loaded successfully')\n        return true\n      }\n      \n      return false\n      \n    } catch (error) {\n      console.error('❌ Failed to load fallback WASM module:', error.message)\n      this.handleError(error.message)\n      return false\n    }\n  }\n\n  /**\n   * Attempt automatic fallback\n   */\n  private async attemptAutoFallback(): Promise<boolean> {\n    console.log('🔄 Attempting automatic fallback...')\n    \n    const fallbackOrder = ['production', 'fallback']\n    \n    for (const moduleName of fallbackOrder) {\n      if (moduleName === this.config.preferredModule) {\n        continue // Skip already tried module\n      }\n      \n      console.log(`🔄 Trying ${moduleName} module...`)\n      \n      let success = false\n      \n      if (moduleName === 'production') {\n        success = await this.loadProductionModule()\n      } else if (moduleName === 'fallback') {\n        success = await this.loadFallbackModule()\n      }\n      \n      if (success) {\n        console.log(`✅ Auto-fallback successful: ${moduleName}`)\n        return true\n      }\n    }\n    \n    console.error('❌ Auto-fallback failed: no modules available')\n    return false\n  }\n\n  /**\n   * Update module status\n   */\n  private updateModuleStatus(moduleName: string, moduleInfo: WasmModuleInfo): void {\n    this.moduleStatus.loaded = true\n    this.moduleStatus.module = moduleName\n    this.moduleStatus.version = moduleInfo.version\n    this.moduleStatus.capabilities = [...moduleInfo.capabilities]\n    this.moduleStatus.memoryUsage = this.performanceLayer.getMemoryUsage()\n    this.moduleStatus.loadTime = Date.now() - this.startTime\n  }\n\n  /**\n   * Start performance monitoring\n   */\n  private startPerformanceMonitoring(): void {\n    const monitoringInterval = setInterval(() => {\n      this.updateMetrics()\n      this.performanceHistory.push(this.moduleMetrics.performanceScore)\n      \n      // Keep only last 100 measurements\n      if (this.performanceHistory.length > 100) {\n        this.performanceHistory.shift()\n      }\n      \n      // Check for performance degradation\n      if (this.performanceHistory.length > 10) {\n        const recent = this.performanceHistory.slice(-10)\n        const older = this.performanceHistory.slice(-20, -10)\n        \n        if (older.length > 0) {\n          const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length\n          const olderAvg = older.reduce((a, b) => a + b, 0) / older.length\n          \n          if (recentAvg < olderAvg * 0.8) {\n            console.warn('⚠️ Performance degradation detected')\n          }\n        }\n      }\n      \n    }, 5000) // Update every 5 seconds\n    \n    // Store interval ID for cleanup\n    this.monitoringIntervalId = monitoringInterval\n  }\n  \n  private monitoringIntervalId: NodeJS.Timeout | null = null\n\n  /**\n   * Update performance metrics\n   */\n  private updateMetrics(): void {\n    const performanceMetrics = this.performanceLayer.getPerformanceMetrics()\n    const simdMetrics = this.simdLayer.getPerformanceMetrics()\n    \n    this.moduleMetrics.memoryUsage = performanceMetrics.memoryUsage\n    this.moduleMetrics.operationsPerSecond = performanceMetrics.operationsPerSecond\n    this.moduleMetrics.errorRate = performanceMetrics.errorRate || 0\n    this.moduleMetrics.uptime = Date.now() - this.startTime\n    \n    // Calculate performance score (0-100)\n    const memoryScore = Math.max(0, 100 - (this.moduleMetrics.memoryUsage / this.config.memoryLimit) * 100)\n    const performanceScore = Math.min(100, this.moduleMetrics.operationsPerSecond / 1000)\n    const errorScore = Math.max(0, 100 - this.moduleMetrics.errorRate * 100)\n    const simdScore = simdMetrics.simdUtilization * 100\n    \n    this.moduleMetrics.performanceScore = (memoryScore + performanceScore + errorScore + simdScore) / 4\n    \n    // Update module status\n    this.moduleStatus.memoryUsage = this.moduleMetrics.memoryUsage\n  }\n\n  /**\n   * Handle errors\n   */\n  private handleError(errorMessage: string): void {\n    this.moduleStatus.errorCount++\n    this.moduleStatus.lastError = errorMessage\n    \n    this.errorHistory.push(errorMessage)\n    \n    // Keep only last 50 errors\n    if (this.errorHistory.length > 50) {\n      this.errorHistory.shift()\n    }\n    \n    // Update error rate\n    this.moduleMetrics.errorRate = this.moduleStatus.errorCount / Math.max(1, this.moduleMetrics.uptime / 1000)\n  }\n\n  /**\n   * Get module status\n   */\n  getModuleStatus(): WasmModuleStatus {\n    return { ...this.moduleStatus }\n  }\n\n  /**\n   * Get module metrics\n   */\n  getModuleMetrics(): WasmModuleMetrics {\n    this.updateMetrics()\n    return { ...this.moduleMetrics }\n  }\n\n  /**\n   * Get available modules\n   */\n  getAvailableModules(): WasmModuleInfo[] {\n    return Array.from(this.availableModules.values())\n  }\n\n  /**\n   * Get performance layer\n   */\n  getPerformanceLayer(): WasmPerformanceLayer {\n    return this.performanceLayer\n  }\n\n  /**\n   * Get SIMD layer\n   */\n  getSIMDLayer(): SIMDAccelerationLayer {\n    return this.simdLayer\n  }\n\n  /**\n   * Switch to different module\n   */\n  async switchModule(moduleName: string): Promise<boolean> {\n    if (!this.availableModules.has(moduleName)) {\n      console.error(`❌ Module ${moduleName} not available`)\n      return false\n    }\n    \n    if (this.moduleStatus.module === moduleName) {\n      console.log(`ℹ️ Already using ${moduleName} module`)\n      return true\n    }\n    \n    console.log(`🔄 Switching to ${moduleName} module...`)\n    \n    // Cleanup current module\n    await this.cleanup()\n    \n    // Load new module\n    let success = false\n    \n    if (moduleName === 'ruv-swarm') {\n      success = await this.loadRuvSwarmModule()\n    } else if (moduleName === 'production') {\n      success = await this.loadProductionModule()\n    } else if (moduleName === 'fallback') {\n      success = await this.loadFallbackModule()\n    }\n    \n    if (success) {\n      console.log(`✅ Successfully switched to ${moduleName} module`)\n      \n      // Restart performance monitoring\n      if (this.config.enableProfiling) {\n        this.startPerformanceMonitoring()\n      }\n    }\n    \n    return success\n  }\n\n  /**\n   * Run health check\n   */\n  healthCheck(): {\n    status: 'healthy' | 'warning' | 'error'\n    module: WasmModuleStatus\n    metrics: WasmModuleMetrics\n    issues: string[]\n  } {\n    const issues: string[] = []\n    let status: 'healthy' | 'warning' | 'error' = 'healthy'\n    \n    if (!this.isInitialized) {\n      issues.push('WASM Module Manager not initialized')\n      status = 'error'\n    }\n    \n    if (!this.moduleStatus.loaded) {\n      issues.push('No WASM module loaded')\n      status = 'error'\n    }\n    \n    if (this.moduleMetrics.memoryUsage > this.config.memoryLimit * 0.9) {\n      issues.push(`Memory usage ${(this.moduleMetrics.memoryUsage / 1024 / 1024).toFixed(2)}MB near limit`)\n      status = 'warning'\n    }\n    \n    if (this.moduleMetrics.errorRate > 0.1) {\n      issues.push(`Error rate ${(this.moduleMetrics.errorRate * 100).toFixed(1)}% too high`)\n      status = 'warning'\n    }\n    \n    if (this.moduleMetrics.performanceScore < 50) {\n      issues.push(`Performance score ${this.moduleMetrics.performanceScore.toFixed(1)} below threshold`)\n      status = 'warning'\n    }\n    \n    return {\n      status,\n      module: this.getModuleStatus(),\n      metrics: this.getModuleMetrics(),\n      issues\n    }\n  }\n\n  /**\n   * Get performance report\n   */\n  getPerformanceReport(): string {\n    const status = this.getModuleStatus()\n    const metrics = this.getModuleMetrics()\n    const simdMetrics = this.simdLayer.getPerformanceMetrics()\n    \n    return `WASM Module Manager Performance Report:\n\n📊 Module Status:\n   - Active Module: ${status.module} v${status.version}\n   - Load Time: ${status.loadTime}ms\n   - Memory Usage: ${(status.memoryUsage / 1024 / 1024).toFixed(2)}MB\n   - Capabilities: ${status.capabilities.join(', ')}\n   - Error Count: ${status.errorCount}\n\n⚡ Performance Metrics:\n   - Operations/sec: ${metrics.operationsPerSecond.toFixed(0)}\n   - Performance Score: ${metrics.performanceScore.toFixed(1)}/100\n   - Error Rate: ${(metrics.errorRate * 100).toFixed(2)}%\n   - Uptime: ${(metrics.uptime / 1000).toFixed(0)}s\n\n🔧 SIMD Performance:\n   - SIMD Support: ${this.simdLayer.isSIMDSupported() ? '✅' : '❌'}\n   - Operations/sec: ${simdMetrics.operationsPerSecond.toFixed(0)}\n   - Vectorization: ${(simdMetrics.vectorizationEfficiency * 100).toFixed(1)}%\n   - Utilization: ${(simdMetrics.simdUtilization * 100).toFixed(1)}%\n\n💡 Recent Performance: ${this.performanceHistory.slice(-5).map(s => s.toFixed(1)).join(', ')}\n`\n  }\n\n  /**\n   * Export configuration\n   */\n  exportConfig(): WasmModuleConfig {\n    return { ...this.config }\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<WasmModuleConfig>): void {\n    this.config = { ...this.config, ...newConfig }\n    console.log('⚙️ Configuration updated:', this.config)\n  }\n\n  /**\n   * Check if initialized\n   */\n  isModuleManagerInitialized(): boolean {\n    return this.isInitialized\n  }\n\n  /**\n   * Cleanup resources\n   */\n  async cleanup(): Promise<void> {\n    console.log('🧹 Cleaning up WASM Module Manager...')\n    \n    // Stop performance monitoring\n    if (this.monitoringIntervalId) {\n      clearInterval(this.monitoringIntervalId)\n      this.monitoringIntervalId = null\n    }\n    \n    // Cleanup performance layer\n    if (this.performanceLayer) {\n      this.performanceLayer.cleanup()\n    }\n    \n    // Cleanup SIMD layer\n    if (this.simdLayer) {\n      this.simdLayer.cleanup()\n    }\n    \n    // Reset status and metrics\n    this.moduleStatus = this.initializeModuleStatus()\n    this.moduleMetrics = this.initializeModuleMetrics()\n    this.performanceHistory = []\n    this.errorHistory = []\n    this.isInitialized = false\n    \n    console.log('✅ WASM Module Manager cleanup completed')\n  }\n}\n\nexport default WasmModuleManager"],"version":3}