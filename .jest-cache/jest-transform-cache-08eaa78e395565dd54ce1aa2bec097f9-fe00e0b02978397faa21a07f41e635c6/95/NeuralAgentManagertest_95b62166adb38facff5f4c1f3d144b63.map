{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/NeuralAgentManager.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/NeuralAgentManager.test.ts"],"sourcesContent":["/**\n * Unit Tests for Neural Agent Manager\n * Comprehensive test suite validating neural agent functionality\n */\n\nimport { jest } from '@jest/globals';\nimport NeuralAgentManager from '../../src/services/NeuralAgentManager';\nimport { AgentState, NeuralConfiguration } from '../../src/types/neural';\n\n// Mock WASM module for testing\nconst mockWasmModule = {\n  createNeuralNetwork: jest.fn(),\n  runInference: jest.fn(),\n  trainNetwork: jest.fn(),\n  serializeWeights: jest.fn(),\n  deserializeWeights: jest.fn(),\n  getMemoryUsage: jest.fn().mockReturnValue(40 * 1024 * 1024), // 40MB\n  enableSIMD: true\n};\n\n// Mock SQLite database\nconst mockDatabase = {\n  saveAgentState: jest.fn(),\n  loadAgentState: jest.fn(),\n  saveWeights: jest.fn(),\n  loadWeights: jest.fn(),\n  query: jest.fn()\n};\n\ndescribe('NeuralAgentManager', () => {\n  let manager: NeuralAgentManager;\n  \n  beforeEach(async () => {\n    jest.clearAllMocks();\n    \n    // Setup WASM mocks\n    mockWasmModule.createNeuralNetwork.mockResolvedValue({\n      id: 'test_network',\n      type: 'mlp',\n      architecture: [10, 5, 1],\n      weights: new Float32Array(100),\n      biases: new Float32Array(16)\n    });\n    \n    mockWasmModule.runInference.mockImplementation(async (network, inputs) => {\n      // Simulate inference delay\n      await new Promise(resolve => setTimeout(resolve, 30));\n      return [Math.random()]; // Mock output\n    });\n    \n    mockWasmModule.trainNetwork.mockResolvedValue({\n      accuracy: 0.85,\n      convergenceEpoch: 45\n    });\n    \n    mockWasmModule.serializeWeights.mockResolvedValue(new ArrayBuffer(400));\n    mockWasmModule.deserializeWeights.mockResolvedValue(undefined);\n    \n    // Create manager with test configuration\n    manager = new NeuralAgentManager({\n      maxAgents: 5,\n      memoryLimitPerAgent: 50 * 1024 * 1024,\n      inferenceTimeout: 100,\n      simdEnabled: true,\n      performanceMonitoring: true\n    });\n    \n    // Wait for initialization\n    await new Promise((resolve) => {\n      manager.once('initialized', resolve);\n    });\n  });\n  \n  afterEach(async () => {\n    await manager.cleanup();\n  });\n  \n  describe('Initialization', () => {\n    test('should initialize successfully with default config', async () => {\n      const newManager = new NeuralAgentManager();\n      \n      await new Promise((resolve) => {\n        newManager.once('initialized', resolve);\n      });\n      \n      expect(newManager.getPerformanceMetrics()).toBeDefined();\n      expect(newManager.getActiveAgents()).toHaveLength(0);\n      \n      await newManager.cleanup();\n    });\n    \n    test('should emit initialization event', async () => {\n      const initSpy = jest.fn();\n      const newManager = new NeuralAgentManager();\n      \n      newManager.once('initialized', initSpy);\n      \n      await new Promise((resolve) => {\n        newManager.once('initialized', resolve);\n      });\n      \n      expect(initSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          config: expect.any(Object),\n          timestamp: expect.any(Number)\n        })\n      );\n      \n      await newManager.cleanup();\n    });\n  });\n  \n  describe('Agent Spawning', () => {\n    const testConfig: NeuralConfiguration = {\n      type: 'mlp',\n      architecture: [10, 5, 1],\n      activationFunction: 'relu',\n      learningRate: 0.01\n    };\n    \n    test('should spawn agent successfully', async () => {\n      const spawnSpy = jest.fn();\n      manager.on('agentSpawned', spawnSpy);\n      \n      const agentId = await manager.spawnAgent(testConfig);\n      \n      expect(agentId).toBeDefined();\n      expect(typeof agentId).toBe('string');\n      expect(spawnSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          agentId,\n          spawnTime: expect.any(Number),\n          config: testConfig,\n          memoryUsage: expect.any(Number)\n        })\n      );\n      \n      const agent = manager.getAgentState(agentId);\n      expect(agent).toBeDefined();\n      expect(agent!.state).toBe(AgentState.ACTIVE);\n      expect(agent!.config).toEqual(testConfig);\n    });\n    \n    test('should respect maximum agent limit', async () => {\n      const promises = Array.from({ length: 6 }, () => \n        manager.spawnAgent(testConfig)\n      );\n      \n      const results = await Promise.allSettled(promises);\n      \n      // First 5 should succeed\n      expect(results.slice(0, 5).every(r => r.status === 'fulfilled')).toBe(true);\n      \n      // 6th should fail\n      expect(results[5].status).toBe('rejected');\n      expect((results[5] as PromiseRejectedResult).reason.message)\n        .toContain('Maximum agents limit reached');\n    });\n    \n    test('should track performance metrics during spawning', async () => {\n      const initialMetrics = manager.getPerformanceMetrics();\n      \n      await manager.spawnAgent(testConfig);\n      await manager.spawnAgent(testConfig);\n      \n      const updatedMetrics = manager.getPerformanceMetrics();\n      \n      expect(updatedMetrics.totalAgentsSpawned).toBe(initialMetrics.totalAgentsSpawned + 2);\n      expect(updatedMetrics.averageSpawnTime).toBeGreaterThan(0);\n    });\n  });\n  \n  describe('Neural Inference', () => {\n    let agentId: string;\n    \n    beforeEach(async () => {\n      agentId = await manager.spawnAgent({\n        type: 'mlp',\n        architecture: [10, 5, 1],\n        activationFunction: 'relu'\n      });\n    });\n    \n    test('should run inference successfully', async () => {\n      const inferenceSpy = jest.fn();\n      manager.on('inferenceComplete', inferenceSpy);\n      \n      const inputs = Array.from({ length: 10 }, () => Math.random());\n      const outputs = await manager.runInference(agentId, inputs);\n      \n      expect(outputs).toBeDefined();\n      expect(Array.isArray(outputs)).toBe(true);\n      expect(outputs.length).toBeGreaterThan(0);\n      \n      expect(inferenceSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          agentId,\n          inferenceTime: expect.any(Number),\n          inputSize: inputs.length,\n          outputSize: outputs.length\n        })\n      );\n    });\n    \n    test('should fail for non-existent agent', async () => {\n      const inputs = [1, 2, 3];\n      \n      await expect(manager.runInference('non_existent', inputs))\n        .rejects.toThrow('Agent not found');\n    });\n    \n    test('should timeout on slow inference', async () => {\n      // Mock slow inference\n      mockWasmModule.runInference.mockImplementation(async () => {\n        await new Promise(resolve => setTimeout(resolve, 200)); // Longer than timeout\n        return [0.5];\n      });\n      \n      const inputs = [1, 2, 3];\n      \n      await expect(manager.runInference(agentId, inputs))\n        .rejects.toThrow('Inference timeout');\n    });\n    \n    test('should update agent statistics after inference', async () => {\n      const inputs = Array.from({ length: 10 }, () => Math.random());\n      \n      const agentBefore = manager.getAgentState(agentId)!;\n      const totalInferencesBefore = agentBefore.totalInferences;\n      \n      await manager.runInference(agentId, inputs);\n      \n      const agentAfter = manager.getAgentState(agentId)!;\n      \n      expect(agentAfter.totalInferences).toBe(totalInferencesBefore + 1);\n      expect(agentAfter.lastActive).toBeGreaterThan(agentBefore.lastActive);\n      expect(agentAfter.averageInferenceTime).toBeGreaterThan(0);\n    });\n  });\n  \n  describe('Agent Training', () => {\n    let agentId: string;\n    \n    beforeEach(async () => {\n      agentId = await manager.spawnAgent({\n        type: 'mlp',\n        architecture: [10, 5, 1],\n        activationFunction: 'relu'\n      });\n    });\n    \n    test('should train agent successfully', async () => {\n      const learningSpy = jest.fn();\n      manager.on('learningComplete', learningSpy);\n      \n      const trainingData = Array.from({ length: 50 }, () => ({\n        inputs: Array.from({ length: 10 }, () => Math.random()),\n        outputs: [Math.random()]\n      }));\n      \n      const session = await manager.trainAgent(agentId, trainingData, 10);\n      \n      expect(session).toBeDefined();\n      expect(session.sessionId).toBeDefined();\n      expect(session.agentId).toBe(agentId);\n      expect(session.finalAccuracy).toBeGreaterThan(0);\n      expect(session.epochs).toBe(10);\n      expect(session.dataPoints).toBe(50);\n      \n      expect(learningSpy).toHaveBeenCalledWith(session);\n      \n      const agent = manager.getAgentState(agentId)!;\n      expect(agent.learningProgress).toBe(session.finalAccuracy);\n      expect(agent.state).toBe(AgentState.ACTIVE);\n    });\n    \n    test('should update agent state during training', async () => {\n      const trainingData = Array.from({ length: 10 }, () => ({\n        inputs: [Math.random()],\n        outputs: [Math.random()]\n      }));\n      \n      // Start training (don't await)\n      const trainingPromise = manager.trainAgent(agentId, trainingData, 5);\n      \n      // Check state immediately\n      await new Promise(resolve => setTimeout(resolve, 10));\n      const agentDuringTraining = manager.getAgentState(agentId)!;\n      expect(agentDuringTraining.state).toBe(AgentState.LEARNING);\n      \n      // Wait for completion\n      await trainingPromise;\n      \n      const agentAfterTraining = manager.getAgentState(agentId)!;\n      expect(agentAfterTraining.state).toBe(AgentState.ACTIVE);\n    });\n    \n    test('should track active learning tasks', async () => {\n      const trainingData = Array.from({ length: 10 }, () => ({\n        inputs: [Math.random()],\n        outputs: [Math.random()]\n      }));\n      \n      const metricsBefore = manager.getPerformanceMetrics();\n      \n      // Start training\n      const trainingPromise = manager.trainAgent(agentId, trainingData, 5);\n      \n      // Check metrics during training\n      await new Promise(resolve => setTimeout(resolve, 10));\n      const metricsDuring = manager.getPerformanceMetrics();\n      expect(metricsDuring.activeLearningTasks).toBe(metricsBefore.activeLearningTasks + 1);\n      \n      // Wait for completion\n      await trainingPromise;\n      \n      const metricsAfter = manager.getPerformanceMetrics();\n      expect(metricsAfter.activeLearningTasks).toBe(metricsBefore.activeLearningTasks);\n    });\n  });\n  \n  describe('Knowledge Sharing', () => {\n    let sourceAgentId: string;\n    let targetAgentId: string;\n    \n    beforeEach(async () => {\n      sourceAgentId = await manager.spawnAgent({\n        type: 'mlp',\n        architecture: [10, 5, 1]\n      });\n      \n      targetAgentId = await manager.spawnAgent({\n        type: 'mlp',\n        architecture: [10, 5, 1]\n      });\n    });\n    \n    test('should share knowledge between agents', async () => {\n      const knowledgeSpy = jest.fn();\n      manager.on('knowledgeShared', knowledgeSpy);\n      \n      await manager.shareKnowledge(sourceAgentId, [targetAgentId]);\n      \n      expect(mockWasmModule.serializeWeights).toHaveBeenCalled();\n      expect(mockWasmModule.deserializeWeights).toHaveBeenCalled();\n      \n      expect(knowledgeSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          sourceAgentId,\n          targetAgentIds: [targetAgentId],\n          timestamp: expect.any(Number)\n        })\n      );\n    });\n    \n    test('should fail when cross-learning is disabled', async () => {\n      const managerNoCrossLearning = new NeuralAgentManager({\n        crossLearningEnabled: false\n      });\n      \n      await new Promise((resolve) => {\n        managerNoCrossLearning.once('initialized', resolve);\n      });\n      \n      await expect(managerNoCrossLearning.shareKnowledge('agent1', ['agent2']))\n        .rejects.toThrow('Cross-learning is disabled');\n      \n      await managerNoCrossLearning.cleanup();\n    });\n  });\n  \n  describe('Performance Monitoring', () => {\n    test('should track performance metrics accurately', async () => {\n      const config = { type: 'mlp' as const, architecture: [5, 3, 1] };\n      \n      // Spawn agents\n      const agent1 = await manager.spawnAgent(config);\n      const agent2 = await manager.spawnAgent(config);\n      \n      // Run inferences\n      await manager.runInference(agent1, [1, 2, 3, 4, 5]);\n      await manager.runInference(agent2, [1, 2, 3, 4, 5]);\n      \n      const metrics = manager.getPerformanceMetrics();\n      \n      expect(metrics.totalAgentsSpawned).toBe(2);\n      expect(metrics.averageSpawnTime).toBeGreaterThan(0);\n      expect(metrics.averageInferenceTime).toBeGreaterThan(0);\n      expect(metrics.memoryUsage).toBeGreaterThan(0);\n      expect(metrics.systemHealthScore).toBeGreaterThan(0);\n      expect(metrics.systemHealthScore).toBeLessThanOrEqual(100);\n    });\n    \n    test('should calculate system health based on performance', async () => {\n      const metrics = manager.getPerformanceMetrics();\n      \n      expect(metrics.systemHealthScore).toBeGreaterThan(80);\n      expect(metrics.systemHealthScore).toBeLessThanOrEqual(100);\n    });\n  });\n  \n  describe('Network Topology', () => {\n    test('should generate network topology information', async () => {\n      const config = { type: 'mlp' as const, architecture: [5, 3, 1] };\n      \n      await manager.spawnAgent(config);\n      await manager.spawnAgent(config);\n      \n      const topology = manager.getNetworkTopology();\n      \n      expect(topology.nodes).toHaveLength(2);\n      expect(topology.totalNodes).toBe(2);\n      expect(topology.networkHealth).toBeGreaterThan(0);\n      expect(topology.networkHealth).toBeLessThanOrEqual(100);\n      \n      topology.nodes.forEach(node => {\n        expect(node.id).toBeDefined();\n        expect(node.type).toBe('mlp');\n        expect(node.state).toBe(AgentState.ACTIVE);\n        expect(node.performance).toBeGreaterThanOrEqual(0);\n        expect(node.memoryUsage).toBeGreaterThan(0);\n      });\n    });\n  });\n  \n  describe('Agent Lifecycle', () => {\n    test('should terminate agent successfully', async () => {\n      const terminationSpy = jest.fn();\n      manager.on('agentTerminated', terminationSpy);\n      \n      const agentId = await manager.spawnAgent({\n        type: 'mlp',\n        architecture: [5, 3, 1]\n      });\n      \n      expect(manager.getAgentState(agentId)).toBeDefined();\n      \n      await manager.terminateAgent(agentId);\n      \n      expect(manager.getAgentState(agentId)).toBeNull();\n      expect(terminationSpy).toHaveBeenCalledWith({ agentId });\n    });\n    \n    test('should handle termination of non-existent agent gracefully', async () => {\n      await expect(manager.terminateAgent('non_existent'))\n        .resolves.not.toThrow();\n    });\n  });\n  \n  describe('Memory Management', () => {\n    test('should track memory usage accurately', async () => {\n      const config = { type: 'mlp' as const, architecture: [100, 50, 10] };\n      \n      const agentId = await manager.spawnAgent(config);\n      const agent = manager.getAgentState(agentId)!;\n      \n      expect(agent.memoryUsage).toBeGreaterThan(0);\n      expect(agent.memoryUsage).toBeLessThan(manager['config'].memoryLimitPerAgent);\n      \n      const metrics = manager.getPerformanceMetrics();\n      expect(metrics.memoryUsage).toBeGreaterThanOrEqual(agent.memoryUsage);\n    });\n    \n    test('should respect memory limits per agent', async () => {\n      const agent = await manager.spawnAgent({\n        type: 'mlp',\n        architecture: [1000, 500, 100] // Large architecture\n      });\n      \n      const agentState = manager.getAgentState(agent)!;\n      expect(agentState.memoryUsage).toBeLessThan(manager['config'].memoryLimitPerAgent);\n    });\n  });\n  \n  describe('Error Handling', () => {\n    test('should handle WASM errors gracefully', async () => {\n      mockWasmModule.createNeuralNetwork.mockRejectedValue(new Error('WASM error'));\n      \n      await expect(manager.spawnAgent({ type: 'mlp', architecture: [5, 3, 1] }))\n        .rejects.toThrow('WASM error');\n    });\n    \n    test('should handle inference errors gracefully', async () => {\n      const agentId = await manager.spawnAgent({\n        type: 'mlp',\n        architecture: [5, 3, 1]\n      });\n      \n      mockWasmModule.runInference.mockRejectedValue(new Error('Inference failed'));\n      \n      await expect(manager.runInference(agentId, [1, 2, 3, 4, 5]))\n        .rejects.toThrow('Inference failed');\n    });\n  });\n  \n  describe('Cleanup', () => {\n    test('should cleanup all resources properly', async () => {\n      // Spawn some agents\n      await manager.spawnAgent({ type: 'mlp', architecture: [5, 3, 1] });\n      await manager.spawnAgent({ type: 'mlp', architecture: [5, 3, 1] });\n      \n      expect(manager.getActiveAgents()).toHaveLength(2);\n      \n      const cleanupSpy = jest.fn();\n      manager.on('cleanup', cleanupSpy);\n      \n      await manager.cleanup();\n      \n      expect(manager.getActiveAgents()).toHaveLength(0);\n      expect(cleanupSpy).toHaveBeenCalled();\n    });\n  });\n});"],"version":3}