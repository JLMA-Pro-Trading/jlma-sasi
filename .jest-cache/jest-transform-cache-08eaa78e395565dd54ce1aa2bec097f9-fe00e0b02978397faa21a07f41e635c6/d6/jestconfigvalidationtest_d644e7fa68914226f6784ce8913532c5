8f4194075663b9bf185c0a44b0eca331
"use strict";

/**
 * Jest Configuration Validation Test
 * This test validates that Jest is properly configured and can run basic tests
 */

const {
  describe,
  test,
  expect
} = require('@jest/globals');
describe('Jest Configuration Validation', () => {
  test('should be able to run basic tests', () => {
    expect(true).toBe(true);
  });
  test('should have proper test environment setup', () => {
    expect(global.testUtils).toBeDefined();
    expect(global.testUtils.mockAgent).toBeDefined();
    expect(global.testUtils.mockSwarm).toBeDefined();
  });
  test('should have mocked WebGL context', () => {
    expect(global.WebGLRenderingContext).toBeDefined();
    expect(global.WebGL2RenderingContext).toBeDefined();
  });
  test('should have mocked performance API', () => {
    expect(global.performance).toBeDefined();
    expect(global.performance.now).toBeDefined();
  });
  test('should have custom matchers', () => {
    const mockAgent = global.testUtils.mockAgent();
    expect(mockAgent).toBeValidAgent();
    const mockSwarm = global.testUtils.mockSwarm();
    expect(mockSwarm).toBeValidSwarm();
  });
  test('should handle TypeScript files', () => {
    // This test verifies that TypeScript transformation is working
    expect(jest.requireActual).toBeDefined();
  });
  test('should handle module name mapping', () => {
    // Test that module name mapping is working (would throw if not configured)
    expect(() => {
      // These paths should be mapped correctly
      const path = '@/components/test';
      expect(path).toBeDefined();
    }).not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJyZXF1aXJlIiwidG9CZSIsImdsb2JhbCIsInRlc3RVdGlscyIsInRvQmVEZWZpbmVkIiwibW9ja0FnZW50IiwibW9ja1N3YXJtIiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwiV2ViR0wyUmVuZGVyaW5nQ29udGV4dCIsInBlcmZvcm1hbmNlIiwibm93IiwidG9CZVZhbGlkQWdlbnQiLCJ0b0JlVmFsaWRTd2FybSIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwicGF0aCIsIm5vdCIsInRvVGhyb3ciXSwic291cmNlcyI6WyJqZXN0LWNvbmZpZy12YWxpZGF0aW9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBKZXN0IENvbmZpZ3VyYXRpb24gVmFsaWRhdGlvbiBUZXN0XG4gKiBUaGlzIHRlc3QgdmFsaWRhdGVzIHRoYXQgSmVzdCBpcyBwcm9wZXJseSBjb25maWd1cmVkIGFuZCBjYW4gcnVuIGJhc2ljIHRlc3RzXG4gKi9cblxuY29uc3QgeyBkZXNjcmliZSwgdGVzdCwgZXhwZWN0IH0gPSByZXF1aXJlKCdAamVzdC9nbG9iYWxzJyk7XG5cbmRlc2NyaWJlKCdKZXN0IENvbmZpZ3VyYXRpb24gVmFsaWRhdGlvbicsICgpID0+IHtcbiAgdGVzdCgnc2hvdWxkIGJlIGFibGUgdG8gcnVuIGJhc2ljIHRlc3RzJywgKCkgPT4ge1xuICAgIGV4cGVjdCh0cnVlKS50b0JlKHRydWUpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgaGF2ZSBwcm9wZXIgdGVzdCBlbnZpcm9ubWVudCBzZXR1cCcsICgpID0+IHtcbiAgICBleHBlY3QoZ2xvYmFsLnRlc3RVdGlscykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2xvYmFsLnRlc3RVdGlscy5tb2NrQWdlbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGdsb2JhbC50ZXN0VXRpbHMubW9ja1N3YXJtKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgaGF2ZSBtb2NrZWQgV2ViR0wgY29udGV4dCcsICgpID0+IHtcbiAgICBleHBlY3QoZ2xvYmFsLldlYkdMUmVuZGVyaW5nQ29udGV4dCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2xvYmFsLldlYkdMMlJlbmRlcmluZ0NvbnRleHQpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBoYXZlIG1vY2tlZCBwZXJmb3JtYW5jZSBBUEknLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdsb2JhbC5wZXJmb3JtYW5jZSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdykudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhdmUgY3VzdG9tIG1hdGNoZXJzJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tBZ2VudCA9IGdsb2JhbC50ZXN0VXRpbHMubW9ja0FnZW50KCk7XG4gICAgZXhwZWN0KG1vY2tBZ2VudCkudG9CZVZhbGlkQWdlbnQoKTtcbiAgICBcbiAgICBjb25zdCBtb2NrU3dhcm0gPSBnbG9iYWwudGVzdFV0aWxzLm1vY2tTd2FybSgpO1xuICAgIGV4cGVjdChtb2NrU3dhcm0pLnRvQmVWYWxpZFN3YXJtKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgVHlwZVNjcmlwdCBmaWxlcycsICgpID0+IHtcbiAgICAvLyBUaGlzIHRlc3QgdmVyaWZpZXMgdGhhdCBUeXBlU2NyaXB0IHRyYW5zZm9ybWF0aW9uIGlzIHdvcmtpbmdcbiAgICBleHBlY3QoamVzdC5yZXF1aXJlQWN0dWFsKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgaGFuZGxlIG1vZHVsZSBuYW1lIG1hcHBpbmcnLCAoKSA9PiB7XG4gICAgLy8gVGVzdCB0aGF0IG1vZHVsZSBuYW1lIG1hcHBpbmcgaXMgd29ya2luZyAod291bGQgdGhyb3cgaWYgbm90IGNvbmZpZ3VyZWQpXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIC8vIFRoZXNlIHBhdGhzIHNob3VsZCBiZSBtYXBwZWQgY29ycmVjdGx5XG4gICAgICBjb25zdCBwYXRoID0gJ0AvY29tcG9uZW50cy90ZXN0JztcbiAgICAgIGV4cGVjdChwYXRoKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pLm5vdC50b1Rocm93KCk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU07RUFBRUEsUUFBUTtFQUFFQyxJQUFJO0VBQUVDO0FBQU8sQ0FBQyxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNESCxRQUFRLENBQUMsK0JBQStCLEVBQUUsTUFBTTtFQUM5Q0MsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLE1BQU07SUFDOUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQztFQUN6QixDQUFDLENBQUM7RUFFRkgsSUFBSSxDQUFDLDJDQUEyQyxFQUFFLE1BQU07SUFDdERDLE1BQU0sQ0FBQ0csTUFBTSxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7SUFDdENMLE1BQU0sQ0FBQ0csTUFBTSxDQUFDQyxTQUFTLENBQUNFLFNBQVMsQ0FBQyxDQUFDRCxXQUFXLENBQUMsQ0FBQztJQUNoREwsTUFBTSxDQUFDRyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0csU0FBUyxDQUFDLENBQUNGLFdBQVcsQ0FBQyxDQUFDO0VBQ2xELENBQUMsQ0FBQztFQUVGTixJQUFJLENBQUMsa0NBQWtDLEVBQUUsTUFBTTtJQUM3Q0MsTUFBTSxDQUFDRyxNQUFNLENBQUNLLHFCQUFxQixDQUFDLENBQUNILFdBQVcsQ0FBQyxDQUFDO0lBQ2xETCxNQUFNLENBQUNHLE1BQU0sQ0FBQ00sc0JBQXNCLENBQUMsQ0FBQ0osV0FBVyxDQUFDLENBQUM7RUFDckQsQ0FBQyxDQUFDO0VBRUZOLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxNQUFNO0lBQy9DQyxNQUFNLENBQUNHLE1BQU0sQ0FBQ08sV0FBVyxDQUFDLENBQUNMLFdBQVcsQ0FBQyxDQUFDO0lBQ3hDTCxNQUFNLENBQUNHLE1BQU0sQ0FBQ08sV0FBVyxDQUFDQyxHQUFHLENBQUMsQ0FBQ04sV0FBVyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZOLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxNQUFNO0lBQ3hDLE1BQU1PLFNBQVMsR0FBR0gsTUFBTSxDQUFDQyxTQUFTLENBQUNFLFNBQVMsQ0FBQyxDQUFDO0lBQzlDTixNQUFNLENBQUNNLFNBQVMsQ0FBQyxDQUFDTSxjQUFjLENBQUMsQ0FBQztJQUVsQyxNQUFNTCxTQUFTLEdBQUdKLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDRyxTQUFTLENBQUMsQ0FBQztJQUM5Q1AsTUFBTSxDQUFDTyxTQUFTLENBQUMsQ0FBQ00sY0FBYyxDQUFDLENBQUM7RUFDcEMsQ0FBQyxDQUFDO0VBRUZkLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxNQUFNO0lBQzNDO0lBQ0FDLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDQyxhQUFhLENBQUMsQ0FBQ1YsV0FBVyxDQUFDLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0VBRUZOLElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxNQUFNO0lBQzlDO0lBQ0FDLE1BQU0sQ0FBQyxNQUFNO01BQ1g7TUFDQSxNQUFNZ0IsSUFBSSxHQUFHLG1CQUFtQjtNQUNoQ2hCLE1BQU0sQ0FBQ2dCLElBQUksQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUMsQ0FBQ1ksR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNsQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=