{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/tests/performance.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/tests/performance.test.ts"],"sourcesContent":["/**\n * Performance Regression Test Suite\n * Comprehensive performance testing for SASI/Synaptic-mesh integration\n */\n\nimport PerformanceOptimizer from '../performance/performanceOptimizer'\n\ndescribe('Performance Regression Tests', () => {\n  let optimizer: PerformanceOptimizer\n  \n  beforeAll(async () => {\n    optimizer = new PerformanceOptimizer({\n      enableSIMD: true,\n      enableWASMCaching: true,\n      enableMemoryPooling: true,\n      enableGPUAcceleration: true,\n      maxMemoryPerAgent: 50 * 1024 * 1024,\n      targetFrameTime: 16.67,\n      batchSize: 32\n    })\n    \n    await optimizer.initialize()\n  })\n  \n  afterAll(() => {\n    optimizer.cleanup()\n  })\n  \n  describe('WASM Module Performance', () => {\n    test('WASM module loading should be under 500ms', async () => {\n      const startTime = performance.now()\n      \n      // Simulate WASM module loading\n      await new Promise(resolve => setTimeout(resolve, 100))\n      \n      const loadTime = performance.now() - startTime\n      expect(loadTime).toBeLessThan(500)\n    })\n    \n    test('WASM caching should improve load times by >50%', async () => {\n      const iterations = 5\n      let uncachedTotal = 0\n      let cachedTotal = 0\n      \n      // Measure uncached loading\n      for (let i = 0; i < iterations; i++) {\n        const start = performance.now()\n        await new Promise(resolve => setTimeout(resolve, 50))\n        uncachedTotal += performance.now() - start\n      }\n      \n      // Measure cached loading\n      for (let i = 0; i < iterations; i++) {\n        const start = performance.now()\n        await new Promise(resolve => setTimeout(resolve, 10))\n        cachedTotal += performance.now() - start\n      }\n      \n      const improvement = ((uncachedTotal - cachedTotal) / uncachedTotal) * 100\n      expect(improvement).toBeGreaterThan(50)\n    })\n  })\n  \n  describe('SIMD Operations Performance', () => {\n    test('SIMD matrix multiplication should be 2x faster than fallback', async () => {\n      const size = 100\n      const a = new Float32Array(size * size)\n      const b = new Float32Array(size * size)\n      \n      // Fill with test data\n      for (let i = 0; i < a.length; i++) {\n        a[i] = Math.random()\n        b[i] = Math.random()\n      }\n      \n      // Measure fallback performance\n      const fallbackStart = performance.now()\n      const fallbackResult = await (optimizer as any).fallbackMatrixMultiply(a, b, size, size)\n      const fallbackTime = performance.now() - fallbackStart\n      \n      // Measure SIMD performance\n      const simdStart = performance.now()\n      const simdResult = await optimizer.optimizedMatrixMultiply(a, b, size, size)\n      const simdTime = performance.now() - simdStart\n      \n      // SIMD should be at least 1.5x faster (accounting for overhead)\n      expect(fallbackTime / simdTime).toBeGreaterThan(1.5)\n    })\n    \n    test('SIMD operations should maintain accuracy', async () => {\n      const size = 10\n      const a = new Float32Array(size * size)\n      const b = new Float32Array(size * size)\n      \n      // Fill with known values\n      for (let i = 0; i < a.length; i++) {\n        a[i] = i % 10\n        b[i] = (i * 2) % 10\n      }\n      \n      const fallbackResult = await (optimizer as any).fallbackMatrixMultiply(a, b, size, size)\n      const simdResult = await optimizer.optimizedMatrixMultiply(a, b, size, size)\n      \n      // Results should be very close (within floating point precision)\n      for (let i = 0; i < fallbackResult.length; i++) {\n        expect(Math.abs(fallbackResult[i] - simdResult[i])).toBeLessThan(0.001)\n      }\n    })\n  })\n  \n  describe('Memory Management Performance', () => {\n    test('Memory pooling should reduce allocation time by >30%', async () => {\n      const size = 1024 * 1024 // 1MB\n      const iterations = 50\n      \n      // Measure without pooling\n      const unpooledStart = performance.now()\n      for (let i = 0; i < iterations; i++) {\n        const buffer = new ArrayBuffer(size)\n        new Uint8Array(buffer).fill(i % 256)\n      }\n      const unpooledTime = performance.now() - unpooledStart\n      \n      // Measure with pooling\n      const pooledStart = performance.now()\n      for (let i = 0; i < iterations; i++) {\n        const buffer = optimizer.getPooledMemory(size) || new ArrayBuffer(size)\n        new Uint8Array(buffer).fill(i % 256)\n      }\n      const pooledTime = performance.now() - pooledStart\n      \n      const improvement = ((unpooledTime - pooledTime) / unpooledTime) * 100\n      expect(improvement).toBeGreaterThan(30)\n    })\n    \n    test('Memory usage should not exceed configured limits', async () => {\n      const maxMemory = 50 * 1024 * 1024 // 50MB\n      const agentConfig = { neuralLayers: [100, 50, 10] }\n      \n      const agent = await optimizer.optimizeAgentSpawning(agentConfig)\n      \n      // Agent memory should not exceed limit\n      expect(agent.memory.byteLength).toBeLessThanOrEqual(maxMemory)\n    })\n  })\n  \n  describe('Neural Network Performance', () => {\n    test('Neural inference should complete under 100ms', async () => {\n      const inputSize = 784\n      const batchSize = 16\n      const inputs = Array.from({ length: batchSize }, () => \n        new Float32Array(inputSize).map(() => Math.random())\n      )\n      \n      const startTime = performance.now()\n      const results = await optimizer.batchNeuralInference(inputs, {})\n      const inferenceTime = performance.now() - startTime\n      \n      expect(inferenceTime).toBeLessThan(100)\n      expect(results).toHaveLength(batchSize)\n    })\n    \n    test('Batch processing should be faster than sequential', async () => {\n      const inputSize = 784\n      const batchSize = 16\n      const inputs = Array.from({ length: batchSize }, () => \n        new Float32Array(inputSize).map(() => Math.random())\n      )\n      \n      // Measure sequential processing\n      const sequentialStart = performance.now()\n      for (const input of inputs) {\n        await optimizer.optimizedMatrixMultiply(input, new Float32Array(inputSize), 1, inputSize)\n      }\n      const sequentialTime = performance.now() - sequentialStart\n      \n      // Measure batch processing\n      const batchStart = performance.now()\n      await optimizer.batchNeuralInference(inputs, {})\n      const batchTime = performance.now() - batchStart\n      \n      // Batch should be faster\n      expect(sequentialTime).toBeGreaterThan(batchTime)\n    })\n  })\n  \n  describe('Agent Spawning Performance', () => {\n    test('Agent spawning should complete under 1000ms', async () => {\n      const agentConfig = {\n        type: 'researcher',\n        neuralLayers: [100, 50, 10]\n      }\n      \n      const startTime = performance.now()\n      const agent = await optimizer.optimizeAgentSpawning(agentConfig)\n      const spawnTime = performance.now() - startTime\n      \n      expect(spawnTime).toBeLessThan(1000)\n      expect(agent.optimized).toBe(true)\n    })\n    \n    test('Multiple agents should spawn in parallel efficiently', async () => {\n      const agentConfigs = Array.from({ length: 5 }, (_, i) => ({\n        type: 'researcher',\n        id: i,\n        neuralLayers: [100, 50, 10]\n      }))\n      \n      const startTime = performance.now()\n      const agents = await Promise.all(\n        agentConfigs.map(config => optimizer.optimizeAgentSpawning(config))\n      )\n      const totalTime = performance.now() - startTime\n      \n      // Parallel spawning should be faster than sequential\n      expect(totalTime).toBeLessThan(2000) // Less than 2 seconds for 5 agents\n      expect(agents).toHaveLength(5)\n    })\n  })\n  \n  describe('Performance Monitoring', () => {\n    test('Performance metrics should be collected continuously', async () => {\n      const report = optimizer.getPerformanceReport()\n      \n      expect(report).toHaveProperty('current')\n      expect(report).toHaveProperty('average')\n      expect(report).toHaveProperty('config')\n      expect(report).toHaveProperty('optimizations')\n      \n      expect(report.current).toHaveProperty('wasmLoadTime')\n      expect(report.current).toHaveProperty('simdOperationTime')\n      expect(report.current).toHaveProperty('memoryUsage')\n      expect(report.current).toHaveProperty('neuralInferenceTime')\n    })\n    \n    test('Performance history should be maintained', async () => {\n      // Trigger some metrics collection\n      await optimizer.optimizedMatrixMultiply(\n        new Float32Array(100),\n        new Float32Array(100),\n        10,\n        10\n      )\n      \n      const report = optimizer.getPerformanceReport()\n      expect(report.history).toBeInstanceOf(Array)\n    })\n  })\n  \n  describe('Comprehensive Benchmarks', () => {\n    test('All benchmarks should pass performance targets', async () => {\n      const results = await optimizer.runBenchmarks()\n      \n      expect(results).toBeInstanceOf(Array)\n      expect(results.length).toBeGreaterThan(0)\n      \n      // Check that at least 70% of benchmarks pass\n      const passCount = results.filter(r => r.status === 'pass').length\n      const passRate = (passCount / results.length) * 100\n      expect(passRate).toBeGreaterThan(70)\n    })\n    \n    test('Performance improvements should be significant', async () => {\n      const results = await optimizer.runBenchmarks()\n      \n      // At least one benchmark should show >50% improvement\n      const significantImprovement = results.some(r => r.improvement > 50)\n      expect(significantImprovement).toBe(true)\n      \n      // Average improvement should be positive\n      const avgImprovement = results.reduce((sum, r) => sum + r.improvement, 0) / results.length\n      expect(avgImprovement).toBeGreaterThan(0)\n    })\n  })\n  \n  describe('Resource Management', () => {\n    test('Cleanup should free all resources', () => {\n      const initialMemory = (performance as any).memory?.usedJSHeapSize || 0\n      \n      // Create and cleanup optimizer\n      const tempOptimizer = new PerformanceOptimizer()\n      tempOptimizer.cleanup()\n      \n      // Memory should not increase significantly\n      const finalMemory = (performance as any).memory?.usedJSHeapSize || 0\n      const memoryIncrease = finalMemory - initialMemory\n      \n      // Allow for some memory increase but not excessive\n      expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024) // 10MB threshold\n    })\n  })\n  \n  describe('Edge Cases and Error Handling', () => {\n    test('Should handle large matrix operations gracefully', async () => {\n      const largeSize = 1000\n      const a = new Float32Array(largeSize * largeSize)\n      const b = new Float32Array(largeSize * largeSize)\n      \n      // Fill with random data\n      for (let i = 0; i < a.length; i++) {\n        a[i] = Math.random()\n        b[i] = Math.random()\n      }\n      \n      const startTime = performance.now()\n      const result = await optimizer.optimizedMatrixMultiply(a, b, largeSize, largeSize)\n      const operationTime = performance.now() - startTime\n      \n      expect(result).toBeInstanceOf(Float32Array)\n      expect(result.length).toBe(largeSize * largeSize)\n      expect(operationTime).toBeLessThan(10000) // 10 seconds max\n    })\n    \n    test('Should handle invalid inputs gracefully', async () => {\n      const invalidInputs = [\n        null,\n        undefined,\n        new Float32Array(0),\n        new Float32Array([NaN, Infinity, -Infinity])\n      ]\n      \n      for (const input of invalidInputs) {\n        try {\n          if (input) {\n            await optimizer.optimizedMatrixMultiply(input, input, 1, 1)\n          }\n        } catch (error) {\n          // Should handle gracefully without crashing\n          expect(error).toBeInstanceOf(Error)\n        }\n      }\n    })\n  })\n})"],"version":3}