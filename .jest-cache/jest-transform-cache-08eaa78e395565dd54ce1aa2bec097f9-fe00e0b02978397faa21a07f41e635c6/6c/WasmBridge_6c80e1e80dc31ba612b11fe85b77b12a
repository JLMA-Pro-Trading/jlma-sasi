a516392ac6f6e28a38782137787ba725
"use strict";

/**
 * WASM Bridge for Performance-Critical Neural Operations
 *
 * This module provides a bridge to WebAssembly modules for accelerated
 * neural mesh computations, including SIMD-optimized operations.
 */
/* istanbul ignore next */
function cov_2qdymefdzp() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts";
  var hash = "3e10236888821e83514ad6e0ad0ffadc457a3019";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 28
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 17,
          column: 11
        }
      },
      "3": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 23,
          column: 11
        }
      },
      "4": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "5": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "6": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 42,
          column: 10
        }
      },
      "7": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "8": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "9": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 81
        }
      },
      "10": {
        start: {
          line: 56,
          column: 34
        },
        end: {
          line: 56,
          column: 63
        }
      },
      "11": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 65
        }
      },
      "12": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "13": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 62
        }
      },
      "14": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 66
        }
      },
      "15": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 42
        }
      },
      "16": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 92
        }
      },
      "17": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 28
        }
      },
      "18": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 25
        }
      },
      "19": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 73
        }
      },
      "20": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 25
        }
      },
      "21": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "22": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "23": {
        start: {
          line: 85,
          column: 27
        },
        end: {
          line: 85,
          column: 62
        }
      },
      "24": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 24
        }
      },
      "25": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 25
        }
      },
      "26": {
        start: {
          line: 98,
          column: 23
        },
        end: {
          line: 98,
          column: 62
        }
      },
      "27": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "28": {
        start: {
          line: 103,
          column: 35
        },
        end: {
          line: 103,
          column: 85
        }
      },
      "29": {
        start: {
          line: 104,
          column: 36
        },
        end: {
          line: 104,
          column: 88
        }
      },
      "30": {
        start: {
          line: 106,
          column: 34
        },
        end: {
          line: 106,
          column: 51
        }
      },
      "31": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 110,
          column: 17
        }
      },
      "32": {
        start: {
          line: 107,
          column: 29
        },
        end: {
          line: 107,
          column: 30
        }
      },
      "33": {
        start: {
          line: 109,
          column: 20
        },
        end: {
          line: 109,
          column: 68
        }
      },
      "34": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 79
        }
      },
      "35": {
        start: {
          line: 114,
          column: 40
        },
        end: {
          line: 114,
          column: 94
        }
      },
      "36": {
        start: {
          line: 116,
          column: 34
        },
        end: {
          line: 116,
          column: 51
        }
      },
      "37": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 121,
          column: 17
        }
      },
      "38": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 117,
          column: 30
        }
      },
      "39": {
        start: {
          line: 119,
          column: 39
        },
        end: {
          line: 119,
          column: 66
        }
      },
      "40": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 99
        }
      },
      "41": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 79
        }
      },
      "42": {
        start: {
          line: 125,
          column: 35
        },
        end: {
          line: 125,
          column: 84
        }
      },
      "43": {
        start: {
          line: 127,
          column: 34
        },
        end: {
          line: 127,
          column: 51
        }
      },
      "44": {
        start: {
          line: 128,
          column: 33
        },
        end: {
          line: 128,
          column: 34
        }
      },
      "45": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 133,
          column: 17
        }
      },
      "46": {
        start: {
          line: 129,
          column: 29
        },
        end: {
          line: 129,
          column: 30
        }
      },
      "47": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 132,
          column: 21
        }
      },
      "48": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 131,
          column: 37
        }
      },
      "49": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 79
        }
      },
      "50": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 56
        }
      },
      "51": {
        start: {
          line: 138,
          column: 36
        },
        end: {
          line: 138,
          column: 88
        }
      },
      "52": {
        start: {
          line: 139,
          column: 37
        },
        end: {
          line: 139,
          column: 91
        }
      },
      "53": {
        start: {
          line: 141,
          column: 34
        },
        end: {
          line: 141,
          column: 51
        }
      },
      "54": {
        start: {
          line: 142,
          column: 36
        },
        end: {
          line: 142,
          column: 37
        }
      },
      "55": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "56": {
        start: {
          line: 143,
          column: 29
        },
        end: {
          line: 143,
          column: 30
        }
      },
      "57": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 52
        }
      },
      "58": {
        start: {
          line: 146,
          column: 34
        },
        end: {
          line: 146,
          column: 35
        }
      },
      "59": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "60": {
        start: {
          line: 147,
          column: 29
        },
        end: {
          line: 147,
          column: 30
        }
      },
      "61": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 51
        }
      },
      "62": {
        start: {
          line: 150,
          column: 35
        },
        end: {
          line: 150,
          column: 87
        }
      },
      "63": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 79
        }
      },
      "64": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 34
        }
      },
      "65": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 65
        }
      },
      "66": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 48
        }
      },
      "67": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "68": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 59
        }
      },
      "69": {
        start: {
          line: 169,
          column: 26
        },
        end: {
          line: 169,
          column: 39
        }
      },
      "70": {
        start: {
          line: 170,
          column: 27
        },
        end: {
          line: 170,
          column: 36
        }
      },
      "71": {
        start: {
          line: 172,
          column: 25
        },
        end: {
          line: 172,
          column: 59
        }
      },
      "72": {
        start: {
          line: 173,
          column: 26
        },
        end: {
          line: 173,
          column: 61
        }
      },
      "73": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "74": {
        start: {
          line: 176,
          column: 30
        },
        end: {
          line: 176,
          column: 90
        }
      },
      "75": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "76": {
        start: {
          line: 179,
          column: 30
        },
        end: {
          line: 179,
          column: 47
        }
      },
      "77": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 96
        }
      },
      "78": {
        start: {
          line: 181,
          column: 28
        },
        end: {
          line: 181,
          column: 45
        }
      },
      "79": {
        start: {
          line: 183,
          column: 31
        },
        end: {
          line: 183,
          column: 93
        }
      },
      "80": {
        start: {
          line: 184,
          column: 27
        },
        end: {
          line: 184,
          column: 55
        }
      },
      "81": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 65
        }
      },
      "82": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 76
        }
      },
      "83": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 90
        }
      },
      "84": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 26
        }
      },
      "85": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 38
        }
      },
      "86": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 39
        }
      },
      "87": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "88": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 59
        }
      },
      "89": {
        start: {
          line: 204,
          column: 22
        },
        end: {
          line: 204,
          column: 40
        }
      },
      "90": {
        start: {
          line: 205,
          column: 31
        },
        end: {
          line: 205,
          column: 61
        }
      },
      "91": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "92": {
        start: {
          line: 208,
          column: 36
        },
        end: {
          line: 208,
          column: 98
        }
      },
      "93": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 45
        }
      },
      "94": {
        start: {
          line: 211,
          column: 30
        },
        end: {
          line: 211,
          column: 47
        }
      },
      "95": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 75
        }
      },
      "96": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 213,
          column: 45
        }
      },
      "97": {
        start: {
          line: 215,
          column: 27
        },
        end: {
          line: 215,
          column: 60
        }
      },
      "98": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 65
        }
      },
      "99": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 72
        }
      },
      "100": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 26
        }
      },
      "101": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 44
        }
      },
      "102": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "103": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 59
        }
      },
      "104": {
        start: {
          line: 232,
          column: 22
        },
        end: {
          line: 232,
          column: 35
        }
      },
      "105": {
        start: {
          line: 233,
          column: 26
        },
        end: {
          line: 233,
          column: 56
        }
      },
      "106": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "107": {
        start: {
          line: 236,
          column: 31
        },
        end: {
          line: 236,
          column: 88
        }
      },
      "108": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 35
        }
      },
      "109": {
        start: {
          line: 239,
          column: 30
        },
        end: {
          line: 239,
          column: 47
        }
      },
      "110": {
        start: {
          line: 240,
          column: 30
        },
        end: {
          line: 240,
          column: 98
        }
      },
      "111": {
        start: {
          line: 241,
          column: 28
        },
        end: {
          line: 241,
          column: 45
        }
      },
      "112": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 65
        }
      },
      "113": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 29
        }
      },
      "114": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 39
        }
      },
      "115": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "116": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 59
        }
      },
      "117": {
        start: {
          line: 257,
          column: 28
        },
        end: {
          line: 257,
          column: 42
        }
      },
      "118": {
        start: {
          line: 258,
          column: 29
        },
        end: {
          line: 258,
          column: 44
        }
      },
      "119": {
        start: {
          line: 259,
          column: 27
        },
        end: {
          line: 259,
          column: 63
        }
      },
      "120": {
        start: {
          line: 260,
          column: 28
        },
        end: {
          line: 260,
          column: 65
        }
      },
      "121": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "122": {
        start: {
          line: 263,
          column: 32
        },
        end: {
          line: 263,
          column: 96
        }
      },
      "123": {
        start: {
          line: 264,
          column: 33
        },
        end: {
          line: 264,
          column: 99
        }
      },
      "124": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 37
        }
      },
      "125": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 39
        }
      },
      "126": {
        start: {
          line: 268,
          column: 30
        },
        end: {
          line: 268,
          column: 47
        }
      },
      "127": {
        start: {
          line: 269,
          column: 31
        },
        end: {
          line: 269,
          column: 120
        }
      },
      "128": {
        start: {
          line: 270,
          column: 28
        },
        end: {
          line: 270,
          column: 45
        }
      },
      "129": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 65
        }
      },
      "130": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 30
        }
      },
      "131": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 40
        }
      },
      "132": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 41
        }
      },
      "133": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "134": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 74
        }
      },
      "135": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 39
        }
      },
      "136": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 34
        }
      },
      "137": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 49
        }
      },
      "138": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 51
        }
      },
      "139": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 27
        }
      },
      "140": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 33
        }
      },
      "141": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 35
        }
      },
      "142": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 330,
          column: 10
        }
      },
      "143": {
        start: {
          line: 333,
          column: 0
        },
        end: {
          line: 333,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 29
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 76
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 96
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 102,
            column: 41
          },
          end: {
            line: 102,
            column: 42
          }
        },
        loc: {
          start: {
            line: 102,
            column: 85
          },
          end: {
            line: 112,
            column: 13
          }
        },
        line: 102
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 113,
            column: 34
          },
          end: {
            line: 113,
            column: 35
          }
        },
        loc: {
          start: {
            line: 113,
            column: 74
          },
          end: {
            line: 123,
            column: 13
          }
        },
        line: 113
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 124,
            column: 33
          },
          end: {
            line: 124,
            column: 34
          }
        },
        loc: {
          start: {
            line: 124,
            column: 75
          },
          end: {
            line: 136,
            column: 13
          }
        },
        line: 124
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 137,
            column: 39
          },
          end: {
            line: 137,
            column: 40
          }
        },
        loc: {
          start: {
            line: 137,
            column: 87
          },
          end: {
            line: 153,
            column: 13
          }
        },
        line: 137
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 154,
            column: 28
          },
          end: {
            line: 154,
            column: 29
          }
        },
        loc: {
          start: {
            line: 154,
            column: 34
          },
          end: {
            line: 156,
            column: 13
          }
        },
        line: 154
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 157,
            column: 30
          },
          end: {
            line: 157,
            column: 31
          }
        },
        loc: {
          start: {
            line: 157,
            column: 36
          },
          end: {
            line: 159,
            column: 13
          }
        },
        line: 157
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 38
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 165
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 37
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 200
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 46
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 228
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 47
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 253
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 283,
            column: 4
          },
          end: {
            line: 283,
            column: 5
          }
        },
        loc: {
          start: {
            line: 283,
            column: 28
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 283
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 24
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 292
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 22
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 298
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 304,
            column: 5
          }
        },
        loc: {
          start: {
            line: 304,
            column: 25
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 304
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 20
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 312
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 14
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 320
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "1": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "2": {
        loc: {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 132,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 132,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "3": {
        loc: {
          start: {
            line: 155,
            column: 23
          },
          end: {
            line: 155,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 59
          },
          end: {
            line: 155,
            column: 60
          }
        }, {
          start: {
            line: 155,
            column: 63
          },
          end: {
            line: 155,
            column: 64
          }
        }],
        line: 155
      },
      "4": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "5": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 31
          }
        }, {
          start: {
            line: 166,
            column: 35
          },
          end: {
            line: 166,
            column: 47
          }
        }],
        line: 166
      },
      "6": {
        loc: {
          start: {
            line: 188,
            column: 42
          },
          end: {
            line: 188,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 78
          },
          end: {
            line: 188,
            column: 82
          }
        }, {
          start: {
            line: 188,
            column: 85
          },
          end: {
            line: 188,
            column: 89
          }
        }],
        line: 188
      },
      "7": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "8": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 201,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 201,
            column: 31
          }
        }, {
          start: {
            line: 201,
            column: 35
          },
          end: {
            line: 201,
            column: 47
          }
        }],
        line: 201
      },
      "9": {
        loc: {
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "10": {
        loc: {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 229,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 229,
            column: 31
          }
        }, {
          start: {
            line: 229,
            column: 35
          },
          end: {
            line: 229,
            column: 47
          }
        }],
        line: 229
      },
      "11": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "12": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 254,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 254,
            column: 31
          }
        }, {
          start: {
            line: 254,
            column: 35
          },
          end: {
            line: 254,
            column: 47
          }
        }],
        line: 254
      },
      "13": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts"],
      sourcesContent: ["/**\n * WASM Bridge for Performance-Critical Neural Operations\n * \n * This module provides a bridge to WebAssembly modules for accelerated\n * neural mesh computations, including SIMD-optimized operations.\n */\n\nexport interface WasmModule {\n  memory: WebAssembly.Memory\n  calculate_neural_activation: (inputs: number, inputsPtr: number, outputs: number, outputsPtr: number) => void\n  optimize_connections: (connections: number, connectionsPtr: number, count: number) => void\n  process_spike_train: (spikes: number, spikesPtr: number, count: number, windowSize: number) => number\n  calculate_mesh_efficiency: (neurons: number, neuronsPtr: number, synapses: number, synapsesPtr: number) => number\n  simd_supported: () => number\n  get_memory_usage: () => number\n}\n\nexport interface WasmPerformanceMetrics {\n  executionTime: number\n  memoryUsage: number\n  simdAcceleration: boolean\n  throughput: number\n  efficiency: number\n}\n\nexport class WasmBridge {\n  private module: WasmModule | null = null\n  private isInitialized = false\n  private memoryBuffer: ArrayBuffer | null = null\n  private performance: WasmPerformanceMetrics\n\n  constructor() {\n    this.performance = {\n      executionTime: 0,\n      memoryUsage: 0,\n      simdAcceleration: false,\n      throughput: 0,\n      efficiency: 0\n    }\n  }\n\n  /**\n   * Initialize WASM module\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      // In a real implementation, this would load the actual WASM module\n      // from the synaptic-mesh project. For now, we'll simulate it.\n      \n      // Check if WebAssembly is supported\n      if (typeof WebAssembly === 'undefined') {\n        throw new Error('WebAssembly not supported in this environment')\n      }\n\n      // Check for SIMD support\n      const simdSupported = await this.checkSIMDSupport()\n      \n      // Create simulated WASM module\n      this.module = await this.createSimulatedWasmModule()\n      \n      if (this.module) {\n        this.memoryBuffer = this.module.memory.buffer\n        this.performance.simdAcceleration = simdSupported\n        this.isInitialized = true\n        \n        console.log('\uD83D\uDE80 WASM Bridge initialized with SIMD support:', simdSupported)\n        return true\n      }\n      \n      return false\n    } catch (error) {\n      console.error('\u274C WASM Bridge initialization failed:', error)\n      return false\n    }\n  }\n\n  /**\n   * Check if SIMD is supported\n   */\n  private async checkSIMDSupport(): Promise<boolean> {\n    try {\n      // Create a simple WASM module that uses SIMD instructions\n      const wasmCode = new Uint8Array([\n        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,\n        0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7b,\n        0x03, 0x02, 0x01, 0x00,\n        0x0a, 0x0a, 0x01, 0x08, 0x00, 0x41, 0x00, 0xfd, 0x0f, 0x0b\n      ])\n      \n      const module = await WebAssembly.compile(wasmCode)\n      return true\n    } catch (error) {\n      // SIMD not supported\n      return false\n    }\n  }\n\n  /**\n   * Create simulated WASM module for development\n   */\n  private async createSimulatedWasmModule(): Promise<WasmModule> {\n    // Create memory (1MB)\n    const memory = new WebAssembly.Memory({ initial: 16 })\n    \n    // Simulate WASM module functions\n    return {\n      memory,\n      \n      calculate_neural_activation: (inputs: number, inputsPtr: number, outputs: number, outputsPtr: number) => {\n        const inputArray = new Float32Array(memory.buffer, inputsPtr, inputs)\n        const outputArray = new Float32Array(memory.buffer, outputsPtr, outputs)\n        \n        // Simulate neural activation calculation with SIMD optimization\n        const startTime = performance.now()\n        \n        for (let i = 0; i < Math.min(inputs, outputs); i++) {\n          // Simulate tanh activation function\n          outputArray[i] = Math.tanh(inputArray[i] * 0.5)\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n      },\n      \n      optimize_connections: (connections: number, connectionsPtr: number, count: number) => {\n        const connectionArray = new Float32Array(memory.buffer, connectionsPtr, count)\n        \n        // Simulate connection weight optimization\n        const startTime = performance.now()\n        \n        for (let i = 0; i < count; i++) {\n          // Apply small random adjustments with bounds\n          const adjustment = (Math.random() - 0.5) * 0.1\n          connectionArray[i] = Math.min(1, Math.max(0, connectionArray[i] + adjustment))\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n      },\n      \n      process_spike_train: (spikes: number, spikesPtr: number, count: number, windowSize: number): number => {\n        const spikeArray = new Float32Array(memory.buffer, spikesPtr, count)\n        \n        // Calculate spike rate within window\n        const startTime = performance.now()\n        \n        let spikeCount = 0\n        for (let i = 0; i < count; i++) {\n          if (spikeArray[i] > 0.1) {\n            spikeCount++\n          }\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n        return spikeCount / (windowSize / 1000) // Hz\n      },\n      \n      calculate_mesh_efficiency: (neurons: number, neuronsPtr: number, synapses: number, synapsesPtr: number): number => {\n        const neuronArray = new Float32Array(memory.buffer, neuronsPtr, neurons)\n        const synapseArray = new Float32Array(memory.buffer, synapsesPtr, synapses)\n        \n        // Calculate overall mesh efficiency\n        const startTime = performance.now()\n        \n        let totalActivity = 0\n        for (let i = 0; i < neurons; i++) {\n          totalActivity += neuronArray[i]\n        }\n        \n        let totalWeight = 0\n        for (let i = 0; i < synapses; i++) {\n          totalWeight += synapseArray[i]\n        }\n        \n        const efficiency = (totalActivity / neurons) * (totalWeight / synapses)\n        \n        this.performance.executionTime = performance.now() - startTime\n        return efficiency\n      },\n      \n      simd_supported: (): number => {\n        return this.performance.simdAcceleration ? 1 : 0\n      },\n      \n      get_memory_usage: (): number => {\n        return memory.buffer.byteLength\n      }\n    }\n  }\n\n  /**\n   * Calculate neural activation using WASM\n   */\n  calculateNeuralActivation(inputs: Float32Array): Float32Array {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const inputSize = inputs.length\n    const outputSize = inputSize\n    \n    // Allocate memory for inputs and outputs\n    const inputPtr = this.allocateMemory(inputSize * 4) // 4 bytes per float\n    const outputPtr = this.allocateMemory(outputSize * 4)\n    \n    try {\n      // Copy input data to WASM memory\n      const inputView = new Float32Array(this.memoryBuffer!, inputPtr / 4, inputSize)\n      inputView.set(inputs)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      this.module.calculate_neural_activation(inputSize, inputPtr, outputSize, outputPtr)\n      const endTime = performance.now()\n      \n      // Copy output data from WASM memory\n      const outputView = new Float32Array(this.memoryBuffer!, outputPtr / 4, outputSize)\n      const result = new Float32Array(outputView)\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      this.performance.throughput = inputSize / (endTime - startTime)\n      this.performance.efficiency = this.performance.simdAcceleration ? 0.95 : 0.75\n      \n      return result\n    } finally {\n      // Free allocated memory\n      this.freeMemory(inputPtr)\n      this.freeMemory(outputPtr)\n    }\n  }\n\n  /**\n   * Optimize connection weights using WASM\n   */\n  optimizeConnections(connections: Float32Array): Float32Array {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const count = connections.length\n    const connectionsPtr = this.allocateMemory(count * 4)\n    \n    try {\n      // Copy connection data to WASM memory\n      const connectionsView = new Float32Array(this.memoryBuffer!, connectionsPtr / 4, count)\n      connectionsView.set(connections)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      this.module.optimize_connections(count, connectionsPtr, count)\n      const endTime = performance.now()\n      \n      // Copy optimized data back\n      const result = new Float32Array(connectionsView)\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      this.performance.throughput = count / (endTime - startTime)\n      \n      return result\n    } finally {\n      this.freeMemory(connectionsPtr)\n    }\n  }\n\n  /**\n   * Process spike train data using WASM\n   */\n  processSpikeTrainData(spikes: Float32Array, windowSize: number): number {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const count = spikes.length\n    const spikesPtr = this.allocateMemory(count * 4)\n    \n    try {\n      // Copy spike data to WASM memory\n      const spikesView = new Float32Array(this.memoryBuffer!, spikesPtr / 4, count)\n      spikesView.set(spikes)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      const spikeRate = this.module.process_spike_train(count, spikesPtr, count, windowSize)\n      const endTime = performance.now()\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      \n      return spikeRate\n    } finally {\n      this.freeMemory(spikesPtr)\n    }\n  }\n\n  /**\n   * Calculate mesh efficiency using WASM\n   */\n  calculateMeshEfficiency(neurons: Float32Array, synapses: Float32Array): number {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const neuronCount = neurons.length\n    const synapseCount = synapses.length\n    const neuronsPtr = this.allocateMemory(neuronCount * 4)\n    const synapsesPtr = this.allocateMemory(synapseCount * 4)\n    \n    try {\n      // Copy data to WASM memory\n      const neuronsView = new Float32Array(this.memoryBuffer!, neuronsPtr / 4, neuronCount)\n      const synapsesView = new Float32Array(this.memoryBuffer!, synapsesPtr / 4, synapseCount)\n      \n      neuronsView.set(neurons)\n      synapsesView.set(synapses)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      const efficiency = this.module.calculate_mesh_efficiency(neuronCount, neuronsPtr, synapseCount, synapsesPtr)\n      const endTime = performance.now()\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      \n      return efficiency\n    } finally {\n      this.freeMemory(neuronsPtr)\n      this.freeMemory(synapsesPtr)\n    }\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics(): WasmPerformanceMetrics {\n    if (this.module) {\n      this.performance.memoryUsage = this.module.get_memory_usage()\n    }\n    return { ...this.performance }\n  }\n\n  /**\n   * Check if WASM module is initialized\n   */\n  isWasmInitialized(): boolean {\n    return this.isInitialized\n  }\n\n  /**\n   * Check if SIMD is supported\n   */\n  isSIMDSupported(): boolean {\n    return this.performance.simdAcceleration\n  }\n\n  /**\n   * Allocate memory in WASM module (simplified simulation)\n   */\n  private allocateMemory(size: number): number {\n    // In a real implementation, this would use a proper memory allocator\n    // For simulation, we'll return a pseudo-pointer\n    return Math.floor(Math.random() * 1000000)\n  }\n\n  /**\n   * Free memory in WASM module (simplified simulation)\n   */\n  private freeMemory(ptr: number): void {\n    // In a real implementation, this would free the memory\n    // For simulation, we'll just log it\n    // console.log('Memory freed at:', ptr)\n  }\n\n  /**\n   * Cleanup WASM module\n   */\n  cleanup(): void {\n    this.module = null\n    this.memoryBuffer = null\n    this.isInitialized = false\n    this.performance = {\n      executionTime: 0,\n      memoryUsage: 0,\n      simdAcceleration: false,\n      throughput: 0,\n      efficiency: 0\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3e10236888821e83514ad6e0ad0ffadc457a3019"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qdymefdzp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qdymefdzp();
cov_2qdymefdzp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qdymefdzp().s[1]++;
exports.WasmBridge = void 0;
class WasmBridge {
  constructor() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[0]++;
    cov_2qdymefdzp().s[2]++;
    Object.defineProperty(this, "module", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_2qdymefdzp().s[3]++;
    Object.defineProperty(this, "isInitialized", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    /* istanbul ignore next */
    cov_2qdymefdzp().s[4]++;
    Object.defineProperty(this, "memoryBuffer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_2qdymefdzp().s[5]++;
    Object.defineProperty(this, "performance", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_2qdymefdzp().s[6]++;
    this.performance = {
      executionTime: 0,
      memoryUsage: 0,
      simdAcceleration: false,
      throughput: 0,
      efficiency: 0
    };
  }
  /**
   * Initialize WASM module
   */
  async initialize() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[1]++;
    cov_2qdymefdzp().s[7]++;
    try {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[8]++;
      // In a real implementation, this would load the actual WASM module
      // from the synaptic-mesh project. For now, we'll simulate it.
      // Check if WebAssembly is supported
      if (typeof WebAssembly === 'undefined') {
        /* istanbul ignore next */
        cov_2qdymefdzp().b[0][0]++;
        cov_2qdymefdzp().s[9]++;
        throw new Error('WebAssembly not supported in this environment');
      } else
      /* istanbul ignore next */
      {
        cov_2qdymefdzp().b[0][1]++;
      }
      // Check for SIMD support
      const simdSupported =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[10]++, await this.checkSIMDSupport());
      // Create simulated WASM module
      /* istanbul ignore next */
      cov_2qdymefdzp().s[11]++;
      this.module = await this.createSimulatedWasmModule();
      /* istanbul ignore next */
      cov_2qdymefdzp().s[12]++;
      if (this.module) {
        /* istanbul ignore next */
        cov_2qdymefdzp().b[1][0]++;
        cov_2qdymefdzp().s[13]++;
        this.memoryBuffer = this.module.memory.buffer;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[14]++;
        this.performance.simdAcceleration = simdSupported;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[15]++;
        this.isInitialized = true;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[16]++;
        console.log('🚀 WASM Bridge initialized with SIMD support:', simdSupported);
        /* istanbul ignore next */
        cov_2qdymefdzp().s[17]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_2qdymefdzp().b[1][1]++;
      }
      cov_2qdymefdzp().s[18]++;
      return false;
    } catch (error) {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[19]++;
      console.error('❌ WASM Bridge initialization failed:', error);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[20]++;
      return false;
    }
  }
  /**
   * Check if SIMD is supported
   */
  async checkSIMDSupport() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[2]++;
    cov_2qdymefdzp().s[21]++;
    try {
      // Create a simple WASM module that uses SIMD instructions
      const wasmCode =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[22]++, new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7b, 0x03, 0x02, 0x01, 0x00, 0x0a, 0x0a, 0x01, 0x08, 0x00, 0x41, 0x00, 0xfd, 0x0f, 0x0b]));
      const module =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[23]++, await WebAssembly.compile(wasmCode));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[24]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[25]++;
      // SIMD not supported
      return false;
    }
  }
  /**
   * Create simulated WASM module for development
   */
  async createSimulatedWasmModule() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[3]++;
    // Create memory (1MB)
    const memory =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[26]++, new WebAssembly.Memory({
      initial: 16
    }));
    // Simulate WASM module functions
    /* istanbul ignore next */
    cov_2qdymefdzp().s[27]++;
    return {
      memory,
      calculate_neural_activation: (inputs, inputsPtr, outputs, outputsPtr) => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[4]++;
        const inputArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[28]++, new Float32Array(memory.buffer, inputsPtr, inputs));
        const outputArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[29]++, new Float32Array(memory.buffer, outputsPtr, outputs));
        // Simulate neural activation calculation with SIMD optimization
        const startTime =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[30]++, performance.now());
        /* istanbul ignore next */
        cov_2qdymefdzp().s[31]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[32]++, 0); i < Math.min(inputs, outputs); i++) {
          /* istanbul ignore next */
          cov_2qdymefdzp().s[33]++;
          // Simulate tanh activation function
          outputArray[i] = Math.tanh(inputArray[i] * 0.5);
        }
        /* istanbul ignore next */
        cov_2qdymefdzp().s[34]++;
        this.performance.executionTime = performance.now() - startTime;
      },
      optimize_connections: (connections, connectionsPtr, count) => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[5]++;
        const connectionArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[35]++, new Float32Array(memory.buffer, connectionsPtr, count));
        // Simulate connection weight optimization
        const startTime =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[36]++, performance.now());
        /* istanbul ignore next */
        cov_2qdymefdzp().s[37]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[38]++, 0); i < count; i++) {
          // Apply small random adjustments with bounds
          const adjustment =
          /* istanbul ignore next */
          (cov_2qdymefdzp().s[39]++, (Math.random() - 0.5) * 0.1);
          /* istanbul ignore next */
          cov_2qdymefdzp().s[40]++;
          connectionArray[i] = Math.min(1, Math.max(0, connectionArray[i] + adjustment));
        }
        /* istanbul ignore next */
        cov_2qdymefdzp().s[41]++;
        this.performance.executionTime = performance.now() - startTime;
      },
      process_spike_train: (spikes, spikesPtr, count, windowSize) => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[6]++;
        const spikeArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[42]++, new Float32Array(memory.buffer, spikesPtr, count));
        // Calculate spike rate within window
        const startTime =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[43]++, performance.now());
        let spikeCount =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[44]++, 0);
        /* istanbul ignore next */
        cov_2qdymefdzp().s[45]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[46]++, 0); i < count; i++) {
          /* istanbul ignore next */
          cov_2qdymefdzp().s[47]++;
          if (spikeArray[i] > 0.1) {
            /* istanbul ignore next */
            cov_2qdymefdzp().b[2][0]++;
            cov_2qdymefdzp().s[48]++;
            spikeCount++;
          } else
          /* istanbul ignore next */
          {
            cov_2qdymefdzp().b[2][1]++;
          }
        }
        /* istanbul ignore next */
        cov_2qdymefdzp().s[49]++;
        this.performance.executionTime = performance.now() - startTime;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[50]++;
        return spikeCount / (windowSize / 1000); // Hz
      },
      calculate_mesh_efficiency: (neurons, neuronsPtr, synapses, synapsesPtr) => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[7]++;
        const neuronArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[51]++, new Float32Array(memory.buffer, neuronsPtr, neurons));
        const synapseArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[52]++, new Float32Array(memory.buffer, synapsesPtr, synapses));
        // Calculate overall mesh efficiency
        const startTime =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[53]++, performance.now());
        let totalActivity =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[54]++, 0);
        /* istanbul ignore next */
        cov_2qdymefdzp().s[55]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[56]++, 0); i < neurons; i++) {
          /* istanbul ignore next */
          cov_2qdymefdzp().s[57]++;
          totalActivity += neuronArray[i];
        }
        let totalWeight =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[58]++, 0);
        /* istanbul ignore next */
        cov_2qdymefdzp().s[59]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[60]++, 0); i < synapses; i++) {
          /* istanbul ignore next */
          cov_2qdymefdzp().s[61]++;
          totalWeight += synapseArray[i];
        }
        const efficiency =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[62]++, totalActivity / neurons * (totalWeight / synapses));
        /* istanbul ignore next */
        cov_2qdymefdzp().s[63]++;
        this.performance.executionTime = performance.now() - startTime;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[64]++;
        return efficiency;
      },
      simd_supported: () => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[8]++;
        cov_2qdymefdzp().s[65]++;
        return this.performance.simdAcceleration ?
        /* istanbul ignore next */
        (cov_2qdymefdzp().b[3][0]++, 1) :
        /* istanbul ignore next */
        (cov_2qdymefdzp().b[3][1]++, 0);
      },
      get_memory_usage: () => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[9]++;
        cov_2qdymefdzp().s[66]++;
        return memory.buffer.byteLength;
      }
    };
  }
  /**
   * Calculate neural activation using WASM
   */
  calculateNeuralActivation(inputs) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[10]++;
    cov_2qdymefdzp().s[67]++;
    if (
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[5][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[5][1]++, !this.module)) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[4][0]++;
      cov_2qdymefdzp().s[68]++;
      throw new Error('WASM module not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[4][1]++;
    }
    const inputSize =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[69]++, inputs.length);
    const outputSize =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[70]++, inputSize);
    // Allocate memory for inputs and outputs
    const inputPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[71]++, this.allocateMemory(inputSize * 4)); // 4 bytes per float
    const outputPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[72]++, this.allocateMemory(outputSize * 4));
    /* istanbul ignore next */
    cov_2qdymefdzp().s[73]++;
    try {
      // Copy input data to WASM memory
      const inputView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[74]++, new Float32Array(this.memoryBuffer, inputPtr / 4, inputSize));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[75]++;
      inputView.set(inputs);
      // Call WASM function
      const startTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[76]++, performance.now());
      /* istanbul ignore next */
      cov_2qdymefdzp().s[77]++;
      this.module.calculate_neural_activation(inputSize, inputPtr, outputSize, outputPtr);
      const endTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[78]++, performance.now());
      // Copy output data from WASM memory
      const outputView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[79]++, new Float32Array(this.memoryBuffer, outputPtr / 4, outputSize));
      const result =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[80]++, new Float32Array(outputView));
      // Update performance metrics
      /* istanbul ignore next */
      cov_2qdymefdzp().s[81]++;
      this.performance.executionTime = endTime - startTime;
      /* istanbul ignore next */
      cov_2qdymefdzp().s[82]++;
      this.performance.throughput = inputSize / (endTime - startTime);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[83]++;
      this.performance.efficiency = this.performance.simdAcceleration ?
      /* istanbul ignore next */
      (cov_2qdymefdzp().b[6][0]++, 0.95) :
      /* istanbul ignore next */
      (cov_2qdymefdzp().b[6][1]++, 0.75);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[84]++;
      return result;
    } finally {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[85]++;
      // Free allocated memory
      this.freeMemory(inputPtr);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[86]++;
      this.freeMemory(outputPtr);
    }
  }
  /**
   * Optimize connection weights using WASM
   */
  optimizeConnections(connections) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[11]++;
    cov_2qdymefdzp().s[87]++;
    if (
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[8][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[8][1]++, !this.module)) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[7][0]++;
      cov_2qdymefdzp().s[88]++;
      throw new Error('WASM module not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[7][1]++;
    }
    const count =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[89]++, connections.length);
    const connectionsPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[90]++, this.allocateMemory(count * 4));
    /* istanbul ignore next */
    cov_2qdymefdzp().s[91]++;
    try {
      // Copy connection data to WASM memory
      const connectionsView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[92]++, new Float32Array(this.memoryBuffer, connectionsPtr / 4, count));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[93]++;
      connectionsView.set(connections);
      // Call WASM function
      const startTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[94]++, performance.now());
      /* istanbul ignore next */
      cov_2qdymefdzp().s[95]++;
      this.module.optimize_connections(count, connectionsPtr, count);
      const endTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[96]++, performance.now());
      // Copy optimized data back
      const result =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[97]++, new Float32Array(connectionsView));
      // Update performance metrics
      /* istanbul ignore next */
      cov_2qdymefdzp().s[98]++;
      this.performance.executionTime = endTime - startTime;
      /* istanbul ignore next */
      cov_2qdymefdzp().s[99]++;
      this.performance.throughput = count / (endTime - startTime);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[100]++;
      return result;
    } finally {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[101]++;
      this.freeMemory(connectionsPtr);
    }
  }
  /**
   * Process spike train data using WASM
   */
  processSpikeTrainData(spikes, windowSize) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[12]++;
    cov_2qdymefdzp().s[102]++;
    if (
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[10][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[10][1]++, !this.module)) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[9][0]++;
      cov_2qdymefdzp().s[103]++;
      throw new Error('WASM module not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[9][1]++;
    }
    const count =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[104]++, spikes.length);
    const spikesPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[105]++, this.allocateMemory(count * 4));
    /* istanbul ignore next */
    cov_2qdymefdzp().s[106]++;
    try {
      // Copy spike data to WASM memory
      const spikesView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[107]++, new Float32Array(this.memoryBuffer, spikesPtr / 4, count));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[108]++;
      spikesView.set(spikes);
      // Call WASM function
      const startTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[109]++, performance.now());
      const spikeRate =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[110]++, this.module.process_spike_train(count, spikesPtr, count, windowSize));
      const endTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[111]++, performance.now());
      // Update performance metrics
      /* istanbul ignore next */
      cov_2qdymefdzp().s[112]++;
      this.performance.executionTime = endTime - startTime;
      /* istanbul ignore next */
      cov_2qdymefdzp().s[113]++;
      return spikeRate;
    } finally {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[114]++;
      this.freeMemory(spikesPtr);
    }
  }
  /**
   * Calculate mesh efficiency using WASM
   */
  calculateMeshEfficiency(neurons, synapses) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[13]++;
    cov_2qdymefdzp().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[12][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[12][1]++, !this.module)) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[11][0]++;
      cov_2qdymefdzp().s[116]++;
      throw new Error('WASM module not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[11][1]++;
    }
    const neuronCount =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[117]++, neurons.length);
    const synapseCount =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[118]++, synapses.length);
    const neuronsPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[119]++, this.allocateMemory(neuronCount * 4));
    const synapsesPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[120]++, this.allocateMemory(synapseCount * 4));
    /* istanbul ignore next */
    cov_2qdymefdzp().s[121]++;
    try {
      // Copy data to WASM memory
      const neuronsView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[122]++, new Float32Array(this.memoryBuffer, neuronsPtr / 4, neuronCount));
      const synapsesView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[123]++, new Float32Array(this.memoryBuffer, synapsesPtr / 4, synapseCount));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[124]++;
      neuronsView.set(neurons);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[125]++;
      synapsesView.set(synapses);
      // Call WASM function
      const startTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[126]++, performance.now());
      const efficiency =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[127]++, this.module.calculate_mesh_efficiency(neuronCount, neuronsPtr, synapseCount, synapsesPtr));
      const endTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[128]++, performance.now());
      // Update performance metrics
      /* istanbul ignore next */
      cov_2qdymefdzp().s[129]++;
      this.performance.executionTime = endTime - startTime;
      /* istanbul ignore next */
      cov_2qdymefdzp().s[130]++;
      return efficiency;
    } finally {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[131]++;
      this.freeMemory(neuronsPtr);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[132]++;
      this.freeMemory(synapsesPtr);
    }
  }
  /**
   * Get current performance metrics
   */
  getPerformanceMetrics() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[14]++;
    cov_2qdymefdzp().s[133]++;
    if (this.module) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[13][0]++;
      cov_2qdymefdzp().s[134]++;
      this.performance.memoryUsage = this.module.get_memory_usage();
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[13][1]++;
    }
    cov_2qdymefdzp().s[135]++;
    return {
      ...this.performance
    };
  }
  /**
   * Check if WASM module is initialized
   */
  isWasmInitialized() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[15]++;
    cov_2qdymefdzp().s[136]++;
    return this.isInitialized;
  }
  /**
   * Check if SIMD is supported
   */
  isSIMDSupported() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[16]++;
    cov_2qdymefdzp().s[137]++;
    return this.performance.simdAcceleration;
  }
  /**
   * Allocate memory in WASM module (simplified simulation)
   */
  allocateMemory(size) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[17]++;
    cov_2qdymefdzp().s[138]++;
    // In a real implementation, this would use a proper memory allocator
    // For simulation, we'll return a pseudo-pointer
    return Math.floor(Math.random() * 1000000);
  }
  /**
   * Free memory in WASM module (simplified simulation)
   */
  freeMemory(ptr) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[18]++;
  } // In a real implementation, this would free the memory
  // For simulation, we'll just log it
  // console.log('Memory freed at:', ptr)
  /**
   * Cleanup WASM module
   */
  cleanup() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[19]++;
    cov_2qdymefdzp().s[139]++;
    this.module = null;
    /* istanbul ignore next */
    cov_2qdymefdzp().s[140]++;
    this.memoryBuffer = null;
    /* istanbul ignore next */
    cov_2qdymefdzp().s[141]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_2qdymefdzp().s[142]++;
    this.performance = {
      executionTime: 0,
      memoryUsage: 0,
      simdAcceleration: false,
      throughput: 0,
      efficiency: 0
    };
  }
}
/* istanbul ignore next */
cov_2qdymefdzp().s[143]++;
exports.WasmBridge = WasmBridge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnFkeW1lZmR6cCIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIldhc21CcmlkZ2UiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicGVyZm9ybWFuY2UiLCJleGVjdXRpb25UaW1lIiwibWVtb3J5VXNhZ2UiLCJzaW1kQWNjZWxlcmF0aW9uIiwidGhyb3VnaHB1dCIsImVmZmljaWVuY3kiLCJpbml0aWFsaXplIiwiV2ViQXNzZW1ibHkiLCJFcnJvciIsInNpbWRTdXBwb3J0ZWQiLCJjaGVja1NJTURTdXBwb3J0IiwibW9kdWxlIiwiY3JlYXRlU2ltdWxhdGVkV2FzbU1vZHVsZSIsIm1lbW9yeUJ1ZmZlciIsIm1lbW9yeSIsImJ1ZmZlciIsImlzSW5pdGlhbGl6ZWQiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJ3YXNtQ29kZSIsIlVpbnQ4QXJyYXkiLCJjb21waWxlIiwiTWVtb3J5IiwiaW5pdGlhbCIsImNhbGN1bGF0ZV9uZXVyYWxfYWN0aXZhdGlvbiIsImlucHV0cyIsImlucHV0c1B0ciIsIm91dHB1dHMiLCJvdXRwdXRzUHRyIiwiaW5wdXRBcnJheSIsIkZsb2F0MzJBcnJheSIsIm91dHB1dEFycmF5Iiwic3RhcnRUaW1lIiwibm93IiwiaSIsIk1hdGgiLCJtaW4iLCJ0YW5oIiwib3B0aW1pemVfY29ubmVjdGlvbnMiLCJjb25uZWN0aW9ucyIsImNvbm5lY3Rpb25zUHRyIiwiY291bnQiLCJjb25uZWN0aW9uQXJyYXkiLCJhZGp1c3RtZW50IiwicmFuZG9tIiwibWF4IiwicHJvY2Vzc19zcGlrZV90cmFpbiIsInNwaWtlcyIsInNwaWtlc1B0ciIsIndpbmRvd1NpemUiLCJzcGlrZUFycmF5Iiwic3Bpa2VDb3VudCIsImNhbGN1bGF0ZV9tZXNoX2VmZmljaWVuY3kiLCJuZXVyb25zIiwibmV1cm9uc1B0ciIsInN5bmFwc2VzIiwic3luYXBzZXNQdHIiLCJuZXVyb25BcnJheSIsInN5bmFwc2VBcnJheSIsInRvdGFsQWN0aXZpdHkiLCJ0b3RhbFdlaWdodCIsInNpbWRfc3VwcG9ydGVkIiwiZ2V0X21lbW9yeV91c2FnZSIsImJ5dGVMZW5ndGgiLCJjYWxjdWxhdGVOZXVyYWxBY3RpdmF0aW9uIiwiaW5wdXRTaXplIiwibGVuZ3RoIiwib3V0cHV0U2l6ZSIsImlucHV0UHRyIiwiYWxsb2NhdGVNZW1vcnkiLCJvdXRwdXRQdHIiLCJpbnB1dFZpZXciLCJzZXQiLCJlbmRUaW1lIiwib3V0cHV0VmlldyIsInJlc3VsdCIsImZyZWVNZW1vcnkiLCJvcHRpbWl6ZUNvbm5lY3Rpb25zIiwiY29ubmVjdGlvbnNWaWV3IiwicHJvY2Vzc1NwaWtlVHJhaW5EYXRhIiwic3Bpa2VzVmlldyIsInNwaWtlUmF0ZSIsImNhbGN1bGF0ZU1lc2hFZmZpY2llbmN5IiwibmV1cm9uQ291bnQiLCJzeW5hcHNlQ291bnQiLCJuZXVyb25zVmlldyIsInN5bmFwc2VzVmlldyIsImdldFBlcmZvcm1hbmNlTWV0cmljcyIsImlzV2FzbUluaXRpYWxpemVkIiwiaXNTSU1EU3VwcG9ydGVkIiwic2l6ZSIsImZsb29yIiwicHRyIiwiY2xlYW51cCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvd29ya3NwYWNlcy9hZ2VudGlzdHMtcXVpY2tzdGFydC13b3Jrc3BhY2UtYmFzaWMvc2FzaS9zcmMvdXRpbHMvV2FzbUJyaWRnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFdBU00gQnJpZGdlIGZvciBQZXJmb3JtYW5jZS1Dcml0aWNhbCBOZXVyYWwgT3BlcmF0aW9uc1xuICogXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyBhIGJyaWRnZSB0byBXZWJBc3NlbWJseSBtb2R1bGVzIGZvciBhY2NlbGVyYXRlZFxuICogbmV1cmFsIG1lc2ggY29tcHV0YXRpb25zLCBpbmNsdWRpbmcgU0lNRC1vcHRpbWl6ZWQgb3BlcmF0aW9ucy5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIFdhc21Nb2R1bGUge1xuICBtZW1vcnk6IFdlYkFzc2VtYmx5Lk1lbW9yeVxuICBjYWxjdWxhdGVfbmV1cmFsX2FjdGl2YXRpb246IChpbnB1dHM6IG51bWJlciwgaW5wdXRzUHRyOiBudW1iZXIsIG91dHB1dHM6IG51bWJlciwgb3V0cHV0c1B0cjogbnVtYmVyKSA9PiB2b2lkXG4gIG9wdGltaXplX2Nvbm5lY3Rpb25zOiAoY29ubmVjdGlvbnM6IG51bWJlciwgY29ubmVjdGlvbnNQdHI6IG51bWJlciwgY291bnQ6IG51bWJlcikgPT4gdm9pZFxuICBwcm9jZXNzX3NwaWtlX3RyYWluOiAoc3Bpa2VzOiBudW1iZXIsIHNwaWtlc1B0cjogbnVtYmVyLCBjb3VudDogbnVtYmVyLCB3aW5kb3dTaXplOiBudW1iZXIpID0+IG51bWJlclxuICBjYWxjdWxhdGVfbWVzaF9lZmZpY2llbmN5OiAobmV1cm9uczogbnVtYmVyLCBuZXVyb25zUHRyOiBudW1iZXIsIHN5bmFwc2VzOiBudW1iZXIsIHN5bmFwc2VzUHRyOiBudW1iZXIpID0+IG51bWJlclxuICBzaW1kX3N1cHBvcnRlZDogKCkgPT4gbnVtYmVyXG4gIGdldF9tZW1vcnlfdXNhZ2U6ICgpID0+IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdhc21QZXJmb3JtYW5jZU1ldHJpY3Mge1xuICBleGVjdXRpb25UaW1lOiBudW1iZXJcbiAgbWVtb3J5VXNhZ2U6IG51bWJlclxuICBzaW1kQWNjZWxlcmF0aW9uOiBib29sZWFuXG4gIHRocm91Z2hwdXQ6IG51bWJlclxuICBlZmZpY2llbmN5OiBudW1iZXJcbn1cblxuZXhwb3J0IGNsYXNzIFdhc21CcmlkZ2Uge1xuICBwcml2YXRlIG1vZHVsZTogV2FzbU1vZHVsZSB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgaXNJbml0aWFsaXplZCA9IGZhbHNlXG4gIHByaXZhdGUgbWVtb3J5QnVmZmVyOiBBcnJheUJ1ZmZlciB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgcGVyZm9ybWFuY2U6IFdhc21QZXJmb3JtYW5jZU1ldHJpY3NcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnBlcmZvcm1hbmNlID0ge1xuICAgICAgZXhlY3V0aW9uVGltZTogMCxcbiAgICAgIG1lbW9yeVVzYWdlOiAwLFxuICAgICAgc2ltZEFjY2VsZXJhdGlvbjogZmFsc2UsXG4gICAgICB0aHJvdWdocHV0OiAwLFxuICAgICAgZWZmaWNpZW5jeTogMFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIFdBU00gbW9kdWxlXG4gICAqL1xuICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgbG9hZCB0aGUgYWN0dWFsIFdBU00gbW9kdWxlXG4gICAgICAvLyBmcm9tIHRoZSBzeW5hcHRpYy1tZXNoIHByb2plY3QuIEZvciBub3csIHdlJ2xsIHNpbXVsYXRlIGl0LlxuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiBXZWJBc3NlbWJseSBpcyBzdXBwb3J0ZWRcbiAgICAgIGlmICh0eXBlb2YgV2ViQXNzZW1ibHkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViQXNzZW1ibHkgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50JylcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIFNJTUQgc3VwcG9ydFxuICAgICAgY29uc3Qgc2ltZFN1cHBvcnRlZCA9IGF3YWl0IHRoaXMuY2hlY2tTSU1EU3VwcG9ydCgpXG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSBzaW11bGF0ZWQgV0FTTSBtb2R1bGVcbiAgICAgIHRoaXMubW9kdWxlID0gYXdhaXQgdGhpcy5jcmVhdGVTaW11bGF0ZWRXYXNtTW9kdWxlKClcbiAgICAgIFxuICAgICAgaWYgKHRoaXMubW9kdWxlKSB7XG4gICAgICAgIHRoaXMubWVtb3J5QnVmZmVyID0gdGhpcy5tb2R1bGUubWVtb3J5LmJ1ZmZlclxuICAgICAgICB0aGlzLnBlcmZvcm1hbmNlLnNpbWRBY2NlbGVyYXRpb24gPSBzaW1kU3VwcG9ydGVkXG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWVcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5qAIFdBU00gQnJpZGdlIGluaXRpYWxpemVkIHdpdGggU0lNRCBzdXBwb3J0OicsIHNpbWRTdXBwb3J0ZWQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgV0FTTSBCcmlkZ2UgaW5pdGlhbGl6YXRpb24gZmFpbGVkOicsIGVycm9yKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIFNJTUQgaXMgc3VwcG9ydGVkXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGNoZWNrU0lNRFN1cHBvcnQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENyZWF0ZSBhIHNpbXBsZSBXQVNNIG1vZHVsZSB0aGF0IHVzZXMgU0lNRCBpbnN0cnVjdGlvbnNcbiAgICAgIGNvbnN0IHdhc21Db2RlID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAweDAwLCAweDYxLCAweDczLCAweDZkLCAweDAxLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgICAweDAxLCAweDA1LCAweDAxLCAweDYwLCAweDAwLCAweDAxLCAweDdiLFxuICAgICAgICAweDAzLCAweDAyLCAweDAxLCAweDAwLFxuICAgICAgICAweDBhLCAweDBhLCAweDAxLCAweDA4LCAweDAwLCAweDQxLCAweDAwLCAweGZkLCAweDBmLCAweDBiXG4gICAgICBdKVxuICAgICAgXG4gICAgICBjb25zdCBtb2R1bGUgPSBhd2FpdCBXZWJBc3NlbWJseS5jb21waWxlKHdhc21Db2RlKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gU0lNRCBub3Qgc3VwcG9ydGVkXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHNpbXVsYXRlZCBXQVNNIG1vZHVsZSBmb3IgZGV2ZWxvcG1lbnRcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlU2ltdWxhdGVkV2FzbU1vZHVsZSgpOiBQcm9taXNlPFdhc21Nb2R1bGU+IHtcbiAgICAvLyBDcmVhdGUgbWVtb3J5ICgxTUIpXG4gICAgY29uc3QgbWVtb3J5ID0gbmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7IGluaXRpYWw6IDE2IH0pXG4gICAgXG4gICAgLy8gU2ltdWxhdGUgV0FTTSBtb2R1bGUgZnVuY3Rpb25zXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lbW9yeSxcbiAgICAgIFxuICAgICAgY2FsY3VsYXRlX25ldXJhbF9hY3RpdmF0aW9uOiAoaW5wdXRzOiBudW1iZXIsIGlucHV0c1B0cjogbnVtYmVyLCBvdXRwdXRzOiBudW1iZXIsIG91dHB1dHNQdHI6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBpbnB1dEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShtZW1vcnkuYnVmZmVyLCBpbnB1dHNQdHIsIGlucHV0cylcbiAgICAgICAgY29uc3Qgb3V0cHV0QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG1lbW9yeS5idWZmZXIsIG91dHB1dHNQdHIsIG91dHB1dHMpXG4gICAgICAgIFxuICAgICAgICAvLyBTaW11bGF0ZSBuZXVyYWwgYWN0aXZhdGlvbiBjYWxjdWxhdGlvbiB3aXRoIFNJTUQgb3B0aW1pemF0aW9uXG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKGlucHV0cywgb3V0cHV0cyk7IGkrKykge1xuICAgICAgICAgIC8vIFNpbXVsYXRlIHRhbmggYWN0aXZhdGlvbiBmdW5jdGlvblxuICAgICAgICAgIG91dHB1dEFycmF5W2ldID0gTWF0aC50YW5oKGlucHV0QXJyYXlbaV0gKiAwLjUpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2UuZXhlY3V0aW9uVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lXG4gICAgICB9LFxuICAgICAgXG4gICAgICBvcHRpbWl6ZV9jb25uZWN0aW9uczogKGNvbm5lY3Rpb25zOiBudW1iZXIsIGNvbm5lY3Rpb25zUHRyOiBudW1iZXIsIGNvdW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShtZW1vcnkuYnVmZmVyLCBjb25uZWN0aW9uc1B0ciwgY291bnQpXG4gICAgICAgIFxuICAgICAgICAvLyBTaW11bGF0ZSBjb25uZWN0aW9uIHdlaWdodCBvcHRpbWl6YXRpb25cbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgIC8vIEFwcGx5IHNtYWxsIHJhbmRvbSBhZGp1c3RtZW50cyB3aXRoIGJvdW5kc1xuICAgICAgICAgIGNvbnN0IGFkanVzdG1lbnQgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjFcbiAgICAgICAgICBjb25uZWN0aW9uQXJyYXlbaV0gPSBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBjb25uZWN0aW9uQXJyYXlbaV0gKyBhZGp1c3RtZW50KSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5wZXJmb3JtYW5jZS5leGVjdXRpb25UaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWVcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIHByb2Nlc3Nfc3Bpa2VfdHJhaW46IChzcGlrZXM6IG51bWJlciwgc3Bpa2VzUHRyOiBudW1iZXIsIGNvdW50OiBudW1iZXIsIHdpbmRvd1NpemU6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgIGNvbnN0IHNwaWtlQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG1lbW9yeS5idWZmZXIsIHNwaWtlc1B0ciwgY291bnQpXG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhdGUgc3Bpa2UgcmF0ZSB3aXRoaW4gd2luZG93XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICAgIFxuICAgICAgICBsZXQgc3Bpa2VDb3VudCA9IDBcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHNwaWtlQXJyYXlbaV0gPiAwLjEpIHtcbiAgICAgICAgICAgIHNwaWtlQ291bnQrK1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5wZXJmb3JtYW5jZS5leGVjdXRpb25UaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWVcbiAgICAgICAgcmV0dXJuIHNwaWtlQ291bnQgLyAod2luZG93U2l6ZSAvIDEwMDApIC8vIEh6XG4gICAgICB9LFxuICAgICAgXG4gICAgICBjYWxjdWxhdGVfbWVzaF9lZmZpY2llbmN5OiAobmV1cm9uczogbnVtYmVyLCBuZXVyb25zUHRyOiBudW1iZXIsIHN5bmFwc2VzOiBudW1iZXIsIHN5bmFwc2VzUHRyOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgICAgICBjb25zdCBuZXVyb25BcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkobWVtb3J5LmJ1ZmZlciwgbmV1cm9uc1B0ciwgbmV1cm9ucylcbiAgICAgICAgY29uc3Qgc3luYXBzZUFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShtZW1vcnkuYnVmZmVyLCBzeW5hcHNlc1B0ciwgc3luYXBzZXMpXG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhdGUgb3ZlcmFsbCBtZXNoIGVmZmljaWVuY3lcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgXG4gICAgICAgIGxldCB0b3RhbEFjdGl2aXR5ID0gMFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ldXJvbnM7IGkrKykge1xuICAgICAgICAgIHRvdGFsQWN0aXZpdHkgKz0gbmV1cm9uQXJyYXlbaV1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IHRvdGFsV2VpZ2h0ID0gMFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN5bmFwc2VzOyBpKyspIHtcbiAgICAgICAgICB0b3RhbFdlaWdodCArPSBzeW5hcHNlQXJyYXlbaV1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgZWZmaWNpZW5jeSA9ICh0b3RhbEFjdGl2aXR5IC8gbmV1cm9ucykgKiAodG90YWxXZWlnaHQgLyBzeW5hcHNlcylcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2UuZXhlY3V0aW9uVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lXG4gICAgICAgIHJldHVybiBlZmZpY2llbmN5XG4gICAgICB9LFxuICAgICAgXG4gICAgICBzaW1kX3N1cHBvcnRlZDogKCk6IG51bWJlciA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm1hbmNlLnNpbWRBY2NlbGVyYXRpb24gPyAxIDogMFxuICAgICAgfSxcbiAgICAgIFxuICAgICAgZ2V0X21lbW9yeV91c2FnZTogKCk6IG51bWJlciA9PiB7XG4gICAgICAgIHJldHVybiBtZW1vcnkuYnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIG5ldXJhbCBhY3RpdmF0aW9uIHVzaW5nIFdBU01cbiAgICovXG4gIGNhbGN1bGF0ZU5ldXJhbEFjdGl2YXRpb24oaW5wdXRzOiBGbG9hdDMyQXJyYXkpOiBGbG9hdDMyQXJyYXkge1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkIHx8ICF0aGlzLm1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXQVNNIG1vZHVsZSBub3QgaW5pdGlhbGl6ZWQnKVxuICAgIH1cblxuICAgIGNvbnN0IGlucHV0U2l6ZSA9IGlucHV0cy5sZW5ndGhcbiAgICBjb25zdCBvdXRwdXRTaXplID0gaW5wdXRTaXplXG4gICAgXG4gICAgLy8gQWxsb2NhdGUgbWVtb3J5IGZvciBpbnB1dHMgYW5kIG91dHB1dHNcbiAgICBjb25zdCBpbnB1dFB0ciA9IHRoaXMuYWxsb2NhdGVNZW1vcnkoaW5wdXRTaXplICogNCkgLy8gNCBieXRlcyBwZXIgZmxvYXRcbiAgICBjb25zdCBvdXRwdXRQdHIgPSB0aGlzLmFsbG9jYXRlTWVtb3J5KG91dHB1dFNpemUgKiA0KVxuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBDb3B5IGlucHV0IGRhdGEgdG8gV0FTTSBtZW1vcnlcbiAgICAgIGNvbnN0IGlucHV0VmlldyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5tZW1vcnlCdWZmZXIhLCBpbnB1dFB0ciAvIDQsIGlucHV0U2l6ZSlcbiAgICAgIGlucHV0Vmlldy5zZXQoaW5wdXRzKVxuICAgICAgXG4gICAgICAvLyBDYWxsIFdBU00gZnVuY3Rpb25cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICB0aGlzLm1vZHVsZS5jYWxjdWxhdGVfbmV1cmFsX2FjdGl2YXRpb24oaW5wdXRTaXplLCBpbnB1dFB0ciwgb3V0cHV0U2l6ZSwgb3V0cHV0UHRyKVxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICBcbiAgICAgIC8vIENvcHkgb3V0cHV0IGRhdGEgZnJvbSBXQVNNIG1lbW9yeVxuICAgICAgY29uc3Qgb3V0cHV0VmlldyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5tZW1vcnlCdWZmZXIhLCBvdXRwdXRQdHIgLyA0LCBvdXRwdXRTaXplKVxuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheShvdXRwdXRWaWV3KVxuICAgICAgXG4gICAgICAvLyBVcGRhdGUgcGVyZm9ybWFuY2UgbWV0cmljc1xuICAgICAgdGhpcy5wZXJmb3JtYW5jZS5leGVjdXRpb25UaW1lID0gZW5kVGltZSAtIHN0YXJ0VGltZVxuICAgICAgdGhpcy5wZXJmb3JtYW5jZS50aHJvdWdocHV0ID0gaW5wdXRTaXplIC8gKGVuZFRpbWUgLSBzdGFydFRpbWUpXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlLmVmZmljaWVuY3kgPSB0aGlzLnBlcmZvcm1hbmNlLnNpbWRBY2NlbGVyYXRpb24gPyAwLjk1IDogMC43NVxuICAgICAgXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIEZyZWUgYWxsb2NhdGVkIG1lbW9yeVxuICAgICAgdGhpcy5mcmVlTWVtb3J5KGlucHV0UHRyKVxuICAgICAgdGhpcy5mcmVlTWVtb3J5KG91dHB1dFB0cilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3B0aW1pemUgY29ubmVjdGlvbiB3ZWlnaHRzIHVzaW5nIFdBU01cbiAgICovXG4gIG9wdGltaXplQ29ubmVjdGlvbnMoY29ubmVjdGlvbnM6IEZsb2F0MzJBcnJheSk6IEZsb2F0MzJBcnJheSB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQgfHwgIXRoaXMubW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dBU00gbW9kdWxlIG5vdCBpbml0aWFsaXplZCcpXG4gICAgfVxuXG4gICAgY29uc3QgY291bnQgPSBjb25uZWN0aW9ucy5sZW5ndGhcbiAgICBjb25zdCBjb25uZWN0aW9uc1B0ciA9IHRoaXMuYWxsb2NhdGVNZW1vcnkoY291bnQgKiA0KVxuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBDb3B5IGNvbm5lY3Rpb24gZGF0YSB0byBXQVNNIG1lbW9yeVxuICAgICAgY29uc3QgY29ubmVjdGlvbnNWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLm1lbW9yeUJ1ZmZlciEsIGNvbm5lY3Rpb25zUHRyIC8gNCwgY291bnQpXG4gICAgICBjb25uZWN0aW9uc1ZpZXcuc2V0KGNvbm5lY3Rpb25zKVxuICAgICAgXG4gICAgICAvLyBDYWxsIFdBU00gZnVuY3Rpb25cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICB0aGlzLm1vZHVsZS5vcHRpbWl6ZV9jb25uZWN0aW9ucyhjb3VudCwgY29ubmVjdGlvbnNQdHIsIGNvdW50KVxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICBcbiAgICAgIC8vIENvcHkgb3B0aW1pemVkIGRhdGEgYmFja1xuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheShjb25uZWN0aW9uc1ZpZXcpXG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlLmV4ZWN1dGlvblRpbWUgPSBlbmRUaW1lIC0gc3RhcnRUaW1lXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlLnRocm91Z2hwdXQgPSBjb3VudCAvIChlbmRUaW1lIC0gc3RhcnRUaW1lKVxuICAgICAgXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuZnJlZU1lbW9yeShjb25uZWN0aW9uc1B0cilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBzcGlrZSB0cmFpbiBkYXRhIHVzaW5nIFdBU01cbiAgICovXG4gIHByb2Nlc3NTcGlrZVRyYWluRGF0YShzcGlrZXM6IEZsb2F0MzJBcnJheSwgd2luZG93U2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCB8fCAhdGhpcy5tb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV0FTTSBtb2R1bGUgbm90IGluaXRpYWxpemVkJylcbiAgICB9XG5cbiAgICBjb25zdCBjb3VudCA9IHNwaWtlcy5sZW5ndGhcbiAgICBjb25zdCBzcGlrZXNQdHIgPSB0aGlzLmFsbG9jYXRlTWVtb3J5KGNvdW50ICogNClcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gQ29weSBzcGlrZSBkYXRhIHRvIFdBU00gbWVtb3J5XG4gICAgICBjb25zdCBzcGlrZXNWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLm1lbW9yeUJ1ZmZlciEsIHNwaWtlc1B0ciAvIDQsIGNvdW50KVxuICAgICAgc3Bpa2VzVmlldy5zZXQoc3Bpa2VzKVxuICAgICAgXG4gICAgICAvLyBDYWxsIFdBU00gZnVuY3Rpb25cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICBjb25zdCBzcGlrZVJhdGUgPSB0aGlzLm1vZHVsZS5wcm9jZXNzX3NwaWtlX3RyYWluKGNvdW50LCBzcGlrZXNQdHIsIGNvdW50LCB3aW5kb3dTaXplKVxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlLmV4ZWN1dGlvblRpbWUgPSBlbmRUaW1lIC0gc3RhcnRUaW1lXG4gICAgICBcbiAgICAgIHJldHVybiBzcGlrZVJhdGVcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5mcmVlTWVtb3J5KHNwaWtlc1B0cilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIG1lc2ggZWZmaWNpZW5jeSB1c2luZyBXQVNNXG4gICAqL1xuICBjYWxjdWxhdGVNZXNoRWZmaWNpZW5jeShuZXVyb25zOiBGbG9hdDMyQXJyYXksIHN5bmFwc2VzOiBGbG9hdDMyQXJyYXkpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkIHx8ICF0aGlzLm1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXQVNNIG1vZHVsZSBub3QgaW5pdGlhbGl6ZWQnKVxuICAgIH1cblxuICAgIGNvbnN0IG5ldXJvbkNvdW50ID0gbmV1cm9ucy5sZW5ndGhcbiAgICBjb25zdCBzeW5hcHNlQ291bnQgPSBzeW5hcHNlcy5sZW5ndGhcbiAgICBjb25zdCBuZXVyb25zUHRyID0gdGhpcy5hbGxvY2F0ZU1lbW9yeShuZXVyb25Db3VudCAqIDQpXG4gICAgY29uc3Qgc3luYXBzZXNQdHIgPSB0aGlzLmFsbG9jYXRlTWVtb3J5KHN5bmFwc2VDb3VudCAqIDQpXG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIENvcHkgZGF0YSB0byBXQVNNIG1lbW9yeVxuICAgICAgY29uc3QgbmV1cm9uc1ZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMubWVtb3J5QnVmZmVyISwgbmV1cm9uc1B0ciAvIDQsIG5ldXJvbkNvdW50KVxuICAgICAgY29uc3Qgc3luYXBzZXNWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLm1lbW9yeUJ1ZmZlciEsIHN5bmFwc2VzUHRyIC8gNCwgc3luYXBzZUNvdW50KVxuICAgICAgXG4gICAgICBuZXVyb25zVmlldy5zZXQobmV1cm9ucylcbiAgICAgIHN5bmFwc2VzVmlldy5zZXQoc3luYXBzZXMpXG4gICAgICBcbiAgICAgIC8vIENhbGwgV0FTTSBmdW5jdGlvblxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgIGNvbnN0IGVmZmljaWVuY3kgPSB0aGlzLm1vZHVsZS5jYWxjdWxhdGVfbWVzaF9lZmZpY2llbmN5KG5ldXJvbkNvdW50LCBuZXVyb25zUHRyLCBzeW5hcHNlQ291bnQsIHN5bmFwc2VzUHRyKVxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlLmV4ZWN1dGlvblRpbWUgPSBlbmRUaW1lIC0gc3RhcnRUaW1lXG4gICAgICBcbiAgICAgIHJldHVybiBlZmZpY2llbmN5XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuZnJlZU1lbW9yeShuZXVyb25zUHRyKVxuICAgICAgdGhpcy5mcmVlTWVtb3J5KHN5bmFwc2VzUHRyKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gICAqL1xuICBnZXRQZXJmb3JtYW5jZU1ldHJpY3MoKTogV2FzbVBlcmZvcm1hbmNlTWV0cmljcyB7XG4gICAgaWYgKHRoaXMubW9kdWxlKSB7XG4gICAgICB0aGlzLnBlcmZvcm1hbmNlLm1lbW9yeVVzYWdlID0gdGhpcy5tb2R1bGUuZ2V0X21lbW9yeV91c2FnZSgpXG4gICAgfVxuICAgIHJldHVybiB7IC4uLnRoaXMucGVyZm9ybWFuY2UgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIFdBU00gbW9kdWxlIGlzIGluaXRpYWxpemVkXG4gICAqL1xuICBpc1dhc21Jbml0aWFsaXplZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0luaXRpYWxpemVkXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgU0lNRCBpcyBzdXBwb3J0ZWRcbiAgICovXG4gIGlzU0lNRFN1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wZXJmb3JtYW5jZS5zaW1kQWNjZWxlcmF0aW9uXG4gIH1cblxuICAvKipcbiAgICogQWxsb2NhdGUgbWVtb3J5IGluIFdBU00gbW9kdWxlIChzaW1wbGlmaWVkIHNpbXVsYXRpb24pXG4gICAqL1xuICBwcml2YXRlIGFsbG9jYXRlTWVtb3J5KHNpemU6IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIHVzZSBhIHByb3BlciBtZW1vcnkgYWxsb2NhdG9yXG4gICAgLy8gRm9yIHNpbXVsYXRpb24sIHdlJ2xsIHJldHVybiBhIHBzZXVkby1wb2ludGVyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApXG4gIH1cblxuICAvKipcbiAgICogRnJlZSBtZW1vcnkgaW4gV0FTTSBtb2R1bGUgKHNpbXBsaWZpZWQgc2ltdWxhdGlvbilcbiAgICovXG4gIHByaXZhdGUgZnJlZU1lbW9yeShwdHI6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBmcmVlIHRoZSBtZW1vcnlcbiAgICAvLyBGb3Igc2ltdWxhdGlvbiwgd2UnbGwganVzdCBsb2cgaXRcbiAgICAvLyBjb25zb2xlLmxvZygnTWVtb3J5IGZyZWVkIGF0OicsIHB0cilcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbnVwIFdBU00gbW9kdWxlXG4gICAqL1xuICBjbGVhbnVwKCk6IHZvaWQge1xuICAgIHRoaXMubW9kdWxlID0gbnVsbFxuICAgIHRoaXMubWVtb3J5QnVmZmVyID0gbnVsbFxuICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlXG4gICAgdGhpcy5wZXJmb3JtYW5jZSA9IHtcbiAgICAgIGV4ZWN1dGlvblRpbWU6IDAsXG4gICAgICBtZW1vcnlVc2FnZTogMCxcbiAgICAgIHNpbWRBY2NlbGVyYXRpb246IGZhbHNlLFxuICAgICAgdGhyb3VnaHB1dDogMCxcbiAgICAgIGVmZmljaWVuY3k6IDBcbiAgICB9XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUFBO0FBQUEsU0FBQUEsZUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtJQUFBO0lBQUFXLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsY0FBQTtNQUFBQyxJQUFBO01BQUFDLFFBQUE7TUFBQUMsS0FBQTtNQUFBQyxPQUFBO01BQUFDLGNBQUE7TUFBQUMsT0FBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQTVCLElBQUE7RUFBQTtFQUFBLElBQUE2QixRQUFBLEdBQUE1QixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQTBCLFFBQUEsQ0FBQTlCLElBQUEsS0FBQThCLFFBQUEsQ0FBQTlCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUE2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