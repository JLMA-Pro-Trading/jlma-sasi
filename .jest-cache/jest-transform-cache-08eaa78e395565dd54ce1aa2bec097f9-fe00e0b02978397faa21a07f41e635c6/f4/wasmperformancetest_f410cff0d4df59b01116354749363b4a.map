{"version":3,"names":["describe","test","expect","beforeAll","afterAll","beforeEach","afterEach","require","wasmModule","performanceCollector","benchmarkSuite","init","jest","fn","process","benchmark","profile","memory","WebAssembly","Memory","initial","start","stop","measure","report","metrics","Map","run","compare","analyze","optimize","clearAllMocks","neuralBenchmark","setup","cleanup","results","benchmarkConfig","iterations","inputSize","hiddenLayers","outputSize","batchSize","startTime","performance","now","i","input","Float32Array","fill","Math","random","endTime","duration","toHaveBeenCalledWith","toBeLessThan","memoryProfiler","memoryTest","initialMemory","maxMemory","memoryUsage","data","currentMemory","push","max","simdBenchmark","vectorAdd","vectorMultiply","matrixMultiply","convolution","simdConfig","vectorSize","matrixSize","vector1","vector2","throughput","toHaveBeenCalledTimes","toBeGreaterThan","performanceComparator","simdImplementation","scalarImplementation","comparisonData","dataSize","operations","testData","simdStartTime","simdEndTime","simdDuration","scalarStartTime","scalarEndTime","scalarDuration","speedup","rustWasmBenchmark","compile","instantiate","execute","rustCode","compilationStart","compilationEnd","compilationTime","instantiationStart","instantiationEnd","instantiationTime","crossLanguageBenchmark","jsToWasm","wasmToJs","callOverheadTest","callTypes","jsToWasmStart","jsToWasmEnd","jsToWasmOverhead","wasmToJsStart","wasmToJsEnd","wasmToJsOverhead","memoryBenchmark","allocate","deallocate","reallocate","fragment","memoryPatterns","size","count","pattern","allocationStart","allocationEnd","allocationTime","allocationRate","gcBenchmark","trigger","gcTest","memoryPressure","collectionThreshold","gcMetrics","gcStart","gcEnd","gcDuration","iteration","memoryBefore","memoryAfter","averageGcTime","reduce","sum","m","length","concurrencyBenchmark","spawn","synchronize","aggregate","concurrencyTest","threadCount","tasksPerThread","taskComplexity","threads","thread","id","complete","concurrencyStart","promises","map","Promise","all","concurrencyEnd","concurrencyDuration","synchronizationBenchmark","lock","unlock","wait","signal","syncTest","contention","lockType","syncMetrics","syncStart","resolve","setTimeout","syncEnd","syncDuration","averageSyncTime","time","maxSyncTime","pipelineBenchmark","initialize","preprocess","postprocess","finalize","pipelineTest","stages","pipelineMetrics","pipelineStart","pipelineEnd","pipelineDuration","averageThroughput","stressTest","maxConcurrency","requestRate","memoryLimit","stressMetrics","requests","errors","timeouts","avgLatency","stressStart","stressEnd","requestStart","error","requestEnd","requestDuration","errorRate","requestsPerSecond"],"sources":["wasm-performance.test.js"],"sourcesContent":["// Performance tests for WASM modules in SASI/Synaptic integration\nconst { describe, test, expect, beforeAll, afterAll, beforeEach, afterEach } = require('@jest/globals');\n\ndescribe('WASM Performance Tests', () => {\n  let wasmModule;\n  let performanceCollector;\n  let benchmarkSuite;\n  \n  beforeAll(async () => {\n    // Initialize WASM performance testing environment\n    wasmModule = {\n      init: jest.fn(),\n      process: jest.fn(),\n      benchmark: jest.fn(),\n      profile: jest.fn(),\n      memory: new WebAssembly.Memory({ initial: 1 })\n    };\n    \n    performanceCollector = {\n      start: jest.fn(),\n      stop: jest.fn(),\n      measure: jest.fn(),\n      report: jest.fn(),\n      metrics: new Map()\n    };\n    \n    benchmarkSuite = {\n      run: jest.fn(),\n      compare: jest.fn(),\n      analyze: jest.fn(),\n      optimize: jest.fn()\n    };\n    \n    await wasmModule.init();\n  });\n  \n  afterAll(async () => {\n    // Cleanup WASM resources\n    if (wasmModule.memory) {\n      wasmModule.memory = null;\n    }\n  });\n  \n  beforeEach(() => {\n    performanceCollector.start();\n  });\n  \n  afterEach(() => {\n    performanceCollector.stop();\n    jest.clearAllMocks();\n  });\n  \n  describe('Neural Network WASM Performance', () => {\n    test('should benchmark neural network inference performance', async () => {\n      const neuralBenchmark = {\n        setup: jest.fn(),\n        run: jest.fn(),\n        cleanup: jest.fn(),\n        results: jest.fn()\n      };\n      \n      const benchmarkConfig = {\n        iterations: 1000,\n        inputSize: 784,\n        hiddenLayers: [256, 128, 64],\n        outputSize: 10,\n        batchSize: 32\n      };\n      \n      await neuralBenchmark.setup(benchmarkConfig);\n      \n      const startTime = performance.now();\n      \n      // Simulate neural network inference\n      for (let i = 0; i < benchmarkConfig.iterations; i++) {\n        const input = new Float32Array(benchmarkConfig.inputSize);\n        input.fill(Math.random());\n        \n        await wasmModule.process(input);\n      }\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      await neuralBenchmark.run(benchmarkConfig);\n      \n      expect(neuralBenchmark.setup).toHaveBeenCalledWith(benchmarkConfig);\n      expect(neuralBenchmark.run).toHaveBeenCalledWith(benchmarkConfig);\n      expect(duration).toBeLessThan(10000); // Should complete within 10 seconds\n    });\n    \n    test('should measure memory usage efficiency', async () => {\n      const memoryProfiler = {\n        profile: jest.fn(),\n        analyze: jest.fn(),\n        optimize: jest.fn(),\n        report: jest.fn()\n      };\n      \n      const memoryTest = {\n        initialMemory: 1024 * 1024, // 1MB\n        maxMemory: 10 * 1024 * 1024, // 10MB\n        iterations: 100\n      };\n      \n      const memoryUsage = [];\n      \n      for (let i = 0; i < memoryTest.iterations; i++) {\n        const data = new Float32Array(1000);\n        data.fill(Math.random());\n        \n        await wasmModule.process(data);\n        \n        // Simulate memory usage measurement\n        const currentMemory = memoryTest.initialMemory + (i * 1024);\n        memoryUsage.push(currentMemory);\n      }\n      \n      await memoryProfiler.profile(memoryUsage);\n      \n      expect(memoryProfiler.profile).toHaveBeenCalledWith(memoryUsage);\n      expect(Math.max(...memoryUsage)).toBeLessThan(memoryTest.maxMemory);\n    });\n  });\n  \n  describe('SIMD Performance Optimization', () => {\n    test('should benchmark SIMD operations', async () => {\n      const simdBenchmark = {\n        vectorAdd: jest.fn(),\n        vectorMultiply: jest.fn(),\n        matrixMultiply: jest.fn(),\n        convolution: jest.fn()\n      };\n      \n      const simdConfig = {\n        vectorSize: 1024,\n        matrixSize: 128,\n        iterations: 10000\n      };\n      \n      const vector1 = new Float32Array(simdConfig.vectorSize);\n      const vector2 = new Float32Array(simdConfig.vectorSize);\n      \n      vector1.fill(Math.random());\n      vector2.fill(Math.random());\n      \n      const startTime = performance.now();\n      \n      for (let i = 0; i < simdConfig.iterations; i++) {\n        await simdBenchmark.vectorAdd(vector1, vector2);\n      }\n      \n      const endTime = performance.now();\n      const throughput = simdConfig.iterations / (endTime - startTime) * 1000;\n      \n      expect(simdBenchmark.vectorAdd).toHaveBeenCalledTimes(simdConfig.iterations);\n      expect(throughput).toBeGreaterThan(1000); // Should achieve > 1000 ops/sec\n    });\n    \n    test('should compare SIMD vs scalar performance', async () => {\n      const performanceComparator = {\n        simdImplementation: jest.fn(),\n        scalarImplementation: jest.fn(),\n        compare: jest.fn(),\n        report: jest.fn()\n      };\n      \n      const comparisonData = {\n        dataSize: 10000,\n        iterations: 1000,\n        operations: ['add', 'multiply', 'divide']\n      };\n      \n      const testData = new Float32Array(comparisonData.dataSize);\n      testData.fill(Math.random());\n      \n      // SIMD performance\n      const simdStartTime = performance.now();\n      await performanceComparator.simdImplementation(testData);\n      const simdEndTime = performance.now();\n      const simdDuration = simdEndTime - simdStartTime;\n      \n      // Scalar performance\n      const scalarStartTime = performance.now();\n      await performanceComparator.scalarImplementation(testData);\n      const scalarEndTime = performance.now();\n      const scalarDuration = scalarEndTime - scalarStartTime;\n      \n      const speedup = scalarDuration / simdDuration;\n      \n      expect(performanceComparator.simdImplementation).toHaveBeenCalledWith(testData);\n      expect(performanceComparator.scalarImplementation).toHaveBeenCalledWith(testData);\n      expect(speedup).toBeGreaterThan(1.5); // SIMD should be at least 1.5x faster\n    });\n  });\n  \n  describe('Rust-WASM Integration Performance', () => {\n    test('should benchmark Rust-WASM compilation performance', async () => {\n      const rustWasmBenchmark = {\n        compile: jest.fn(),\n        instantiate: jest.fn(),\n        execute: jest.fn(),\n        measure: jest.fn()\n      };\n      \n      const rustCode = `\n        #[no_mangle]\n        pub extern \"C\" fn add(a: f32, b: f32) -> f32 {\n          a + b\n        }\n      `;\n      \n      const compilationStart = performance.now();\n      await rustWasmBenchmark.compile(rustCode);\n      const compilationEnd = performance.now();\n      const compilationTime = compilationEnd - compilationStart;\n      \n      const instantiationStart = performance.now();\n      await rustWasmBenchmark.instantiate();\n      const instantiationEnd = performance.now();\n      const instantiationTime = instantiationEnd - instantiationStart;\n      \n      expect(rustWasmBenchmark.compile).toHaveBeenCalledWith(rustCode);\n      expect(rustWasmBenchmark.instantiate).toHaveBeenCalledTimes(1);\n      expect(compilationTime).toBeLessThan(5000); // Should compile within 5 seconds\n      expect(instantiationTime).toBeLessThan(1000); // Should instantiate within 1 second\n    });\n    \n    test('should measure cross-language call overhead', async () => {\n      const crossLanguageBenchmark = {\n        jsToWasm: jest.fn(),\n        wasmToJs: jest.fn(),\n        measure: jest.fn(),\n        analyze: jest.fn()\n      };\n      \n      const callOverheadTest = {\n        iterations: 10000,\n        dataSize: 1000,\n        callTypes: ['simple', 'complex', 'memory_transfer']\n      };\n      \n      const testData = new Float32Array(callOverheadTest.dataSize);\n      testData.fill(Math.random());\n      \n      // Measure JS to WASM calls\n      const jsToWasmStart = performance.now();\n      for (let i = 0; i < callOverheadTest.iterations; i++) {\n        await crossLanguageBenchmark.jsToWasm(testData);\n      }\n      const jsToWasmEnd = performance.now();\n      const jsToWasmOverhead = (jsToWasmEnd - jsToWasmStart) / callOverheadTest.iterations;\n      \n      // Measure WASM to JS calls\n      const wasmToJsStart = performance.now();\n      for (let i = 0; i < callOverheadTest.iterations; i++) {\n        await crossLanguageBenchmark.wasmToJs(testData);\n      }\n      const wasmToJsEnd = performance.now();\n      const wasmToJsOverhead = (wasmToJsEnd - wasmToJsStart) / callOverheadTest.iterations;\n      \n      expect(crossLanguageBenchmark.jsToWasm).toHaveBeenCalledTimes(callOverheadTest.iterations);\n      expect(crossLanguageBenchmark.wasmToJs).toHaveBeenCalledTimes(callOverheadTest.iterations);\n      expect(jsToWasmOverhead).toBeLessThan(0.1); // Should be < 0.1ms per call\n      expect(wasmToJsOverhead).toBeLessThan(0.1); // Should be < 0.1ms per call\n    });\n  });\n  \n  describe('Memory Management Performance', () => {\n    test('should benchmark memory allocation patterns', async () => {\n      const memoryBenchmark = {\n        allocate: jest.fn(),\n        deallocate: jest.fn(),\n        reallocate: jest.fn(),\n        fragment: jest.fn()\n      };\n      \n      const memoryPatterns = [\n        { size: 1024, count: 1000, pattern: 'sequential' },\n        { size: 2048, count: 500, pattern: 'random' },\n        { size: 4096, count: 250, pattern: 'mixed' }\n      ];\n      \n      for (const pattern of memoryPatterns) {\n        const allocationStart = performance.now();\n        \n        for (let i = 0; i < pattern.count; i++) {\n          await memoryBenchmark.allocate(pattern.size);\n        }\n        \n        const allocationEnd = performance.now();\n        const allocationTime = allocationEnd - allocationStart;\n        const allocationRate = pattern.count / allocationTime * 1000;\n        \n        expect(memoryBenchmark.allocate).toHaveBeenCalledTimes(pattern.count);\n        expect(allocationRate).toBeGreaterThan(100); // Should achieve > 100 allocations/sec\n      }\n    });\n    \n    test('should measure garbage collection impact', async () => {\n      const gcBenchmark = {\n        trigger: jest.fn(),\n        measure: jest.fn(),\n        analyze: jest.fn(),\n        optimize: jest.fn()\n      };\n      \n      const gcTest = {\n        iterations: 100,\n        memoryPressure: 10 * 1024 * 1024, // 10MB\n        collectionThreshold: 8 * 1024 * 1024 // 8MB\n      };\n      \n      const gcMetrics = [];\n      \n      for (let i = 0; i < gcTest.iterations; i++) {\n        const gcStart = performance.now();\n        \n        // Simulate memory pressure\n        const data = new Float32Array(gcTest.memoryPressure / 4);\n        data.fill(Math.random());\n        \n        await gcBenchmark.trigger();\n        \n        const gcEnd = performance.now();\n        const gcDuration = gcEnd - gcStart;\n        \n        gcMetrics.push({\n          iteration: i,\n          duration: gcDuration,\n          memoryBefore: gcTest.memoryPressure,\n          memoryAfter: gcTest.memoryPressure * 0.5 // Simulate cleanup\n        });\n      }\n      \n      await gcBenchmark.analyze(gcMetrics);\n      \n      expect(gcBenchmark.trigger).toHaveBeenCalledTimes(gcTest.iterations);\n      expect(gcBenchmark.analyze).toHaveBeenCalledWith(gcMetrics);\n      \n      const averageGcTime = gcMetrics.reduce((sum, m) => sum + m.duration, 0) / gcMetrics.length;\n      expect(averageGcTime).toBeLessThan(50); // Should average < 50ms per GC\n    });\n  });\n  \n  describe('Concurrency Performance', () => {\n    test('should benchmark multi-threaded WASM performance', async () => {\n      const concurrencyBenchmark = {\n        spawn: jest.fn(),\n        execute: jest.fn(),\n        synchronize: jest.fn(),\n        aggregate: jest.fn()\n      };\n      \n      const concurrencyTest = {\n        threadCount: 4,\n        tasksPerThread: 250,\n        taskComplexity: 'medium'\n      };\n      \n      const threads = [];\n      \n      for (let i = 0; i < concurrencyTest.threadCount; i++) {\n        const thread = {\n          id: i,\n          execute: jest.fn(),\n          complete: jest.fn()\n        };\n        \n        threads.push(thread);\n      }\n      \n      const concurrencyStart = performance.now();\n      \n      // Simulate parallel execution\n      const promises = threads.map(thread => \n        concurrencyBenchmark.execute(thread, concurrencyTest.tasksPerThread)\n      );\n      \n      await Promise.all(promises);\n      \n      const concurrencyEnd = performance.now();\n      const concurrencyDuration = concurrencyEnd - concurrencyStart;\n      \n      expect(concurrencyBenchmark.execute).toHaveBeenCalledTimes(concurrencyTest.threadCount);\n      expect(concurrencyDuration).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n    \n    test('should measure synchronization overhead', async () => {\n      const synchronizationBenchmark = {\n        lock: jest.fn(),\n        unlock: jest.fn(),\n        wait: jest.fn(),\n        signal: jest.fn()\n      };\n      \n      const syncTest = {\n        operations: 1000,\n        contention: 4,\n        lockType: 'mutex'\n      };\n      \n      const syncMetrics = [];\n      \n      for (let i = 0; i < syncTest.operations; i++) {\n        const syncStart = performance.now();\n        \n        await synchronizationBenchmark.lock();\n        // Simulate critical section\n        await new Promise(resolve => setTimeout(resolve, 1));\n        await synchronizationBenchmark.unlock();\n        \n        const syncEnd = performance.now();\n        const syncDuration = syncEnd - syncStart;\n        \n        syncMetrics.push(syncDuration);\n      }\n      \n      const averageSyncTime = syncMetrics.reduce((sum, time) => sum + time, 0) / syncMetrics.length;\n      const maxSyncTime = Math.max(...syncMetrics);\n      \n      expect(synchronizationBenchmark.lock).toHaveBeenCalledTimes(syncTest.operations);\n      expect(synchronizationBenchmark.unlock).toHaveBeenCalledTimes(syncTest.operations);\n      expect(averageSyncTime).toBeLessThan(5); // Should average < 5ms per operation\n      expect(maxSyncTime).toBeLessThan(20); // Should max < 20ms per operation\n    });\n  });\n  \n  describe('Real-world Performance Scenarios', () => {\n    test('should benchmark complete neural mesh processing pipeline', async () => {\n      const pipelineBenchmark = {\n        initialize: jest.fn(),\n        preprocess: jest.fn(),\n        process: jest.fn(),\n        postprocess: jest.fn(),\n        finalize: jest.fn()\n      };\n      \n      const pipelineTest = {\n        inputSize: 10000,\n        batchSize: 100,\n        stages: ['preprocess', 'neural_inference', 'postprocess'],\n        iterations: 10\n      };\n      \n      const pipelineMetrics = [];\n      \n      for (let i = 0; i < pipelineTest.iterations; i++) {\n        const input = new Float32Array(pipelineTest.inputSize);\n        input.fill(Math.random());\n        \n        const pipelineStart = performance.now();\n        \n        await pipelineBenchmark.initialize();\n        await pipelineBenchmark.preprocess(input);\n        await pipelineBenchmark.process(input);\n        await pipelineBenchmark.postprocess(input);\n        await pipelineBenchmark.finalize();\n        \n        const pipelineEnd = performance.now();\n        const pipelineDuration = pipelineEnd - pipelineStart;\n        \n        pipelineMetrics.push({\n          iteration: i,\n          duration: pipelineDuration,\n          throughput: pipelineTest.inputSize / pipelineDuration * 1000\n        });\n      }\n      \n      const averageThroughput = pipelineMetrics.reduce((sum, m) => sum + m.throughput, 0) / pipelineMetrics.length;\n      \n      expect(pipelineBenchmark.initialize).toHaveBeenCalledTimes(pipelineTest.iterations);\n      expect(pipelineBenchmark.process).toHaveBeenCalledTimes(pipelineTest.iterations);\n      expect(averageThroughput).toBeGreaterThan(1000); // Should achieve > 1000 items/sec\n    });\n    \n    test('should stress test under high load conditions', async () => {\n      const stressTest = {\n        duration: 30000, // 30 seconds\n        maxConcurrency: 10,\n        requestRate: 100, // requests per second\n        memoryLimit: 100 * 1024 * 1024 // 100MB\n      };\n      \n      const stressMetrics = {\n        requests: 0,\n        errors: 0,\n        timeouts: 0,\n        maxMemory: 0,\n        avgLatency: 0\n      };\n      \n      const stressStart = performance.now();\n      const stressEnd = stressStart + stressTest.duration;\n      \n      while (performance.now() < stressEnd) {\n        const requestStart = performance.now();\n        \n        try {\n          await wasmModule.process(new Float32Array(1000));\n          stressMetrics.requests++;\n        } catch (error) {\n          stressMetrics.errors++;\n        }\n        \n        const requestEnd = performance.now();\n        const requestDuration = requestEnd - requestStart;\n        \n        stressMetrics.avgLatency = (stressMetrics.avgLatency * (stressMetrics.requests - 1) + requestDuration) / stressMetrics.requests;\n        \n        // Simulate request rate\n        await new Promise(resolve => setTimeout(resolve, 1000 / stressTest.requestRate));\n      }\n      \n      const errorRate = stressMetrics.errors / stressMetrics.requests;\n      const requestsPerSecond = stressMetrics.requests / (stressTest.duration / 1000);\n      \n      expect(errorRate).toBeLessThan(0.01); // Should have < 1% error rate\n      expect(requestsPerSecond).toBeGreaterThan(stressTest.requestRate * 0.8); // Should achieve > 80% target rate\n      expect(stressMetrics.avgLatency).toBeLessThan(100); // Should average < 100ms latency\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}