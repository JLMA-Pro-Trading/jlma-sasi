b7c279466e49d333bd94f55d7b453186
/* istanbul ignore next */
function cov_282gvqjcxl() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/NeuralWeightStorage.ts";
  var hash = "aa48f4eb7aa93e700aa1210977dd7ad2bbe23c58";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/NeuralWeightStorage.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 21,
          column: 11
        }
      },
      "1": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 27,
          column: 11
        }
      },
      "2": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "3": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "4": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "5": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 43
        }
      },
      "6": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "7": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "8": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 87
        }
      },
      "9": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "10": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 81
        }
      },
      "11": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "12": {
        start: {
          line: 56,
          column: 34
        },
        end: {
          line: 56,
          column: 35
        }
      },
      "13": {
        start: {
          line: 57,
          column: 39
        },
        end: {
          line: 57,
          column: 108
        }
      },
      "14": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 81
        }
      },
      "15": {
        start: {
          line: 62,
          column: 29
        },
        end: {
          line: 62,
          column: 58
        }
      },
      "16": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "17": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 101
        }
      },
      "18": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 99
        }
      },
      "19": {
        start: {
          line: 69,
          column: 29
        },
        end: {
          line: 69,
          column: 58
        }
      },
      "20": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 119
        }
      },
      "21": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 24
        }
      },
      "22": {
        start: {
          line: 79,
          column: 26
        },
        end: {
          line: 79,
          column: 43
        }
      },
      "23": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "24": {
        start: {
          line: 82,
          column: 34
        },
        end: {
          line: 82,
          column: 75
        }
      },
      "25": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "26": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 80
        }
      },
      "27": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 86,
          column: 30
        }
      },
      "28": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 87,
          column: 29
        }
      },
      "29": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "30": {
        start: {
          line: 89,
          column: 62
        },
        end: {
          line: 89,
          column: 89
        }
      },
      "31": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "32": {
        start: {
          line: 92,
          column: 45
        },
        end: {
          line: 92,
          column: 102
        }
      },
      "33": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 95,
          column: 21
        }
      },
      "34": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 119
        }
      },
      "35": {
        start: {
          line: 98,
          column: 37
        },
        end: {
          line: 98,
          column: 108
        }
      },
      "36": {
        start: {
          line: 99,
          column: 36
        },
        end: {
          line: 99,
          column: 104
        }
      },
      "37": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 43
        }
      },
      "38": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 41
        }
      },
      "39": {
        start: {
          line: 103,
          column: 29
        },
        end: {
          line: 103,
          column: 58
        }
      },
      "40": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "41": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 101
        }
      },
      "42": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 100
        }
      },
      "43": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 39
        }
      },
      "44": {
        start: {
          line: 111,
          column: 29
        },
        end: {
          line: 111,
          column: 58
        }
      },
      "45": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 119
        }
      },
      "46": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 24
        }
      },
      "47": {
        start: {
          line: 120,
          column: 26
        },
        end: {
          line: 120,
          column: 43
        }
      },
      "48": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "49": {
        start: {
          line: 123,
          column: 33
        },
        end: {
          line: 123,
          column: 60
        }
      },
      "50": {
        start: {
          line: 124,
          column: 31
        },
        end: {
          line: 124,
          column: 57
        }
      },
      "51": {
        start: {
          line: 125,
          column: 33
        },
        end: {
          line: 125,
          column: 72
        }
      },
      "52": {
        start: {
          line: 128,
          column: 34
        },
        end: {
          line: 128,
          column: 40
        }
      },
      "53": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 138,
          column: 13
        }
      },
      "54": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 59
        }
      },
      "55": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "56": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 41
        }
      },
      "57": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 49
        }
      },
      "58": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 46
        }
      },
      "59": {
        start: {
          line: 139,
          column: 35
        },
        end: {
          line: 139,
          column: 85
        }
      },
      "60": {
        start: {
          line: 140,
          column: 37
        },
        end: {
          line: 140,
          column: 66
        }
      },
      "61": {
        start: {
          line: 142,
          column: 29
        },
        end: {
          line: 142,
          column: 87
        }
      },
      "62": {
        start: {
          line: 143,
          column: 36
        },
        end: {
          line: 143,
          column: 65
        }
      },
      "63": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 173
        }
      },
      "64": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "65": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 77
        }
      },
      "66": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 24
        }
      },
      "67": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "68": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "69": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 54
        }
      },
      "70": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 42
        }
      },
      "71": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 163
        }
      },
      "72": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 76
        }
      },
      "73": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 24
        }
      },
      "74": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "75": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "76": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 54
        }
      },
      "77": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 42
        }
      },
      "78": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 163
        }
      },
      "79": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 75
        }
      },
      "80": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 24
        }
      },
      "81": {
        start: {
          line: 204,
          column: 21
        },
        end: {
          line: 204,
          column: 48
        }
      },
      "82": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 32
        }
      },
      "83": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 30
        }
      },
      "84": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 34
        }
      },
      "85": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "86": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 85
        }
      },
      "87": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 76
        }
      },
      "88": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "89": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "90": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 74
        }
      },
      "91": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 22
        }
      },
      "92": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 77
        }
      },
      "93": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 24
        }
      },
      "94": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 260,
          column: 10
        }
      },
      "95": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "96": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 54
        }
      },
      "97": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "98": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 58
        }
      },
      "99": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "100": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 57
        }
      },
      "101": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 279,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 36
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 69
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 46
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 37
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 78
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 89,
            column: 52
          },
          end: {
            line: 89,
            column: 53
          }
        },
        loc: {
          start: {
            line: 89,
            column: 62
          },
          end: {
            line: 89,
            column: 89
          }
        },
        line: 89
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 45
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 119
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 51
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 163
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 50
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 183
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 43
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 203
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 64
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 213
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 41
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 238
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 26
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 255
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 34
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 265
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "3": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 93,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        }, {
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 138,
            column: 13
          }
        }],
        line: 130
      },
      "8": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 56
          }
        }, {
          start: {
            line: 130,
            column: 60
          },
          end: {
            line: 130,
            column: 83
          }
        }],
        line: 130
      },
      "9": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: 169,
            column: 17
          },
          end: {
            line: 171,
            column: 13
          }
        }],
        line: 166
      },
      "10": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: 189,
            column: 17
          },
          end: {
            line: 191,
            column: 13
          }
        }],
        line: 186
      },
      "11": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "12": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "13": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/NeuralWeightStorage.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/NeuralWeightStorage.ts"],
      sourcesContent: ["/**\n * Neural Weight Storage Manager - Phase 2A Implementation\n * Handles neural network weight serialization, compression, and persistence\n * \n * Performance Requirements:\n * - Weight save/load: <30ms\n * - Compression ratio: >50%\n * - Data integrity: 100% with checksums\n * - Memory usage: <10MB during operations\n */\n\nimport * as crypto from 'crypto';\nimport { gzipSync, gunzipSync } from 'zlib';\nimport { performance } from 'perf_hooks';\nimport type { AgentPersistenceManager } from './AgentPersistenceManager';\n\nexport interface NeuralWeightData {\n  agentId: string;\n  layerIndex: number;\n  weights: Float32Array;\n  biases: Float32Array;\n  timestamp: number;\n  checksum?: string;\n}\n\nexport interface CompressedWeightData {\n  weightData: Buffer;\n  biasData: Buffer;\n  compressionType: 'gzip' | 'lz4' | 'none';\n  originalSize: number;\n  compressedSize: number;\n  compressionRatio: number;\n  checksum: string;\n}\n\nexport class NeuralWeightStorage {\n  private persistence: AgentPersistenceManager;\n  private compressionEnabled: boolean = true;\n  private checksumValidation: boolean = true;\n  private compressionThreshold: number = 1024; // Compress if data > 1KB\n\n  constructor(persistenceManager: AgentPersistenceManager) {\n    this.persistence = persistenceManager;\n  }\n\n  /**\n   * Save neural weights for an agent with compression and validation\n   * Performance target: <30ms\n   */\n  async saveNeuralWeights(\n    agentId: string,\n    networkLayers: number[],\n    weights: Float32Array[],\n    biases: Float32Array[]\n  ): Promise<void> {\n    const startTime = performance.now();\n\n    try {\n      if (weights.length !== biases.length) {\n        throw new Error('Weights and biases arrays must have the same length');\n      }\n\n      if (weights.length !== networkLayers.length - 1) {\n        throw new Error('Weight layers must match network architecture');\n      }\n\n      // Process each layer\n      for (let layerIndex = 0; layerIndex < weights.length; layerIndex++) {\n        const compressedData = await this.compressLayerData(\n          weights[layerIndex],\n          biases[layerIndex]\n        );\n\n        // Save to database via persistence manager\n        // This would call a method we'll add to AgentPersistenceManager\n        await this.saveLayerWeights(agentId, layerIndex, compressedData);\n      }\n\n      const saveTime = performance.now() - startTime;\n      \n      if (saveTime > 30) {\n        console.warn(`\u26A0\uFE0F Neural weight save time exceeded target: ${saveTime.toFixed(2)}ms`);\n      }\n\n      console.log(`\uD83D\uDCBE Saved neural weights for agent ${agentId} (${saveTime.toFixed(2)}ms)`);\n\n    } catch (error) {\n      const saveTime = performance.now() - startTime;\n      console.error(`\u274C Failed to save neural weights for ${agentId} (${saveTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Load neural weights for an agent with decompression and validation\n   * Performance target: <30ms\n   */\n  async loadNeuralWeights(agentId: string): Promise<{ weights: Float32Array[]; biases: Float32Array[] }> {\n    const startTime = performance.now();\n\n    try {\n      // Load weight records from database\n      const weightRecords = await this.getAgentWeightRecords(agentId);\n      \n      if (weightRecords.length === 0) {\n        throw new Error(`No neural weights found for agent ${agentId}`);\n      }\n\n      const weights: Float32Array[] = [];\n      const biases: Float32Array[] = [];\n\n      // Process each layer in order\n      for (const record of weightRecords.sort((a, b) => a.layerIndex - b.layerIndex)) {\n        // Validate checksum if enabled\n        if (this.checksumValidation) {\n          const expectedChecksum = this.generateChecksum(record.weightData, record.biasData);\n          if (expectedChecksum !== record.checksum) {\n            throw new Error(`Weight corruption detected for agent ${agentId}, layer ${record.layerIndex}`);\n          }\n        }\n\n        // Decompress and deserialize\n        const layerWeights = await this.decompressWeights(record.weightData, record.compressionType);\n        const layerBiases = await this.decompressBiases(record.biasData, record.compressionType);\n\n        weights.push(layerWeights);\n        biases.push(layerBiases);\n      }\n\n      const loadTime = performance.now() - startTime;\n      \n      if (loadTime > 30) {\n        console.warn(`\u26A0\uFE0F Neural weight load time exceeded target: ${loadTime.toFixed(2)}ms`);\n      }\n\n      console.log(`\uD83D\uDCE5 Loaded neural weights for agent ${agentId} (${loadTime.toFixed(2)}ms)`);\n\n      return { weights, biases };\n\n    } catch (error) {\n      const loadTime = performance.now() - startTime;\n      console.error(`\u274C Failed to load neural weights for ${agentId} (${loadTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Compress weight and bias data for a single layer\n   */\n  private async compressLayerData(\n    weights: Float32Array,\n    biases: Float32Array\n  ): Promise<CompressedWeightData> {\n    const startTime = performance.now();\n\n    try {\n      // Convert to buffers\n      const weightBuffer = Buffer.from(weights.buffer);\n      const biasBuffer = Buffer.from(biases.buffer);\n\n      const originalSize = weightBuffer.length + biasBuffer.length;\n      \n      let compressedWeights: Buffer;\n      let compressedBiases: Buffer;\n      let compressionType: 'gzip' | 'none' = 'none';\n\n      // Apply compression if data is large enough\n      if (originalSize > this.compressionThreshold && this.compressionEnabled) {\n        compressedWeights = gzipSync(weightBuffer);\n        compressedBiases = gzipSync(biasBuffer);\n        compressionType = 'gzip';\n      } else {\n        compressedWeights = weightBuffer;\n        compressedBiases = biasBuffer;\n      }\n\n      const compressedSize = compressedWeights.length + compressedBiases.length;\n      const compressionRatio = compressedSize / originalSize;\n\n      // Generate checksum for integrity validation\n      const checksum = this.generateChecksum(compressedWeights, compressedBiases);\n\n      const compressionTime = performance.now() - startTime;\n      \n      console.log(`\uD83D\uDDDC\uFE0F Compressed layer data: ${originalSize} \u2192 ${compressedSize} bytes (${(compressionRatio * 100).toFixed(1)}%) in ${compressionTime.toFixed(2)}ms`);\n\n      return {\n        weightData: compressedWeights,\n        biasData: compressedBiases,\n        compressionType,\n        originalSize,\n        compressedSize,\n        compressionRatio,\n        checksum\n      };\n\n    } catch (error) {\n      console.error('\u274C Failed to compress layer data:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Decompress weight data\n   */\n  private async decompressWeights(data: Buffer, compressionType: string): Promise<Float32Array> {\n    try {\n      let decompressedBuffer: Buffer;\n\n      if (compressionType === 'gzip') {\n        decompressedBuffer = gunzipSync(data);\n      } else {\n        decompressedBuffer = data;\n      }\n\n      // Convert back to Float32Array\n      return new Float32Array(decompressedBuffer.buffer.slice(\n        decompressedBuffer.byteOffset,\n        decompressedBuffer.byteOffset + decompressedBuffer.byteLength\n      ));\n\n    } catch (error) {\n      console.error('\u274C Failed to decompress weights:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Decompress bias data\n   */\n  private async decompressBiases(data: Buffer, compressionType: string): Promise<Float32Array> {\n    try {\n      let decompressedBuffer: Buffer;\n\n      if (compressionType === 'gzip') {\n        decompressedBuffer = gunzipSync(data);\n      } else {\n        decompressedBuffer = data;\n      }\n\n      // Convert back to Float32Array\n      return new Float32Array(decompressedBuffer.buffer.slice(\n        decompressedBuffer.byteOffset,\n        decompressedBuffer.byteOffset + decompressedBuffer.byteLength\n      ));\n\n    } catch (error) {\n      console.error('\u274C Failed to decompress biases:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate checksum for data integrity validation\n   */\n  private generateChecksum(weightData: Buffer, biasData: Buffer): string {\n    const hash = crypto.createHash('sha256');\n    hash.update(weightData);\n    hash.update(biasData);\n    return hash.digest('hex');\n  }\n\n  /**\n   * Save compressed layer weights to database\n   * This method will call the persistence manager\n   */\n  private async saveLayerWeights(\n    agentId: string,\n    layerIndex: number,\n    compressedData: CompressedWeightData\n  ): Promise<void> {\n    // This would call a method we need to add to AgentPersistenceManager\n    // For now, we'll implement a placeholder that shows the interface\n    \n    try {\n      // The AgentPersistenceManager would need a method like this:\n      // await this.persistence.saveNeuralWeightRecord({\n      //   agentId,\n      //   layerIndex,\n      //   weightData: compressedData.weightData,\n      //   biasData: compressedData.biasData,\n      //   updatedAt: Date.now(),\n      //   checksum: compressedData.checksum,\n      //   compressionType: compressedData.compressionType\n      // });\n\n      console.log(`\uD83D\uDCBE Saved layer ${layerIndex} weights for agent ${agentId}`);\n      \n    } catch (error) {\n      console.error(`\u274C Failed to save layer weights:`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get agent weight records from database\n   * This method will call the persistence manager\n   */\n  private async getAgentWeightRecords(agentId: string): Promise<any[]> {\n    // This would call a method we need to add to AgentPersistenceManager\n    // For now, we'll return an empty array to show the interface\n    \n    try {\n      // The AgentPersistenceManager would need a method like this:\n      // return await this.persistence.getNeuralWeightRecords(agentId);\n      \n      console.log(`\uD83D\uDCE5 Loading weight records for agent ${agentId}`);\n      return []; // Placeholder\n      \n    } catch (error) {\n      console.error(`\u274C Failed to load weight records:`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get compression statistics\n   */\n  getCompressionStats(): {\n    compressionEnabled: boolean;\n    checksumValidation: boolean;\n    compressionThreshold: number;\n  } {\n    return {\n      compressionEnabled: this.compressionEnabled,\n      checksumValidation: this.checksumValidation,\n      compressionThreshold: this.compressionThreshold\n    };\n  }\n\n  /**\n   * Configure compression settings\n   */\n  configureCompression(options: {\n    enabled?: boolean;\n    threshold?: number;\n    validation?: boolean;\n  }): void {\n    if (options.enabled !== undefined) {\n      this.compressionEnabled = options.enabled;\n    }\n    if (options.threshold !== undefined) {\n      this.compressionThreshold = options.threshold;\n    }\n    if (options.validation !== undefined) {\n      this.checksumValidation = options.validation;\n    }\n\n    console.log('\u2699\uFE0F Neural weight storage configuration updated:', {\n      compressionEnabled: this.compressionEnabled,\n      compressionThreshold: this.compressionThreshold,\n      checksumValidation: this.checksumValidation\n    });\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "aa48f4eb7aa93e700aa1210977dd7ad2bbe23c58"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_282gvqjcxl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_282gvqjcxl();
/**
 * Neural Weight Storage Manager - Phase 2A Implementation
 * Handles neural network weight serialization, compression, and persistence
 *
 * Performance Requirements:
 * - Weight save/load: <30ms
 * - Compression ratio: >50%
 * - Data integrity: 100% with checksums
 * - Memory usage: <10MB during operations
 */
import * as crypto from 'crypto';
import { gzipSync, gunzipSync } from 'zlib';
import { performance } from 'perf_hooks';
export class NeuralWeightStorage {
  constructor(persistenceManager) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[0]++;
    cov_282gvqjcxl().s[0]++;
    Object.defineProperty(this, "persistence", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_282gvqjcxl().s[1]++;
    Object.defineProperty(this, "compressionEnabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    /* istanbul ignore next */
    cov_282gvqjcxl().s[2]++;
    Object.defineProperty(this, "checksumValidation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    /* istanbul ignore next */
    cov_282gvqjcxl().s[3]++;
    Object.defineProperty(this, "compressionThreshold", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1024
    }); // Compress if data > 1KB
    /* istanbul ignore next */
    cov_282gvqjcxl().s[4]++;
    this.persistence = persistenceManager;
  }
  /**
   * Save neural weights for an agent with compression and validation
   * Performance target: <30ms
   */
  async saveNeuralWeights(agentId, networkLayers, weights, biases) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_282gvqjcxl().s[5]++, performance.now());
    /* istanbul ignore next */
    cov_282gvqjcxl().s[6]++;
    try {
      /* istanbul ignore next */
      cov_282gvqjcxl().s[7]++;
      if (weights.length !== biases.length) {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[0][0]++;
        cov_282gvqjcxl().s[8]++;
        throw new Error('Weights and biases arrays must have the same length');
      } else
      /* istanbul ignore next */
      {
        cov_282gvqjcxl().b[0][1]++;
      }
      cov_282gvqjcxl().s[9]++;
      if (weights.length !== networkLayers.length - 1) {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[1][0]++;
        cov_282gvqjcxl().s[10]++;
        throw new Error('Weight layers must match network architecture');
      } else
      /* istanbul ignore next */
      {
        cov_282gvqjcxl().b[1][1]++;
      }
      // Process each layer
      cov_282gvqjcxl().s[11]++;
      for (let layerIndex =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[12]++, 0); layerIndex < weights.length; layerIndex++) {
        const compressedData =
        /* istanbul ignore next */
        (cov_282gvqjcxl().s[13]++, await this.compressLayerData(weights[layerIndex], biases[layerIndex]));
        // Save to database via persistence manager
        // This would call a method we'll add to AgentPersistenceManager
        /* istanbul ignore next */
        cov_282gvqjcxl().s[14]++;
        await this.saveLayerWeights(agentId, layerIndex, compressedData);
      }
      const saveTime =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[15]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[16]++;
      if (saveTime > 30) {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[2][0]++;
        cov_282gvqjcxl().s[17]++;
        console.warn(`⚠️ Neural weight save time exceeded target: ${saveTime.toFixed(2)}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_282gvqjcxl().b[2][1]++;
      }
      cov_282gvqjcxl().s[18]++;
      console.log(`💾 Saved neural weights for agent ${agentId} (${saveTime.toFixed(2)}ms)`);
    } catch (error) {
      const saveTime =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[19]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[20]++;
      console.error(`❌ Failed to save neural weights for ${agentId} (${saveTime.toFixed(2)}ms):`, error.message);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[21]++;
      throw error;
    }
  }
  /**
   * Load neural weights for an agent with decompression and validation
   * Performance target: <30ms
   */
  async loadNeuralWeights(agentId) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[2]++;
    const startTime =
    /* istanbul ignore next */
    (cov_282gvqjcxl().s[22]++, performance.now());
    /* istanbul ignore next */
    cov_282gvqjcxl().s[23]++;
    try {
      // Load weight records from database
      const weightRecords =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[24]++, await this.getAgentWeightRecords(agentId));
      /* istanbul ignore next */
      cov_282gvqjcxl().s[25]++;
      if (weightRecords.length === 0) {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[3][0]++;
        cov_282gvqjcxl().s[26]++;
        throw new Error(`No neural weights found for agent ${agentId}`);
      } else
      /* istanbul ignore next */
      {
        cov_282gvqjcxl().b[3][1]++;
      }
      const weights =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[27]++, []);
      const biases =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[28]++, []);
      // Process each layer in order
      /* istanbul ignore next */
      cov_282gvqjcxl().s[29]++;
      for (const record of weightRecords.sort((a, b) => {
        /* istanbul ignore next */
        cov_282gvqjcxl().f[3]++;
        cov_282gvqjcxl().s[30]++;
        return a.layerIndex - b.layerIndex;
      })) {
        /* istanbul ignore next */
        cov_282gvqjcxl().s[31]++;
        // Validate checksum if enabled
        if (this.checksumValidation) {
          /* istanbul ignore next */
          cov_282gvqjcxl().b[4][0]++;
          const expectedChecksum =
          /* istanbul ignore next */
          (cov_282gvqjcxl().s[32]++, this.generateChecksum(record.weightData, record.biasData));
          /* istanbul ignore next */
          cov_282gvqjcxl().s[33]++;
          if (expectedChecksum !== record.checksum) {
            /* istanbul ignore next */
            cov_282gvqjcxl().b[5][0]++;
            cov_282gvqjcxl().s[34]++;
            throw new Error(`Weight corruption detected for agent ${agentId}, layer ${record.layerIndex}`);
          } else
          /* istanbul ignore next */
          {
            cov_282gvqjcxl().b[5][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_282gvqjcxl().b[4][1]++;
        }
        // Decompress and deserialize
        const layerWeights =
        /* istanbul ignore next */
        (cov_282gvqjcxl().s[35]++, await this.decompressWeights(record.weightData, record.compressionType));
        const layerBiases =
        /* istanbul ignore next */
        (cov_282gvqjcxl().s[36]++, await this.decompressBiases(record.biasData, record.compressionType));
        /* istanbul ignore next */
        cov_282gvqjcxl().s[37]++;
        weights.push(layerWeights);
        /* istanbul ignore next */
        cov_282gvqjcxl().s[38]++;
        biases.push(layerBiases);
      }
      const loadTime =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[39]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[40]++;
      if (loadTime > 30) {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[6][0]++;
        cov_282gvqjcxl().s[41]++;
        console.warn(`⚠️ Neural weight load time exceeded target: ${loadTime.toFixed(2)}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_282gvqjcxl().b[6][1]++;
      }
      cov_282gvqjcxl().s[42]++;
      console.log(`📥 Loaded neural weights for agent ${agentId} (${loadTime.toFixed(2)}ms)`);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[43]++;
      return {
        weights,
        biases
      };
    } catch (error) {
      const loadTime =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[44]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[45]++;
      console.error(`❌ Failed to load neural weights for ${agentId} (${loadTime.toFixed(2)}ms):`, error.message);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[46]++;
      throw error;
    }
  }
  /**
   * Compress weight and bias data for a single layer
   */
  async compressLayerData(weights, biases) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[4]++;
    const startTime =
    /* istanbul ignore next */
    (cov_282gvqjcxl().s[47]++, performance.now());
    /* istanbul ignore next */
    cov_282gvqjcxl().s[48]++;
    try {
      // Convert to buffers
      const weightBuffer =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[49]++, Buffer.from(weights.buffer));
      const biasBuffer =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[50]++, Buffer.from(biases.buffer));
      const originalSize =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[51]++, weightBuffer.length + biasBuffer.length);
      let compressedWeights;
      let compressedBiases;
      let compressionType =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[52]++, 'none');
      // Apply compression if data is large enough
      /* istanbul ignore next */
      cov_282gvqjcxl().s[53]++;
      if (
      /* istanbul ignore next */
      (cov_282gvqjcxl().b[8][0]++, originalSize > this.compressionThreshold) &&
      /* istanbul ignore next */
      (cov_282gvqjcxl().b[8][1]++, this.compressionEnabled)) {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[7][0]++;
        cov_282gvqjcxl().s[54]++;
        compressedWeights = gzipSync(weightBuffer);
        /* istanbul ignore next */
        cov_282gvqjcxl().s[55]++;
        compressedBiases = gzipSync(biasBuffer);
        /* istanbul ignore next */
        cov_282gvqjcxl().s[56]++;
        compressionType = 'gzip';
      } else {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[7][1]++;
        cov_282gvqjcxl().s[57]++;
        compressedWeights = weightBuffer;
        /* istanbul ignore next */
        cov_282gvqjcxl().s[58]++;
        compressedBiases = biasBuffer;
      }
      const compressedSize =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[59]++, compressedWeights.length + compressedBiases.length);
      const compressionRatio =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[60]++, compressedSize / originalSize);
      // Generate checksum for integrity validation
      const checksum =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[61]++, this.generateChecksum(compressedWeights, compressedBiases));
      const compressionTime =
      /* istanbul ignore next */
      (cov_282gvqjcxl().s[62]++, performance.now() - startTime);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[63]++;
      console.log(`🗜️ Compressed layer data: ${originalSize} → ${compressedSize} bytes (${(compressionRatio * 100).toFixed(1)}%) in ${compressionTime.toFixed(2)}ms`);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[64]++;
      return {
        weightData: compressedWeights,
        biasData: compressedBiases,
        compressionType,
        originalSize,
        compressedSize,
        compressionRatio,
        checksum
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_282gvqjcxl().s[65]++;
      console.error('❌ Failed to compress layer data:', error.message);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[66]++;
      throw error;
    }
  }
  /**
   * Decompress weight data
   */
  async decompressWeights(data, compressionType) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[5]++;
    cov_282gvqjcxl().s[67]++;
    try {
      let decompressedBuffer;
      /* istanbul ignore next */
      cov_282gvqjcxl().s[68]++;
      if (compressionType === 'gzip') {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[9][0]++;
        cov_282gvqjcxl().s[69]++;
        decompressedBuffer = gunzipSync(data);
      } else {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[9][1]++;
        cov_282gvqjcxl().s[70]++;
        decompressedBuffer = data;
      }
      // Convert back to Float32Array
      /* istanbul ignore next */
      cov_282gvqjcxl().s[71]++;
      return new Float32Array(decompressedBuffer.buffer.slice(decompressedBuffer.byteOffset, decompressedBuffer.byteOffset + decompressedBuffer.byteLength));
    } catch (error) {
      /* istanbul ignore next */
      cov_282gvqjcxl().s[72]++;
      console.error('❌ Failed to decompress weights:', error.message);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[73]++;
      throw error;
    }
  }
  /**
   * Decompress bias data
   */
  async decompressBiases(data, compressionType) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[6]++;
    cov_282gvqjcxl().s[74]++;
    try {
      let decompressedBuffer;
      /* istanbul ignore next */
      cov_282gvqjcxl().s[75]++;
      if (compressionType === 'gzip') {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[10][0]++;
        cov_282gvqjcxl().s[76]++;
        decompressedBuffer = gunzipSync(data);
      } else {
        /* istanbul ignore next */
        cov_282gvqjcxl().b[10][1]++;
        cov_282gvqjcxl().s[77]++;
        decompressedBuffer = data;
      }
      // Convert back to Float32Array
      /* istanbul ignore next */
      cov_282gvqjcxl().s[78]++;
      return new Float32Array(decompressedBuffer.buffer.slice(decompressedBuffer.byteOffset, decompressedBuffer.byteOffset + decompressedBuffer.byteLength));
    } catch (error) {
      /* istanbul ignore next */
      cov_282gvqjcxl().s[79]++;
      console.error('❌ Failed to decompress biases:', error.message);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[80]++;
      throw error;
    }
  }
  /**
   * Generate checksum for data integrity validation
   */
  generateChecksum(weightData, biasData) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[7]++;
    const hash =
    /* istanbul ignore next */
    (cov_282gvqjcxl().s[81]++, crypto.createHash('sha256'));
    /* istanbul ignore next */
    cov_282gvqjcxl().s[82]++;
    hash.update(weightData);
    /* istanbul ignore next */
    cov_282gvqjcxl().s[83]++;
    hash.update(biasData);
    /* istanbul ignore next */
    cov_282gvqjcxl().s[84]++;
    return hash.digest('hex');
  }
  /**
   * Save compressed layer weights to database
   * This method will call the persistence manager
   */
  async saveLayerWeights(agentId, layerIndex, compressedData) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[8]++;
    cov_282gvqjcxl().s[85]++;
    // This would call a method we need to add to AgentPersistenceManager
    // For now, we'll implement a placeholder that shows the interface
    try {
      /* istanbul ignore next */
      cov_282gvqjcxl().s[86]++;
      // The AgentPersistenceManager would need a method like this:
      // await this.persistence.saveNeuralWeightRecord({
      //   agentId,
      //   layerIndex,
      //   weightData: compressedData.weightData,
      //   biasData: compressedData.biasData,
      //   updatedAt: Date.now(),
      //   checksum: compressedData.checksum,
      //   compressionType: compressedData.compressionType
      // });
      console.log(`💾 Saved layer ${layerIndex} weights for agent ${agentId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_282gvqjcxl().s[87]++;
      console.error(`❌ Failed to save layer weights:`, error.message);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[88]++;
      throw error;
    }
  }
  /**
   * Get agent weight records from database
   * This method will call the persistence manager
   */
  async getAgentWeightRecords(agentId) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[9]++;
    cov_282gvqjcxl().s[89]++;
    // This would call a method we need to add to AgentPersistenceManager
    // For now, we'll return an empty array to show the interface
    try {
      /* istanbul ignore next */
      cov_282gvqjcxl().s[90]++;
      // The AgentPersistenceManager would need a method like this:
      // return await this.persistence.getNeuralWeightRecords(agentId);
      console.log(`📥 Loading weight records for agent ${agentId}`);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[91]++;
      return []; // Placeholder
    } catch (error) {
      /* istanbul ignore next */
      cov_282gvqjcxl().s[92]++;
      console.error(`❌ Failed to load weight records:`, error.message);
      /* istanbul ignore next */
      cov_282gvqjcxl().s[93]++;
      throw error;
    }
  }
  /**
   * Get compression statistics
   */
  getCompressionStats() {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[10]++;
    cov_282gvqjcxl().s[94]++;
    return {
      compressionEnabled: this.compressionEnabled,
      checksumValidation: this.checksumValidation,
      compressionThreshold: this.compressionThreshold
    };
  }
  /**
   * Configure compression settings
   */
  configureCompression(options) {
    /* istanbul ignore next */
    cov_282gvqjcxl().f[11]++;
    cov_282gvqjcxl().s[95]++;
    if (options.enabled !== undefined) {
      /* istanbul ignore next */
      cov_282gvqjcxl().b[11][0]++;
      cov_282gvqjcxl().s[96]++;
      this.compressionEnabled = options.enabled;
    } else
    /* istanbul ignore next */
    {
      cov_282gvqjcxl().b[11][1]++;
    }
    cov_282gvqjcxl().s[97]++;
    if (options.threshold !== undefined) {
      /* istanbul ignore next */
      cov_282gvqjcxl().b[12][0]++;
      cov_282gvqjcxl().s[98]++;
      this.compressionThreshold = options.threshold;
    } else
    /* istanbul ignore next */
    {
      cov_282gvqjcxl().b[12][1]++;
    }
    cov_282gvqjcxl().s[99]++;
    if (options.validation !== undefined) {
      /* istanbul ignore next */
      cov_282gvqjcxl().b[13][0]++;
      cov_282gvqjcxl().s[100]++;
      this.checksumValidation = options.validation;
    } else
    /* istanbul ignore next */
    {
      cov_282gvqjcxl().b[13][1]++;
    }
    cov_282gvqjcxl().s[101]++;
    console.log('⚙️ Neural weight storage configuration updated:', {
      compressionEnabled: this.compressionEnabled,
      compressionThreshold: this.compressionThreshold,
      checksumValidation: this.checksumValidation
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,