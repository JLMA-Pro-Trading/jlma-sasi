d49b9794ea213d555e9195709ac2e9a6
/* istanbul ignore next */
function cov_1b28uecsrs() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/PerformanceIntegration.ts";
  var hash = "13a0b0cdf0256c18df9306a9ce0338044f37fd07";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/PerformanceIntegration.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 15,
          column: 11
        }
      },
      "1": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 21,
          column: 11
        }
      },
      "2": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 27,
          column: 11
        }
      },
      "3": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "4": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "5": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      },
      "6": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "7": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 76,
          column: 10
        }
      },
      "8": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "9": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 70
        }
      },
      "10": {
        start: {
          line: 85,
          column: 47
        },
        end: {
          line: 85,
          column: 123
        }
      },
      "11": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "12": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 38
        }
      },
      "13": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "14": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 64
        }
      },
      "15": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 38
        }
      },
      "16": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 65
        }
      },
      "17": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 84
        }
      },
      "18": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 24
        }
      },
      "19": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 123,
          column: 19
        }
      },
      "20": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 19
        }
      },
      "21": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "22": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 47
        }
      },
      "23": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "24": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 46
        }
      },
      "25": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "26": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 41
        }
      },
      "27": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "28": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 43
        }
      },
      "29": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "30": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 47
        }
      },
      "31": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "32": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 54
        }
      },
      "33": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "34": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 54
        }
      },
      "35": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "36": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 57
        }
      },
      "37": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "38": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 71
        }
      },
      "39": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "40": {
        start: {
          line: 161,
          column: 25
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "41": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "42": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 49
        }
      },
      "43": {
        start: {
          line: 184,
          column: 29
        },
        end: {
          line: 184,
          column: 61
        }
      },
      "44": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 36
        }
      },
      "45": {
        start: {
          line: 187,
          column: 31
        },
        end: {
          line: 187,
          column: 106
        }
      },
      "46": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "47": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 33
        }
      },
      "48": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 50
        }
      },
      "49": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "50": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 75
        }
      },
      "51": {
        start: {
          line: 202,
          column: 24
        },
        end: {
          line: 202,
          column: 62
        }
      },
      "52": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 204,
          column: 27
        }
      },
      "53": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 27
        }
      },
      "54": {
        start: {
          line: 205,
          column: 27
        },
        end: {
          line: 205,
          column: 59
        }
      },
      "55": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 76
        }
      },
      "56": {
        start: {
          line: 206,
          column: 42
        },
        end: {
          line: 206,
          column: 74
        }
      },
      "57": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 34
        }
      },
      "58": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 40
        }
      },
      "59": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "60": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 24
        }
      },
      "61": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 62
        }
      },
      "62": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 54
        }
      },
      "63": {
        start: {
          line: 234,
          column: 22
        },
        end: {
          line: 234,
          column: 52
        }
      },
      "64": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "65": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 38
        }
      },
      "66": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 24
        }
      },
      "67": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 21
        }
      },
      "68": {
        start: {
          line: 245,
          column: 22
        },
        end: {
          line: 245,
          column: 52
        }
      },
      "69": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "70": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 42
        }
      },
      "71": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 46
        }
      },
      "72": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 24
        }
      },
      "73": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 21
        }
      },
      "74": {
        start: {
          line: 257,
          column: 23
        },
        end: {
          line: 257,
          column: 73
        }
      },
      "75": {
        start: {
          line: 258,
          column: 23
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "76": {
        start: {
          line: 273,
          column: 33
        },
        end: {
          line: 273,
          column: 34
        }
      },
      "77": {
        start: {
          line: 274,
          column: 31
        },
        end: {
          line: 274,
          column: 32
        }
      },
      "78": {
        start: {
          line: 275,
          column: 28
        },
        end: {
          line: 275,
          column: 29
        }
      },
      "79": {
        start: {
          line: 276,
          column: 28
        },
        end: {
          line: 276,
          column: 29
        }
      },
      "80": {
        start: {
          line: 277,
          column: 26
        },
        end: {
          line: 277,
          column: 27
        }
      },
      "81": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "82": {
        start: {
          line: 279,
          column: 28
        },
        end: {
          line: 279,
          column: 66
        }
      },
      "83": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 281,
          column: 25
        }
      },
      "84": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 25
        }
      },
      "85": {
        start: {
          line: 282,
          column: 35
        },
        end: {
          line: 282,
          column: 62
        }
      },
      "86": {
        start: {
          line: 283,
          column: 32
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "87": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 55
        }
      },
      "88": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 63
        }
      },
      "89": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 59
        }
      },
      "90": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 53
        }
      },
      "91": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 53
        }
      },
      "92": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 26
        }
      },
      "93": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "94": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 83
        }
      },
      "95": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 79
        }
      },
      "96": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 73
        }
      },
      "97": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 73
        }
      },
      "98": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 303,
          column: 22
        }
      },
      "99": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "100": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 316,
          column: 13
        }
      },
      "101": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 56
        }
      },
      "102": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 64
        }
      },
      "103": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 315,
          column: 81
        }
      },
      "104": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 36
        }
      },
      "105": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 34
        }
      },
      "106": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 35
        }
      },
      "107": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 92
        }
      },
      "108": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "109": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 330,
          column: 15
        }
      },
      "110": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 67
        }
      },
      "111": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "112": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 340,
          column: 15
        }
      },
      "113": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 62
        }
      },
      "114": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "115": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 350,
          column: 15
        }
      },
      "116": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 91
        }
      },
      "117": {
        start: {
          line: 355,
          column: 25
        },
        end: {
          line: 355,
          column: 51
        }
      },
      "118": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "119": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 360,
          column: 15
        }
      },
      "120": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 79
        }
      },
      "121": {
        start: {
          line: 365,
          column: 33
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "122": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 375,
          column: 69
        }
      },
      "123": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 71
        }
      },
      "124": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 383,
          column: 11
        }
      },
      "125": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 70
        }
      },
      "126": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "127": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 391,
          column: 13
        }
      },
      "128": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 43
        }
      },
      "129": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 89
        }
      },
      "130": {
        start: {
          line: 398,
          column: 36
        },
        end: {
          line: 398,
          column: 47
        }
      },
      "131": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "132": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 405,
          column: 15
        }
      },
      "133": {
        start: {
          line: 408,
          column: 25
        },
        end: {
          line: 408,
          column: 59
        }
      },
      "134": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "135": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 414,
          column: 15
        }
      },
      "136": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "137": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 422,
          column: 15
        }
      },
      "138": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "139": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 430,
          column: 15
        }
      },
      "140": {
        start: {
          line: 434,
          column: 22
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "141": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 47
        }
      },
      "142": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 60
        }
      },
      "143": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "144": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 138
        }
      },
      "145": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 145
        }
      },
      "146": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 454,
          column: 126
        }
      },
      "147": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 160
        }
      },
      "148": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 81
        }
      },
      "149": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 460,
          column: 61
        }
      },
      "150": {
        start: {
          line: 464,
          column: 20
        },
        end: {
          line: 464,
          column: 30
        }
      },
      "151": {
        start: {
          line: 465,
          column: 23
        },
        end: {
          line: 465,
          column: 96
        }
      },
      "152": {
        start: {
          line: 467,
          column: 32
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "153": {
        start: {
          line: 475,
          column: 24
        },
        end: {
          line: 475,
          column: 95
        }
      },
      "154": {
        start: {
          line: 476,
          column: 29
        },
        end: {
          line: 476,
          column: 137
        }
      },
      "155": {
        start: {
          line: 476,
          column: 99
        },
        end: {
          line: 476,
          column: 133
        }
      },
      "156": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 484,
          column: 10
        }
      },
      "157": {
        start: {
          line: 488,
          column: 20
        },
        end: {
          line: 488,
          column: 23
        }
      },
      "158": {
        start: {
          line: 490,
          column: 29
        },
        end: {
          line: 490,
          column: 142
        }
      },
      "159": {
        start: {
          line: 490,
          column: 84
        },
        end: {
          line: 490,
          column: 141
        }
      },
      "160": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 491,
          column: 42
        }
      },
      "161": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 492,
          column: 34
        }
      },
      "162": {
        start: {
          line: 495,
          column: 20
        },
        end: {
          line: 495,
          column: 23
        }
      },
      "163": {
        start: {
          line: 496,
          column: 29
        },
        end: {
          line: 496,
          column: 108
        }
      },
      "164": {
        start: {
          line: 496,
          column: 84
        },
        end: {
          line: 496,
          column: 107
        }
      },
      "165": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 497,
          column: 42
        }
      },
      "166": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 34
        }
      },
      "167": {
        start: {
          line: 501,
          column: 20
        },
        end: {
          line: 501,
          column: 23
        }
      },
      "168": {
        start: {
          line: 502,
          column: 34
        },
        end: {
          line: 502,
          column: 146
        }
      },
      "169": {
        start: {
          line: 502,
          column: 89
        },
        end: {
          line: 502,
          column: 145
        }
      },
      "170": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 503,
          column: 47
        }
      },
      "171": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 504,
          column: 34
        }
      },
      "172": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 508,
          column: 38
        }
      },
      "173": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 512,
          column: 50
        }
      },
      "174": {
        start: {
          line: 515,
          column: 32
        },
        end: {
          line: 515,
          column: 34
        }
      },
      "175": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 518,
          column: 9
        }
      },
      "176": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 517,
          column: 106
        }
      },
      "177": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 521,
          column: 9
        }
      },
      "178": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 520,
          column: 109
        }
      },
      "179": {
        start: {
          line: 522,
          column: 29
        },
        end: {
          line: 522,
          column: 100
        }
      },
      "180": {
        start: {
          line: 522,
          column: 80
        },
        end: {
          line: 522,
          column: 99
        }
      },
      "181": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 525,
          column: 9
        }
      },
      "182": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 524,
          column: 108
        }
      },
      "183": {
        start: {
          line: 526,
          column: 8
        },
        end: {
          line: 528,
          column: 9
        }
      },
      "184": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 527,
          column: 96
        }
      },
      "185": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 31
        }
      },
      "186": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 533,
          column: 24
        }
      },
      "187": {
        start: {
          line: 533,
          column: 12
        },
        end: {
          line: 533,
          column: 24
        }
      },
      "188": {
        start: {
          line: 534,
          column: 20
        },
        end: {
          line: 539,
          column: 75
        }
      },
      "189": {
        start: {
          line: 534,
          column: 55
        },
        end: {
          line: 539,
          column: 9
        }
      },
      "190": {
        start: {
          line: 540,
          column: 22
        },
        end: {
          line: 540,
          column: 36
        }
      },
      "191": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 546,
          column: 10
        }
      },
      "192": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 550,
          column: 24
        }
      },
      "193": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 550,
          column: 24
        }
      },
      "194": {
        start: {
          line: 551,
          column: 23
        },
        end: {
          line: 551,
          column: 67
        }
      },
      "195": {
        start: {
          line: 552,
          column: 22
        },
        end: {
          line: 552,
          column: 68
        }
      },
      "196": {
        start: {
          line: 553,
          column: 26
        },
        end: {
          line: 553,
          column: 62
        }
      },
      "197": {
        start: {
          line: 554,
          column: 25
        },
        end: {
          line: 554,
          column: 60
        }
      },
      "198": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 556,
          column: 24
        }
      },
      "199": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 556,
          column: 24
        }
      },
      "200": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 562,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 29
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 81
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 25
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 121
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 125,
            column: 57
          },
          end: {
            line: 125,
            column: 58
          }
        },
        loc: {
          start: {
            line: 125,
            column: 67
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 125
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 128,
            column: 62
          },
          end: {
            line: 128,
            column: 63
          }
        },
        loc: {
          start: {
            line: 128,
            column: 72
          },
          end: {
            line: 130,
            column: 9
          }
        },
        line: 128
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 131,
            column: 60
          },
          end: {
            line: 131,
            column: 61
          }
        },
        loc: {
          start: {
            line: 131,
            column: 70
          },
          end: {
            line: 133,
            column: 9
          }
        },
        line: 131
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 134,
            column: 53
          },
          end: {
            line: 134,
            column: 54
          }
        },
        loc: {
          start: {
            line: 134,
            column: 63
          },
          end: {
            line: 136,
            column: 9
          }
        },
        line: 134
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 138,
            column: 44
          },
          end: {
            line: 138,
            column: 45
          }
        },
        loc: {
          start: {
            line: 138,
            column: 55
          },
          end: {
            line: 140,
            column: 9
          }
        },
        line: 138
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 142,
            column: 57
          },
          end: {
            line: 142,
            column: 58
          }
        },
        loc: {
          start: {
            line: 142,
            column: 73
          },
          end: {
            line: 144,
            column: 9
          }
        },
        line: 142
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 145,
            column: 57
          },
          end: {
            line: 145,
            column: 58
          }
        },
        loc: {
          start: {
            line: 145,
            column: 73
          },
          end: {
            line: 147,
            column: 9
          }
        },
        line: 145
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 149,
            column: 59
          },
          end: {
            line: 149,
            column: 60
          }
        },
        loc: {
          start: {
            line: 149,
            column: 77
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 149
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 41
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 156
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 40
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 201
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 206,
            column: 30
          },
          end: {
            line: 206,
            column: 31
          }
        },
        loc: {
          start: {
            line: 206,
            column: 42
          },
          end: {
            line: 206,
            column: 74
          }
        },
        line: 206
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 22
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 211
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 23
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 218
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 22
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 227
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 30
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 233
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 26
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 244
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 40
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 256
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 20
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 308
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 34
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 323
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 33
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 333
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 28
          },
          end: {
            line: 352,
            column: 5
          }
        },
        line: 343
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 30
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 353
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        loc: {
          start: {
            line: 363,
            column: 34
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 363
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 41
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 377
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 41
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 385
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 394,
            column: 4
          },
          end: {
            line: 394,
            column: 5
          }
        },
        loc: {
          start: {
            line: 394,
            column: 44
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 394
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 41
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 397
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 433,
            column: 4
          },
          end: {
            line: 433,
            column: 5
          }
        },
        loc: {
          start: {
            line: 433,
            column: 43
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 433
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 40
          },
          end: {
            line: 462,
            column: 5
          }
        },
        line: 447
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 463,
            column: 4
          },
          end: {
            line: 463,
            column: 5
          }
        },
        loc: {
          start: {
            line: 463,
            column: 25
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 463
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 476,
            column: 68
          },
          end: {
            line: 476,
            column: 69
          }
        },
        loc: {
          start: {
            line: 476,
            column: 99
          },
          end: {
            line: 476,
            column: 133
          }
        },
        line: 476
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 28
          },
          end: {
            line: 493,
            column: 5
          }
        },
        line: 486
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 490,
            column: 75
          },
          end: {
            line: 490,
            column: 76
          }
        },
        loc: {
          start: {
            line: 490,
            column: 84
          },
          end: {
            line: 490,
            column: 141
          }
        },
        line: 490
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 494,
            column: 4
          },
          end: {
            line: 494,
            column: 5
          }
        },
        loc: {
          start: {
            line: 494,
            column: 28
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 494
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 496,
            column: 75
          },
          end: {
            line: 496,
            column: 76
          }
        },
        loc: {
          start: {
            line: 496,
            column: 84
          },
          end: {
            line: 496,
            column: 107
          }
        },
        line: 496
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 500,
            column: 4
          },
          end: {
            line: 500,
            column: 5
          }
        },
        loc: {
          start: {
            line: 500,
            column: 33
          },
          end: {
            line: 505,
            column: 5
          }
        },
        line: 500
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 502,
            column: 80
          },
          end: {
            line: 502,
            column: 81
          }
        },
        loc: {
          start: {
            line: 502,
            column: 89
          },
          end: {
            line: 502,
            column: 145
          }
        },
        line: 502
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 506,
            column: 4
          },
          end: {
            line: 506,
            column: 5
          }
        },
        loc: {
          start: {
            line: 506,
            column: 29
          },
          end: {
            line: 509,
            column: 5
          }
        },
        line: 506
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 510,
            column: 4
          },
          end: {
            line: 510,
            column: 5
          }
        },
        loc: {
          start: {
            line: 510,
            column: 26
          },
          end: {
            line: 513,
            column: 5
          }
        },
        line: 510
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 514,
            column: 4
          },
          end: {
            line: 514,
            column: 5
          }
        },
        loc: {
          start: {
            line: 514,
            column: 30
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 514
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 522,
            column: 75
          },
          end: {
            line: 522,
            column: 76
          }
        },
        loc: {
          start: {
            line: 522,
            column: 80
          },
          end: {
            line: 522,
            column: 99
          }
        },
        line: 522
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 531,
            column: 4
          },
          end: {
            line: 531,
            column: 5
          }
        },
        loc: {
          start: {
            line: 531,
            column: 37
          },
          end: {
            line: 547,
            column: 5
          }
        },
        line: 531
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 534,
            column: 35
          },
          end: {
            line: 534,
            column: 36
          }
        },
        loc: {
          start: {
            line: 534,
            column: 55
          },
          end: {
            line: 539,
            column: 9
          }
        },
        line: 534
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 548,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        loc: {
          start: {
            line: 548,
            column: 27
          },
          end: {
            line: 563,
            column: 5
          }
        },
        line: 548
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 9,
            column: 25
          },
          end: {
            line: 9,
            column: 27
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "2": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 123,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 123,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "3": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "4": {
        loc: {
          start: {
            line: 164,
            column: 27
          },
          end: {
            line: 164,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 27
          },
          end: {
            line: 164,
            column: 48
          }
        }, {
          start: {
            line: 164,
            column: 52
          },
          end: {
            line: 164,
            column: 53
          }
        }],
        line: 164
      },
      "5": {
        loc: {
          start: {
            line: 166,
            column: 31
          },
          end: {
            line: 166,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 31
          },
          end: {
            line: 166,
            column: 56
          }
        }, {
          start: {
            line: 166,
            column: 60
          },
          end: {
            line: 166,
            column: 61
          }
        }],
        line: 166
      },
      "6": {
        loc: {
          start: {
            line: 167,
            column: 32
          },
          end: {
            line: 167,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 32
          },
          end: {
            line: 167,
            column: 58
          }
        }, {
          start: {
            line: 167,
            column: 62
          },
          end: {
            line: 167,
            column: 63
          }
        }],
        line: 167
      },
      "7": {
        loc: {
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 44
          }
        }, {
          start: {
            line: 168,
            column: 48
          },
          end: {
            line: 168,
            column: 49
          }
        }],
        line: 168
      },
      "8": {
        loc: {
          start: {
            line: 169,
            column: 22
          },
          end: {
            line: 169,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 22
          },
          end: {
            line: 169,
            column: 38
          }
        }, {
          start: {
            line: 169,
            column: 42
          },
          end: {
            line: 169,
            column: 43
          }
        }],
        line: 169
      },
      "9": {
        loc: {
          start: {
            line: 171,
            column: 31
          },
          end: {
            line: 171,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 31
          },
          end: {
            line: 171,
            column: 56
          }
        }, {
          start: {
            line: 171,
            column: 60
          },
          end: {
            line: 171,
            column: 61
          }
        }],
        line: 171
      },
      "10": {
        loc: {
          start: {
            line: 172,
            column: 22
          },
          end: {
            line: 172,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 22
          },
          end: {
            line: 172,
            column: 38
          }
        }, {
          start: {
            line: 172,
            column: 42
          },
          end: {
            line: 172,
            column: 43
          }
        }],
        line: 172
      },
      "11": {
        loc: {
          start: {
            line: 173,
            column: 23
          },
          end: {
            line: 173,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 23
          },
          end: {
            line: 173,
            column: 40
          }
        }, {
          start: {
            line: 173,
            column: 44
          },
          end: {
            line: 173,
            column: 45
          }
        }],
        line: 173
      },
      "12": {
        loc: {
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 174,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 174,
            column: 34
          }
        }, {
          start: {
            line: 174,
            column: 38
          },
          end: {
            line: 174,
            column: 39
          }
        }],
        line: 174
      },
      "13": {
        loc: {
          start: {
            line: 175,
            column: 21
          },
          end: {
            line: 175,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 21
          },
          end: {
            line: 175,
            column: 36
          }
        }, {
          start: {
            line: 175,
            column: 40
          },
          end: {
            line: 175,
            column: 41
          }
        }],
        line: 175
      },
      "14": {
        loc: {
          start: {
            line: 176,
            column: 28
          },
          end: {
            line: 176,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 28
          },
          end: {
            line: 176,
            column: 50
          }
        }, {
          start: {
            line: 176,
            column: 54
          },
          end: {
            line: 176,
            column: 55
          }
        }],
        line: 176
      },
      "15": {
        loc: {
          start: {
            line: 177,
            column: 28
          },
          end: {
            line: 177,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 28
          },
          end: {
            line: 177,
            column: 50
          }
        }, {
          start: {
            line: 177,
            column: 54
          },
          end: {
            line: 177,
            column: 55
          }
        }],
        line: 177
      },
      "16": {
        loc: {
          start: {
            line: 178,
            column: 25
          },
          end: {
            line: 178,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 25
          },
          end: {
            line: 178,
            column: 44
          }
        }, {
          start: {
            line: 178,
            column: 48
          },
          end: {
            line: 178,
            column: 49
          }
        }],
        line: 178
      },
      "17": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "18": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "19": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "20": {
        loc: {
          start: {
            line: 202,
            column: 24
          },
          end: {
            line: 202,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 24
          },
          end: {
            line: 202,
            column: 56
          }
        }, {
          start: {
            line: 202,
            column: 60
          },
          end: {
            line: 202,
            column: 62
          }
        }],
        line: 202
      },
      "21": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 204,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 204,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "22": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "23": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "24": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "25": {
        loc: {
          start: {
            line: 257,
            column: 23
          },
          end: {
            line: 257,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 23
          },
          end: {
            line: 257,
            column: 31
          }
        }, {
          start: {
            line: 257,
            column: 35
          },
          end: {
            line: 257,
            column: 73
          }
        }],
        line: 257
      },
      "26": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 281,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 281,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "27": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "28": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "29": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "30": {
        loc: {
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "31": {
        loc: {
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "32": {
        loc: {
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "33": {
        loc: {
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 366,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 366,
            column: 24
          }
        }, {
          start: {
            line: 366,
            column: 28
          },
          end: {
            line: 366,
            column: 49
          }
        }],
        line: 366
      },
      "34": {
        loc: {
          start: {
            line: 367,
            column: 21
          },
          end: {
            line: 367,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 21
          },
          end: {
            line: 367,
            column: 34
          }
        }, {
          start: {
            line: 367,
            column: 38
          },
          end: {
            line: 367,
            column: 46
          }
        }],
        line: 367
      },
      "35": {
        loc: {
          start: {
            line: 369,
            column: 22
          },
          end: {
            line: 369,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 22
          },
          end: {
            line: 369,
            column: 36
          }
        }, {
          start: {
            line: 369,
            column: 40
          },
          end: {
            line: 369,
            column: 48
          }
        }],
        line: 369
      },
      "36": {
        loc: {
          start: {
            line: 371,
            column: 21
          },
          end: {
            line: 371,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 21
          },
          end: {
            line: 371,
            column: 34
          }
        }, {
          start: {
            line: 371,
            column: 38
          },
          end: {
            line: 371,
            column: 48
          }
        }],
        line: 371
      },
      "37": {
        loc: {
          start: {
            line: 372,
            column: 21
          },
          end: {
            line: 372,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 372,
            column: 21
          },
          end: {
            line: 372,
            column: 31
          }
        }, {
          start: {
            line: 372,
            column: 35
          },
          end: {
            line: 372,
            column: 37
          }
        }],
        line: 372
      },
      "38": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "39": {
        loc: {
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "40": {
        loc: {
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 415,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 415,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "41": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "42": {
        loc: {
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "43": {
        loc: {
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 425,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 425,
            column: 56
          }
        }, {
          start: {
            line: 425,
            column: 60
          },
          end: {
            line: 425,
            column: 81
          }
        }],
        line: 425
      },
      "44": {
        loc: {
          start: {
            line: 436,
            column: 21
          },
          end: {
            line: 436,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 436,
            column: 21
          },
          end: {
            line: 436,
            column: 36
          }
        }, {
          start: {
            line: 436,
            column: 40
          },
          end: {
            line: 436,
            column: 48
          }
        }],
        line: 436
      },
      "45": {
        loc: {
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 450,
            column: 138
          }
        }, {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 452,
            column: 145
          }
        }, {
          start: {
            line: 453,
            column: 12
          },
          end: {
            line: 454,
            column: 126
          }
        }, {
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 456,
            column: 160
          }
        }, {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 458,
            column: 81
          }
        }, {
          start: {
            line: 459,
            column: 12
          },
          end: {
            line: 460,
            column: 61
          }
        }],
        line: 448
      },
      "46": {
        loc: {
          start: {
            line: 465,
            column: 40
          },
          end: {
            line: 465,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 465,
            column: 40
          },
          end: {
            line: 465,
            column: 78
          }
        }, {
          start: {
            line: 465,
            column: 82
          },
          end: {
            line: 465,
            column: 95
          }
        }],
        line: 465
      },
      "47": {
        loc: {
          start: {
            line: 490,
            column: 84
          },
          end: {
            line: 490,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 490,
            column: 84
          },
          end: {
            line: 490,
            column: 112
          }
        }, {
          start: {
            line: 490,
            column: 116
          },
          end: {
            line: 490,
            column: 141
          }
        }],
        line: 490
      },
      "48": {
        loc: {
          start: {
            line: 502,
            column: 89
          },
          end: {
            line: 502,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 502,
            column: 89
          },
          end: {
            line: 502,
            column: 117
          }
        }, {
          start: {
            line: 502,
            column: 121
          },
          end: {
            line: 502,
            column: 145
          }
        }],
        line: 502
      },
      "49": {
        loc: {
          start: {
            line: 512,
            column: 15
          },
          end: {
            line: 512,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 512,
            column: 41
          },
          end: {
            line: 512,
            column: 44
          }
        }, {
          start: {
            line: 512,
            column: 47
          },
          end: {
            line: 512,
            column: 49
          }
        }],
        line: 512
      },
      "50": {
        loc: {
          start: {
            line: 516,
            column: 8
          },
          end: {
            line: 518,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 516,
            column: 8
          },
          end: {
            line: 518,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 516
      },
      "51": {
        loc: {
          start: {
            line: 519,
            column: 8
          },
          end: {
            line: 521,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 519,
            column: 8
          },
          end: {
            line: 521,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 519
      },
      "52": {
        loc: {
          start: {
            line: 523,
            column: 8
          },
          end: {
            line: 525,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 523,
            column: 8
          },
          end: {
            line: 525,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 523
      },
      "53": {
        loc: {
          start: {
            line: 526,
            column: 8
          },
          end: {
            line: 528,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 526,
            column: 8
          },
          end: {
            line: 528,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 526
      },
      "54": {
        loc: {
          start: {
            line: 532,
            column: 8
          },
          end: {
            line: 533,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 532,
            column: 8
          },
          end: {
            line: 533,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 532
      },
      "55": {
        loc: {
          start: {
            line: 549,
            column: 8
          },
          end: {
            line: 550,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 549,
            column: 8
          },
          end: {
            line: 550,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 549
      },
      "56": {
        loc: {
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 556,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 556,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 555
      },
      "57": {
        loc: {
          start: {
            line: 555,
            column: 12
          },
          end: {
            line: 555,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 555,
            column: 12
          },
          end: {
            line: 555,
            column: 22
          }
        }, {
          start: {
            line: 555,
            column: 26
          },
          end: {
            line: 555,
            column: 35
          }
        }],
        line: 555
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0, 0, 0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/PerformanceIntegration.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/PerformanceIntegration.ts"],
      sourcesContent: ["/**\n * Performance Integration Service\n * \n * Integrates SASI with synaptic-mesh performance monitoring suite.\n * Provides real-time performance tracking for neural agents and\n * connects to the existing performance dashboard infrastructure.\n */\n\nimport { NeuralPerformanceSnapshot, PerformanceAlert, SystemHealthMetrics } from '../types/neural'\nimport { Agent } from '../types/agent'\n\nexport interface PerformanceIntegrationConfig {\n  enableRealTimeMonitoring: boolean\n  enableBottleneckDetection: boolean\n  enablePredictiveAnalysis: boolean\n  enableAutoOptimization: boolean\n  dashboardEnabled: boolean\n  alertThresholds: {\n    inferenceTime: number // ms\n    memoryUsage: number // MB\n    cpuUsage: number // %\n    accuracy: number // minimum acceptable\n    errorRate: number // maximum acceptable\n  }\n  updateInterval: number // ms\n  historyRetention: number // hours\n}\n\nexport class PerformanceIntegration {\n  private performanceMonitor: any = null\n  private isInitialized = false\n  private config: PerformanceIntegrationConfig\n  private metricsHistory: Map<string, NeuralPerformanceSnapshot[]> = new Map()\n  private activeAlerts: Map<string, PerformanceAlert> = new Map()\n  private systemHealth: SystemHealthMetrics\n  \n  constructor(config: Partial<PerformanceIntegrationConfig> = {}) {\n    this.config = {\n      enableRealTimeMonitoring: true,\n      enableBottleneckDetection: true,\n      enablePredictiveAnalysis: false, // Requires ML model\n      enableAutoOptimization: false, // Safety first\n      dashboardEnabled: true,\n      alertThresholds: {\n        inferenceTime: 100, // 100ms\n        memoryUsage: 50, // 50MB\n        cpuUsage: 80, // 80%\n        accuracy: 0.85, // 85%\n        errorRate: 0.05 // 5%\n      },\n      updateInterval: 1000, // 1 second\n      historyRetention: 24, // 24 hours\n      ...config\n    }\n    \n    this.systemHealth = {\n      overallScore: 100,\n      componentScores: {\n        neural: 100,\n        memory: 100,\n        performance: 100,\n        network: 100,\n        wasm: 100\n      },\n      activeAlerts: [],\n      recommendations: [],\n      uptime: 0,\n      lastCheck: new Date()\n    }\n  }\n  \n  /**\n   * Initialize Performance Integration\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('\uD83D\uDCCA Initializing Performance Integration...')\n      \n      // Import and initialize performance monitoring suite\n      const PerformanceMonitoringSuite = require('../../../synaptic-mesh/src/neural/performance-monitoring-suite.js')\n      \n      this.performanceMonitor = new PerformanceMonitoringSuite({\n        // Neural-specific targets\n        targetSpawnTime: 100, // ms\n        targetMemoryPerAgent: this.config.alertThresholds.memoryUsage * 1024 * 1024, // Convert MB to bytes\n        targetInferenceTime: this.config.alertThresholds.inferenceTime, // ms\n        targetWasmOperationTime: 10, // ms\n        \n        // Feature flags\n        enableRealTimeMonitoring: this.config.enableRealTimeMonitoring,\n        enableBottleneckDetection: this.config.enableBottleneckDetection,\n        enableMLPrediction: this.config.enablePredictiveAnalysis,\n        enableDashboardUI: this.config.dashboardEnabled,\n        enableAutoOptimization: this.config.enableAutoOptimization,\n        \n        // Alert configuration\n        alertSeverityThreshold: 'medium',\n        \n        // Dashboard settings\n        dashboardPort: 8080,\n        dashboardUpdateInterval: this.config.updateInterval\n      })\n      \n      // Set up event handlers\n      this.setupEventHandlers()\n      \n      // Start monitoring if enabled\n      if (this.config.enableRealTimeMonitoring) {\n        await this.performanceMonitor.startMonitoring()\n      }\n      \n      this.isInitialized = true\n      console.log('\u2705 Performance Integration initialized')\n      \n    } catch (error) {\n      console.error('\u274C Failed to initialize Performance Integration:', error)\n      throw error\n    }\n  }\n  \n  /**\n   * Setup Event Handlers\n   */\n  private setupEventHandlers(): void {\n    if (!this.performanceMonitor) return\n    \n    // Agent performance events\n    this.performanceMonitor.on('agentSpawnAnalysis', (data: any) => {\n      this.handleAgentSpawnMetrics(data)\n    })\n    \n    this.performanceMonitor.on('neuralInferenceAnalysis', (data: any) => {\n      this.handleInferenceMetrics(data)\n    })\n    \n    this.performanceMonitor.on('wasmOperationAnalysis', (data: any) => {\n      this.handleWasmMetrics(data)\n    })\n    \n    this.performanceMonitor.on('memoryAnalysis', (data: any) => {\n      this.handleMemoryMetrics(data)\n    })\n    \n    // Alert events\n    this.performanceMonitor.on('alert', (alert: any) => {\n      this.handlePerformanceAlert(alert)\n    })\n    \n    // Bottleneck events\n    this.performanceMonitor.on('bottleneckDetected', (bottleneck: any) => {\n      this.handleBottleneckDetected(bottleneck)\n    })\n    \n    this.performanceMonitor.on('bottleneckResolved', (bottleneck: any) => {\n      this.handleBottleneckResolved(bottleneck)\n    })\n    \n    // Optimization events\n    this.performanceMonitor.on('optimizationsApplied', (optimization: any) => {\n      this.handleOptimizationApplied(optimization)\n    })\n  }\n  \n  /**\n   * Record Agent Performance Metrics\n   */\n  recordAgentMetrics(agentId: string, metrics: Partial<NeuralPerformanceSnapshot>): void {\n    if (!this.isInitialized) {\n      console.warn('\u26A0\uFE0F Performance integration not initialized')\n      return\n    }\n    \n    const snapshot: NeuralPerformanceSnapshot = {\n      timestamp: new Date(),\n      agentId,\n      inferenceTime: metrics.inferenceTime || 0,\n      trainingTime: metrics.trainingTime,\n      preprocessingTime: metrics.preprocessingTime || 0,\n      postprocessingTime: metrics.postprocessingTime || 0,\n      memoryUsage: metrics.memoryUsage || 0,\n      cpuUsage: metrics.cpuUsage || 0,\n      gpuUsage: metrics.gpuUsage,\n      energyConsumption: metrics.energyConsumption || 0,\n      accuracy: metrics.accuracy || 0,\n      precision: metrics.precision || 0,\n      recall: metrics.recall || 0,\n      f1Score: metrics.f1Score || 0,\n      networkLatency: metrics.networkLatency || 0,\n      bandwidthUsage: metrics.bandwidthUsage || 0,\n      packetsLost: metrics.packetsLost || 0\n    }\n    \n    // Store in history\n    if (!this.metricsHistory.has(agentId)) {\n      this.metricsHistory.set(agentId, [])\n    }\n    \n    const agentHistory = this.metricsHistory.get(agentId)!\n    agentHistory.push(snapshot)\n    \n    // Limit history size\n    const maxHistorySize = (this.config.historyRetention * 3600) / (this.config.updateInterval / 1000)\n    if (agentHistory.length > maxHistorySize) {\n      agentHistory.shift()\n    }\n    \n    // Check thresholds and generate alerts\n    this.checkPerformanceThresholds(snapshot)\n    \n    // Report to performance monitor\n    if (this.performanceMonitor) {\n      this.performanceMonitor.emit('agentMetricsRecorded', snapshot)\n    }\n  }\n  \n  /**\n   * Get Agent Performance History\n   */\n  getAgentHistory(agentId: string, timeRange?: number): NeuralPerformanceSnapshot[] {\n    const history = this.metricsHistory.get(agentId) || []\n    \n    if (!timeRange) return history\n    \n    const cutoffTime = new Date(Date.now() - timeRange)\n    return history.filter(snapshot => snapshot.timestamp >= cutoffTime)\n  }\n  \n  /**\n   * Get System Health Metrics\n   */\n  getSystemHealth(): SystemHealthMetrics {\n    this.updateSystemHealth()\n    return { ...this.systemHealth }\n  }\n  \n  /**\n   * Get Performance Dashboard Data\n   */\n  getDashboardData(): any {\n    if (!this.performanceMonitor) {\n      return null\n    }\n    \n    return this.performanceMonitor.getPerformanceReport()\n  }\n  \n  /**\n   * Get Active Alerts\n   */\n  getActiveAlerts(): PerformanceAlert[] {\n    return Array.from(this.activeAlerts.values())\n  }\n  \n  /**\n   * Acknowledge Alert\n   */\n  acknowledgeAlert(alertId: string): boolean {\n    const alert = this.activeAlerts.get(alertId)\n    if (alert) {\n      alert.acknowledged = true\n      return true\n    }\n    return false\n  }\n  \n  /**\n   * Resolve Alert\n   */\n  resolveAlert(alertId: string): boolean {\n    const alert = this.activeAlerts.get(alertId)\n    if (alert) {\n      alert.resolvedAt = new Date()\n      this.activeAlerts.delete(alertId)\n      return true\n    }\n    return false\n  }\n  \n  /**\n   * Generate Performance Report\n   */\n  generatePerformanceReport(agentIds?: string[]): any {\n    const agents = agentIds || Array.from(this.metricsHistory.keys())\n    const report = {\n      timestamp: new Date(),\n      summary: {\n        totalAgents: agents.length,\n        averageInferenceTime: 0,\n        averageMemoryUsage: 0,\n        averageCpuUsage: 0,\n        averageAccuracy: 0\n      },\n      agentDetails: {} as any,\n      systemHealth: this.getSystemHealth(),\n      activeAlerts: this.getActiveAlerts(),\n      recommendations: this.generateRecommendations()\n    }\n    \n    // Calculate aggregated metrics\n    let totalInferenceTime = 0\n    let totalMemoryUsage = 0\n    let totalCpuUsage = 0\n    let totalAccuracy = 0\n    let validAgents = 0\n    \n    for (const agentId of agents) {\n      const history = this.getAgentHistory(agentId, 3600000) // Last hour\n      if (history.length === 0) continue\n      \n      const latestSnapshot = history[history.length - 1]\n      const agentReport = {\n        agentId,\n        latestMetrics: latestSnapshot,\n        averageMetrics: this.calculateAverageMetrics(history),\n        trendAnalysis: this.analyzeTrends(history)\n      }\n      \n      report.agentDetails[agentId] = agentReport\n      \n      totalInferenceTime += latestSnapshot.inferenceTime\n      totalMemoryUsage += latestSnapshot.memoryUsage\n      totalCpuUsage += latestSnapshot.cpuUsage\n      totalAccuracy += latestSnapshot.accuracy\n      validAgents++\n    }\n    \n    // Calculate averages\n    if (validAgents > 0) {\n      report.summary.averageInferenceTime = totalInferenceTime / validAgents\n      report.summary.averageMemoryUsage = totalMemoryUsage / validAgents\n      report.summary.averageCpuUsage = totalCpuUsage / validAgents\n      report.summary.averageAccuracy = totalAccuracy / validAgents\n    }\n    \n    return report\n  }\n  \n  /**\n   * Cleanup Resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.performanceMonitor) {\n      try {\n        await this.performanceMonitor.cleanup()\n        console.log('\u2705 Performance monitor cleaned up')\n      } catch (error) {\n        console.error('\u274C Failed to cleanup performance monitor:', error)\n      }\n    }\n    \n    this.metricsHistory.clear()\n    this.activeAlerts.clear()\n    this.isInitialized = false\n  }\n  \n  // ===== PRIVATE METHODS =====\n  \n  private handleAgentSpawnMetrics(data: any): void {\n    console.log(`\uD83D\uDCCA Agent spawn metrics: avg ${data.average}ms (${data.count} agents)`)\n    \n    if (data.average > this.config.alertThresholds.inferenceTime * 2) {\n      this.generateAlert('agent_spawn_slow', 'high', {\n        averageSpawnTime: data.average,\n        target: this.config.alertThresholds.inferenceTime * 2,\n        count: data.count\n      })\n    }\n  }\n  \n  private handleInferenceMetrics(data: any): void {\n    console.log(`\uD83D\uDCCA Inference metrics: avg ${data.average}ms`)\n    \n    if (data.slowInferencesRatio > 0.3) {\n      this.generateAlert('inference_performance_degraded', 'medium', {\n        averageTime: data.average,\n        slowRatio: data.slowInferencesRatio,\n        target: this.config.alertThresholds.inferenceTime\n      })\n    }\n  }\n  \n  private handleWasmMetrics(data: any): void {\n    console.log(`\uD83D\uDCCA WASM metrics: avg ${data.average}ms`)\n    \n    // Check for WASM performance issues\n    if (data.average > 20) { // WASM operations should be very fast\n      this.generateAlert('wasm_performance_issue', 'medium', {\n        averageTime: data.average,\n        target: 10\n      })\n    }\n  }\n  \n  private handleMemoryMetrics(data: any): void {\n    console.log(`\uD83D\uDCCA Memory metrics: avg ${(data.average / 1024 / 1024).toFixed(1)}MB`)\n    \n    const memoryMB = data.average / 1024 / 1024\n    if (memoryMB > this.config.alertThresholds.memoryUsage) {\n      this.generateAlert('memory_usage_high', 'medium', {\n        averageUsage: memoryMB,\n        target: this.config.alertThresholds.memoryUsage\n      })\n    }\n  }\n  \n  private handlePerformanceAlert(alert: any): void {\n    console.log(`\uD83D\uDEA8 Performance alert: ${alert.type} (${alert.severity})`)\n    \n    const performanceAlert: PerformanceAlert = {\n      id: alert.id || `alert_${Date.now()}`,\n      agentId: alert.agentId || 'system',\n      timestamp: new Date(),\n      severity: alert.severity || 'medium',\n      type: 'performance',\n      message: alert.message || alert.type,\n      details: alert.data || {},\n      acknowledged: false\n    }\n    \n    this.activeAlerts.set(performanceAlert.id, performanceAlert)\n  }\n  \n  private handleBottleneckDetected(bottleneck: any): void {\n    console.log(`\uD83D\uDD0D Bottleneck detected: ${bottleneck.component}`)\n    \n    this.generateAlert('bottleneck_detected', 'high', {\n      component: bottleneck.component,\n      severity: bottleneck.severity,\n      suggestions: bottleneck.optimizationSuggestions\n    })\n  }\n  \n  private handleBottleneckResolved(bottleneck: any): void {\n    console.log(`\u2705 Bottleneck resolved: ${bottleneck.component}`)\n    \n    // Find and resolve related alerts\n    for (const [alertId, alert] of this.activeAlerts) {\n      if (alert.details.component === bottleneck.component) {\n        this.resolveAlert(alertId)\n      }\n    }\n  }\n  \n  private handleOptimizationApplied(optimization: any): void {\n    console.log(`\uD83D\uDD27 Optimization applied: ${optimization.optimizations.join(', ')}`)\n  }\n  \n  private checkPerformanceThresholds(snapshot: NeuralPerformanceSnapshot): void {\n    const { alertThresholds } = this.config\n    \n    // Check inference time\n    if (snapshot.inferenceTime > alertThresholds.inferenceTime) {\n      this.generateAlert('inference_time_exceeded', 'medium', {\n        agentId: snapshot.agentId,\n        inferenceTime: snapshot.inferenceTime,\n        threshold: alertThresholds.inferenceTime\n      })\n    }\n    \n    // Check memory usage\n    const memoryMB = snapshot.memoryUsage / 1024 / 1024\n    if (memoryMB > alertThresholds.memoryUsage) {\n      this.generateAlert('memory_threshold_exceeded', 'medium', {\n        agentId: snapshot.agentId,\n        memoryUsage: memoryMB,\n        threshold: alertThresholds.memoryUsage\n      })\n    }\n    \n    // Check CPU usage\n    if (snapshot.cpuUsage > alertThresholds.cpuUsage) {\n      this.generateAlert('cpu_threshold_exceeded', 'medium', {\n        agentId: snapshot.agentId,\n        cpuUsage: snapshot.cpuUsage,\n        threshold: alertThresholds.cpuUsage\n      })\n    }\n    \n    // Check accuracy\n    if (snapshot.accuracy < alertThresholds.accuracy && snapshot.accuracy > 0) {\n      this.generateAlert('accuracy_below_threshold', 'high', {\n        agentId: snapshot.agentId,\n        accuracy: snapshot.accuracy,\n        threshold: alertThresholds.accuracy\n      })\n    }\n  }\n  \n  private generateAlert(type: string, severity: PerformanceAlert['severity'], details: any): void {\n    const alert: PerformanceAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      agentId: details.agentId || 'system',\n      timestamp: new Date(),\n      severity,\n      type: type as any,\n      message: this.generateAlertMessage(type, details),\n      details,\n      acknowledged: false\n    }\n    \n    this.activeAlerts.set(alert.id, alert)\n    console.log(`\uD83D\uDEA8 Generated alert: ${alert.message}`)\n  }\n  \n  private generateAlertMessage(type: string, details: any): string {\n    switch (type) {\n      case 'inference_time_exceeded':\n        return `Agent ${details.agentId} inference time (${details.inferenceTime}ms) exceeded threshold (${details.threshold}ms)`\n      case 'memory_threshold_exceeded':\n        return `Agent ${details.agentId} memory usage (${details.memoryUsage.toFixed(1)}MB) exceeded threshold (${details.threshold}MB)`\n      case 'cpu_threshold_exceeded':\n        return `Agent ${details.agentId} CPU usage (${details.cpuUsage}%) exceeded threshold (${details.threshold}%)`\n      case 'accuracy_below_threshold':\n        return `Agent ${details.agentId} accuracy (${(details.accuracy * 100).toFixed(1)}%) below threshold (${(details.threshold * 100).toFixed(1)}%)`\n      case 'bottleneck_detected':\n        return `Performance bottleneck detected in ${details.component}`\n      default:\n        return `Performance issue detected: ${type}`\n    }\n  }\n  \n  private updateSystemHealth(): void {\n    const now = new Date()\n    const uptime = now.getTime() - (this.systemHealth.lastCheck?.getTime() || now.getTime())\n    \n    // Calculate component scores based on recent metrics\n    const componentScores = {\n      neural: this.calculateNeuralHealth(),\n      memory: this.calculateMemoryHealth(),\n      performance: this.calculatePerformanceHealth(),\n      network: this.calculateNetworkHealth(),\n      wasm: this.calculateWasmHealth()\n    }\n    \n    // Calculate overall score\n    const weights = { neural: 0.3, memory: 0.2, performance: 0.3, network: 0.1, wasm: 0.1 }\n    const overallScore = Object.entries(componentScores).reduce(\n      (score, [component, value]) => score + value * weights[component as keyof typeof weights],\n      0\n    )\n    \n    this.systemHealth = {\n      overallScore: Math.round(overallScore),\n      componentScores,\n      activeAlerts: Array.from(this.activeAlerts.values()),\n      recommendations: this.generateRecommendations(),\n      uptime: uptime,\n      lastCheck: now\n    }\n  }\n  \n  private calculateNeuralHealth(): number {\n    // Base health score\n    let score = 100\n    \n    // Deduct for alerts\n    const neuralAlerts = Array.from(this.activeAlerts.values()).filter(\n      alert => alert.type === 'performance' || alert.type === 'accuracy'\n    )\n    score -= neuralAlerts.length * 10\n    \n    return Math.max(0, score)\n  }\n  \n  private calculateMemoryHealth(): number {\n    let score = 100\n    const memoryAlerts = Array.from(this.activeAlerts.values()).filter(\n      alert => alert.type === 'memory'\n    )\n    score -= memoryAlerts.length * 15\n    return Math.max(0, score)\n  }\n  \n  private calculatePerformanceHealth(): number {\n    let score = 100\n    const performanceAlerts = Array.from(this.activeAlerts.values()).filter(\n      alert => alert.type === 'performance' || alert.type === 'latency'\n    )\n    score -= performanceAlerts.length * 12\n    return Math.max(0, score)\n  }\n  \n  private calculateNetworkHealth(): number {\n    // Simplified network health calculation\n    return 95 + Math.random() * 5 // 95-100%\n  }\n  \n  private calculateWasmHealth(): number {\n    // Check if WASM is working properly\n    return this.performanceMonitor ? 100 : 50\n  }\n  \n  private generateRecommendations(): string[] {\n    const recommendations: string[] = []\n    \n    if (this.systemHealth.overallScore < 80) {\n      recommendations.push('System performance is degraded. Consider investigating active alerts.')\n    }\n    \n    if (this.activeAlerts.size > 5) {\n      recommendations.push('High number of active alerts. Consider addressing critical issues first.')\n    }\n    \n    const memoryAlerts = Array.from(this.activeAlerts.values()).filter(a => a.type === 'memory')\n    if (memoryAlerts.length > 0) {\n      recommendations.push('Memory usage is high. Consider optimizing neural network architectures.')\n    }\n    \n    if (!this.config.enablePredictiveAnalysis) {\n      recommendations.push('Enable predictive analysis for better performance insights.')\n    }\n    \n    return recommendations\n  }\n  \n  private calculateAverageMetrics(history: NeuralPerformanceSnapshot[]): any {\n    if (history.length === 0) return null\n    \n    const sum = history.reduce((acc, snapshot) => ({\n      inferenceTime: acc.inferenceTime + snapshot.inferenceTime,\n      memoryUsage: acc.memoryUsage + snapshot.memoryUsage,\n      cpuUsage: acc.cpuUsage + snapshot.cpuUsage,\n      accuracy: acc.accuracy + snapshot.accuracy\n    }), { inferenceTime: 0, memoryUsage: 0, cpuUsage: 0, accuracy: 0 })\n    \n    const count = history.length\n    return {\n      inferenceTime: sum.inferenceTime / count,\n      memoryUsage: sum.memoryUsage / count,\n      cpuUsage: sum.cpuUsage / count,\n      accuracy: sum.accuracy / count\n    }\n  }\n  \n  private analyzeTrends(history: NeuralPerformanceSnapshot[]): any {\n    if (history.length < 2) return null\n    \n    const recent = history.slice(-Math.min(10, history.length))\n    const older = history.slice(0, Math.min(10, history.length))\n    \n    const recentAvg = this.calculateAverageMetrics(recent)\n    const olderAvg = this.calculateAverageMetrics(older)\n    \n    if (!recentAvg || !olderAvg) return null\n    \n    return {\n      inferenceTimeTrend: recentAvg.inferenceTime - olderAvg.inferenceTime,\n      memoryUsageTrend: recentAvg.memoryUsage - olderAvg.memoryUsage,\n      cpuUsageTrend: recentAvg.cpuUsage - olderAvg.cpuUsage,\n      accuracyTrend: recentAvg.accuracy - olderAvg.accuracy\n    }\n  }\n}\n\nexport default PerformanceIntegration"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "13a0b0cdf0256c18df9306a9ce0338044f37fd07"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1b28uecsrs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1b28uecsrs();
/**
 * Performance Integration Service
 *
 * Integrates SASI with synaptic-mesh performance monitoring suite.
 * Provides real-time performance tracking for neural agents and
 * connects to the existing performance dashboard infrastructure.
 */
export class PerformanceIntegration {
  constructor(config =
  /* istanbul ignore next */
  (cov_1b28uecsrs().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[0]++;
    cov_1b28uecsrs().s[0]++;
    Object.defineProperty(this, "performanceMonitor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[1]++;
    Object.defineProperty(this, "isInitialized", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[2]++;
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[3]++;
    Object.defineProperty(this, "metricsHistory", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Map()
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[4]++;
    Object.defineProperty(this, "activeAlerts", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Map()
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[5]++;
    Object.defineProperty(this, "systemHealth", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[6]++;
    this.config = {
      enableRealTimeMonitoring: true,
      enableBottleneckDetection: true,
      enablePredictiveAnalysis: false,
      // Requires ML model
      enableAutoOptimization: false,
      // Safety first
      dashboardEnabled: true,
      alertThresholds: {
        inferenceTime: 100,
        // 100ms
        memoryUsage: 50,
        // 50MB
        cpuUsage: 80,
        // 80%
        accuracy: 0.85,
        // 85%
        errorRate: 0.05 // 5%
      },
      updateInterval: 1000,
      // 1 second
      historyRetention: 24,
      // 24 hours
      ...config
    };
    /* istanbul ignore next */
    cov_1b28uecsrs().s[7]++;
    this.systemHealth = {
      overallScore: 100,
      componentScores: {
        neural: 100,
        memory: 100,
        performance: 100,
        network: 100,
        wasm: 100
      },
      activeAlerts: [],
      recommendations: [],
      uptime: 0,
      lastCheck: new Date()
    };
  }
  /**
   * Initialize Performance Integration
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[1]++;
    cov_1b28uecsrs().s[8]++;
    try {
      /* istanbul ignore next */
      cov_1b28uecsrs().s[9]++;
      console.log('📊 Initializing Performance Integration...');
      // Import and initialize performance monitoring suite
      const PerformanceMonitoringSuite =
      /* istanbul ignore next */
      (cov_1b28uecsrs().s[10]++, require('../../../synaptic-mesh/src/neural/performance-monitoring-suite.js'));
      /* istanbul ignore next */
      cov_1b28uecsrs().s[11]++;
      this.performanceMonitor = new PerformanceMonitoringSuite({
        // Neural-specific targets
        targetSpawnTime: 100,
        // ms
        targetMemoryPerAgent: this.config.alertThresholds.memoryUsage * 1024 * 1024,
        // Convert MB to bytes
        targetInferenceTime: this.config.alertThresholds.inferenceTime,
        // ms
        targetWasmOperationTime: 10,
        // ms
        // Feature flags
        enableRealTimeMonitoring: this.config.enableRealTimeMonitoring,
        enableBottleneckDetection: this.config.enableBottleneckDetection,
        enableMLPrediction: this.config.enablePredictiveAnalysis,
        enableDashboardUI: this.config.dashboardEnabled,
        enableAutoOptimization: this.config.enableAutoOptimization,
        // Alert configuration
        alertSeverityThreshold: 'medium',
        // Dashboard settings
        dashboardPort: 8080,
        dashboardUpdateInterval: this.config.updateInterval
      });
      // Set up event handlers
      /* istanbul ignore next */
      cov_1b28uecsrs().s[12]++;
      this.setupEventHandlers();
      // Start monitoring if enabled
      /* istanbul ignore next */
      cov_1b28uecsrs().s[13]++;
      if (this.config.enableRealTimeMonitoring) {
        /* istanbul ignore next */
        cov_1b28uecsrs().b[1][0]++;
        cov_1b28uecsrs().s[14]++;
        await this.performanceMonitor.startMonitoring();
      } else
      /* istanbul ignore next */
      {
        cov_1b28uecsrs().b[1][1]++;
      }
      cov_1b28uecsrs().s[15]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[16]++;
      console.log('✅ Performance Integration initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_1b28uecsrs().s[17]++;
      console.error('❌ Failed to initialize Performance Integration:', error);
      /* istanbul ignore next */
      cov_1b28uecsrs().s[18]++;
      throw error;
    }
  }
  /**
   * Setup Event Handlers
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[2]++;
    cov_1b28uecsrs().s[19]++;
    if (!this.performanceMonitor) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[2][0]++;
      cov_1b28uecsrs().s[20]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[2][1]++;
    }
    // Agent performance events
    cov_1b28uecsrs().s[21]++;
    this.performanceMonitor.on('agentSpawnAnalysis', data => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[3]++;
      cov_1b28uecsrs().s[22]++;
      this.handleAgentSpawnMetrics(data);
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[23]++;
    this.performanceMonitor.on('neuralInferenceAnalysis', data => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[4]++;
      cov_1b28uecsrs().s[24]++;
      this.handleInferenceMetrics(data);
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[25]++;
    this.performanceMonitor.on('wasmOperationAnalysis', data => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[5]++;
      cov_1b28uecsrs().s[26]++;
      this.handleWasmMetrics(data);
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[27]++;
    this.performanceMonitor.on('memoryAnalysis', data => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[6]++;
      cov_1b28uecsrs().s[28]++;
      this.handleMemoryMetrics(data);
    });
    // Alert events
    /* istanbul ignore next */
    cov_1b28uecsrs().s[29]++;
    this.performanceMonitor.on('alert', alert => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[7]++;
      cov_1b28uecsrs().s[30]++;
      this.handlePerformanceAlert(alert);
    });
    // Bottleneck events
    /* istanbul ignore next */
    cov_1b28uecsrs().s[31]++;
    this.performanceMonitor.on('bottleneckDetected', bottleneck => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[8]++;
      cov_1b28uecsrs().s[32]++;
      this.handleBottleneckDetected(bottleneck);
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[33]++;
    this.performanceMonitor.on('bottleneckResolved', bottleneck => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[9]++;
      cov_1b28uecsrs().s[34]++;
      this.handleBottleneckResolved(bottleneck);
    });
    // Optimization events
    /* istanbul ignore next */
    cov_1b28uecsrs().s[35]++;
    this.performanceMonitor.on('optimizationsApplied', optimization => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[10]++;
      cov_1b28uecsrs().s[36]++;
      this.handleOptimizationApplied(optimization);
    });
  }
  /**
   * Record Agent Performance Metrics
   */
  recordAgentMetrics(agentId, metrics) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[11]++;
    cov_1b28uecsrs().s[37]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[3][0]++;
      cov_1b28uecsrs().s[38]++;
      console.warn('⚠️ Performance integration not initialized');
      /* istanbul ignore next */
      cov_1b28uecsrs().s[39]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[3][1]++;
    }
    const snapshot =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[40]++, {
      timestamp: new Date(),
      agentId,
      inferenceTime:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[4][0]++, metrics.inferenceTime) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[4][1]++, 0),
      trainingTime: metrics.trainingTime,
      preprocessingTime:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[5][0]++, metrics.preprocessingTime) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[5][1]++, 0),
      postprocessingTime:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[6][0]++, metrics.postprocessingTime) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[6][1]++, 0),
      memoryUsage:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[7][0]++, metrics.memoryUsage) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[7][1]++, 0),
      cpuUsage:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[8][0]++, metrics.cpuUsage) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[8][1]++, 0),
      gpuUsage: metrics.gpuUsage,
      energyConsumption:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[9][0]++, metrics.energyConsumption) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[9][1]++, 0),
      accuracy:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[10][0]++, metrics.accuracy) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[10][1]++, 0),
      precision:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[11][0]++, metrics.precision) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[11][1]++, 0),
      recall:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[12][0]++, metrics.recall) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[12][1]++, 0),
      f1Score:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[13][0]++, metrics.f1Score) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[13][1]++, 0),
      networkLatency:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[14][0]++, metrics.networkLatency) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[14][1]++, 0),
      bandwidthUsage:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[15][0]++, metrics.bandwidthUsage) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[15][1]++, 0),
      packetsLost:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[16][0]++, metrics.packetsLost) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[16][1]++, 0)
    });
    // Store in history
    /* istanbul ignore next */
    cov_1b28uecsrs().s[41]++;
    if (!this.metricsHistory.has(agentId)) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[17][0]++;
      cov_1b28uecsrs().s[42]++;
      this.metricsHistory.set(agentId, []);
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[17][1]++;
    }
    const agentHistory =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[43]++, this.metricsHistory.get(agentId));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[44]++;
    agentHistory.push(snapshot);
    // Limit history size
    const maxHistorySize =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[45]++, this.config.historyRetention * 3600 / (this.config.updateInterval / 1000));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[46]++;
    if (agentHistory.length > maxHistorySize) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[18][0]++;
      cov_1b28uecsrs().s[47]++;
      agentHistory.shift();
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[18][1]++;
    }
    // Check thresholds and generate alerts
    cov_1b28uecsrs().s[48]++;
    this.checkPerformanceThresholds(snapshot);
    // Report to performance monitor
    /* istanbul ignore next */
    cov_1b28uecsrs().s[49]++;
    if (this.performanceMonitor) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[19][0]++;
      cov_1b28uecsrs().s[50]++;
      this.performanceMonitor.emit('agentMetricsRecorded', snapshot);
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[19][1]++;
    }
  }
  /**
   * Get Agent Performance History
   */
  getAgentHistory(agentId, timeRange) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[12]++;
    const history =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[51]++,
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[20][0]++, this.metricsHistory.get(agentId)) ||
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[20][1]++, []));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[52]++;
    if (!timeRange) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[21][0]++;
      cov_1b28uecsrs().s[53]++;
      return history;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[21][1]++;
    }
    const cutoffTime =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[54]++, new Date(Date.now() - timeRange));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[55]++;
    return history.filter(snapshot => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[13]++;
      cov_1b28uecsrs().s[56]++;
      return snapshot.timestamp >= cutoffTime;
    });
  }
  /**
   * Get System Health Metrics
   */
  getSystemHealth() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[14]++;
    cov_1b28uecsrs().s[57]++;
    this.updateSystemHealth();
    /* istanbul ignore next */
    cov_1b28uecsrs().s[58]++;
    return {
      ...this.systemHealth
    };
  }
  /**
   * Get Performance Dashboard Data
   */
  getDashboardData() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[15]++;
    cov_1b28uecsrs().s[59]++;
    if (!this.performanceMonitor) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[22][0]++;
      cov_1b28uecsrs().s[60]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[22][1]++;
    }
    cov_1b28uecsrs().s[61]++;
    return this.performanceMonitor.getPerformanceReport();
  }
  /**
   * Get Active Alerts
   */
  getActiveAlerts() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[16]++;
    cov_1b28uecsrs().s[62]++;
    return Array.from(this.activeAlerts.values());
  }
  /**
   * Acknowledge Alert
   */
  acknowledgeAlert(alertId) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[17]++;
    const alert =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[63]++, this.activeAlerts.get(alertId));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[64]++;
    if (alert) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[23][0]++;
      cov_1b28uecsrs().s[65]++;
      alert.acknowledged = true;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[66]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[23][1]++;
    }
    cov_1b28uecsrs().s[67]++;
    return false;
  }
  /**
   * Resolve Alert
   */
  resolveAlert(alertId) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[18]++;
    const alert =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[68]++, this.activeAlerts.get(alertId));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[69]++;
    if (alert) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[24][0]++;
      cov_1b28uecsrs().s[70]++;
      alert.resolvedAt = new Date();
      /* istanbul ignore next */
      cov_1b28uecsrs().s[71]++;
      this.activeAlerts.delete(alertId);
      /* istanbul ignore next */
      cov_1b28uecsrs().s[72]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[24][1]++;
    }
    cov_1b28uecsrs().s[73]++;
    return false;
  }
  /**
   * Generate Performance Report
   */
  generatePerformanceReport(agentIds) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[19]++;
    const agents =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[74]++,
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[25][0]++, agentIds) ||
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[25][1]++, Array.from(this.metricsHistory.keys())));
    const report =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[75]++, {
      timestamp: new Date(),
      summary: {
        totalAgents: agents.length,
        averageInferenceTime: 0,
        averageMemoryUsage: 0,
        averageCpuUsage: 0,
        averageAccuracy: 0
      },
      agentDetails: {},
      systemHealth: this.getSystemHealth(),
      activeAlerts: this.getActiveAlerts(),
      recommendations: this.generateRecommendations()
    });
    // Calculate aggregated metrics
    let totalInferenceTime =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[76]++, 0);
    let totalMemoryUsage =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[77]++, 0);
    let totalCpuUsage =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[78]++, 0);
    let totalAccuracy =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[79]++, 0);
    let validAgents =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[80]++, 0);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[81]++;
    for (const agentId of agents) {
      const history =
      /* istanbul ignore next */
      (cov_1b28uecsrs().s[82]++, this.getAgentHistory(agentId, 3600000)); // Last hour
      /* istanbul ignore next */
      cov_1b28uecsrs().s[83]++;
      if (history.length === 0) {
        /* istanbul ignore next */
        cov_1b28uecsrs().b[26][0]++;
        cov_1b28uecsrs().s[84]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1b28uecsrs().b[26][1]++;
      }
      const latestSnapshot =
      /* istanbul ignore next */
      (cov_1b28uecsrs().s[85]++, history[history.length - 1]);
      const agentReport =
      /* istanbul ignore next */
      (cov_1b28uecsrs().s[86]++, {
        agentId,
        latestMetrics: latestSnapshot,
        averageMetrics: this.calculateAverageMetrics(history),
        trendAnalysis: this.analyzeTrends(history)
      });
      /* istanbul ignore next */
      cov_1b28uecsrs().s[87]++;
      report.agentDetails[agentId] = agentReport;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[88]++;
      totalInferenceTime += latestSnapshot.inferenceTime;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[89]++;
      totalMemoryUsage += latestSnapshot.memoryUsage;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[90]++;
      totalCpuUsage += latestSnapshot.cpuUsage;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[91]++;
      totalAccuracy += latestSnapshot.accuracy;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[92]++;
      validAgents++;
    }
    // Calculate averages
    /* istanbul ignore next */
    cov_1b28uecsrs().s[93]++;
    if (validAgents > 0) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[27][0]++;
      cov_1b28uecsrs().s[94]++;
      report.summary.averageInferenceTime = totalInferenceTime / validAgents;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[95]++;
      report.summary.averageMemoryUsage = totalMemoryUsage / validAgents;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[96]++;
      report.summary.averageCpuUsage = totalCpuUsage / validAgents;
      /* istanbul ignore next */
      cov_1b28uecsrs().s[97]++;
      report.summary.averageAccuracy = totalAccuracy / validAgents;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[27][1]++;
    }
    cov_1b28uecsrs().s[98]++;
    return report;
  }
  /**
   * Cleanup Resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[20]++;
    cov_1b28uecsrs().s[99]++;
    if (this.performanceMonitor) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[28][0]++;
      cov_1b28uecsrs().s[100]++;
      try {
        /* istanbul ignore next */
        cov_1b28uecsrs().s[101]++;
        await this.performanceMonitor.cleanup();
        /* istanbul ignore next */
        cov_1b28uecsrs().s[102]++;
        console.log('✅ Performance monitor cleaned up');
      } catch (error) {
        /* istanbul ignore next */
        cov_1b28uecsrs().s[103]++;
        console.error('❌ Failed to cleanup performance monitor:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[28][1]++;
    }
    cov_1b28uecsrs().s[104]++;
    this.metricsHistory.clear();
    /* istanbul ignore next */
    cov_1b28uecsrs().s[105]++;
    this.activeAlerts.clear();
    /* istanbul ignore next */
    cov_1b28uecsrs().s[106]++;
    this.isInitialized = false;
  }
  // ===== PRIVATE METHODS =====
  handleAgentSpawnMetrics(data) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[21]++;
    cov_1b28uecsrs().s[107]++;
    console.log(`📊 Agent spawn metrics: avg ${data.average}ms (${data.count} agents)`);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[108]++;
    if (data.average > this.config.alertThresholds.inferenceTime * 2) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[29][0]++;
      cov_1b28uecsrs().s[109]++;
      this.generateAlert('agent_spawn_slow', 'high', {
        averageSpawnTime: data.average,
        target: this.config.alertThresholds.inferenceTime * 2,
        count: data.count
      });
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[29][1]++;
    }
  }
  handleInferenceMetrics(data) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[22]++;
    cov_1b28uecsrs().s[110]++;
    console.log(`📊 Inference metrics: avg ${data.average}ms`);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[111]++;
    if (data.slowInferencesRatio > 0.3) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[30][0]++;
      cov_1b28uecsrs().s[112]++;
      this.generateAlert('inference_performance_degraded', 'medium', {
        averageTime: data.average,
        slowRatio: data.slowInferencesRatio,
        target: this.config.alertThresholds.inferenceTime
      });
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[30][1]++;
    }
  }
  handleWasmMetrics(data) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[23]++;
    cov_1b28uecsrs().s[113]++;
    console.log(`📊 WASM metrics: avg ${data.average}ms`);
    // Check for WASM performance issues
    /* istanbul ignore next */
    cov_1b28uecsrs().s[114]++;
    if (data.average > 20) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[31][0]++;
      cov_1b28uecsrs().s[115]++;
      // WASM operations should be very fast
      this.generateAlert('wasm_performance_issue', 'medium', {
        averageTime: data.average,
        target: 10
      });
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[31][1]++;
    }
  }
  handleMemoryMetrics(data) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[24]++;
    cov_1b28uecsrs().s[116]++;
    console.log(`📊 Memory metrics: avg ${(data.average / 1024 / 1024).toFixed(1)}MB`);
    const memoryMB =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[117]++, data.average / 1024 / 1024);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[118]++;
    if (memoryMB > this.config.alertThresholds.memoryUsage) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[32][0]++;
      cov_1b28uecsrs().s[119]++;
      this.generateAlert('memory_usage_high', 'medium', {
        averageUsage: memoryMB,
        target: this.config.alertThresholds.memoryUsage
      });
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[32][1]++;
    }
  }
  handlePerformanceAlert(alert) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[25]++;
    cov_1b28uecsrs().s[120]++;
    console.log(`🚨 Performance alert: ${alert.type} (${alert.severity})`);
    const performanceAlert =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[121]++, {
      id:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[33][0]++, alert.id) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[33][1]++, `alert_${Date.now()}`),
      agentId:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[34][0]++, alert.agentId) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[34][1]++, 'system'),
      timestamp: new Date(),
      severity:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[35][0]++, alert.severity) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[35][1]++, 'medium'),
      type: 'performance',
      message:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[36][0]++, alert.message) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[36][1]++, alert.type),
      details:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[37][0]++, alert.data) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[37][1]++, {}),
      acknowledged: false
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[122]++;
    this.activeAlerts.set(performanceAlert.id, performanceAlert);
  }
  handleBottleneckDetected(bottleneck) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[26]++;
    cov_1b28uecsrs().s[123]++;
    console.log(`🔍 Bottleneck detected: ${bottleneck.component}`);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[124]++;
    this.generateAlert('bottleneck_detected', 'high', {
      component: bottleneck.component,
      severity: bottleneck.severity,
      suggestions: bottleneck.optimizationSuggestions
    });
  }
  handleBottleneckResolved(bottleneck) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[27]++;
    cov_1b28uecsrs().s[125]++;
    console.log(`✅ Bottleneck resolved: ${bottleneck.component}`);
    // Find and resolve related alerts
    /* istanbul ignore next */
    cov_1b28uecsrs().s[126]++;
    for (const [alertId, alert] of this.activeAlerts) {
      /* istanbul ignore next */
      cov_1b28uecsrs().s[127]++;
      if (alert.details.component === bottleneck.component) {
        /* istanbul ignore next */
        cov_1b28uecsrs().b[38][0]++;
        cov_1b28uecsrs().s[128]++;
        this.resolveAlert(alertId);
      } else
      /* istanbul ignore next */
      {
        cov_1b28uecsrs().b[38][1]++;
      }
    }
  }
  handleOptimizationApplied(optimization) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[28]++;
    cov_1b28uecsrs().s[129]++;
    console.log(`🔧 Optimization applied: ${optimization.optimizations.join(', ')}`);
  }
  checkPerformanceThresholds(snapshot) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[29]++;
    const {
      alertThresholds
    } =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[130]++, this.config);
    // Check inference time
    /* istanbul ignore next */
    cov_1b28uecsrs().s[131]++;
    if (snapshot.inferenceTime > alertThresholds.inferenceTime) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[39][0]++;
      cov_1b28uecsrs().s[132]++;
      this.generateAlert('inference_time_exceeded', 'medium', {
        agentId: snapshot.agentId,
        inferenceTime: snapshot.inferenceTime,
        threshold: alertThresholds.inferenceTime
      });
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[39][1]++;
    }
    // Check memory usage
    const memoryMB =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[133]++, snapshot.memoryUsage / 1024 / 1024);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[134]++;
    if (memoryMB > alertThresholds.memoryUsage) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[40][0]++;
      cov_1b28uecsrs().s[135]++;
      this.generateAlert('memory_threshold_exceeded', 'medium', {
        agentId: snapshot.agentId,
        memoryUsage: memoryMB,
        threshold: alertThresholds.memoryUsage
      });
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[40][1]++;
    }
    // Check CPU usage
    cov_1b28uecsrs().s[136]++;
    if (snapshot.cpuUsage > alertThresholds.cpuUsage) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[41][0]++;
      cov_1b28uecsrs().s[137]++;
      this.generateAlert('cpu_threshold_exceeded', 'medium', {
        agentId: snapshot.agentId,
        cpuUsage: snapshot.cpuUsage,
        threshold: alertThresholds.cpuUsage
      });
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[41][1]++;
    }
    // Check accuracy
    cov_1b28uecsrs().s[138]++;
    if (
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[43][0]++, snapshot.accuracy < alertThresholds.accuracy) &&
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[43][1]++, snapshot.accuracy > 0)) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[42][0]++;
      cov_1b28uecsrs().s[139]++;
      this.generateAlert('accuracy_below_threshold', 'high', {
        agentId: snapshot.agentId,
        accuracy: snapshot.accuracy,
        threshold: alertThresholds.accuracy
      });
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[42][1]++;
    }
  }
  generateAlert(type, severity, details) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[30]++;
    const alert =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[140]++, {
      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
      agentId:
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[44][0]++, details.agentId) ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[44][1]++, 'system'),
      timestamp: new Date(),
      severity,
      type: type,
      message: this.generateAlertMessage(type, details),
      details,
      acknowledged: false
    });
    /* istanbul ignore next */
    cov_1b28uecsrs().s[141]++;
    this.activeAlerts.set(alert.id, alert);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[142]++;
    console.log(`🚨 Generated alert: ${alert.message}`);
  }
  generateAlertMessage(type, details) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[31]++;
    cov_1b28uecsrs().s[143]++;
    switch (type) {
      case 'inference_time_exceeded':
        /* istanbul ignore next */
        cov_1b28uecsrs().b[45][0]++;
        cov_1b28uecsrs().s[144]++;
        return `Agent ${details.agentId} inference time (${details.inferenceTime}ms) exceeded threshold (${details.threshold}ms)`;
      case 'memory_threshold_exceeded':
        /* istanbul ignore next */
        cov_1b28uecsrs().b[45][1]++;
        cov_1b28uecsrs().s[145]++;
        return `Agent ${details.agentId} memory usage (${details.memoryUsage.toFixed(1)}MB) exceeded threshold (${details.threshold}MB)`;
      case 'cpu_threshold_exceeded':
        /* istanbul ignore next */
        cov_1b28uecsrs().b[45][2]++;
        cov_1b28uecsrs().s[146]++;
        return `Agent ${details.agentId} CPU usage (${details.cpuUsage}%) exceeded threshold (${details.threshold}%)`;
      case 'accuracy_below_threshold':
        /* istanbul ignore next */
        cov_1b28uecsrs().b[45][3]++;
        cov_1b28uecsrs().s[147]++;
        return `Agent ${details.agentId} accuracy (${(details.accuracy * 100).toFixed(1)}%) below threshold (${(details.threshold * 100).toFixed(1)}%)`;
      case 'bottleneck_detected':
        /* istanbul ignore next */
        cov_1b28uecsrs().b[45][4]++;
        cov_1b28uecsrs().s[148]++;
        return `Performance bottleneck detected in ${details.component}`;
      default:
        /* istanbul ignore next */
        cov_1b28uecsrs().b[45][5]++;
        cov_1b28uecsrs().s[149]++;
        return `Performance issue detected: ${type}`;
    }
  }
  updateSystemHealth() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[32]++;
    const now =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[150]++, new Date());
    const uptime =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[151]++, now.getTime() - (
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[46][0]++, this.systemHealth.lastCheck?.getTime()) ||
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[46][1]++, now.getTime())));
    // Calculate component scores based on recent metrics
    const componentScores =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[152]++, {
      neural: this.calculateNeuralHealth(),
      memory: this.calculateMemoryHealth(),
      performance: this.calculatePerformanceHealth(),
      network: this.calculateNetworkHealth(),
      wasm: this.calculateWasmHealth()
    });
    // Calculate overall score
    const weights =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[153]++, {
      neural: 0.3,
      memory: 0.2,
      performance: 0.3,
      network: 0.1,
      wasm: 0.1
    });
    const overallScore =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[154]++, Object.entries(componentScores).reduce((score, [component, value]) => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[33]++;
      cov_1b28uecsrs().s[155]++;
      return score + value * weights[component];
    }, 0));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[156]++;
    this.systemHealth = {
      overallScore: Math.round(overallScore),
      componentScores,
      activeAlerts: Array.from(this.activeAlerts.values()),
      recommendations: this.generateRecommendations(),
      uptime: uptime,
      lastCheck: now
    };
  }
  calculateNeuralHealth() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[34]++;
    // Base health score
    let score =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[157]++, 100);
    // Deduct for alerts
    const neuralAlerts =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[158]++, Array.from(this.activeAlerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[35]++;
      cov_1b28uecsrs().s[159]++;
      return /* istanbul ignore next */(cov_1b28uecsrs().b[47][0]++, alert.type === 'performance') ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[47][1]++, alert.type === 'accuracy');
    }));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[160]++;
    score -= neuralAlerts.length * 10;
    /* istanbul ignore next */
    cov_1b28uecsrs().s[161]++;
    return Math.max(0, score);
  }
  calculateMemoryHealth() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[36]++;
    let score =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[162]++, 100);
    const memoryAlerts =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[163]++, Array.from(this.activeAlerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[37]++;
      cov_1b28uecsrs().s[164]++;
      return alert.type === 'memory';
    }));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[165]++;
    score -= memoryAlerts.length * 15;
    /* istanbul ignore next */
    cov_1b28uecsrs().s[166]++;
    return Math.max(0, score);
  }
  calculatePerformanceHealth() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[38]++;
    let score =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[167]++, 100);
    const performanceAlerts =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[168]++, Array.from(this.activeAlerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[39]++;
      cov_1b28uecsrs().s[169]++;
      return /* istanbul ignore next */(cov_1b28uecsrs().b[48][0]++, alert.type === 'performance') ||
      /* istanbul ignore next */
      (cov_1b28uecsrs().b[48][1]++, alert.type === 'latency');
    }));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[170]++;
    score -= performanceAlerts.length * 12;
    /* istanbul ignore next */
    cov_1b28uecsrs().s[171]++;
    return Math.max(0, score);
  }
  calculateNetworkHealth() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[40]++;
    cov_1b28uecsrs().s[172]++;
    // Simplified network health calculation
    return 95 + Math.random() * 5; // 95-100%
  }
  calculateWasmHealth() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[41]++;
    cov_1b28uecsrs().s[173]++;
    // Check if WASM is working properly
    return this.performanceMonitor ?
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[49][0]++, 100) :
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[49][1]++, 50);
  }
  generateRecommendations() {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[42]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[174]++, []);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[175]++;
    if (this.systemHealth.overallScore < 80) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[50][0]++;
      cov_1b28uecsrs().s[176]++;
      recommendations.push('System performance is degraded. Consider investigating active alerts.');
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[50][1]++;
    }
    cov_1b28uecsrs().s[177]++;
    if (this.activeAlerts.size > 5) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[51][0]++;
      cov_1b28uecsrs().s[178]++;
      recommendations.push('High number of active alerts. Consider addressing critical issues first.');
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[51][1]++;
    }
    const memoryAlerts =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[179]++, Array.from(this.activeAlerts.values()).filter(a => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[43]++;
      cov_1b28uecsrs().s[180]++;
      return a.type === 'memory';
    }));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[181]++;
    if (memoryAlerts.length > 0) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[52][0]++;
      cov_1b28uecsrs().s[182]++;
      recommendations.push('Memory usage is high. Consider optimizing neural network architectures.');
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[52][1]++;
    }
    cov_1b28uecsrs().s[183]++;
    if (!this.config.enablePredictiveAnalysis) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[53][0]++;
      cov_1b28uecsrs().s[184]++;
      recommendations.push('Enable predictive analysis for better performance insights.');
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[53][1]++;
    }
    cov_1b28uecsrs().s[185]++;
    return recommendations;
  }
  calculateAverageMetrics(history) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[44]++;
    cov_1b28uecsrs().s[186]++;
    if (history.length === 0) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[54][0]++;
      cov_1b28uecsrs().s[187]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[54][1]++;
    }
    const sum =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[188]++, history.reduce((acc, snapshot) => {
      /* istanbul ignore next */
      cov_1b28uecsrs().f[45]++;
      cov_1b28uecsrs().s[189]++;
      return {
        inferenceTime: acc.inferenceTime + snapshot.inferenceTime,
        memoryUsage: acc.memoryUsage + snapshot.memoryUsage,
        cpuUsage: acc.cpuUsage + snapshot.cpuUsage,
        accuracy: acc.accuracy + snapshot.accuracy
      };
    }, {
      inferenceTime: 0,
      memoryUsage: 0,
      cpuUsage: 0,
      accuracy: 0
    }));
    const count =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[190]++, history.length);
    /* istanbul ignore next */
    cov_1b28uecsrs().s[191]++;
    return {
      inferenceTime: sum.inferenceTime / count,
      memoryUsage: sum.memoryUsage / count,
      cpuUsage: sum.cpuUsage / count,
      accuracy: sum.accuracy / count
    };
  }
  analyzeTrends(history) {
    /* istanbul ignore next */
    cov_1b28uecsrs().f[46]++;
    cov_1b28uecsrs().s[192]++;
    if (history.length < 2) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[55][0]++;
      cov_1b28uecsrs().s[193]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[55][1]++;
    }
    const recent =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[194]++, history.slice(-Math.min(10, history.length)));
    const older =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[195]++, history.slice(0, Math.min(10, history.length)));
    const recentAvg =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[196]++, this.calculateAverageMetrics(recent));
    const olderAvg =
    /* istanbul ignore next */
    (cov_1b28uecsrs().s[197]++, this.calculateAverageMetrics(older));
    /* istanbul ignore next */
    cov_1b28uecsrs().s[198]++;
    if (
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[57][0]++, !recentAvg) ||
    /* istanbul ignore next */
    (cov_1b28uecsrs().b[57][1]++, !olderAvg)) {
      /* istanbul ignore next */
      cov_1b28uecsrs().b[56][0]++;
      cov_1b28uecsrs().s[199]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1b28uecsrs().b[56][1]++;
    }
    cov_1b28uecsrs().s[200]++;
    return {
      inferenceTimeTrend: recentAvg.inferenceTime - olderAvg.inferenceTime,
      memoryUsageTrend: recentAvg.memoryUsage - olderAvg.memoryUsage,
      cpuUsageTrend: recentAvg.cpuUsage - olderAvg.cpuUsage,
      accuracyTrend: recentAvg.accuracy - olderAvg.accuracy
    };
  }
}
export default PerformanceIntegration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWIyOHVlY3NycyIsImFjdHVhbENvdmVyYWdlIiwiUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbiIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiYiIsImYiLCJzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJNYXAiLCJlbmFibGVSZWFsVGltZU1vbml0b3JpbmciLCJlbmFibGVCb3R0bGVuZWNrRGV0ZWN0aW9uIiwiZW5hYmxlUHJlZGljdGl2ZUFuYWx5c2lzIiwiZW5hYmxlQXV0b09wdGltaXphdGlvbiIsImRhc2hib2FyZEVuYWJsZWQiLCJhbGVydFRocmVzaG9sZHMiLCJpbmZlcmVuY2VUaW1lIiwibWVtb3J5VXNhZ2UiLCJjcHVVc2FnZSIsImFjY3VyYWN5IiwiZXJyb3JSYXRlIiwidXBkYXRlSW50ZXJ2YWwiLCJoaXN0b3J5UmV0ZW50aW9uIiwic3lzdGVtSGVhbHRoIiwib3ZlcmFsbFNjb3JlIiwiY29tcG9uZW50U2NvcmVzIiwibmV1cmFsIiwibWVtb3J5IiwicGVyZm9ybWFuY2UiLCJuZXR3b3JrIiwid2FzbSIsImFjdGl2ZUFsZXJ0cyIsInJlY29tbWVuZGF0aW9ucyIsInVwdGltZSIsImxhc3RDaGVjayIsIkRhdGUiLCJpbml0aWFsaXplIiwiY29uc29sZSIsImxvZyIsIlBlcmZvcm1hbmNlTW9uaXRvcmluZ1N1aXRlIiwicmVxdWlyZSIsInBlcmZvcm1hbmNlTW9uaXRvciIsInRhcmdldFNwYXduVGltZSIsInRhcmdldE1lbW9yeVBlckFnZW50IiwidGFyZ2V0SW5mZXJlbmNlVGltZSIsInRhcmdldFdhc21PcGVyYXRpb25UaW1lIiwiZW5hYmxlTUxQcmVkaWN0aW9uIiwiZW5hYmxlRGFzaGJvYXJkVUkiLCJhbGVydFNldmVyaXR5VGhyZXNob2xkIiwiZGFzaGJvYXJkUG9ydCIsImRhc2hib2FyZFVwZGF0ZUludGVydmFsIiwic2V0dXBFdmVudEhhbmRsZXJzIiwic3RhcnRNb25pdG9yaW5nIiwiaXNJbml0aWFsaXplZCIsImVycm9yIiwib24iLCJkYXRhIiwiaGFuZGxlQWdlbnRTcGF3bk1ldHJpY3MiLCJoYW5kbGVJbmZlcmVuY2VNZXRyaWNzIiwiaGFuZGxlV2FzbU1ldHJpY3MiLCJoYW5kbGVNZW1vcnlNZXRyaWNzIiwiYWxlcnQiLCJoYW5kbGVQZXJmb3JtYW5jZUFsZXJ0IiwiYm90dGxlbmVjayIsImhhbmRsZUJvdHRsZW5lY2tEZXRlY3RlZCIsImhhbmRsZUJvdHRsZW5lY2tSZXNvbHZlZCIsIm9wdGltaXphdGlvbiIsImhhbmRsZU9wdGltaXphdGlvbkFwcGxpZWQiLCJyZWNvcmRBZ2VudE1ldHJpY3MiLCJhZ2VudElkIiwibWV0cmljcyIsIndhcm4iLCJzbmFwc2hvdCIsInRpbWVzdGFtcCIsInRyYWluaW5nVGltZSIsInByZXByb2Nlc3NpbmdUaW1lIiwicG9zdHByb2Nlc3NpbmdUaW1lIiwiZ3B1VXNhZ2UiLCJlbmVyZ3lDb25zdW1wdGlvbiIsInByZWNpc2lvbiIsInJlY2FsbCIsImYxU2NvcmUiLCJuZXR3b3JrTGF0ZW5jeSIsImJhbmR3aWR0aFVzYWdlIiwicGFja2V0c0xvc3QiLCJtZXRyaWNzSGlzdG9yeSIsImhhcyIsInNldCIsImFnZW50SGlzdG9yeSIsImdldCIsInB1c2giLCJtYXhIaXN0b3J5U2l6ZSIsImxlbmd0aCIsInNoaWZ0IiwiY2hlY2tQZXJmb3JtYW5jZVRocmVzaG9sZHMiLCJlbWl0IiwiZ2V0QWdlbnRIaXN0b3J5IiwidGltZVJhbmdlIiwiaGlzdG9yeSIsImN1dG9mZlRpbWUiLCJub3ciLCJmaWx0ZXIiLCJnZXRTeXN0ZW1IZWFsdGgiLCJ1cGRhdGVTeXN0ZW1IZWFsdGgiLCJnZXREYXNoYm9hcmREYXRhIiwiZ2V0UGVyZm9ybWFuY2VSZXBvcnQiLCJnZXRBY3RpdmVBbGVydHMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJhY2tub3dsZWRnZUFsZXJ0IiwiYWxlcnRJZCIsImFja25vd2xlZGdlZCIsInJlc29sdmVBbGVydCIsInJlc29sdmVkQXQiLCJkZWxldGUiLCJnZW5lcmF0ZVBlcmZvcm1hbmNlUmVwb3J0IiwiYWdlbnRJZHMiLCJhZ2VudHMiLCJrZXlzIiwicmVwb3J0Iiwic3VtbWFyeSIsInRvdGFsQWdlbnRzIiwiYXZlcmFnZUluZmVyZW5jZVRpbWUiLCJhdmVyYWdlTWVtb3J5VXNhZ2UiLCJhdmVyYWdlQ3B1VXNhZ2UiLCJhdmVyYWdlQWNjdXJhY3kiLCJhZ2VudERldGFpbHMiLCJnZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyIsInRvdGFsSW5mZXJlbmNlVGltZSIsInRvdGFsTWVtb3J5VXNhZ2UiLCJ0b3RhbENwdVVzYWdlIiwidG90YWxBY2N1cmFjeSIsInZhbGlkQWdlbnRzIiwibGF0ZXN0U25hcHNob3QiLCJhZ2VudFJlcG9ydCIsImxhdGVzdE1ldHJpY3MiLCJhdmVyYWdlTWV0cmljcyIsImNhbGN1bGF0ZUF2ZXJhZ2VNZXRyaWNzIiwidHJlbmRBbmFseXNpcyIsImFuYWx5emVUcmVuZHMiLCJjbGVhbnVwIiwiY2xlYXIiLCJhdmVyYWdlIiwiY291bnQiLCJnZW5lcmF0ZUFsZXJ0IiwiYXZlcmFnZVNwYXduVGltZSIsInRhcmdldCIsInNsb3dJbmZlcmVuY2VzUmF0aW8iLCJhdmVyYWdlVGltZSIsInNsb3dSYXRpbyIsInRvRml4ZWQiLCJtZW1vcnlNQiIsImF2ZXJhZ2VVc2FnZSIsInR5cGUiLCJzZXZlcml0eSIsInBlcmZvcm1hbmNlQWxlcnQiLCJpZCIsIm1lc3NhZ2UiLCJkZXRhaWxzIiwiY29tcG9uZW50Iiwic3VnZ2VzdGlvbnMiLCJvcHRpbWl6YXRpb25TdWdnZXN0aW9ucyIsIm9wdGltaXphdGlvbnMiLCJqb2luIiwidGhyZXNob2xkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwiZ2VuZXJhdGVBbGVydE1lc3NhZ2UiLCJnZXRUaW1lIiwiY2FsY3VsYXRlTmV1cmFsSGVhbHRoIiwiY2FsY3VsYXRlTWVtb3J5SGVhbHRoIiwiY2FsY3VsYXRlUGVyZm9ybWFuY2VIZWFsdGgiLCJjYWxjdWxhdGVOZXR3b3JrSGVhbHRoIiwiY2FsY3VsYXRlV2FzbUhlYWx0aCIsIndlaWdodHMiLCJlbnRyaWVzIiwicmVkdWNlIiwic2NvcmUiLCJ2YWx1ZSIsInJvdW5kIiwibmV1cmFsQWxlcnRzIiwibWF4IiwibWVtb3J5QWxlcnRzIiwicGVyZm9ybWFuY2VBbGVydHMiLCJzaXplIiwiYSIsInN1bSIsImFjYyIsInJlY2VudCIsInNsaWNlIiwibWluIiwib2xkZXIiLCJyZWNlbnRBdmciLCJvbGRlckF2ZyIsImluZmVyZW5jZVRpbWVUcmVuZCIsIm1lbW9yeVVzYWdlVHJlbmQiLCJjcHVVc2FnZVRyZW5kIiwiYWNjdXJhY3lUcmVuZCJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2FnZW50aXN0cy1xdWlja3N0YXJ0LXdvcmtzcGFjZS1iYXNpYy9zYXNpL3NyYy9zZXJ2aWNlcy9QZXJmb3JtYW5jZUludGVncmF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGVyZm9ybWFuY2UgSW50ZWdyYXRpb24gU2VydmljZVxuICogXG4gKiBJbnRlZ3JhdGVzIFNBU0kgd2l0aCBzeW5hcHRpYy1tZXNoIHBlcmZvcm1hbmNlIG1vbml0b3Jpbmcgc3VpdGUuXG4gKiBQcm92aWRlcyByZWFsLXRpbWUgcGVyZm9ybWFuY2UgdHJhY2tpbmcgZm9yIG5ldXJhbCBhZ2VudHMgYW5kXG4gKiBjb25uZWN0cyB0byB0aGUgZXhpc3RpbmcgcGVyZm9ybWFuY2UgZGFzaGJvYXJkIGluZnJhc3RydWN0dXJlLlxuICovXG5cbmltcG9ydCB7IE5ldXJhbFBlcmZvcm1hbmNlU25hcHNob3QsIFBlcmZvcm1hbmNlQWxlcnQsIFN5c3RlbUhlYWx0aE1ldHJpY3MgfSBmcm9tICcuLi90eXBlcy9uZXVyYWwnXG5pbXBvcnQgeyBBZ2VudCB9IGZyb20gJy4uL3R5cGVzL2FnZW50J1xuXG5leHBvcnQgaW50ZXJmYWNlIFBlcmZvcm1hbmNlSW50ZWdyYXRpb25Db25maWcge1xuICBlbmFibGVSZWFsVGltZU1vbml0b3Jpbmc6IGJvb2xlYW5cbiAgZW5hYmxlQm90dGxlbmVja0RldGVjdGlvbjogYm9vbGVhblxuICBlbmFibGVQcmVkaWN0aXZlQW5hbHlzaXM6IGJvb2xlYW5cbiAgZW5hYmxlQXV0b09wdGltaXphdGlvbjogYm9vbGVhblxuICBkYXNoYm9hcmRFbmFibGVkOiBib29sZWFuXG4gIGFsZXJ0VGhyZXNob2xkczoge1xuICAgIGluZmVyZW5jZVRpbWU6IG51bWJlciAvLyBtc1xuICAgIG1lbW9yeVVzYWdlOiBudW1iZXIgLy8gTUJcbiAgICBjcHVVc2FnZTogbnVtYmVyIC8vICVcbiAgICBhY2N1cmFjeTogbnVtYmVyIC8vIG1pbmltdW0gYWNjZXB0YWJsZVxuICAgIGVycm9yUmF0ZTogbnVtYmVyIC8vIG1heGltdW0gYWNjZXB0YWJsZVxuICB9XG4gIHVwZGF0ZUludGVydmFsOiBudW1iZXIgLy8gbXNcbiAgaGlzdG9yeVJldGVudGlvbjogbnVtYmVyIC8vIGhvdXJzXG59XG5cbmV4cG9ydCBjbGFzcyBQZXJmb3JtYW5jZUludGVncmF0aW9uIHtcbiAgcHJpdmF0ZSBwZXJmb3JtYW5jZU1vbml0b3I6IGFueSA9IG51bGxcbiAgcHJpdmF0ZSBpc0luaXRpYWxpemVkID0gZmFsc2VcbiAgcHJpdmF0ZSBjb25maWc6IFBlcmZvcm1hbmNlSW50ZWdyYXRpb25Db25maWdcbiAgcHJpdmF0ZSBtZXRyaWNzSGlzdG9yeTogTWFwPHN0cmluZywgTmV1cmFsUGVyZm9ybWFuY2VTbmFwc2hvdFtdPiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIGFjdGl2ZUFsZXJ0czogTWFwPHN0cmluZywgUGVyZm9ybWFuY2VBbGVydD4gPSBuZXcgTWFwKClcbiAgcHJpdmF0ZSBzeXN0ZW1IZWFsdGg6IFN5c3RlbUhlYWx0aE1ldHJpY3NcbiAgXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGFydGlhbDxQZXJmb3JtYW5jZUludGVncmF0aW9uQ29uZmlnPiA9IHt9KSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBlbmFibGVSZWFsVGltZU1vbml0b3Jpbmc6IHRydWUsXG4gICAgICBlbmFibGVCb3R0bGVuZWNrRGV0ZWN0aW9uOiB0cnVlLFxuICAgICAgZW5hYmxlUHJlZGljdGl2ZUFuYWx5c2lzOiBmYWxzZSwgLy8gUmVxdWlyZXMgTUwgbW9kZWxcbiAgICAgIGVuYWJsZUF1dG9PcHRpbWl6YXRpb246IGZhbHNlLCAvLyBTYWZldHkgZmlyc3RcbiAgICAgIGRhc2hib2FyZEVuYWJsZWQ6IHRydWUsXG4gICAgICBhbGVydFRocmVzaG9sZHM6IHtcbiAgICAgICAgaW5mZXJlbmNlVGltZTogMTAwLCAvLyAxMDBtc1xuICAgICAgICBtZW1vcnlVc2FnZTogNTAsIC8vIDUwTUJcbiAgICAgICAgY3B1VXNhZ2U6IDgwLCAvLyA4MCVcbiAgICAgICAgYWNjdXJhY3k6IDAuODUsIC8vIDg1JVxuICAgICAgICBlcnJvclJhdGU6IDAuMDUgLy8gNSVcbiAgICAgIH0sXG4gICAgICB1cGRhdGVJbnRlcnZhbDogMTAwMCwgLy8gMSBzZWNvbmRcbiAgICAgIGhpc3RvcnlSZXRlbnRpb246IDI0LCAvLyAyNCBob3Vyc1xuICAgICAgLi4uY29uZmlnXG4gICAgfVxuICAgIFxuICAgIHRoaXMuc3lzdGVtSGVhbHRoID0ge1xuICAgICAgb3ZlcmFsbFNjb3JlOiAxMDAsXG4gICAgICBjb21wb25lbnRTY29yZXM6IHtcbiAgICAgICAgbmV1cmFsOiAxMDAsXG4gICAgICAgIG1lbW9yeTogMTAwLFxuICAgICAgICBwZXJmb3JtYW5jZTogMTAwLFxuICAgICAgICBuZXR3b3JrOiAxMDAsXG4gICAgICAgIHdhc206IDEwMFxuICAgICAgfSxcbiAgICAgIGFjdGl2ZUFsZXJ0czogW10sXG4gICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgdXB0aW1lOiAwLFxuICAgICAgbGFzdENoZWNrOiBuZXcgRGF0ZSgpXG4gICAgfVxuICB9XG4gIFxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBQZXJmb3JtYW5jZSBJbnRlZ3JhdGlvblxuICAgKi9cbiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ/Cfk4ogSW5pdGlhbGl6aW5nIFBlcmZvcm1hbmNlIEludGVncmF0aW9uLi4uJylcbiAgICAgIFxuICAgICAgLy8gSW1wb3J0IGFuZCBpbml0aWFsaXplIHBlcmZvcm1hbmNlIG1vbml0b3Jpbmcgc3VpdGVcbiAgICAgIGNvbnN0IFBlcmZvcm1hbmNlTW9uaXRvcmluZ1N1aXRlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3luYXB0aWMtbWVzaC9zcmMvbmV1cmFsL3BlcmZvcm1hbmNlLW1vbml0b3Jpbmctc3VpdGUuanMnKVxuICAgICAgXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlTW9uaXRvciA9IG5ldyBQZXJmb3JtYW5jZU1vbml0b3JpbmdTdWl0ZSh7XG4gICAgICAgIC8vIE5ldXJhbC1zcGVjaWZpYyB0YXJnZXRzXG4gICAgICAgIHRhcmdldFNwYXduVGltZTogMTAwLCAvLyBtc1xuICAgICAgICB0YXJnZXRNZW1vcnlQZXJBZ2VudDogdGhpcy5jb25maWcuYWxlcnRUaHJlc2hvbGRzLm1lbW9yeVVzYWdlICogMTAyNCAqIDEwMjQsIC8vIENvbnZlcnQgTUIgdG8gYnl0ZXNcbiAgICAgICAgdGFyZ2V0SW5mZXJlbmNlVGltZTogdGhpcy5jb25maWcuYWxlcnRUaHJlc2hvbGRzLmluZmVyZW5jZVRpbWUsIC8vIG1zXG4gICAgICAgIHRhcmdldFdhc21PcGVyYXRpb25UaW1lOiAxMCwgLy8gbXNcbiAgICAgICAgXG4gICAgICAgIC8vIEZlYXR1cmUgZmxhZ3NcbiAgICAgICAgZW5hYmxlUmVhbFRpbWVNb25pdG9yaW5nOiB0aGlzLmNvbmZpZy5lbmFibGVSZWFsVGltZU1vbml0b3JpbmcsXG4gICAgICAgIGVuYWJsZUJvdHRsZW5lY2tEZXRlY3Rpb246IHRoaXMuY29uZmlnLmVuYWJsZUJvdHRsZW5lY2tEZXRlY3Rpb24sXG4gICAgICAgIGVuYWJsZU1MUHJlZGljdGlvbjogdGhpcy5jb25maWcuZW5hYmxlUHJlZGljdGl2ZUFuYWx5c2lzLFxuICAgICAgICBlbmFibGVEYXNoYm9hcmRVSTogdGhpcy5jb25maWcuZGFzaGJvYXJkRW5hYmxlZCxcbiAgICAgICAgZW5hYmxlQXV0b09wdGltaXphdGlvbjogdGhpcy5jb25maWcuZW5hYmxlQXV0b09wdGltaXphdGlvbixcbiAgICAgICAgXG4gICAgICAgIC8vIEFsZXJ0IGNvbmZpZ3VyYXRpb25cbiAgICAgICAgYWxlcnRTZXZlcml0eVRocmVzaG9sZDogJ21lZGl1bScsXG4gICAgICAgIFxuICAgICAgICAvLyBEYXNoYm9hcmQgc2V0dGluZ3NcbiAgICAgICAgZGFzaGJvYXJkUG9ydDogODA4MCxcbiAgICAgICAgZGFzaGJvYXJkVXBkYXRlSW50ZXJ2YWw6IHRoaXMuY29uZmlnLnVwZGF0ZUludGVydmFsXG4gICAgICB9KVxuICAgICAgXG4gICAgICAvLyBTZXQgdXAgZXZlbnQgaGFuZGxlcnNcbiAgICAgIHRoaXMuc2V0dXBFdmVudEhhbmRsZXJzKClcbiAgICAgIFxuICAgICAgLy8gU3RhcnQgbW9uaXRvcmluZyBpZiBlbmFibGVkXG4gICAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlUmVhbFRpbWVNb25pdG9yaW5nKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucGVyZm9ybWFuY2VNb25pdG9yLnN0YXJ0TW9uaXRvcmluZygpXG4gICAgICB9XG4gICAgICBcbiAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWVcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgUGVyZm9ybWFuY2UgSW50ZWdyYXRpb24gaW5pdGlhbGl6ZWQnKVxuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBQZXJmb3JtYW5jZSBJbnRlZ3JhdGlvbjonLCBlcnJvcilcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG4gIFxuICAvKipcbiAgICogU2V0dXAgRXZlbnQgSGFuZGxlcnNcbiAgICovXG4gIHByaXZhdGUgc2V0dXBFdmVudEhhbmRsZXJzKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5wZXJmb3JtYW5jZU1vbml0b3IpIHJldHVyblxuICAgIFxuICAgIC8vIEFnZW50IHBlcmZvcm1hbmNlIGV2ZW50c1xuICAgIHRoaXMucGVyZm9ybWFuY2VNb25pdG9yLm9uKCdhZ2VudFNwYXduQW5hbHlzaXMnLCAoZGF0YTogYW55KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZUFnZW50U3Bhd25NZXRyaWNzKGRhdGEpXG4gICAgfSlcbiAgICBcbiAgICB0aGlzLnBlcmZvcm1hbmNlTW9uaXRvci5vbignbmV1cmFsSW5mZXJlbmNlQW5hbHlzaXMnLCAoZGF0YTogYW55KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZUluZmVyZW5jZU1ldHJpY3MoZGF0YSlcbiAgICB9KVxuICAgIFxuICAgIHRoaXMucGVyZm9ybWFuY2VNb25pdG9yLm9uKCd3YXNtT3BlcmF0aW9uQW5hbHlzaXMnLCAoZGF0YTogYW55KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZVdhc21NZXRyaWNzKGRhdGEpXG4gICAgfSlcbiAgICBcbiAgICB0aGlzLnBlcmZvcm1hbmNlTW9uaXRvci5vbignbWVtb3J5QW5hbHlzaXMnLCAoZGF0YTogYW55KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZU1lbW9yeU1ldHJpY3MoZGF0YSlcbiAgICB9KVxuICAgIFxuICAgIC8vIEFsZXJ0IGV2ZW50c1xuICAgIHRoaXMucGVyZm9ybWFuY2VNb25pdG9yLm9uKCdhbGVydCcsIChhbGVydDogYW55KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZVBlcmZvcm1hbmNlQWxlcnQoYWxlcnQpXG4gICAgfSlcbiAgICBcbiAgICAvLyBCb3R0bGVuZWNrIGV2ZW50c1xuICAgIHRoaXMucGVyZm9ybWFuY2VNb25pdG9yLm9uKCdib3R0bGVuZWNrRGV0ZWN0ZWQnLCAoYm90dGxlbmVjazogYW55KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZUJvdHRsZW5lY2tEZXRlY3RlZChib3R0bGVuZWNrKVxuICAgIH0pXG4gICAgXG4gICAgdGhpcy5wZXJmb3JtYW5jZU1vbml0b3Iub24oJ2JvdHRsZW5lY2tSZXNvbHZlZCcsIChib3R0bGVuZWNrOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlQm90dGxlbmVja1Jlc29sdmVkKGJvdHRsZW5lY2spXG4gICAgfSlcbiAgICBcbiAgICAvLyBPcHRpbWl6YXRpb24gZXZlbnRzXG4gICAgdGhpcy5wZXJmb3JtYW5jZU1vbml0b3Iub24oJ29wdGltaXphdGlvbnNBcHBsaWVkJywgKG9wdGltaXphdGlvbjogYW55KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZU9wdGltaXphdGlvbkFwcGxpZWQob3B0aW1pemF0aW9uKVxuICAgIH0pXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSZWNvcmQgQWdlbnQgUGVyZm9ybWFuY2UgTWV0cmljc1xuICAgKi9cbiAgcmVjb3JkQWdlbnRNZXRyaWNzKGFnZW50SWQ6IHN0cmluZywgbWV0cmljczogUGFydGlhbDxOZXVyYWxQZXJmb3JtYW5jZVNuYXBzaG90Pik6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBQZXJmb3JtYW5jZSBpbnRlZ3JhdGlvbiBub3QgaW5pdGlhbGl6ZWQnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHNuYXBzaG90OiBOZXVyYWxQZXJmb3JtYW5jZVNuYXBzaG90ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgYWdlbnRJZCxcbiAgICAgIGluZmVyZW5jZVRpbWU6IG1ldHJpY3MuaW5mZXJlbmNlVGltZSB8fCAwLFxuICAgICAgdHJhaW5pbmdUaW1lOiBtZXRyaWNzLnRyYWluaW5nVGltZSxcbiAgICAgIHByZXByb2Nlc3NpbmdUaW1lOiBtZXRyaWNzLnByZXByb2Nlc3NpbmdUaW1lIHx8IDAsXG4gICAgICBwb3N0cHJvY2Vzc2luZ1RpbWU6IG1ldHJpY3MucG9zdHByb2Nlc3NpbmdUaW1lIHx8IDAsXG4gICAgICBtZW1vcnlVc2FnZTogbWV0cmljcy5tZW1vcnlVc2FnZSB8fCAwLFxuICAgICAgY3B1VXNhZ2U6IG1ldHJpY3MuY3B1VXNhZ2UgfHwgMCxcbiAgICAgIGdwdVVzYWdlOiBtZXRyaWNzLmdwdVVzYWdlLFxuICAgICAgZW5lcmd5Q29uc3VtcHRpb246IG1ldHJpY3MuZW5lcmd5Q29uc3VtcHRpb24gfHwgMCxcbiAgICAgIGFjY3VyYWN5OiBtZXRyaWNzLmFjY3VyYWN5IHx8IDAsXG4gICAgICBwcmVjaXNpb246IG1ldHJpY3MucHJlY2lzaW9uIHx8IDAsXG4gICAgICByZWNhbGw6IG1ldHJpY3MucmVjYWxsIHx8IDAsXG4gICAgICBmMVNjb3JlOiBtZXRyaWNzLmYxU2NvcmUgfHwgMCxcbiAgICAgIG5ldHdvcmtMYXRlbmN5OiBtZXRyaWNzLm5ldHdvcmtMYXRlbmN5IHx8IDAsXG4gICAgICBiYW5kd2lkdGhVc2FnZTogbWV0cmljcy5iYW5kd2lkdGhVc2FnZSB8fCAwLFxuICAgICAgcGFja2V0c0xvc3Q6IG1ldHJpY3MucGFja2V0c0xvc3QgfHwgMFxuICAgIH1cbiAgICBcbiAgICAvLyBTdG9yZSBpbiBoaXN0b3J5XG4gICAgaWYgKCF0aGlzLm1ldHJpY3NIaXN0b3J5LmhhcyhhZ2VudElkKSkge1xuICAgICAgdGhpcy5tZXRyaWNzSGlzdG9yeS5zZXQoYWdlbnRJZCwgW10pXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGFnZW50SGlzdG9yeSA9IHRoaXMubWV0cmljc0hpc3RvcnkuZ2V0KGFnZW50SWQpIVxuICAgIGFnZW50SGlzdG9yeS5wdXNoKHNuYXBzaG90KVxuICAgIFxuICAgIC8vIExpbWl0IGhpc3Rvcnkgc2l6ZVxuICAgIGNvbnN0IG1heEhpc3RvcnlTaXplID0gKHRoaXMuY29uZmlnLmhpc3RvcnlSZXRlbnRpb24gKiAzNjAwKSAvICh0aGlzLmNvbmZpZy51cGRhdGVJbnRlcnZhbCAvIDEwMDApXG4gICAgaWYgKGFnZW50SGlzdG9yeS5sZW5ndGggPiBtYXhIaXN0b3J5U2l6ZSkge1xuICAgICAgYWdlbnRIaXN0b3J5LnNoaWZ0KClcbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgdGhyZXNob2xkcyBhbmQgZ2VuZXJhdGUgYWxlcnRzXG4gICAgdGhpcy5jaGVja1BlcmZvcm1hbmNlVGhyZXNob2xkcyhzbmFwc2hvdClcbiAgICBcbiAgICAvLyBSZXBvcnQgdG8gcGVyZm9ybWFuY2UgbW9uaXRvclxuICAgIGlmICh0aGlzLnBlcmZvcm1hbmNlTW9uaXRvcikge1xuICAgICAgdGhpcy5wZXJmb3JtYW5jZU1vbml0b3IuZW1pdCgnYWdlbnRNZXRyaWNzUmVjb3JkZWQnLCBzbmFwc2hvdClcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZXQgQWdlbnQgUGVyZm9ybWFuY2UgSGlzdG9yeVxuICAgKi9cbiAgZ2V0QWdlbnRIaXN0b3J5KGFnZW50SWQ6IHN0cmluZywgdGltZVJhbmdlPzogbnVtYmVyKTogTmV1cmFsUGVyZm9ybWFuY2VTbmFwc2hvdFtdIHtcbiAgICBjb25zdCBoaXN0b3J5ID0gdGhpcy5tZXRyaWNzSGlzdG9yeS5nZXQoYWdlbnRJZCkgfHwgW11cbiAgICBcbiAgICBpZiAoIXRpbWVSYW5nZSkgcmV0dXJuIGhpc3RvcnlcbiAgICBcbiAgICBjb25zdCBjdXRvZmZUaW1lID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIHRpbWVSYW5nZSlcbiAgICByZXR1cm4gaGlzdG9yeS5maWx0ZXIoc25hcHNob3QgPT4gc25hcHNob3QudGltZXN0YW1wID49IGN1dG9mZlRpbWUpXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZXQgU3lzdGVtIEhlYWx0aCBNZXRyaWNzXG4gICAqL1xuICBnZXRTeXN0ZW1IZWFsdGgoKTogU3lzdGVtSGVhbHRoTWV0cmljcyB7XG4gICAgdGhpcy51cGRhdGVTeXN0ZW1IZWFsdGgoKVxuICAgIHJldHVybiB7IC4uLnRoaXMuc3lzdGVtSGVhbHRoIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIEdldCBQZXJmb3JtYW5jZSBEYXNoYm9hcmQgRGF0YVxuICAgKi9cbiAgZ2V0RGFzaGJvYXJkRGF0YSgpOiBhbnkge1xuICAgIGlmICghdGhpcy5wZXJmb3JtYW5jZU1vbml0b3IpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzLnBlcmZvcm1hbmNlTW9uaXRvci5nZXRQZXJmb3JtYW5jZVJlcG9ydCgpXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZXQgQWN0aXZlIEFsZXJ0c1xuICAgKi9cbiAgZ2V0QWN0aXZlQWxlcnRzKCk6IFBlcmZvcm1hbmNlQWxlcnRbXSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5hY3RpdmVBbGVydHMudmFsdWVzKCkpXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBY2tub3dsZWRnZSBBbGVydFxuICAgKi9cbiAgYWNrbm93bGVkZ2VBbGVydChhbGVydElkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBhbGVydCA9IHRoaXMuYWN0aXZlQWxlcnRzLmdldChhbGVydElkKVxuICAgIGlmIChhbGVydCkge1xuICAgICAgYWxlcnQuYWNrbm93bGVkZ2VkID0gdHJ1ZVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSZXNvbHZlIEFsZXJ0XG4gICAqL1xuICByZXNvbHZlQWxlcnQoYWxlcnRJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgYWxlcnQgPSB0aGlzLmFjdGl2ZUFsZXJ0cy5nZXQoYWxlcnRJZClcbiAgICBpZiAoYWxlcnQpIHtcbiAgICAgIGFsZXJ0LnJlc29sdmVkQXQgPSBuZXcgRGF0ZSgpXG4gICAgICB0aGlzLmFjdGl2ZUFsZXJ0cy5kZWxldGUoYWxlcnRJZClcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIFxuICAvKipcbiAgICogR2VuZXJhdGUgUGVyZm9ybWFuY2UgUmVwb3J0XG4gICAqL1xuICBnZW5lcmF0ZVBlcmZvcm1hbmNlUmVwb3J0KGFnZW50SWRzPzogc3RyaW5nW10pOiBhbnkge1xuICAgIGNvbnN0IGFnZW50cyA9IGFnZW50SWRzIHx8IEFycmF5LmZyb20odGhpcy5tZXRyaWNzSGlzdG9yeS5rZXlzKCkpXG4gICAgY29uc3QgcmVwb3J0ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgc3VtbWFyeToge1xuICAgICAgICB0b3RhbEFnZW50czogYWdlbnRzLmxlbmd0aCxcbiAgICAgICAgYXZlcmFnZUluZmVyZW5jZVRpbWU6IDAsXG4gICAgICAgIGF2ZXJhZ2VNZW1vcnlVc2FnZTogMCxcbiAgICAgICAgYXZlcmFnZUNwdVVzYWdlOiAwLFxuICAgICAgICBhdmVyYWdlQWNjdXJhY3k6IDBcbiAgICAgIH0sXG4gICAgICBhZ2VudERldGFpbHM6IHt9IGFzIGFueSxcbiAgICAgIHN5c3RlbUhlYWx0aDogdGhpcy5nZXRTeXN0ZW1IZWFsdGgoKSxcbiAgICAgIGFjdGl2ZUFsZXJ0czogdGhpcy5nZXRBY3RpdmVBbGVydHMoKSxcbiAgICAgIHJlY29tbWVuZGF0aW9uczogdGhpcy5nZW5lcmF0ZVJlY29tbWVuZGF0aW9ucygpXG4gICAgfVxuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBhZ2dyZWdhdGVkIG1ldHJpY3NcbiAgICBsZXQgdG90YWxJbmZlcmVuY2VUaW1lID0gMFxuICAgIGxldCB0b3RhbE1lbW9yeVVzYWdlID0gMFxuICAgIGxldCB0b3RhbENwdVVzYWdlID0gMFxuICAgIGxldCB0b3RhbEFjY3VyYWN5ID0gMFxuICAgIGxldCB2YWxpZEFnZW50cyA9IDBcbiAgICBcbiAgICBmb3IgKGNvbnN0IGFnZW50SWQgb2YgYWdlbnRzKSB7XG4gICAgICBjb25zdCBoaXN0b3J5ID0gdGhpcy5nZXRBZ2VudEhpc3RvcnkoYWdlbnRJZCwgMzYwMDAwMCkgLy8gTGFzdCBob3VyXG4gICAgICBpZiAoaGlzdG9yeS5sZW5ndGggPT09IDApIGNvbnRpbnVlXG4gICAgICBcbiAgICAgIGNvbnN0IGxhdGVzdFNuYXBzaG90ID0gaGlzdG9yeVtoaXN0b3J5Lmxlbmd0aCAtIDFdXG4gICAgICBjb25zdCBhZ2VudFJlcG9ydCA9IHtcbiAgICAgICAgYWdlbnRJZCxcbiAgICAgICAgbGF0ZXN0TWV0cmljczogbGF0ZXN0U25hcHNob3QsXG4gICAgICAgIGF2ZXJhZ2VNZXRyaWNzOiB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2VNZXRyaWNzKGhpc3RvcnkpLFxuICAgICAgICB0cmVuZEFuYWx5c2lzOiB0aGlzLmFuYWx5emVUcmVuZHMoaGlzdG9yeSlcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmVwb3J0LmFnZW50RGV0YWlsc1thZ2VudElkXSA9IGFnZW50UmVwb3J0XG4gICAgICBcbiAgICAgIHRvdGFsSW5mZXJlbmNlVGltZSArPSBsYXRlc3RTbmFwc2hvdC5pbmZlcmVuY2VUaW1lXG4gICAgICB0b3RhbE1lbW9yeVVzYWdlICs9IGxhdGVzdFNuYXBzaG90Lm1lbW9yeVVzYWdlXG4gICAgICB0b3RhbENwdVVzYWdlICs9IGxhdGVzdFNuYXBzaG90LmNwdVVzYWdlXG4gICAgICB0b3RhbEFjY3VyYWN5ICs9IGxhdGVzdFNuYXBzaG90LmFjY3VyYWN5XG4gICAgICB2YWxpZEFnZW50cysrXG4gICAgfVxuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBhdmVyYWdlc1xuICAgIGlmICh2YWxpZEFnZW50cyA+IDApIHtcbiAgICAgIHJlcG9ydC5zdW1tYXJ5LmF2ZXJhZ2VJbmZlcmVuY2VUaW1lID0gdG90YWxJbmZlcmVuY2VUaW1lIC8gdmFsaWRBZ2VudHNcbiAgICAgIHJlcG9ydC5zdW1tYXJ5LmF2ZXJhZ2VNZW1vcnlVc2FnZSA9IHRvdGFsTWVtb3J5VXNhZ2UgLyB2YWxpZEFnZW50c1xuICAgICAgcmVwb3J0LnN1bW1hcnkuYXZlcmFnZUNwdVVzYWdlID0gdG90YWxDcHVVc2FnZSAvIHZhbGlkQWdlbnRzXG4gICAgICByZXBvcnQuc3VtbWFyeS5hdmVyYWdlQWNjdXJhY3kgPSB0b3RhbEFjY3VyYWN5IC8gdmFsaWRBZ2VudHNcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlcG9ydFxuICB9XG4gIFxuICAvKipcbiAgICogQ2xlYW51cCBSZXNvdXJjZXNcbiAgICovXG4gIGFzeW5jIGNsZWFudXAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMucGVyZm9ybWFuY2VNb25pdG9yKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLnBlcmZvcm1hbmNlTW9uaXRvci5jbGVhbnVwKClcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSBQZXJmb3JtYW5jZSBtb25pdG9yIGNsZWFuZWQgdXAnKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBjbGVhbnVwIHBlcmZvcm1hbmNlIG1vbml0b3I6JywgZXJyb3IpXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHRoaXMubWV0cmljc0hpc3RvcnkuY2xlYXIoKVxuICAgIHRoaXMuYWN0aXZlQWxlcnRzLmNsZWFyKClcbiAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZVxuICB9XG4gIFxuICAvLyA9PT09PSBQUklWQVRFIE1FVEhPRFMgPT09PT1cbiAgXG4gIHByaXZhdGUgaGFuZGxlQWdlbnRTcGF3bk1ldHJpY3MoZGF0YTogYW55KTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coYPCfk4ogQWdlbnQgc3Bhd24gbWV0cmljczogYXZnICR7ZGF0YS5hdmVyYWdlfW1zICgke2RhdGEuY291bnR9IGFnZW50cylgKVxuICAgIFxuICAgIGlmIChkYXRhLmF2ZXJhZ2UgPiB0aGlzLmNvbmZpZy5hbGVydFRocmVzaG9sZHMuaW5mZXJlbmNlVGltZSAqIDIpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVBbGVydCgnYWdlbnRfc3Bhd25fc2xvdycsICdoaWdoJywge1xuICAgICAgICBhdmVyYWdlU3Bhd25UaW1lOiBkYXRhLmF2ZXJhZ2UsXG4gICAgICAgIHRhcmdldDogdGhpcy5jb25maWcuYWxlcnRUaHJlc2hvbGRzLmluZmVyZW5jZVRpbWUgKiAyLFxuICAgICAgICBjb3VudDogZGF0YS5jb3VudFxuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgXG4gIHByaXZhdGUgaGFuZGxlSW5mZXJlbmNlTWV0cmljcyhkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhg8J+TiiBJbmZlcmVuY2UgbWV0cmljczogYXZnICR7ZGF0YS5hdmVyYWdlfW1zYClcbiAgICBcbiAgICBpZiAoZGF0YS5zbG93SW5mZXJlbmNlc1JhdGlvID4gMC4zKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlQWxlcnQoJ2luZmVyZW5jZV9wZXJmb3JtYW5jZV9kZWdyYWRlZCcsICdtZWRpdW0nLCB7XG4gICAgICAgIGF2ZXJhZ2VUaW1lOiBkYXRhLmF2ZXJhZ2UsXG4gICAgICAgIHNsb3dSYXRpbzogZGF0YS5zbG93SW5mZXJlbmNlc1JhdGlvLFxuICAgICAgICB0YXJnZXQ6IHRoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5pbmZlcmVuY2VUaW1lXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBcbiAgcHJpdmF0ZSBoYW5kbGVXYXNtTWV0cmljcyhkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhg8J+TiiBXQVNNIG1ldHJpY3M6IGF2ZyAke2RhdGEuYXZlcmFnZX1tc2ApXG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIFdBU00gcGVyZm9ybWFuY2UgaXNzdWVzXG4gICAgaWYgKGRhdGEuYXZlcmFnZSA+IDIwKSB7IC8vIFdBU00gb3BlcmF0aW9ucyBzaG91bGQgYmUgdmVyeSBmYXN0XG4gICAgICB0aGlzLmdlbmVyYXRlQWxlcnQoJ3dhc21fcGVyZm9ybWFuY2VfaXNzdWUnLCAnbWVkaXVtJywge1xuICAgICAgICBhdmVyYWdlVGltZTogZGF0YS5hdmVyYWdlLFxuICAgICAgICB0YXJnZXQ6IDEwXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBcbiAgcHJpdmF0ZSBoYW5kbGVNZW1vcnlNZXRyaWNzKGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKGDwn5OKIE1lbW9yeSBtZXRyaWNzOiBhdmcgJHsoZGF0YS5hdmVyYWdlIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMSl9TUJgKVxuICAgIFxuICAgIGNvbnN0IG1lbW9yeU1CID0gZGF0YS5hdmVyYWdlIC8gMTAyNCAvIDEwMjRcbiAgICBpZiAobWVtb3J5TUIgPiB0aGlzLmNvbmZpZy5hbGVydFRocmVzaG9sZHMubWVtb3J5VXNhZ2UpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVBbGVydCgnbWVtb3J5X3VzYWdlX2hpZ2gnLCAnbWVkaXVtJywge1xuICAgICAgICBhdmVyYWdlVXNhZ2U6IG1lbW9yeU1CLFxuICAgICAgICB0YXJnZXQ6IHRoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5tZW1vcnlVc2FnZVxuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgXG4gIHByaXZhdGUgaGFuZGxlUGVyZm9ybWFuY2VBbGVydChhbGVydDogYW55KTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coYPCfmqggUGVyZm9ybWFuY2UgYWxlcnQ6ICR7YWxlcnQudHlwZX0gKCR7YWxlcnQuc2V2ZXJpdHl9KWApXG4gICAgXG4gICAgY29uc3QgcGVyZm9ybWFuY2VBbGVydDogUGVyZm9ybWFuY2VBbGVydCA9IHtcbiAgICAgIGlkOiBhbGVydC5pZCB8fCBgYWxlcnRfJHtEYXRlLm5vdygpfWAsXG4gICAgICBhZ2VudElkOiBhbGVydC5hZ2VudElkIHx8ICdzeXN0ZW0nLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgc2V2ZXJpdHk6IGFsZXJ0LnNldmVyaXR5IHx8ICdtZWRpdW0nLFxuICAgICAgdHlwZTogJ3BlcmZvcm1hbmNlJyxcbiAgICAgIG1lc3NhZ2U6IGFsZXJ0Lm1lc3NhZ2UgfHwgYWxlcnQudHlwZSxcbiAgICAgIGRldGFpbHM6IGFsZXJ0LmRhdGEgfHwge30sXG4gICAgICBhY2tub3dsZWRnZWQ6IGZhbHNlXG4gICAgfVxuICAgIFxuICAgIHRoaXMuYWN0aXZlQWxlcnRzLnNldChwZXJmb3JtYW5jZUFsZXJ0LmlkLCBwZXJmb3JtYW5jZUFsZXJ0KVxuICB9XG4gIFxuICBwcml2YXRlIGhhbmRsZUJvdHRsZW5lY2tEZXRlY3RlZChib3R0bGVuZWNrOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhg8J+UjSBCb3R0bGVuZWNrIGRldGVjdGVkOiAke2JvdHRsZW5lY2suY29tcG9uZW50fWApXG4gICAgXG4gICAgdGhpcy5nZW5lcmF0ZUFsZXJ0KCdib3R0bGVuZWNrX2RldGVjdGVkJywgJ2hpZ2gnLCB7XG4gICAgICBjb21wb25lbnQ6IGJvdHRsZW5lY2suY29tcG9uZW50LFxuICAgICAgc2V2ZXJpdHk6IGJvdHRsZW5lY2suc2V2ZXJpdHksXG4gICAgICBzdWdnZXN0aW9uczogYm90dGxlbmVjay5vcHRpbWl6YXRpb25TdWdnZXN0aW9uc1xuICAgIH0pXG4gIH1cbiAgXG4gIHByaXZhdGUgaGFuZGxlQm90dGxlbmVja1Jlc29sdmVkKGJvdHRsZW5lY2s6IGFueSk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKGDinIUgQm90dGxlbmVjayByZXNvbHZlZDogJHtib3R0bGVuZWNrLmNvbXBvbmVudH1gKVxuICAgIFxuICAgIC8vIEZpbmQgYW5kIHJlc29sdmUgcmVsYXRlZCBhbGVydHNcbiAgICBmb3IgKGNvbnN0IFthbGVydElkLCBhbGVydF0gb2YgdGhpcy5hY3RpdmVBbGVydHMpIHtcbiAgICAgIGlmIChhbGVydC5kZXRhaWxzLmNvbXBvbmVudCA9PT0gYm90dGxlbmVjay5jb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5yZXNvbHZlQWxlcnQoYWxlcnRJZClcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG4gIHByaXZhdGUgaGFuZGxlT3B0aW1pemF0aW9uQXBwbGllZChvcHRpbWl6YXRpb246IGFueSk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKGDwn5SnIE9wdGltaXphdGlvbiBhcHBsaWVkOiAke29wdGltaXphdGlvbi5vcHRpbWl6YXRpb25zLmpvaW4oJywgJyl9YClcbiAgfVxuICBcbiAgcHJpdmF0ZSBjaGVja1BlcmZvcm1hbmNlVGhyZXNob2xkcyhzbmFwc2hvdDogTmV1cmFsUGVyZm9ybWFuY2VTbmFwc2hvdCk6IHZvaWQge1xuICAgIGNvbnN0IHsgYWxlcnRUaHJlc2hvbGRzIH0gPSB0aGlzLmNvbmZpZ1xuICAgIFxuICAgIC8vIENoZWNrIGluZmVyZW5jZSB0aW1lXG4gICAgaWYgKHNuYXBzaG90LmluZmVyZW5jZVRpbWUgPiBhbGVydFRocmVzaG9sZHMuaW5mZXJlbmNlVGltZSkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUFsZXJ0KCdpbmZlcmVuY2VfdGltZV9leGNlZWRlZCcsICdtZWRpdW0nLCB7XG4gICAgICAgIGFnZW50SWQ6IHNuYXBzaG90LmFnZW50SWQsXG4gICAgICAgIGluZmVyZW5jZVRpbWU6IHNuYXBzaG90LmluZmVyZW5jZVRpbWUsXG4gICAgICAgIHRocmVzaG9sZDogYWxlcnRUaHJlc2hvbGRzLmluZmVyZW5jZVRpbWVcbiAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIG1lbW9yeSB1c2FnZVxuICAgIGNvbnN0IG1lbW9yeU1CID0gc25hcHNob3QubWVtb3J5VXNhZ2UgLyAxMDI0IC8gMTAyNFxuICAgIGlmIChtZW1vcnlNQiA+IGFsZXJ0VGhyZXNob2xkcy5tZW1vcnlVc2FnZSkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUFsZXJ0KCdtZW1vcnlfdGhyZXNob2xkX2V4Y2VlZGVkJywgJ21lZGl1bScsIHtcbiAgICAgICAgYWdlbnRJZDogc25hcHNob3QuYWdlbnRJZCxcbiAgICAgICAgbWVtb3J5VXNhZ2U6IG1lbW9yeU1CLFxuICAgICAgICB0aHJlc2hvbGQ6IGFsZXJ0VGhyZXNob2xkcy5tZW1vcnlVc2FnZVxuICAgICAgfSlcbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgQ1BVIHVzYWdlXG4gICAgaWYgKHNuYXBzaG90LmNwdVVzYWdlID4gYWxlcnRUaHJlc2hvbGRzLmNwdVVzYWdlKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlQWxlcnQoJ2NwdV90aHJlc2hvbGRfZXhjZWVkZWQnLCAnbWVkaXVtJywge1xuICAgICAgICBhZ2VudElkOiBzbmFwc2hvdC5hZ2VudElkLFxuICAgICAgICBjcHVVc2FnZTogc25hcHNob3QuY3B1VXNhZ2UsXG4gICAgICAgIHRocmVzaG9sZDogYWxlcnRUaHJlc2hvbGRzLmNwdVVzYWdlXG4gICAgICB9KVxuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBhY2N1cmFjeVxuICAgIGlmIChzbmFwc2hvdC5hY2N1cmFjeSA8IGFsZXJ0VGhyZXNob2xkcy5hY2N1cmFjeSAmJiBzbmFwc2hvdC5hY2N1cmFjeSA+IDApIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVBbGVydCgnYWNjdXJhY3lfYmVsb3dfdGhyZXNob2xkJywgJ2hpZ2gnLCB7XG4gICAgICAgIGFnZW50SWQ6IHNuYXBzaG90LmFnZW50SWQsXG4gICAgICAgIGFjY3VyYWN5OiBzbmFwc2hvdC5hY2N1cmFjeSxcbiAgICAgICAgdGhyZXNob2xkOiBhbGVydFRocmVzaG9sZHMuYWNjdXJhY3lcbiAgICAgIH0pXG4gICAgfVxuICB9XG4gIFxuICBwcml2YXRlIGdlbmVyYXRlQWxlcnQodHlwZTogc3RyaW5nLCBzZXZlcml0eTogUGVyZm9ybWFuY2VBbGVydFsnc2V2ZXJpdHknXSwgZGV0YWlsczogYW55KTogdm9pZCB7XG4gICAgY29uc3QgYWxlcnQ6IFBlcmZvcm1hbmNlQWxlcnQgPSB7XG4gICAgICBpZDogYGFsZXJ0XyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgNSl9YCxcbiAgICAgIGFnZW50SWQ6IGRldGFpbHMuYWdlbnRJZCB8fCAnc3lzdGVtJyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIHNldmVyaXR5LFxuICAgICAgdHlwZTogdHlwZSBhcyBhbnksXG4gICAgICBtZXNzYWdlOiB0aGlzLmdlbmVyYXRlQWxlcnRNZXNzYWdlKHR5cGUsIGRldGFpbHMpLFxuICAgICAgZGV0YWlscyxcbiAgICAgIGFja25vd2xlZGdlZDogZmFsc2VcbiAgICB9XG4gICAgXG4gICAgdGhpcy5hY3RpdmVBbGVydHMuc2V0KGFsZXJ0LmlkLCBhbGVydClcbiAgICBjb25zb2xlLmxvZyhg8J+aqCBHZW5lcmF0ZWQgYWxlcnQ6ICR7YWxlcnQubWVzc2FnZX1gKVxuICB9XG4gIFxuICBwcml2YXRlIGdlbmVyYXRlQWxlcnRNZXNzYWdlKHR5cGU6IHN0cmluZywgZGV0YWlsczogYW55KTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2luZmVyZW5jZV90aW1lX2V4Y2VlZGVkJzpcbiAgICAgICAgcmV0dXJuIGBBZ2VudCAke2RldGFpbHMuYWdlbnRJZH0gaW5mZXJlbmNlIHRpbWUgKCR7ZGV0YWlscy5pbmZlcmVuY2VUaW1lfW1zKSBleGNlZWRlZCB0aHJlc2hvbGQgKCR7ZGV0YWlscy50aHJlc2hvbGR9bXMpYFxuICAgICAgY2FzZSAnbWVtb3J5X3RocmVzaG9sZF9leGNlZWRlZCc6XG4gICAgICAgIHJldHVybiBgQWdlbnQgJHtkZXRhaWxzLmFnZW50SWR9IG1lbW9yeSB1c2FnZSAoJHtkZXRhaWxzLm1lbW9yeVVzYWdlLnRvRml4ZWQoMSl9TUIpIGV4Y2VlZGVkIHRocmVzaG9sZCAoJHtkZXRhaWxzLnRocmVzaG9sZH1NQilgXG4gICAgICBjYXNlICdjcHVfdGhyZXNob2xkX2V4Y2VlZGVkJzpcbiAgICAgICAgcmV0dXJuIGBBZ2VudCAke2RldGFpbHMuYWdlbnRJZH0gQ1BVIHVzYWdlICgke2RldGFpbHMuY3B1VXNhZ2V9JSkgZXhjZWVkZWQgdGhyZXNob2xkICgke2RldGFpbHMudGhyZXNob2xkfSUpYFxuICAgICAgY2FzZSAnYWNjdXJhY3lfYmVsb3dfdGhyZXNob2xkJzpcbiAgICAgICAgcmV0dXJuIGBBZ2VudCAke2RldGFpbHMuYWdlbnRJZH0gYWNjdXJhY3kgKCR7KGRldGFpbHMuYWNjdXJhY3kgKiAxMDApLnRvRml4ZWQoMSl9JSkgYmVsb3cgdGhyZXNob2xkICgkeyhkZXRhaWxzLnRocmVzaG9sZCAqIDEwMCkudG9GaXhlZCgxKX0lKWBcbiAgICAgIGNhc2UgJ2JvdHRsZW5lY2tfZGV0ZWN0ZWQnOlxuICAgICAgICByZXR1cm4gYFBlcmZvcm1hbmNlIGJvdHRsZW5lY2sgZGV0ZWN0ZWQgaW4gJHtkZXRhaWxzLmNvbXBvbmVudH1gXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYFBlcmZvcm1hbmNlIGlzc3VlIGRldGVjdGVkOiAke3R5cGV9YFxuICAgIH1cbiAgfVxuICBcbiAgcHJpdmF0ZSB1cGRhdGVTeXN0ZW1IZWFsdGgoKTogdm9pZCB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgIGNvbnN0IHVwdGltZSA9IG5vdy5nZXRUaW1lKCkgLSAodGhpcy5zeXN0ZW1IZWFsdGgubGFzdENoZWNrPy5nZXRUaW1lKCkgfHwgbm93LmdldFRpbWUoKSlcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgY29tcG9uZW50IHNjb3JlcyBiYXNlZCBvbiByZWNlbnQgbWV0cmljc1xuICAgIGNvbnN0IGNvbXBvbmVudFNjb3JlcyA9IHtcbiAgICAgIG5ldXJhbDogdGhpcy5jYWxjdWxhdGVOZXVyYWxIZWFsdGgoKSxcbiAgICAgIG1lbW9yeTogdGhpcy5jYWxjdWxhdGVNZW1vcnlIZWFsdGgoKSxcbiAgICAgIHBlcmZvcm1hbmNlOiB0aGlzLmNhbGN1bGF0ZVBlcmZvcm1hbmNlSGVhbHRoKCksXG4gICAgICBuZXR3b3JrOiB0aGlzLmNhbGN1bGF0ZU5ldHdvcmtIZWFsdGgoKSxcbiAgICAgIHdhc206IHRoaXMuY2FsY3VsYXRlV2FzbUhlYWx0aCgpXG4gICAgfVxuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBvdmVyYWxsIHNjb3JlXG4gICAgY29uc3Qgd2VpZ2h0cyA9IHsgbmV1cmFsOiAwLjMsIG1lbW9yeTogMC4yLCBwZXJmb3JtYW5jZTogMC4zLCBuZXR3b3JrOiAwLjEsIHdhc206IDAuMSB9XG4gICAgY29uc3Qgb3ZlcmFsbFNjb3JlID0gT2JqZWN0LmVudHJpZXMoY29tcG9uZW50U2NvcmVzKS5yZWR1Y2UoXG4gICAgICAoc2NvcmUsIFtjb21wb25lbnQsIHZhbHVlXSkgPT4gc2NvcmUgKyB2YWx1ZSAqIHdlaWdodHNbY29tcG9uZW50IGFzIGtleW9mIHR5cGVvZiB3ZWlnaHRzXSxcbiAgICAgIDBcbiAgICApXG4gICAgXG4gICAgdGhpcy5zeXN0ZW1IZWFsdGggPSB7XG4gICAgICBvdmVyYWxsU2NvcmU6IE1hdGgucm91bmQob3ZlcmFsbFNjb3JlKSxcbiAgICAgIGNvbXBvbmVudFNjb3JlcyxcbiAgICAgIGFjdGl2ZUFsZXJ0czogQXJyYXkuZnJvbSh0aGlzLmFjdGl2ZUFsZXJ0cy52YWx1ZXMoKSksXG4gICAgICByZWNvbW1lbmRhdGlvbnM6IHRoaXMuZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMoKSxcbiAgICAgIHVwdGltZTogdXB0aW1lLFxuICAgICAgbGFzdENoZWNrOiBub3dcbiAgICB9XG4gIH1cbiAgXG4gIHByaXZhdGUgY2FsY3VsYXRlTmV1cmFsSGVhbHRoKCk6IG51bWJlciB7XG4gICAgLy8gQmFzZSBoZWFsdGggc2NvcmVcbiAgICBsZXQgc2NvcmUgPSAxMDBcbiAgICBcbiAgICAvLyBEZWR1Y3QgZm9yIGFsZXJ0c1xuICAgIGNvbnN0IG5ldXJhbEFsZXJ0cyA9IEFycmF5LmZyb20odGhpcy5hY3RpdmVBbGVydHMudmFsdWVzKCkpLmZpbHRlcihcbiAgICAgIGFsZXJ0ID0+IGFsZXJ0LnR5cGUgPT09ICdwZXJmb3JtYW5jZScgfHwgYWxlcnQudHlwZSA9PT0gJ2FjY3VyYWN5J1xuICAgIClcbiAgICBzY29yZSAtPSBuZXVyYWxBbGVydHMubGVuZ3RoICogMTBcbiAgICBcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgc2NvcmUpXG4gIH1cbiAgXG4gIHByaXZhdGUgY2FsY3VsYXRlTWVtb3J5SGVhbHRoKCk6IG51bWJlciB7XG4gICAgbGV0IHNjb3JlID0gMTAwXG4gICAgY29uc3QgbWVtb3J5QWxlcnRzID0gQXJyYXkuZnJvbSh0aGlzLmFjdGl2ZUFsZXJ0cy52YWx1ZXMoKSkuZmlsdGVyKFxuICAgICAgYWxlcnQgPT4gYWxlcnQudHlwZSA9PT0gJ21lbW9yeSdcbiAgICApXG4gICAgc2NvcmUgLT0gbWVtb3J5QWxlcnRzLmxlbmd0aCAqIDE1XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIHNjb3JlKVxuICB9XG4gIFxuICBwcml2YXRlIGNhbGN1bGF0ZVBlcmZvcm1hbmNlSGVhbHRoKCk6IG51bWJlciB7XG4gICAgbGV0IHNjb3JlID0gMTAwXG4gICAgY29uc3QgcGVyZm9ybWFuY2VBbGVydHMgPSBBcnJheS5mcm9tKHRoaXMuYWN0aXZlQWxlcnRzLnZhbHVlcygpKS5maWx0ZXIoXG4gICAgICBhbGVydCA9PiBhbGVydC50eXBlID09PSAncGVyZm9ybWFuY2UnIHx8IGFsZXJ0LnR5cGUgPT09ICdsYXRlbmN5J1xuICAgIClcbiAgICBzY29yZSAtPSBwZXJmb3JtYW5jZUFsZXJ0cy5sZW5ndGggKiAxMlxuICAgIHJldHVybiBNYXRoLm1heCgwLCBzY29yZSlcbiAgfVxuICBcbiAgcHJpdmF0ZSBjYWxjdWxhdGVOZXR3b3JrSGVhbHRoKCk6IG51bWJlciB7XG4gICAgLy8gU2ltcGxpZmllZCBuZXR3b3JrIGhlYWx0aCBjYWxjdWxhdGlvblxuICAgIHJldHVybiA5NSArIE1hdGgucmFuZG9tKCkgKiA1IC8vIDk1LTEwMCVcbiAgfVxuICBcbiAgcHJpdmF0ZSBjYWxjdWxhdGVXYXNtSGVhbHRoKCk6IG51bWJlciB7XG4gICAgLy8gQ2hlY2sgaWYgV0FTTSBpcyB3b3JraW5nIHByb3Blcmx5XG4gICAgcmV0dXJuIHRoaXMucGVyZm9ybWFuY2VNb25pdG9yID8gMTAwIDogNTBcbiAgfVxuICBcbiAgcHJpdmF0ZSBnZW5lcmF0ZVJlY29tbWVuZGF0aW9ucygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdXG4gICAgXG4gICAgaWYgKHRoaXMuc3lzdGVtSGVhbHRoLm92ZXJhbGxTY29yZSA8IDgwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnU3lzdGVtIHBlcmZvcm1hbmNlIGlzIGRlZ3JhZGVkLiBDb25zaWRlciBpbnZlc3RpZ2F0aW5nIGFjdGl2ZSBhbGVydHMuJylcbiAgICB9XG4gICAgXG4gICAgaWYgKHRoaXMuYWN0aXZlQWxlcnRzLnNpemUgPiA1KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnSGlnaCBudW1iZXIgb2YgYWN0aXZlIGFsZXJ0cy4gQ29uc2lkZXIgYWRkcmVzc2luZyBjcml0aWNhbCBpc3N1ZXMgZmlyc3QuJylcbiAgICB9XG4gICAgXG4gICAgY29uc3QgbWVtb3J5QWxlcnRzID0gQXJyYXkuZnJvbSh0aGlzLmFjdGl2ZUFsZXJ0cy52YWx1ZXMoKSkuZmlsdGVyKGEgPT4gYS50eXBlID09PSAnbWVtb3J5JylcbiAgICBpZiAobWVtb3J5QWxlcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdNZW1vcnkgdXNhZ2UgaXMgaGlnaC4gQ29uc2lkZXIgb3B0aW1pemluZyBuZXVyYWwgbmV0d29yayBhcmNoaXRlY3R1cmVzLicpXG4gICAgfVxuICAgIFxuICAgIGlmICghdGhpcy5jb25maWcuZW5hYmxlUHJlZGljdGl2ZUFuYWx5c2lzKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnRW5hYmxlIHByZWRpY3RpdmUgYW5hbHlzaXMgZm9yIGJldHRlciBwZXJmb3JtYW5jZSBpbnNpZ2h0cy4nKVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcmVjb21tZW5kYXRpb25zXG4gIH1cbiAgXG4gIHByaXZhdGUgY2FsY3VsYXRlQXZlcmFnZU1ldHJpY3MoaGlzdG9yeTogTmV1cmFsUGVyZm9ybWFuY2VTbmFwc2hvdFtdKTogYW55IHtcbiAgICBpZiAoaGlzdG9yeS5sZW5ndGggPT09IDApIHJldHVybiBudWxsXG4gICAgXG4gICAgY29uc3Qgc3VtID0gaGlzdG9yeS5yZWR1Y2UoKGFjYywgc25hcHNob3QpID0+ICh7XG4gICAgICBpbmZlcmVuY2VUaW1lOiBhY2MuaW5mZXJlbmNlVGltZSArIHNuYXBzaG90LmluZmVyZW5jZVRpbWUsXG4gICAgICBtZW1vcnlVc2FnZTogYWNjLm1lbW9yeVVzYWdlICsgc25hcHNob3QubWVtb3J5VXNhZ2UsXG4gICAgICBjcHVVc2FnZTogYWNjLmNwdVVzYWdlICsgc25hcHNob3QuY3B1VXNhZ2UsXG4gICAgICBhY2N1cmFjeTogYWNjLmFjY3VyYWN5ICsgc25hcHNob3QuYWNjdXJhY3lcbiAgICB9KSwgeyBpbmZlcmVuY2VUaW1lOiAwLCBtZW1vcnlVc2FnZTogMCwgY3B1VXNhZ2U6IDAsIGFjY3VyYWN5OiAwIH0pXG4gICAgXG4gICAgY29uc3QgY291bnQgPSBoaXN0b3J5Lmxlbmd0aFxuICAgIHJldHVybiB7XG4gICAgICBpbmZlcmVuY2VUaW1lOiBzdW0uaW5mZXJlbmNlVGltZSAvIGNvdW50LFxuICAgICAgbWVtb3J5VXNhZ2U6IHN1bS5tZW1vcnlVc2FnZSAvIGNvdW50LFxuICAgICAgY3B1VXNhZ2U6IHN1bS5jcHVVc2FnZSAvIGNvdW50LFxuICAgICAgYWNjdXJhY3k6IHN1bS5hY2N1cmFjeSAvIGNvdW50XG4gICAgfVxuICB9XG4gIFxuICBwcml2YXRlIGFuYWx5emVUcmVuZHMoaGlzdG9yeTogTmV1cmFsUGVyZm9ybWFuY2VTbmFwc2hvdFtdKTogYW55IHtcbiAgICBpZiAoaGlzdG9yeS5sZW5ndGggPCAyKSByZXR1cm4gbnVsbFxuICAgIFxuICAgIGNvbnN0IHJlY2VudCA9IGhpc3Rvcnkuc2xpY2UoLU1hdGgubWluKDEwLCBoaXN0b3J5Lmxlbmd0aCkpXG4gICAgY29uc3Qgb2xkZXIgPSBoaXN0b3J5LnNsaWNlKDAsIE1hdGgubWluKDEwLCBoaXN0b3J5Lmxlbmd0aCkpXG4gICAgXG4gICAgY29uc3QgcmVjZW50QXZnID0gdGhpcy5jYWxjdWxhdGVBdmVyYWdlTWV0cmljcyhyZWNlbnQpXG4gICAgY29uc3Qgb2xkZXJBdmcgPSB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2VNZXRyaWNzKG9sZGVyKVxuICAgIFxuICAgIGlmICghcmVjZW50QXZnIHx8ICFvbGRlckF2ZykgcmV0dXJuIG51bGxcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgaW5mZXJlbmNlVGltZVRyZW5kOiByZWNlbnRBdmcuaW5mZXJlbmNlVGltZSAtIG9sZGVyQXZnLmluZmVyZW5jZVRpbWUsXG4gICAgICBtZW1vcnlVc2FnZVRyZW5kOiByZWNlbnRBdmcubWVtb3J5VXNhZ2UgLSBvbGRlckF2Zy5tZW1vcnlVc2FnZSxcbiAgICAgIGNwdVVzYWdlVHJlbmQ6IHJlY2VudEF2Zy5jcHVVc2FnZSAtIG9sZGVyQXZnLmNwdVVzYWdlLFxuICAgICAgYWNjdXJhY3lUcmVuZDogcmVjZW50QXZnLmFjY3VyYWN5IC0gb2xkZXJBdmcuYWNjdXJhY3lcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQThCVTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBOUJWOzs7Ozs7O0FBNEJBLE9BQU0sTUFBT0Usc0JBQXNCO0VBUWpDQyxZQUFZQyxNQUFBO0VBQUE7RUFBQSxDQUFBSixjQUFBLEdBQUFLLENBQUEsVUFBZ0QsRUFBRTtJQUFBO0lBQUFMLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFQdERDLE1BQUEsQ0FBQUMsY0FBQTs7OzthQUEwQjs7SUFBSTtJQUFBVCxjQUFBLEdBQUFPLENBQUE7SUFDOUJDLE1BQUEsQ0FBQUMsY0FBQTs7OzthQUFnQjs7SUFBSztJQUFBVCxjQUFBLEdBQUFPLENBQUE7SUFDckJDLE1BQUEsQ0FBQUMsY0FBQTs7Ozs7O0lBQW9DO0lBQUFULGNBQUEsR0FBQU8sQ0FBQTtJQUNwQ0MsTUFBQSxDQUFBQyxjQUFBOzs7O2FBQTJELElBQUlDLEdBQUc7O0lBQUU7SUFBQVYsY0FBQSxHQUFBTyxDQUFBO0lBQ3BFQyxNQUFBLENBQUFDLGNBQUE7Ozs7YUFBOEMsSUFBSUMsR0FBRzs7SUFBRTtJQUFBVixjQUFBLEdBQUFPLENBQUE7SUFDdkRDLE1BQUEsQ0FBQUMsY0FBQTs7Ozs7O0lBQWlDO0lBQUFULGNBQUEsR0FBQU8sQ0FBQTtJQUd2QyxJQUFJLENBQUNILE1BQU0sR0FBRztNQUNaTyx3QkFBd0IsRUFBRSxJQUFJO01BQzlCQyx5QkFBeUIsRUFBRSxJQUFJO01BQy9CQyx3QkFBd0IsRUFBRSxLQUFLO01BQUU7TUFDakNDLHNCQUFzQixFQUFFLEtBQUs7TUFBRTtNQUMvQkMsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsZUFBZSxFQUFFO1FBQ2ZDLGFBQWEsRUFBRSxHQUFHO1FBQUU7UUFDcEJDLFdBQVcsRUFBRSxFQUFFO1FBQUU7UUFDakJDLFFBQVEsRUFBRSxFQUFFO1FBQUU7UUFDZEMsUUFBUSxFQUFFLElBQUk7UUFBRTtRQUNoQkMsU0FBUyxFQUFFLElBQUksQ0FBQztPQUNqQjtNQUNEQyxjQUFjLEVBQUUsSUFBSTtNQUFFO01BQ3RCQyxnQkFBZ0IsRUFBRSxFQUFFO01BQUU7TUFDdEIsR0FBR25CO0tBQ0o7SUFBQTtJQUFBSixjQUFBLEdBQUFPLENBQUE7SUFFRCxJQUFJLENBQUNpQixZQUFZLEdBQUc7TUFDbEJDLFlBQVksRUFBRSxHQUFHO01BQ2pCQyxlQUFlLEVBQUU7UUFDZkMsTUFBTSxFQUFFLEdBQUc7UUFDWEMsTUFBTSxFQUFFLEdBQUc7UUFDWEMsV0FBVyxFQUFFLEdBQUc7UUFDaEJDLE9BQU8sRUFBRSxHQUFHO1FBQ1pDLElBQUksRUFBRTtPQUNQO01BQ0RDLFlBQVksRUFBRSxFQUFFO01BQ2hCQyxlQUFlLEVBQUUsRUFBRTtNQUNuQkMsTUFBTSxFQUFFLENBQUM7TUFDVEMsU0FBUyxFQUFFLElBQUlDLElBQUk7S0FDcEI7RUFDSDtFQUVBOzs7RUFHQSxNQUFNQyxVQUFVQSxDQUFBO0lBQUE7SUFBQXJDLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDZCxJQUFJO01BQUE7TUFBQVAsY0FBQSxHQUFBTyxDQUFBO01BQ0YrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQztNQUV6RDtNQUNBLE1BQU1DLDBCQUEwQjtNQUFBO01BQUEsQ0FBQXhDLGNBQUEsR0FBQU8sQ0FBQSxRQUFHa0MsT0FBTyxDQUFDLG1FQUFtRSxDQUFDO01BQUE7TUFBQXpDLGNBQUEsR0FBQU8sQ0FBQTtNQUUvRyxJQUFJLENBQUNtQyxrQkFBa0IsR0FBRyxJQUFJRiwwQkFBMEIsQ0FBQztRQUN2RDtRQUNBRyxlQUFlLEVBQUUsR0FBRztRQUFFO1FBQ3RCQyxvQkFBb0IsRUFBRSxJQUFJLENBQUN4QyxNQUFNLENBQUNZLGVBQWUsQ0FBQ0UsV0FBVyxHQUFHLElBQUksR0FBRyxJQUFJO1FBQUU7UUFDN0UyQixtQkFBbUIsRUFBRSxJQUFJLENBQUN6QyxNQUFNLENBQUNZLGVBQWUsQ0FBQ0MsYUFBYTtRQUFFO1FBQ2hFNkIsdUJBQXVCLEVBQUUsRUFBRTtRQUFFO1FBRTdCO1FBQ0FuQyx3QkFBd0IsRUFBRSxJQUFJLENBQUNQLE1BQU0sQ0FBQ08sd0JBQXdCO1FBQzlEQyx5QkFBeUIsRUFBRSxJQUFJLENBQUNSLE1BQU0sQ0FBQ1EseUJBQXlCO1FBQ2hFbUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDM0MsTUFBTSxDQUFDUyx3QkFBd0I7UUFDeERtQyxpQkFBaUIsRUFBRSxJQUFJLENBQUM1QyxNQUFNLENBQUNXLGdCQUFnQjtRQUMvQ0Qsc0JBQXNCLEVBQUUsSUFBSSxDQUFDVixNQUFNLENBQUNVLHNCQUFzQjtRQUUxRDtRQUNBbUMsc0JBQXNCLEVBQUUsUUFBUTtRQUVoQztRQUNBQyxhQUFhLEVBQUUsSUFBSTtRQUNuQkMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDL0MsTUFBTSxDQUFDa0I7T0FDdEMsQ0FBQztNQUVGO01BQUE7TUFBQXRCLGNBQUEsR0FBQU8sQ0FBQTtNQUNBLElBQUksQ0FBQzZDLGtCQUFrQixFQUFFO01BRXpCO01BQUE7TUFBQXBELGNBQUEsR0FBQU8sQ0FBQTtNQUNBLElBQUksSUFBSSxDQUFDSCxNQUFNLENBQUNPLHdCQUF3QixFQUFFO1FBQUE7UUFBQVgsY0FBQSxHQUFBSyxDQUFBO1FBQUFMLGNBQUEsR0FBQU8sQ0FBQTtRQUN4QyxNQUFNLElBQUksQ0FBQ21DLGtCQUFrQixDQUFDVyxlQUFlLEVBQUU7TUFDakQsQ0FBQztNQUFBO01BQUE7UUFBQXJELGNBQUEsR0FBQUssQ0FBQTtNQUFBO01BQUFMLGNBQUEsR0FBQU8sQ0FBQTtNQUVELElBQUksQ0FBQytDLGFBQWEsR0FBRyxJQUFJO01BQUE7TUFBQXRELGNBQUEsR0FBQU8sQ0FBQTtNQUN6QitCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHVDQUF1QyxDQUFDO0lBRXRELENBQUMsQ0FBQyxPQUFPZ0IsS0FBSyxFQUFFO01BQUE7TUFBQXZELGNBQUEsR0FBQU8sQ0FBQTtNQUNkK0IsT0FBTyxDQUFDaUIsS0FBSyxDQUFDLGlEQUFpRCxFQUFFQSxLQUFLLENBQUM7TUFBQTtNQUFBdkQsY0FBQSxHQUFBTyxDQUFBO01BQ3ZFLE1BQU1nRCxLQUFLO0lBQ2I7RUFDRjtFQUVBOzs7RUFHUUgsa0JBQWtCQSxDQUFBO0lBQUE7SUFBQXBELGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQ21DLGtCQUFrQixFQUFFO01BQUE7TUFBQTFDLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFBQTtJQUFBLENBQU07SUFBQTtJQUFBO01BQUFQLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBRXBDO0lBQUFMLGNBQUEsR0FBQU8sQ0FBQTtJQUNBLElBQUksQ0FBQ21DLGtCQUFrQixDQUFDYyxFQUFFLENBQUMsb0JBQW9CLEVBQUdDLElBQVMsSUFBSTtNQUFBO01BQUF6RCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQzdELElBQUksQ0FBQ21ELHVCQUF1QixDQUFDRCxJQUFJLENBQUM7SUFDcEMsQ0FBQyxDQUFDO0lBQUE7SUFBQXpELGNBQUEsR0FBQU8sQ0FBQTtJQUVGLElBQUksQ0FBQ21DLGtCQUFrQixDQUFDYyxFQUFFLENBQUMseUJBQXlCLEVBQUdDLElBQVMsSUFBSTtNQUFBO01BQUF6RCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQ2xFLElBQUksQ0FBQ29ELHNCQUFzQixDQUFDRixJQUFJLENBQUM7SUFDbkMsQ0FBQyxDQUFDO0lBQUE7SUFBQXpELGNBQUEsR0FBQU8sQ0FBQTtJQUVGLElBQUksQ0FBQ21DLGtCQUFrQixDQUFDYyxFQUFFLENBQUMsdUJBQXVCLEVBQUdDLElBQVMsSUFBSTtNQUFBO01BQUF6RCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQ2hFLElBQUksQ0FBQ3FELGlCQUFpQixDQUFDSCxJQUFJLENBQUM7SUFDOUIsQ0FBQyxDQUFDO0lBQUE7SUFBQXpELGNBQUEsR0FBQU8sQ0FBQTtJQUVGLElBQUksQ0FBQ21DLGtCQUFrQixDQUFDYyxFQUFFLENBQUMsZ0JBQWdCLEVBQUdDLElBQVMsSUFBSTtNQUFBO01BQUF6RCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQ3pELElBQUksQ0FBQ3NELG1CQUFtQixDQUFDSixJQUFJLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBRUY7SUFBQTtJQUFBekQsY0FBQSxHQUFBTyxDQUFBO0lBQ0EsSUFBSSxDQUFDbUMsa0JBQWtCLENBQUNjLEVBQUUsQ0FBQyxPQUFPLEVBQUdNLEtBQVUsSUFBSTtNQUFBO01BQUE5RCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQ2pELElBQUksQ0FBQ3dELHNCQUFzQixDQUFDRCxLQUFLLENBQUM7SUFDcEMsQ0FBQyxDQUFDO0lBRUY7SUFBQTtJQUFBOUQsY0FBQSxHQUFBTyxDQUFBO0lBQ0EsSUFBSSxDQUFDbUMsa0JBQWtCLENBQUNjLEVBQUUsQ0FBQyxvQkFBb0IsRUFBR1EsVUFBZSxJQUFJO01BQUE7TUFBQWhFLGNBQUEsR0FBQU0sQ0FBQTtNQUFBTixjQUFBLEdBQUFPLENBQUE7TUFDbkUsSUFBSSxDQUFDMEQsd0JBQXdCLENBQUNELFVBQVUsQ0FBQztJQUMzQyxDQUFDLENBQUM7SUFBQTtJQUFBaEUsY0FBQSxHQUFBTyxDQUFBO0lBRUYsSUFBSSxDQUFDbUMsa0JBQWtCLENBQUNjLEVBQUUsQ0FBQyxvQkFBb0IsRUFBR1EsVUFBZSxJQUFJO01BQUE7TUFBQWhFLGNBQUEsR0FBQU0sQ0FBQTtNQUFBTixjQUFBLEdBQUFPLENBQUE7TUFDbkUsSUFBSSxDQUFDMkQsd0JBQXdCLENBQUNGLFVBQVUsQ0FBQztJQUMzQyxDQUFDLENBQUM7SUFFRjtJQUFBO0lBQUFoRSxjQUFBLEdBQUFPLENBQUE7SUFDQSxJQUFJLENBQUNtQyxrQkFBa0IsQ0FBQ2MsRUFBRSxDQUFDLHNCQUFzQixFQUFHVyxZQUFpQixJQUFJO01BQUE7TUFBQW5FLGNBQUEsR0FBQU0sQ0FBQTtNQUFBTixjQUFBLEdBQUFPLENBQUE7TUFDdkUsSUFBSSxDQUFDNkQseUJBQXlCLENBQUNELFlBQVksQ0FBQztJQUM5QyxDQUFDLENBQUM7RUFDSjtFQUVBOzs7RUFHQUUsa0JBQWtCQSxDQUFDQyxPQUFlLEVBQUVDLE9BQTJDO0lBQUE7SUFBQXZFLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDN0UsSUFBSSxDQUFDLElBQUksQ0FBQytDLGFBQWEsRUFBRTtNQUFBO01BQUF0RCxjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQ3ZCK0IsT0FBTyxDQUFDa0MsSUFBSSxDQUFDLDRDQUE0QyxDQUFDO01BQUE7TUFBQXhFLGNBQUEsR0FBQU8sQ0FBQTtNQUMxRDtJQUNGLENBQUM7SUFBQTtJQUFBO01BQUFQLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBRUQsTUFBTW9FLFFBQVE7SUFBQTtJQUFBLENBQUF6RSxjQUFBLEdBQUFPLENBQUEsUUFBOEI7TUFDMUNtRSxTQUFTLEVBQUUsSUFBSXRDLElBQUksRUFBRTtNQUNyQmtDLE9BQU87TUFDUHJELGFBQWE7TUFBRTtNQUFBLENBQUFqQixjQUFBLEdBQUFLLENBQUEsVUFBQWtFLE9BQU8sQ0FBQ3RELGFBQWE7TUFBQTtNQUFBLENBQUFqQixjQUFBLEdBQUFLLENBQUEsVUFBSSxDQUFDO01BQ3pDc0UsWUFBWSxFQUFFSixPQUFPLENBQUNJLFlBQVk7TUFDbENDLGlCQUFpQjtNQUFFO01BQUEsQ0FBQTVFLGNBQUEsR0FBQUssQ0FBQSxVQUFBa0UsT0FBTyxDQUFDSyxpQkFBaUI7TUFBQTtNQUFBLENBQUE1RSxjQUFBLEdBQUFLLENBQUEsVUFBSSxDQUFDO01BQ2pEd0Usa0JBQWtCO01BQUU7TUFBQSxDQUFBN0UsY0FBQSxHQUFBSyxDQUFBLFVBQUFrRSxPQUFPLENBQUNNLGtCQUFrQjtNQUFBO01BQUEsQ0FBQTdFLGNBQUEsR0FBQUssQ0FBQSxVQUFJLENBQUM7TUFDbkRhLFdBQVc7TUFBRTtNQUFBLENBQUFsQixjQUFBLEdBQUFLLENBQUEsVUFBQWtFLE9BQU8sQ0FBQ3JELFdBQVc7TUFBQTtNQUFBLENBQUFsQixjQUFBLEdBQUFLLENBQUEsVUFBSSxDQUFDO01BQ3JDYyxRQUFRO01BQUU7TUFBQSxDQUFBbkIsY0FBQSxHQUFBSyxDQUFBLFVBQUFrRSxPQUFPLENBQUNwRCxRQUFRO01BQUE7TUFBQSxDQUFBbkIsY0FBQSxHQUFBSyxDQUFBLFVBQUksQ0FBQztNQUMvQnlFLFFBQVEsRUFBRVAsT0FBTyxDQUFDTyxRQUFRO01BQzFCQyxpQkFBaUI7TUFBRTtNQUFBLENBQUEvRSxjQUFBLEdBQUFLLENBQUEsVUFBQWtFLE9BQU8sQ0FBQ1EsaUJBQWlCO01BQUE7TUFBQSxDQUFBL0UsY0FBQSxHQUFBSyxDQUFBLFVBQUksQ0FBQztNQUNqRGUsUUFBUTtNQUFFO01BQUEsQ0FBQXBCLGNBQUEsR0FBQUssQ0FBQSxXQUFBa0UsT0FBTyxDQUFDbkQsUUFBUTtNQUFBO01BQUEsQ0FBQXBCLGNBQUEsR0FBQUssQ0FBQSxXQUFJLENBQUM7TUFDL0IyRSxTQUFTO01BQUU7TUFBQSxDQUFBaEYsY0FBQSxHQUFBSyxDQUFBLFdBQUFrRSxPQUFPLENBQUNTLFNBQVM7TUFBQTtNQUFBLENBQUFoRixjQUFBLEdBQUFLLENBQUEsV0FBSSxDQUFDO01BQ2pDNEUsTUFBTTtNQUFFO01BQUEsQ0FBQWpGLGNBQUEsR0FBQUssQ0FBQSxXQUFBa0UsT0FBTyxDQUFDVSxNQUFNO01BQUE7TUFBQSxDQUFBakYsY0FBQSxHQUFBSyxDQUFBLFdBQUksQ0FBQztNQUMzQjZFLE9BQU87TUFBRTtNQUFBLENBQUFsRixjQUFBLEdBQUFLLENBQUEsV0FBQWtFLE9BQU8sQ0FBQ1csT0FBTztNQUFBO01BQUEsQ0FBQWxGLGNBQUEsR0FBQUssQ0FBQSxXQUFJLENBQUM7TUFDN0I4RSxjQUFjO01BQUU7TUFBQSxDQUFBbkYsY0FBQSxHQUFBSyxDQUFBLFdBQUFrRSxPQUFPLENBQUNZLGNBQWM7TUFBQTtNQUFBLENBQUFuRixjQUFBLEdBQUFLLENBQUEsV0FBSSxDQUFDO01BQzNDK0UsY0FBYztNQUFFO01BQUEsQ0FBQXBGLGNBQUEsR0FBQUssQ0FBQSxXQUFBa0UsT0FBTyxDQUFDYSxjQUFjO01BQUE7TUFBQSxDQUFBcEYsY0FBQSxHQUFBSyxDQUFBLFdBQUksQ0FBQztNQUMzQ2dGLFdBQVc7TUFBRTtNQUFBLENBQUFyRixjQUFBLEdBQUFLLENBQUEsV0FBQWtFLE9BQU8sQ0FBQ2MsV0FBVztNQUFBO01BQUEsQ0FBQXJGLGNBQUEsR0FBQUssQ0FBQSxXQUFJLENBQUM7S0FDdEM7SUFFRDtJQUFBO0lBQUFMLGNBQUEsR0FBQU8sQ0FBQTtJQUNBLElBQUksQ0FBQyxJQUFJLENBQUMrRSxjQUFjLENBQUNDLEdBQUcsQ0FBQ2pCLE9BQU8sQ0FBQyxFQUFFO01BQUE7TUFBQXRFLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDckMsSUFBSSxDQUFDK0UsY0FBYyxDQUFDRSxHQUFHLENBQUNsQixPQUFPLEVBQUUsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFBQTtJQUFBO01BQUF0RSxjQUFBLEdBQUFLLENBQUE7SUFBQTtJQUVELE1BQU1vRixZQUFZO0lBQUE7SUFBQSxDQUFBekYsY0FBQSxHQUFBTyxDQUFBLFFBQUcsSUFBSSxDQUFDK0UsY0FBYyxDQUFDSSxHQUFHLENBQUNwQixPQUFPLENBQUU7SUFBQTtJQUFBdEUsY0FBQSxHQUFBTyxDQUFBO0lBQ3REa0YsWUFBWSxDQUFDRSxJQUFJLENBQUNsQixRQUFRLENBQUM7SUFFM0I7SUFDQSxNQUFNbUIsY0FBYztJQUFBO0lBQUEsQ0FBQTVGLGNBQUEsR0FBQU8sQ0FBQSxRQUFJLElBQUksQ0FBQ0gsTUFBTSxDQUFDbUIsZ0JBQWdCLEdBQUcsSUFBSSxJQUFLLElBQUksQ0FBQ25CLE1BQU0sQ0FBQ2tCLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFBQTtJQUFBdEIsY0FBQSxHQUFBTyxDQUFBO0lBQ2xHLElBQUlrRixZQUFZLENBQUNJLE1BQU0sR0FBR0QsY0FBYyxFQUFFO01BQUE7TUFBQTVGLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDeENrRixZQUFZLENBQUNLLEtBQUssRUFBRTtJQUN0QixDQUFDO0lBQUE7SUFBQTtNQUFBOUYsY0FBQSxHQUFBSyxDQUFBO0lBQUE7SUFFRDtJQUFBTCxjQUFBLEdBQUFPLENBQUE7SUFDQSxJQUFJLENBQUN3RiwwQkFBMEIsQ0FBQ3RCLFFBQVEsQ0FBQztJQUV6QztJQUFBO0lBQUF6RSxjQUFBLEdBQUFPLENBQUE7SUFDQSxJQUFJLElBQUksQ0FBQ21DLGtCQUFrQixFQUFFO01BQUE7TUFBQTFDLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDM0IsSUFBSSxDQUFDbUMsa0JBQWtCLENBQUNzRCxJQUFJLENBQUMsc0JBQXNCLEVBQUV2QixRQUFRLENBQUM7SUFDaEUsQ0FBQztJQUFBO0lBQUE7TUFBQXpFLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0VBQ0g7RUFFQTs7O0VBR0E0RixlQUFlQSxDQUFDM0IsT0FBZSxFQUFFNEIsU0FBa0I7SUFBQTtJQUFBbEcsY0FBQSxHQUFBTSxDQUFBO0lBQ2pELE1BQU02RixPQUFPO0lBQUE7SUFBQSxDQUFBbkcsY0FBQSxHQUFBTyxDQUFBO0lBQUc7SUFBQSxDQUFBUCxjQUFBLEdBQUFLLENBQUEsZUFBSSxDQUFDaUYsY0FBYyxDQUFDSSxHQUFHLENBQUNwQixPQUFPLENBQUM7SUFBQTtJQUFBLENBQUF0RSxjQUFBLEdBQUFLLENBQUEsV0FBSSxFQUFFO0lBQUE7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBRXRELElBQUksQ0FBQzJGLFNBQVMsRUFBRTtNQUFBO01BQUFsRyxjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQUEsT0FBTzRGLE9BQU87SUFBQTtJQUFBO0lBQUE7TUFBQW5HLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBRTlCLE1BQU0rRixVQUFVO0lBQUE7SUFBQSxDQUFBcEcsY0FBQSxHQUFBTyxDQUFBLFFBQUcsSUFBSTZCLElBQUksQ0FBQ0EsSUFBSSxDQUFDaUUsR0FBRyxFQUFFLEdBQUdILFNBQVMsQ0FBQztJQUFBO0lBQUFsRyxjQUFBLEdBQUFPLENBQUE7SUFDbkQsT0FBTzRGLE9BQU8sQ0FBQ0csTUFBTSxDQUFDN0IsUUFBUSxJQUFJO01BQUE7TUFBQXpFLGNBQUEsR0FBQU0sQ0FBQTtNQUFBTixjQUFBLEdBQUFPLENBQUE7TUFBQSxPQUFBa0UsUUFBUSxDQUFDQyxTQUFTLElBQUkwQixVQUFVO0lBQVYsQ0FBVSxDQUFDO0VBQ3JFO0VBRUE7OztFQUdBRyxlQUFlQSxDQUFBO0lBQUE7SUFBQXZHLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDYixJQUFJLENBQUNpRyxrQkFBa0IsRUFBRTtJQUFBO0lBQUF4RyxjQUFBLEdBQUFPLENBQUE7SUFDekIsT0FBTztNQUFFLEdBQUcsSUFBSSxDQUFDaUI7SUFBWSxDQUFFO0VBQ2pDO0VBRUE7OztFQUdBaUYsZ0JBQWdCQSxDQUFBO0lBQUE7SUFBQXpHLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDbUMsa0JBQWtCLEVBQUU7TUFBQTtNQUFBMUMsY0FBQSxHQUFBSyxDQUFBO01BQUFMLGNBQUEsR0FBQU8sQ0FBQTtNQUM1QixPQUFPLElBQUk7SUFDYixDQUFDO0lBQUE7SUFBQTtNQUFBUCxjQUFBLEdBQUFLLENBQUE7SUFBQTtJQUFBTCxjQUFBLEdBQUFPLENBQUE7SUFFRCxPQUFPLElBQUksQ0FBQ21DLGtCQUFrQixDQUFDZ0Usb0JBQW9CLEVBQUU7RUFDdkQ7RUFFQTs7O0VBR0FDLGVBQWVBLENBQUE7SUFBQTtJQUFBM0csY0FBQSxHQUFBTSxDQUFBO0lBQUFOLGNBQUEsR0FBQU8sQ0FBQTtJQUNiLE9BQU9xRyxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM3RSxZQUFZLENBQUM4RSxNQUFNLEVBQUUsQ0FBQztFQUMvQztFQUVBOzs7RUFHQUMsZ0JBQWdCQSxDQUFDQyxPQUFlO0lBQUE7SUFBQWhILGNBQUEsR0FBQU0sQ0FBQTtJQUM5QixNQUFNd0QsS0FBSztJQUFBO0lBQUEsQ0FBQTlELGNBQUEsR0FBQU8sQ0FBQSxRQUFHLElBQUksQ0FBQ3lCLFlBQVksQ0FBQzBELEdBQUcsQ0FBQ3NCLE9BQU8sQ0FBQztJQUFBO0lBQUFoSCxjQUFBLEdBQUFPLENBQUE7SUFDNUMsSUFBSXVELEtBQUssRUFBRTtNQUFBO01BQUE5RCxjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQ1R1RCxLQUFLLENBQUNtRCxZQUFZLEdBQUcsSUFBSTtNQUFBO01BQUFqSCxjQUFBLEdBQUFPLENBQUE7TUFDekIsT0FBTyxJQUFJO0lBQ2IsQ0FBQztJQUFBO0lBQUE7TUFBQVAsY0FBQSxHQUFBSyxDQUFBO0lBQUE7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBQ0QsT0FBTyxLQUFLO0VBQ2Q7RUFFQTs7O0VBR0EyRyxZQUFZQSxDQUFDRixPQUFlO0lBQUE7SUFBQWhILGNBQUEsR0FBQU0sQ0FBQTtJQUMxQixNQUFNd0QsS0FBSztJQUFBO0lBQUEsQ0FBQTlELGNBQUEsR0FBQU8sQ0FBQSxRQUFHLElBQUksQ0FBQ3lCLFlBQVksQ0FBQzBELEdBQUcsQ0FBQ3NCLE9BQU8sQ0FBQztJQUFBO0lBQUFoSCxjQUFBLEdBQUFPLENBQUE7SUFDNUMsSUFBSXVELEtBQUssRUFBRTtNQUFBO01BQUE5RCxjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQ1R1RCxLQUFLLENBQUNxRCxVQUFVLEdBQUcsSUFBSS9FLElBQUksRUFBRTtNQUFBO01BQUFwQyxjQUFBLEdBQUFPLENBQUE7TUFDN0IsSUFBSSxDQUFDeUIsWUFBWSxDQUFDb0YsTUFBTSxDQUFDSixPQUFPLENBQUM7TUFBQTtNQUFBaEgsY0FBQSxHQUFBTyxDQUFBO01BQ2pDLE9BQU8sSUFBSTtJQUNiLENBQUM7SUFBQTtJQUFBO01BQUFQLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBQUFMLGNBQUEsR0FBQU8sQ0FBQTtJQUNELE9BQU8sS0FBSztFQUNkO0VBRUE7OztFQUdBOEcseUJBQXlCQSxDQUFDQyxRQUFtQjtJQUFBO0lBQUF0SCxjQUFBLEdBQUFNLENBQUE7SUFDM0MsTUFBTWlILE1BQU07SUFBQTtJQUFBLENBQUF2SCxjQUFBLEdBQUFPLENBQUE7SUFBRztJQUFBLENBQUFQLGNBQUEsR0FBQUssQ0FBQSxXQUFBaUgsUUFBUTtJQUFBO0lBQUEsQ0FBQXRILGNBQUEsR0FBQUssQ0FBQSxXQUFJdUcsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDdkIsY0FBYyxDQUFDa0MsSUFBSSxFQUFFLENBQUM7SUFDakUsTUFBTUMsTUFBTTtJQUFBO0lBQUEsQ0FBQXpILGNBQUEsR0FBQU8sQ0FBQSxRQUFHO01BQ2JtRSxTQUFTLEVBQUUsSUFBSXRDLElBQUksRUFBRTtNQUNyQnNGLE9BQU8sRUFBRTtRQUNQQyxXQUFXLEVBQUVKLE1BQU0sQ0FBQzFCLE1BQU07UUFDMUIrQixvQkFBb0IsRUFBRSxDQUFDO1FBQ3ZCQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCQyxlQUFlLEVBQUUsQ0FBQztRQUNsQkMsZUFBZSxFQUFFO09BQ2xCO01BQ0RDLFlBQVksRUFBRSxFQUFTO01BQ3ZCeEcsWUFBWSxFQUFFLElBQUksQ0FBQytFLGVBQWUsRUFBRTtNQUNwQ3ZFLFlBQVksRUFBRSxJQUFJLENBQUMyRSxlQUFlLEVBQUU7TUFDcEMxRSxlQUFlLEVBQUUsSUFBSSxDQUFDZ0csdUJBQXVCO0tBQzlDO0lBRUQ7SUFDQSxJQUFJQyxrQkFBa0I7SUFBQTtJQUFBLENBQUFsSSxjQUFBLEdBQUFPLENBQUEsUUFBRyxDQUFDO0lBQzFCLElBQUk0SCxnQkFBZ0I7SUFBQTtJQUFBLENBQUFuSSxjQUFBLEdBQUFPLENBQUEsUUFBRyxDQUFDO0lBQ3hCLElBQUk2SCxhQUFhO0lBQUE7SUFBQSxDQUFBcEksY0FBQSxHQUFBTyxDQUFBLFFBQUcsQ0FBQztJQUNyQixJQUFJOEgsYUFBYTtJQUFBO0lBQUEsQ0FBQXJJLGNBQUEsR0FBQU8sQ0FBQSxRQUFHLENBQUM7SUFDckIsSUFBSStILFdBQVc7SUFBQTtJQUFBLENBQUF0SSxjQUFBLEdBQUFPLENBQUEsUUFBRyxDQUFDO0lBQUE7SUFBQVAsY0FBQSxHQUFBTyxDQUFBO0lBRW5CLEtBQUssTUFBTStELE9BQU8sSUFBSWlELE1BQU0sRUFBRTtNQUM1QixNQUFNcEIsT0FBTztNQUFBO01BQUEsQ0FBQW5HLGNBQUEsR0FBQU8sQ0FBQSxRQUFHLElBQUksQ0FBQzBGLGVBQWUsQ0FBQzNCLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBQztNQUFBO01BQUF0RSxjQUFBLEdBQUFPLENBQUE7TUFDdkQsSUFBSTRGLE9BQU8sQ0FBQ04sTUFBTSxLQUFLLENBQUMsRUFBRTtRQUFBO1FBQUE3RixjQUFBLEdBQUFLLENBQUE7UUFBQUwsY0FBQSxHQUFBTyxDQUFBO1FBQUE7TUFBQSxDQUFRO01BQUE7TUFBQTtRQUFBUCxjQUFBLEdBQUFLLENBQUE7TUFBQTtNQUVsQyxNQUFNa0ksY0FBYztNQUFBO01BQUEsQ0FBQXZJLGNBQUEsR0FBQU8sQ0FBQSxRQUFHNEYsT0FBTyxDQUFDQSxPQUFPLENBQUNOLE1BQU0sR0FBRyxDQUFDLENBQUM7TUFDbEQsTUFBTTJDLFdBQVc7TUFBQTtNQUFBLENBQUF4SSxjQUFBLEdBQUFPLENBQUEsUUFBRztRQUNsQitELE9BQU87UUFDUG1FLGFBQWEsRUFBRUYsY0FBYztRQUM3QkcsY0FBYyxFQUFFLElBQUksQ0FBQ0MsdUJBQXVCLENBQUN4QyxPQUFPLENBQUM7UUFDckR5QyxhQUFhLEVBQUUsSUFBSSxDQUFDQyxhQUFhLENBQUMxQyxPQUFPO09BQzFDO01BQUE7TUFBQW5HLGNBQUEsR0FBQU8sQ0FBQTtNQUVEa0gsTUFBTSxDQUFDTyxZQUFZLENBQUMxRCxPQUFPLENBQUMsR0FBR2tFLFdBQVc7TUFBQTtNQUFBeEksY0FBQSxHQUFBTyxDQUFBO01BRTFDMkgsa0JBQWtCLElBQUlLLGNBQWMsQ0FBQ3RILGFBQWE7TUFBQTtNQUFBakIsY0FBQSxHQUFBTyxDQUFBO01BQ2xENEgsZ0JBQWdCLElBQUlJLGNBQWMsQ0FBQ3JILFdBQVc7TUFBQTtNQUFBbEIsY0FBQSxHQUFBTyxDQUFBO01BQzlDNkgsYUFBYSxJQUFJRyxjQUFjLENBQUNwSCxRQUFRO01BQUE7TUFBQW5CLGNBQUEsR0FBQU8sQ0FBQTtNQUN4QzhILGFBQWEsSUFBSUUsY0FBYyxDQUFDbkgsUUFBUTtNQUFBO01BQUFwQixjQUFBLEdBQUFPLENBQUE7TUFDeEMrSCxXQUFXLEVBQUU7SUFDZjtJQUVBO0lBQUE7SUFBQXRJLGNBQUEsR0FBQU8sQ0FBQTtJQUNBLElBQUkrSCxXQUFXLEdBQUcsQ0FBQyxFQUFFO01BQUE7TUFBQXRJLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDbkJrSCxNQUFNLENBQUNDLE9BQU8sQ0FBQ0Usb0JBQW9CLEdBQUdNLGtCQUFrQixHQUFHSSxXQUFXO01BQUE7TUFBQXRJLGNBQUEsR0FBQU8sQ0FBQTtNQUN0RWtILE1BQU0sQ0FBQ0MsT0FBTyxDQUFDRyxrQkFBa0IsR0FBR00sZ0JBQWdCLEdBQUdHLFdBQVc7TUFBQTtNQUFBdEksY0FBQSxHQUFBTyxDQUFBO01BQ2xFa0gsTUFBTSxDQUFDQyxPQUFPLENBQUNJLGVBQWUsR0FBR00sYUFBYSxHQUFHRSxXQUFXO01BQUE7TUFBQXRJLGNBQUEsR0FBQU8sQ0FBQTtNQUM1RGtILE1BQU0sQ0FBQ0MsT0FBTyxDQUFDSyxlQUFlLEdBQUdNLGFBQWEsR0FBR0MsV0FBVztJQUM5RCxDQUFDO0lBQUE7SUFBQTtNQUFBdEksY0FBQSxHQUFBSyxDQUFBO0lBQUE7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBRUQsT0FBT2tILE1BQU07RUFDZjtFQUVBOzs7RUFHQSxNQUFNcUIsT0FBT0EsQ0FBQTtJQUFBO0lBQUE5SSxjQUFBLEdBQUFNLENBQUE7SUFBQU4sY0FBQSxHQUFBTyxDQUFBO0lBQ1gsSUFBSSxJQUFJLENBQUNtQyxrQkFBa0IsRUFBRTtNQUFBO01BQUExQyxjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQzNCLElBQUk7UUFBQTtRQUFBUCxjQUFBLEdBQUFPLENBQUE7UUFDRixNQUFNLElBQUksQ0FBQ21DLGtCQUFrQixDQUFDb0csT0FBTyxFQUFFO1FBQUE7UUFBQTlJLGNBQUEsR0FBQU8sQ0FBQTtRQUN2QytCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGtDQUFrQyxDQUFDO01BQ2pELENBQUMsQ0FBQyxPQUFPZ0IsS0FBSyxFQUFFO1FBQUE7UUFBQXZELGNBQUEsR0FBQU8sQ0FBQTtRQUNkK0IsT0FBTyxDQUFDaUIsS0FBSyxDQUFDLDBDQUEwQyxFQUFFQSxLQUFLLENBQUM7TUFDbEU7SUFDRixDQUFDO0lBQUE7SUFBQTtNQUFBdkQsY0FBQSxHQUFBSyxDQUFBO0lBQUE7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBRUQsSUFBSSxDQUFDK0UsY0FBYyxDQUFDeUQsS0FBSyxFQUFFO0lBQUE7SUFBQS9JLGNBQUEsR0FBQU8sQ0FBQTtJQUMzQixJQUFJLENBQUN5QixZQUFZLENBQUMrRyxLQUFLLEVBQUU7SUFBQTtJQUFBL0ksY0FBQSxHQUFBTyxDQUFBO0lBQ3pCLElBQUksQ0FBQytDLGFBQWEsR0FBRyxLQUFLO0VBQzVCO0VBRUE7RUFFUUksdUJBQXVCQSxDQUFDRCxJQUFTO0lBQUE7SUFBQXpELGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDdkMrQixPQUFPLENBQUNDLEdBQUcsQ0FBQywrQkFBK0JrQixJQUFJLENBQUN1RixPQUFPLE9BQU92RixJQUFJLENBQUN3RixLQUFLLFVBQVUsQ0FBQztJQUFBO0lBQUFqSixjQUFBLEdBQUFPLENBQUE7SUFFbkYsSUFBSWtELElBQUksQ0FBQ3VGLE9BQU8sR0FBRyxJQUFJLENBQUM1SSxNQUFNLENBQUNZLGVBQWUsQ0FBQ0MsYUFBYSxHQUFHLENBQUMsRUFBRTtNQUFBO01BQUFqQixjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQ2hFLElBQUksQ0FBQzJJLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLEVBQUU7UUFDN0NDLGdCQUFnQixFQUFFMUYsSUFBSSxDQUFDdUYsT0FBTztRQUM5QkksTUFBTSxFQUFFLElBQUksQ0FBQ2hKLE1BQU0sQ0FBQ1ksZUFBZSxDQUFDQyxhQUFhLEdBQUcsQ0FBQztRQUNyRGdJLEtBQUssRUFBRXhGLElBQUksQ0FBQ3dGO09BQ2IsQ0FBQztJQUNKLENBQUM7SUFBQTtJQUFBO01BQUFqSixjQUFBLEdBQUFLLENBQUE7SUFBQTtFQUNIO0VBRVFzRCxzQkFBc0JBLENBQUNGLElBQVM7SUFBQTtJQUFBekQsY0FBQSxHQUFBTSxDQUFBO0lBQUFOLGNBQUEsR0FBQU8sQ0FBQTtJQUN0QytCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2QmtCLElBQUksQ0FBQ3VGLE9BQU8sSUFBSSxDQUFDO0lBQUE7SUFBQWhKLGNBQUEsR0FBQU8sQ0FBQTtJQUUxRCxJQUFJa0QsSUFBSSxDQUFDNEYsbUJBQW1CLEdBQUcsR0FBRyxFQUFFO01BQUE7TUFBQXJKLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDbEMsSUFBSSxDQUFDMkksYUFBYSxDQUFDLGdDQUFnQyxFQUFFLFFBQVEsRUFBRTtRQUM3REksV0FBVyxFQUFFN0YsSUFBSSxDQUFDdUYsT0FBTztRQUN6Qk8sU0FBUyxFQUFFOUYsSUFBSSxDQUFDNEYsbUJBQW1CO1FBQ25DRCxNQUFNLEVBQUUsSUFBSSxDQUFDaEosTUFBTSxDQUFDWSxlQUFlLENBQUNDO09BQ3JDLENBQUM7SUFDSixDQUFDO0lBQUE7SUFBQTtNQUFBakIsY0FBQSxHQUFBSyxDQUFBO0lBQUE7RUFDSDtFQUVRdUQsaUJBQWlCQSxDQUFDSCxJQUFTO0lBQUE7SUFBQXpELGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDakMrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyx3QkFBd0JrQixJQUFJLENBQUN1RixPQUFPLElBQUksQ0FBQztJQUVyRDtJQUFBO0lBQUFoSixjQUFBLEdBQUFPLENBQUE7SUFDQSxJQUFJa0QsSUFBSSxDQUFDdUYsT0FBTyxHQUFHLEVBQUUsRUFBRTtNQUFBO01BQUFoSixjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQUU7TUFDdkIsSUFBSSxDQUFDMkksYUFBYSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsRUFBRTtRQUNyREksV0FBVyxFQUFFN0YsSUFBSSxDQUFDdUYsT0FBTztRQUN6QkksTUFBTSxFQUFFO09BQ1QsQ0FBQztJQUNKLENBQUM7SUFBQTtJQUFBO01BQUFwSixjQUFBLEdBQUFLLENBQUE7SUFBQTtFQUNIO0VBRVF3RCxtQkFBbUJBLENBQUNKLElBQVM7SUFBQTtJQUFBekQsY0FBQSxHQUFBTSxDQUFBO0lBQUFOLGNBQUEsR0FBQU8sQ0FBQTtJQUNuQytCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDBCQUEwQixDQUFDa0IsSUFBSSxDQUFDdUYsT0FBTyxHQUFHLElBQUksR0FBRyxJQUFJLEVBQUVRLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBRWxGLE1BQU1DLFFBQVE7SUFBQTtJQUFBLENBQUF6SixjQUFBLEdBQUFPLENBQUEsU0FBR2tELElBQUksQ0FBQ3VGLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSTtJQUFBO0lBQUFoSixjQUFBLEdBQUFPLENBQUE7SUFDM0MsSUFBSWtKLFFBQVEsR0FBRyxJQUFJLENBQUNySixNQUFNLENBQUNZLGVBQWUsQ0FBQ0UsV0FBVyxFQUFFO01BQUE7TUFBQWxCLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDdEQsSUFBSSxDQUFDMkksYUFBYSxDQUFDLG1CQUFtQixFQUFFLFFBQVEsRUFBRTtRQUNoRFEsWUFBWSxFQUFFRCxRQUFRO1FBQ3RCTCxNQUFNLEVBQUUsSUFBSSxDQUFDaEosTUFBTSxDQUFDWSxlQUFlLENBQUNFO09BQ3JDLENBQUM7SUFDSixDQUFDO0lBQUE7SUFBQTtNQUFBbEIsY0FBQSxHQUFBSyxDQUFBO0lBQUE7RUFDSDtFQUVRMEQsc0JBQXNCQSxDQUFDRCxLQUFVO0lBQUE7SUFBQTlELGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDdkMrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyx5QkFBeUJ1QixLQUFLLENBQUM2RixJQUFJLEtBQUs3RixLQUFLLENBQUM4RixRQUFRLEdBQUcsQ0FBQztJQUV0RSxNQUFNQyxnQkFBZ0I7SUFBQTtJQUFBLENBQUE3SixjQUFBLEdBQUFPLENBQUEsU0FBcUI7TUFDekN1SixFQUFFO01BQUU7TUFBQSxDQUFBOUosY0FBQSxHQUFBSyxDQUFBLFdBQUF5RCxLQUFLLENBQUNnRyxFQUFFO01BQUE7TUFBQSxDQUFBOUosY0FBQSxHQUFBSyxDQUFBLFdBQUksU0FBUytCLElBQUksQ0FBQ2lFLEdBQUcsRUFBRSxFQUFFO01BQ3JDL0IsT0FBTztNQUFFO01BQUEsQ0FBQXRFLGNBQUEsR0FBQUssQ0FBQSxXQUFBeUQsS0FBSyxDQUFDUSxPQUFPO01BQUE7TUFBQSxDQUFBdEUsY0FBQSxHQUFBSyxDQUFBLFdBQUksUUFBUTtNQUNsQ3FFLFNBQVMsRUFBRSxJQUFJdEMsSUFBSSxFQUFFO01BQ3JCd0gsUUFBUTtNQUFFO01BQUEsQ0FBQTVKLGNBQUEsR0FBQUssQ0FBQSxXQUFBeUQsS0FBSyxDQUFDOEYsUUFBUTtNQUFBO01BQUEsQ0FBQTVKLGNBQUEsR0FBQUssQ0FBQSxXQUFJLFFBQVE7TUFDcENzSixJQUFJLEVBQUUsYUFBYTtNQUNuQkksT0FBTztNQUFFO01BQUEsQ0FBQS9KLGNBQUEsR0FBQUssQ0FBQSxXQUFBeUQsS0FBSyxDQUFDaUcsT0FBTztNQUFBO01BQUEsQ0FBQS9KLGNBQUEsR0FBQUssQ0FBQSxXQUFJeUQsS0FBSyxDQUFDNkYsSUFBSTtNQUNwQ0ssT0FBTztNQUFFO01BQUEsQ0FBQWhLLGNBQUEsR0FBQUssQ0FBQSxXQUFBeUQsS0FBSyxDQUFDTCxJQUFJO01BQUE7TUFBQSxDQUFBekQsY0FBQSxHQUFBSyxDQUFBLFdBQUksRUFBRTtNQUN6QjRHLFlBQVksRUFBRTtLQUNmO0lBQUE7SUFBQWpILGNBQUEsR0FBQU8sQ0FBQTtJQUVELElBQUksQ0FBQ3lCLFlBQVksQ0FBQ3dELEdBQUcsQ0FBQ3FFLGdCQUFnQixDQUFDQyxFQUFFLEVBQUVELGdCQUFnQixDQUFDO0VBQzlEO0VBRVE1Rix3QkFBd0JBLENBQUNELFVBQWU7SUFBQTtJQUFBaEUsY0FBQSxHQUFBTSxDQUFBO0lBQUFOLGNBQUEsR0FBQU8sQ0FBQTtJQUM5QytCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDJCQUEyQnlCLFVBQVUsQ0FBQ2lHLFNBQVMsRUFBRSxDQUFDO0lBQUE7SUFBQWpLLGNBQUEsR0FBQU8sQ0FBQTtJQUU5RCxJQUFJLENBQUMySSxhQUFhLENBQUMscUJBQXFCLEVBQUUsTUFBTSxFQUFFO01BQ2hEZSxTQUFTLEVBQUVqRyxVQUFVLENBQUNpRyxTQUFTO01BQy9CTCxRQUFRLEVBQUU1RixVQUFVLENBQUM0RixRQUFRO01BQzdCTSxXQUFXLEVBQUVsRyxVQUFVLENBQUNtRztLQUN6QixDQUFDO0VBQ0o7RUFFUWpHLHdCQUF3QkEsQ0FBQ0YsVUFBZTtJQUFBO0lBQUFoRSxjQUFBLEdBQUFNLENBQUE7SUFBQU4sY0FBQSxHQUFBTyxDQUFBO0lBQzlDK0IsT0FBTyxDQUFDQyxHQUFHLENBQUMsMEJBQTBCeUIsVUFBVSxDQUFDaUcsU0FBUyxFQUFFLENBQUM7SUFFN0Q7SUFBQTtJQUFBakssY0FBQSxHQUFBTyxDQUFBO0lBQ0EsS0FBSyxNQUFNLENBQUN5RyxPQUFPLEVBQUVsRCxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUM5QixZQUFZLEVBQUU7TUFBQTtNQUFBaEMsY0FBQSxHQUFBTyxDQUFBO01BQ2hELElBQUl1RCxLQUFLLENBQUNrRyxPQUFPLENBQUNDLFNBQVMsS0FBS2pHLFVBQVUsQ0FBQ2lHLFNBQVMsRUFBRTtRQUFBO1FBQUFqSyxjQUFBLEdBQUFLLENBQUE7UUFBQUwsY0FBQSxHQUFBTyxDQUFBO1FBQ3BELElBQUksQ0FBQzJHLFlBQVksQ0FBQ0YsT0FBTyxDQUFDO01BQzVCLENBQUM7TUFBQTtNQUFBO1FBQUFoSCxjQUFBLEdBQUFLLENBQUE7TUFBQTtJQUNIO0VBQ0Y7RUFFUStELHlCQUF5QkEsQ0FBQ0QsWUFBaUI7SUFBQTtJQUFBbkUsY0FBQSxHQUFBTSxDQUFBO0lBQUFOLGNBQUEsR0FBQU8sQ0FBQTtJQUNqRCtCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDRCQUE0QjRCLFlBQVksQ0FBQ2lHLGFBQWEsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7RUFDbEY7RUFFUXRFLDBCQUEwQkEsQ0FBQ3RCLFFBQW1DO0lBQUE7SUFBQXpFLGNBQUEsR0FBQU0sQ0FBQTtJQUNwRSxNQUFNO01BQUVVO0lBQWUsQ0FBRTtJQUFBO0lBQUEsQ0FBQWhCLGNBQUEsR0FBQU8sQ0FBQSxTQUFHLElBQUksQ0FBQ0gsTUFBTTtJQUV2QztJQUFBO0lBQUFKLGNBQUEsR0FBQU8sQ0FBQTtJQUNBLElBQUlrRSxRQUFRLENBQUN4RCxhQUFhLEdBQUdELGVBQWUsQ0FBQ0MsYUFBYSxFQUFFO01BQUE7TUFBQWpCLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDMUQsSUFBSSxDQUFDMkksYUFBYSxDQUFDLHlCQUF5QixFQUFFLFFBQVEsRUFBRTtRQUN0RDVFLE9BQU8sRUFBRUcsUUFBUSxDQUFDSCxPQUFPO1FBQ3pCckQsYUFBYSxFQUFFd0QsUUFBUSxDQUFDeEQsYUFBYTtRQUNyQ3FKLFNBQVMsRUFBRXRKLGVBQWUsQ0FBQ0M7T0FDNUIsQ0FBQztJQUNKLENBQUM7SUFBQTtJQUFBO01BQUFqQixjQUFBLEdBQUFLLENBQUE7SUFBQTtJQUVEO0lBQ0EsTUFBTW9KLFFBQVE7SUFBQTtJQUFBLENBQUF6SixjQUFBLEdBQUFPLENBQUEsU0FBR2tFLFFBQVEsQ0FBQ3ZELFdBQVcsR0FBRyxJQUFJLEdBQUcsSUFBSTtJQUFBO0lBQUFsQixjQUFBLEdBQUFPLENBQUE7SUFDbkQsSUFBSWtKLFFBQVEsR0FBR3pJLGVBQWUsQ0FBQ0UsV0FBVyxFQUFFO01BQUE7TUFBQWxCLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDMUMsSUFBSSxDQUFDMkksYUFBYSxDQUFDLDJCQUEyQixFQUFFLFFBQVEsRUFBRTtRQUN4RDVFLE9BQU8sRUFBRUcsUUFBUSxDQUFDSCxPQUFPO1FBQ3pCcEQsV0FBVyxFQUFFdUksUUFBUTtRQUNyQmEsU0FBUyxFQUFFdEosZUFBZSxDQUFDRTtPQUM1QixDQUFDO0lBQ0osQ0FBQztJQUFBO0lBQUE7TUFBQWxCLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBRUQ7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBQ0EsSUFBSWtFLFFBQVEsQ0FBQ3RELFFBQVEsR0FBR0gsZUFBZSxDQUFDRyxRQUFRLEVBQUU7TUFBQTtNQUFBbkIsY0FBQSxHQUFBSyxDQUFBO01BQUFMLGNBQUEsR0FBQU8sQ0FBQTtNQUNoRCxJQUFJLENBQUMySSxhQUFhLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxFQUFFO1FBQ3JENUUsT0FBTyxFQUFFRyxRQUFRLENBQUNILE9BQU87UUFDekJuRCxRQUFRLEVBQUVzRCxRQUFRLENBQUN0RCxRQUFRO1FBQzNCbUosU0FBUyxFQUFFdEosZUFBZSxDQUFDRztPQUM1QixDQUFDO0lBQ0osQ0FBQztJQUFBO0lBQUE7TUFBQW5CLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBRUQ7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBQ0E7SUFBSTtJQUFBLENBQUFQLGNBQUEsR0FBQUssQ0FBQSxXQUFBb0UsUUFBUSxDQUFDckQsUUFBUSxHQUFHSixlQUFlLENBQUNJLFFBQVE7SUFBQTtJQUFBLENBQUFwQixjQUFBLEdBQUFLLENBQUEsV0FBSW9FLFFBQVEsQ0FBQ3JELFFBQVEsR0FBRyxDQUFDLEdBQUU7TUFBQTtNQUFBcEIsY0FBQSxHQUFBSyxDQUFBO01BQUFMLGNBQUEsR0FBQU8sQ0FBQTtNQUN6RSxJQUFJLENBQUMySSxhQUFhLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxFQUFFO1FBQ3JENUUsT0FBTyxFQUFFRyxRQUFRLENBQUNILE9BQU87UUFDekJsRCxRQUFRLEVBQUVxRCxRQUFRLENBQUNyRCxRQUFRO1FBQzNCa0osU0FBUyxFQUFFdEosZUFBZSxDQUFDSTtPQUM1QixDQUFDO0lBQ0osQ0FBQztJQUFBO0lBQUE7TUFBQXBCLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0VBQ0g7RUFFUTZJLGFBQWFBLENBQUNTLElBQVksRUFBRUMsUUFBc0MsRUFBRUksT0FBWTtJQUFBO0lBQUFoSyxjQUFBLEdBQUFNLENBQUE7SUFDdEYsTUFBTXdELEtBQUs7SUFBQTtJQUFBLENBQUE5RCxjQUFBLEdBQUFPLENBQUEsU0FBcUI7TUFDOUJ1SixFQUFFLEVBQUUsU0FBUzFILElBQUksQ0FBQ2lFLEdBQUcsRUFBRSxJQUFJa0UsSUFBSSxDQUFDQyxNQUFNLEVBQUUsQ0FBQ0MsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO01BQ3BFcEcsT0FBTztNQUFFO01BQUEsQ0FBQXRFLGNBQUEsR0FBQUssQ0FBQSxXQUFBMkosT0FBTyxDQUFDMUYsT0FBTztNQUFBO01BQUEsQ0FBQXRFLGNBQUEsR0FBQUssQ0FBQSxXQUFJLFFBQVE7TUFDcENxRSxTQUFTLEVBQUUsSUFBSXRDLElBQUksRUFBRTtNQUNyQndILFFBQVE7TUFDUkQsSUFBSSxFQUFFQSxJQUFXO01BQ2pCSSxPQUFPLEVBQUUsSUFBSSxDQUFDWSxvQkFBb0IsQ0FBQ2hCLElBQUksRUFBRUssT0FBTyxDQUFDO01BQ2pEQSxPQUFPO01BQ1AvQyxZQUFZLEVBQUU7S0FDZjtJQUFBO0lBQUFqSCxjQUFBLEdBQUFPLENBQUE7SUFFRCxJQUFJLENBQUN5QixZQUFZLENBQUN3RCxHQUFHLENBQUMxQixLQUFLLENBQUNnRyxFQUFFLEVBQUVoRyxLQUFLLENBQUM7SUFBQTtJQUFBOUQsY0FBQSxHQUFBTyxDQUFBO0lBQ3RDK0IsT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCdUIsS0FBSyxDQUFDaUcsT0FBTyxFQUFFLENBQUM7RUFDckQ7RUFFUVksb0JBQW9CQSxDQUFDaEIsSUFBWSxFQUFFSyxPQUFZO0lBQUE7SUFBQWhLLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDckQsUUFBUW9KLElBQUk7TUFDVixLQUFLLHlCQUF5QjtRQUFBO1FBQUEzSixjQUFBLEdBQUFLLENBQUE7UUFBQUwsY0FBQSxHQUFBTyxDQUFBO1FBQzVCLE9BQU8sU0FBU3lKLE9BQU8sQ0FBQzFGLE9BQU8sb0JBQW9CMEYsT0FBTyxDQUFDL0ksYUFBYSwyQkFBMkIrSSxPQUFPLENBQUNNLFNBQVMsS0FBSztNQUMzSCxLQUFLLDJCQUEyQjtRQUFBO1FBQUF0SyxjQUFBLEdBQUFLLENBQUE7UUFBQUwsY0FBQSxHQUFBTyxDQUFBO1FBQzlCLE9BQU8sU0FBU3lKLE9BQU8sQ0FBQzFGLE9BQU8sa0JBQWtCMEYsT0FBTyxDQUFDOUksV0FBVyxDQUFDc0ksT0FBTyxDQUFDLENBQUMsQ0FBQywyQkFBMkJRLE9BQU8sQ0FBQ00sU0FBUyxLQUFLO01BQ2xJLEtBQUssd0JBQXdCO1FBQUE7UUFBQXRLLGNBQUEsR0FBQUssQ0FBQTtRQUFBTCxjQUFBLEdBQUFPLENBQUE7UUFDM0IsT0FBTyxTQUFTeUosT0FBTyxDQUFDMUYsT0FBTyxlQUFlMEYsT0FBTyxDQUFDN0ksUUFBUSwwQkFBMEI2SSxPQUFPLENBQUNNLFNBQVMsSUFBSTtNQUMvRyxLQUFLLDBCQUEwQjtRQUFBO1FBQUF0SyxjQUFBLEdBQUFLLENBQUE7UUFBQUwsY0FBQSxHQUFBTyxDQUFBO1FBQzdCLE9BQU8sU0FBU3lKLE9BQU8sQ0FBQzFGLE9BQU8sY0FBYyxDQUFDMEYsT0FBTyxDQUFDNUksUUFBUSxHQUFHLEdBQUcsRUFBRW9JLE9BQU8sQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUNRLE9BQU8sQ0FBQ00sU0FBUyxHQUFHLEdBQUcsRUFBRWQsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJO01BQ2pKLEtBQUsscUJBQXFCO1FBQUE7UUFBQXhKLGNBQUEsR0FBQUssQ0FBQTtRQUFBTCxjQUFBLEdBQUFPLENBQUE7UUFDeEIsT0FBTyxzQ0FBc0N5SixPQUFPLENBQUNDLFNBQVMsRUFBRTtNQUNsRTtRQUFBO1FBQUFqSyxjQUFBLEdBQUFLLENBQUE7UUFBQUwsY0FBQSxHQUFBTyxDQUFBO1FBQ0UsT0FBTywrQkFBK0JvSixJQUFJLEVBQUU7SUFDaEQ7RUFDRjtFQUVRbkQsa0JBQWtCQSxDQUFBO0lBQUE7SUFBQXhHLGNBQUEsR0FBQU0sQ0FBQTtJQUN4QixNQUFNK0YsR0FBRztJQUFBO0lBQUEsQ0FBQXJHLGNBQUEsR0FBQU8sQ0FBQSxTQUFHLElBQUk2QixJQUFJLEVBQUU7SUFDdEIsTUFBTUYsTUFBTTtJQUFBO0lBQUEsQ0FBQWxDLGNBQUEsR0FBQU8sQ0FBQSxTQUFHOEYsR0FBRyxDQUFDdUUsT0FBTyxFQUFFO0lBQUk7SUFBQSxDQUFBNUssY0FBQSxHQUFBSyxDQUFBLGVBQUksQ0FBQ21CLFlBQVksQ0FBQ1csU0FBUyxFQUFFeUksT0FBTyxFQUFFO0lBQUE7SUFBQSxDQUFBNUssY0FBQSxHQUFBSyxDQUFBLFdBQUlnRyxHQUFHLENBQUN1RSxPQUFPLEVBQUUsRUFBQztJQUV4RjtJQUNBLE1BQU1sSixlQUFlO0lBQUE7SUFBQSxDQUFBMUIsY0FBQSxHQUFBTyxDQUFBLFNBQUc7TUFDdEJvQixNQUFNLEVBQUUsSUFBSSxDQUFDa0oscUJBQXFCLEVBQUU7TUFDcENqSixNQUFNLEVBQUUsSUFBSSxDQUFDa0oscUJBQXFCLEVBQUU7TUFDcENqSixXQUFXLEVBQUUsSUFBSSxDQUFDa0osMEJBQTBCLEVBQUU7TUFDOUNqSixPQUFPLEVBQUUsSUFBSSxDQUFDa0osc0JBQXNCLEVBQUU7TUFDdENqSixJQUFJLEVBQUUsSUFBSSxDQUFDa0osbUJBQW1CO0tBQy9CO0lBRUQ7SUFDQSxNQUFNQyxPQUFPO0lBQUE7SUFBQSxDQUFBbEwsY0FBQSxHQUFBTyxDQUFBLFNBQUc7TUFBRW9CLE1BQU0sRUFBRSxHQUFHO01BQUVDLE1BQU0sRUFBRSxHQUFHO01BQUVDLFdBQVcsRUFBRSxHQUFHO01BQUVDLE9BQU8sRUFBRSxHQUFHO01BQUVDLElBQUksRUFBRTtJQUFHLENBQUU7SUFDdkYsTUFBTU4sWUFBWTtJQUFBO0lBQUEsQ0FBQXpCLGNBQUEsR0FBQU8sQ0FBQSxTQUFHQyxNQUFNLENBQUMySyxPQUFPLENBQUN6SixlQUFlLENBQUMsQ0FBQzBKLE1BQU0sQ0FDekQsQ0FBQ0MsS0FBSyxFQUFFLENBQUNwQixTQUFTLEVBQUVxQixLQUFLLENBQUMsS0FBSztNQUFBO01BQUF0TCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQUEsT0FBQThLLEtBQUssR0FBR0MsS0FBSyxHQUFHSixPQUFPLENBQUNqQixTQUFpQyxDQUFDO0lBQUQsQ0FBQyxFQUN6RixDQUFDLENBQ0Y7SUFBQTtJQUFBakssY0FBQSxHQUFBTyxDQUFBO0lBRUQsSUFBSSxDQUFDaUIsWUFBWSxHQUFHO01BQ2xCQyxZQUFZLEVBQUU4SSxJQUFJLENBQUNnQixLQUFLLENBQUM5SixZQUFZLENBQUM7TUFDdENDLGVBQWU7TUFDZk0sWUFBWSxFQUFFNEUsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDN0UsWUFBWSxDQUFDOEUsTUFBTSxFQUFFLENBQUM7TUFDcEQ3RSxlQUFlLEVBQUUsSUFBSSxDQUFDZ0csdUJBQXVCLEVBQUU7TUFDL0MvRixNQUFNLEVBQUVBLE1BQU07TUFDZEMsU0FBUyxFQUFFa0U7S0FDWjtFQUNIO0VBRVF3RSxxQkFBcUJBLENBQUE7SUFBQTtJQUFBN0ssY0FBQSxHQUFBTSxDQUFBO0lBQzNCO0lBQ0EsSUFBSStLLEtBQUs7SUFBQTtJQUFBLENBQUFyTCxjQUFBLEdBQUFPLENBQUEsU0FBRyxHQUFHO0lBRWY7SUFDQSxNQUFNaUwsWUFBWTtJQUFBO0lBQUEsQ0FBQXhMLGNBQUEsR0FBQU8sQ0FBQSxTQUFHcUcsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDN0UsWUFBWSxDQUFDOEUsTUFBTSxFQUFFLENBQUMsQ0FBQ1IsTUFBTSxDQUNoRXhDLEtBQUssSUFBSTtNQUFBO01BQUE5RCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQUEsa0NBQUFQLGNBQUEsR0FBQUssQ0FBQSxXQUFBeUQsS0FBSyxDQUFDNkYsSUFBSSxLQUFLLGFBQWE7TUFBQTtNQUFBLENBQUEzSixjQUFBLEdBQUFLLENBQUEsV0FBSXlELEtBQUssQ0FBQzZGLElBQUksS0FBSyxVQUFVO0lBQVYsQ0FBVSxDQUNuRTtJQUFBO0lBQUEzSixjQUFBLEdBQUFPLENBQUE7SUFDRDhLLEtBQUssSUFBSUcsWUFBWSxDQUFDM0YsTUFBTSxHQUFHLEVBQUU7SUFBQTtJQUFBN0YsY0FBQSxHQUFBTyxDQUFBO0lBRWpDLE9BQU9nSyxJQUFJLENBQUNrQixHQUFHLENBQUMsQ0FBQyxFQUFFSixLQUFLLENBQUM7RUFDM0I7RUFFUVAscUJBQXFCQSxDQUFBO0lBQUE7SUFBQTlLLGNBQUEsR0FBQU0sQ0FBQTtJQUMzQixJQUFJK0ssS0FBSztJQUFBO0lBQUEsQ0FBQXJMLGNBQUEsR0FBQU8sQ0FBQSxTQUFHLEdBQUc7SUFDZixNQUFNbUwsWUFBWTtJQUFBO0lBQUEsQ0FBQTFMLGNBQUEsR0FBQU8sQ0FBQSxTQUFHcUcsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDN0UsWUFBWSxDQUFDOEUsTUFBTSxFQUFFLENBQUMsQ0FBQ1IsTUFBTSxDQUNoRXhDLEtBQUssSUFBSTtNQUFBO01BQUE5RCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQUEsT0FBQXVELEtBQUssQ0FBQzZGLElBQUksS0FBSyxRQUFRO0lBQVIsQ0FBUSxDQUNqQztJQUFBO0lBQUEzSixjQUFBLEdBQUFPLENBQUE7SUFDRDhLLEtBQUssSUFBSUssWUFBWSxDQUFDN0YsTUFBTSxHQUFHLEVBQUU7SUFBQTtJQUFBN0YsY0FBQSxHQUFBTyxDQUFBO0lBQ2pDLE9BQU9nSyxJQUFJLENBQUNrQixHQUFHLENBQUMsQ0FBQyxFQUFFSixLQUFLLENBQUM7RUFDM0I7RUFFUU4sMEJBQTBCQSxDQUFBO0lBQUE7SUFBQS9LLGNBQUEsR0FBQU0sQ0FBQTtJQUNoQyxJQUFJK0ssS0FBSztJQUFBO0lBQUEsQ0FBQXJMLGNBQUEsR0FBQU8sQ0FBQSxTQUFHLEdBQUc7SUFDZixNQUFNb0wsaUJBQWlCO0lBQUE7SUFBQSxDQUFBM0wsY0FBQSxHQUFBTyxDQUFBLFNBQUdxRyxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM3RSxZQUFZLENBQUM4RSxNQUFNLEVBQUUsQ0FBQyxDQUFDUixNQUFNLENBQ3JFeEMsS0FBSyxJQUFJO01BQUE7TUFBQTlELGNBQUEsR0FBQU0sQ0FBQTtNQUFBTixjQUFBLEdBQUFPLENBQUE7TUFBQSxrQ0FBQVAsY0FBQSxHQUFBSyxDQUFBLFdBQUF5RCxLQUFLLENBQUM2RixJQUFJLEtBQUssYUFBYTtNQUFBO01BQUEsQ0FBQTNKLGNBQUEsR0FBQUssQ0FBQSxXQUFJeUQsS0FBSyxDQUFDNkYsSUFBSSxLQUFLLFNBQVM7SUFBVCxDQUFTLENBQ2xFO0lBQUE7SUFBQTNKLGNBQUEsR0FBQU8sQ0FBQTtJQUNEOEssS0FBSyxJQUFJTSxpQkFBaUIsQ0FBQzlGLE1BQU0sR0FBRyxFQUFFO0lBQUE7SUFBQTdGLGNBQUEsR0FBQU8sQ0FBQTtJQUN0QyxPQUFPZ0ssSUFBSSxDQUFDa0IsR0FBRyxDQUFDLENBQUMsRUFBRUosS0FBSyxDQUFDO0VBQzNCO0VBRVFMLHNCQUFzQkEsQ0FBQTtJQUFBO0lBQUFoTCxjQUFBLEdBQUFNLENBQUE7SUFBQU4sY0FBQSxHQUFBTyxDQUFBO0lBQzVCO0lBQ0EsT0FBTyxFQUFFLEdBQUdnSyxJQUFJLENBQUNDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBQztFQUNoQztFQUVRUyxtQkFBbUJBLENBQUE7SUFBQTtJQUFBakwsY0FBQSxHQUFBTSxDQUFBO0lBQUFOLGNBQUEsR0FBQU8sQ0FBQTtJQUN6QjtJQUNBLE9BQU8sSUFBSSxDQUFDbUMsa0JBQWtCO0lBQUE7SUFBQSxDQUFBMUMsY0FBQSxHQUFBSyxDQUFBLFdBQUcsR0FBRztJQUFBO0lBQUEsQ0FBQUwsY0FBQSxHQUFBSyxDQUFBLFdBQUcsRUFBRTtFQUMzQztFQUVRNEgsdUJBQXVCQSxDQUFBO0lBQUE7SUFBQWpJLGNBQUEsR0FBQU0sQ0FBQTtJQUM3QixNQUFNMkIsZUFBZTtJQUFBO0lBQUEsQ0FBQWpDLGNBQUEsR0FBQU8sQ0FBQSxTQUFhLEVBQUU7SUFBQTtJQUFBUCxjQUFBLEdBQUFPLENBQUE7SUFFcEMsSUFBSSxJQUFJLENBQUNpQixZQUFZLENBQUNDLFlBQVksR0FBRyxFQUFFLEVBQUU7TUFBQTtNQUFBekIsY0FBQSxHQUFBSyxDQUFBO01BQUFMLGNBQUEsR0FBQU8sQ0FBQTtNQUN2QzBCLGVBQWUsQ0FBQzBELElBQUksQ0FBQyx1RUFBdUUsQ0FBQztJQUMvRixDQUFDO0lBQUE7SUFBQTtNQUFBM0YsY0FBQSxHQUFBSyxDQUFBO0lBQUE7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBRUQsSUFBSSxJQUFJLENBQUN5QixZQUFZLENBQUM0SixJQUFJLEdBQUcsQ0FBQyxFQUFFO01BQUE7TUFBQTVMLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFDOUIwQixlQUFlLENBQUMwRCxJQUFJLENBQUMsMEVBQTBFLENBQUM7SUFDbEcsQ0FBQztJQUFBO0lBQUE7TUFBQTNGLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBRUQsTUFBTXFMLFlBQVk7SUFBQTtJQUFBLENBQUExTCxjQUFBLEdBQUFPLENBQUEsU0FBR3FHLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQzdFLFlBQVksQ0FBQzhFLE1BQU0sRUFBRSxDQUFDLENBQUNSLE1BQU0sQ0FBQ3VGLENBQUMsSUFBSTtNQUFBO01BQUE3TCxjQUFBLEdBQUFNLENBQUE7TUFBQU4sY0FBQSxHQUFBTyxDQUFBO01BQUEsT0FBQXNMLENBQUMsQ0FBQ2xDLElBQUksS0FBSyxRQUFRO0lBQVIsQ0FBUSxDQUFDO0lBQUE7SUFBQTNKLGNBQUEsR0FBQU8sQ0FBQTtJQUM1RixJQUFJbUwsWUFBWSxDQUFDN0YsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUFBO01BQUE3RixjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQzNCMEIsZUFBZSxDQUFDMEQsSUFBSSxDQUFDLHlFQUF5RSxDQUFDO0lBQ2pHLENBQUM7SUFBQTtJQUFBO01BQUEzRixjQUFBLEdBQUFLLENBQUE7SUFBQTtJQUFBTCxjQUFBLEdBQUFPLENBQUE7SUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDSCxNQUFNLENBQUNTLHdCQUF3QixFQUFFO01BQUE7TUFBQWIsY0FBQSxHQUFBSyxDQUFBO01BQUFMLGNBQUEsR0FBQU8sQ0FBQTtNQUN6QzBCLGVBQWUsQ0FBQzBELElBQUksQ0FBQyw2REFBNkQsQ0FBQztJQUNyRixDQUFDO0lBQUE7SUFBQTtNQUFBM0YsY0FBQSxHQUFBSyxDQUFBO0lBQUE7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBRUQsT0FBTzBCLGVBQWU7RUFDeEI7RUFFUTBHLHVCQUF1QkEsQ0FBQ3hDLE9BQW9DO0lBQUE7SUFBQW5HLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDbEUsSUFBSTRGLE9BQU8sQ0FBQ04sTUFBTSxLQUFLLENBQUMsRUFBRTtNQUFBO01BQUE3RixjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQUEsT0FBTyxJQUFJO0lBQUE7SUFBQTtJQUFBO01BQUFQLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBRXJDLE1BQU15TCxHQUFHO0lBQUE7SUFBQSxDQUFBOUwsY0FBQSxHQUFBTyxDQUFBLFNBQUc0RixPQUFPLENBQUNpRixNQUFNLENBQUMsQ0FBQ1csR0FBRyxFQUFFdEgsUUFBUSxLQUFNO01BQUE7TUFBQXpFLGNBQUEsR0FBQU0sQ0FBQTtNQUFBTixjQUFBLEdBQUFPLENBQUE7TUFBQTtRQUM3Q1UsYUFBYSxFQUFFOEssR0FBRyxDQUFDOUssYUFBYSxHQUFHd0QsUUFBUSxDQUFDeEQsYUFBYTtRQUN6REMsV0FBVyxFQUFFNkssR0FBRyxDQUFDN0ssV0FBVyxHQUFHdUQsUUFBUSxDQUFDdkQsV0FBVztRQUNuREMsUUFBUSxFQUFFNEssR0FBRyxDQUFDNUssUUFBUSxHQUFHc0QsUUFBUSxDQUFDdEQsUUFBUTtRQUMxQ0MsUUFBUSxFQUFFMkssR0FBRyxDQUFDM0ssUUFBUSxHQUFHcUQsUUFBUSxDQUFDckQ7T0FDbkM7S0FBQyxFQUFFO01BQUVILGFBQWEsRUFBRSxDQUFDO01BQUVDLFdBQVcsRUFBRSxDQUFDO01BQUVDLFFBQVEsRUFBRSxDQUFDO01BQUVDLFFBQVEsRUFBRTtJQUFDLENBQUUsQ0FBQztJQUVuRSxNQUFNNkgsS0FBSztJQUFBO0lBQUEsQ0FBQWpKLGNBQUEsR0FBQU8sQ0FBQSxTQUFHNEYsT0FBTyxDQUFDTixNQUFNO0lBQUE7SUFBQTdGLGNBQUEsR0FBQU8sQ0FBQTtJQUM1QixPQUFPO01BQ0xVLGFBQWEsRUFBRTZLLEdBQUcsQ0FBQzdLLGFBQWEsR0FBR2dJLEtBQUs7TUFDeEMvSCxXQUFXLEVBQUU0SyxHQUFHLENBQUM1SyxXQUFXLEdBQUcrSCxLQUFLO01BQ3BDOUgsUUFBUSxFQUFFMkssR0FBRyxDQUFDM0ssUUFBUSxHQUFHOEgsS0FBSztNQUM5QjdILFFBQVEsRUFBRTBLLEdBQUcsQ0FBQzFLLFFBQVEsR0FBRzZIO0tBQzFCO0VBQ0g7RUFFUUosYUFBYUEsQ0FBQzFDLE9BQW9DO0lBQUE7SUFBQW5HLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFDeEQsSUFBSTRGLE9BQU8sQ0FBQ04sTUFBTSxHQUFHLENBQUMsRUFBRTtNQUFBO01BQUE3RixjQUFBLEdBQUFLLENBQUE7TUFBQUwsY0FBQSxHQUFBTyxDQUFBO01BQUEsT0FBTyxJQUFJO0lBQUE7SUFBQTtJQUFBO01BQUFQLGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBRW5DLE1BQU0yTCxNQUFNO0lBQUE7SUFBQSxDQUFBaE0sY0FBQSxHQUFBTyxDQUFBLFNBQUc0RixPQUFPLENBQUM4RixLQUFLLENBQUMsQ0FBQzFCLElBQUksQ0FBQzJCLEdBQUcsQ0FBQyxFQUFFLEVBQUUvRixPQUFPLENBQUNOLE1BQU0sQ0FBQyxDQUFDO0lBQzNELE1BQU1zRyxLQUFLO0lBQUE7SUFBQSxDQUFBbk0sY0FBQSxHQUFBTyxDQUFBLFNBQUc0RixPQUFPLENBQUM4RixLQUFLLENBQUMsQ0FBQyxFQUFFMUIsSUFBSSxDQUFDMkIsR0FBRyxDQUFDLEVBQUUsRUFBRS9GLE9BQU8sQ0FBQ04sTUFBTSxDQUFDLENBQUM7SUFFNUQsTUFBTXVHLFNBQVM7SUFBQTtJQUFBLENBQUFwTSxjQUFBLEdBQUFPLENBQUEsU0FBRyxJQUFJLENBQUNvSSx1QkFBdUIsQ0FBQ3FELE1BQU0sQ0FBQztJQUN0RCxNQUFNSyxRQUFRO0lBQUE7SUFBQSxDQUFBck0sY0FBQSxHQUFBTyxDQUFBLFNBQUcsSUFBSSxDQUFDb0ksdUJBQXVCLENBQUN3RCxLQUFLLENBQUM7SUFBQTtJQUFBbk0sY0FBQSxHQUFBTyxDQUFBO0lBRXBEO0lBQUk7SUFBQSxDQUFBUCxjQUFBLEdBQUFLLENBQUEsWUFBQytMLFNBQVM7SUFBQTtJQUFBLENBQUFwTSxjQUFBLEdBQUFLLENBQUEsV0FBSSxDQUFDZ00sUUFBUSxHQUFFO01BQUE7TUFBQXJNLGNBQUEsR0FBQUssQ0FBQTtNQUFBTCxjQUFBLEdBQUFPLENBQUE7TUFBQSxPQUFPLElBQUk7SUFBQTtJQUFBO0lBQUE7TUFBQVAsY0FBQSxHQUFBSyxDQUFBO0lBQUE7SUFBQUwsY0FBQSxHQUFBTyxDQUFBO0lBRXhDLE9BQU87TUFDTCtMLGtCQUFrQixFQUFFRixTQUFTLENBQUNuTCxhQUFhLEdBQUdvTCxRQUFRLENBQUNwTCxhQUFhO01BQ3BFc0wsZ0JBQWdCLEVBQUVILFNBQVMsQ0FBQ2xMLFdBQVcsR0FBR21MLFFBQVEsQ0FBQ25MLFdBQVc7TUFDOURzTCxhQUFhLEVBQUVKLFNBQVMsQ0FBQ2pMLFFBQVEsR0FBR2tMLFFBQVEsQ0FBQ2xMLFFBQVE7TUFDckRzTCxhQUFhLEVBQUVMLFNBQVMsQ0FBQ2hMLFFBQVEsR0FBR2lMLFFBQVEsQ0FBQ2pMO0tBQzlDO0VBQ0g7O0FBR0YsZUFBZWxCLHNCQUFzQiIsImlnbm9yZUxpc3QiOltdfQ==