{"version":3,"names":["cov_1b28uecsrs","actualCoverage","PerformanceIntegration","constructor","config","b","f","s","Object","defineProperty","Map","enableRealTimeMonitoring","enableBottleneckDetection","enablePredictiveAnalysis","enableAutoOptimization","dashboardEnabled","alertThresholds","inferenceTime","memoryUsage","cpuUsage","accuracy","errorRate","updateInterval","historyRetention","systemHealth","overallScore","componentScores","neural","memory","performance","network","wasm","activeAlerts","recommendations","uptime","lastCheck","Date","initialize","console","log","PerformanceMonitoringSuite","require","performanceMonitor","targetSpawnTime","targetMemoryPerAgent","targetInferenceTime","targetWasmOperationTime","enableMLPrediction","enableDashboardUI","alertSeverityThreshold","dashboardPort","dashboardUpdateInterval","setupEventHandlers","startMonitoring","isInitialized","error","on","data","handleAgentSpawnMetrics","handleInferenceMetrics","handleWasmMetrics","handleMemoryMetrics","alert","handlePerformanceAlert","bottleneck","handleBottleneckDetected","handleBottleneckResolved","optimization","handleOptimizationApplied","recordAgentMetrics","agentId","metrics","warn","snapshot","timestamp","trainingTime","preprocessingTime","postprocessingTime","gpuUsage","energyConsumption","precision","recall","f1Score","networkLatency","bandwidthUsage","packetsLost","metricsHistory","has","set","agentHistory","get","push","maxHistorySize","length","shift","checkPerformanceThresholds","emit","getAgentHistory","timeRange","history","cutoffTime","now","filter","getSystemHealth","updateSystemHealth","getDashboardData","getPerformanceReport","getActiveAlerts","Array","from","values","acknowledgeAlert","alertId","acknowledged","resolveAlert","resolvedAt","delete","generatePerformanceReport","agentIds","agents","keys","report","summary","totalAgents","averageInferenceTime","averageMemoryUsage","averageCpuUsage","averageAccuracy","agentDetails","generateRecommendations","totalInferenceTime","totalMemoryUsage","totalCpuUsage","totalAccuracy","validAgents","latestSnapshot","agentReport","latestMetrics","averageMetrics","calculateAverageMetrics","trendAnalysis","analyzeTrends","cleanup","clear","average","count","generateAlert","averageSpawnTime","target","slowInferencesRatio","averageTime","slowRatio","toFixed","memoryMB","averageUsage","type","severity","performanceAlert","id","message","details","component","suggestions","optimizationSuggestions","optimizations","join","threshold","Math","random","toString","substr","generateAlertMessage","getTime","calculateNeuralHealth","calculateMemoryHealth","calculatePerformanceHealth","calculateNetworkHealth","calculateWasmHealth","weights","entries","reduce","score","value","round","neuralAlerts","max","memoryAlerts","performanceAlerts","size","a","sum","acc","recent","slice","min","older","recentAvg","olderAvg","inferenceTimeTrend","memoryUsageTrend","cpuUsageTrend","accuracyTrend"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/PerformanceIntegration.ts"],"sourcesContent":["/**\n * Performance Integration Service\n * \n * Integrates SASI with synaptic-mesh performance monitoring suite.\n * Provides real-time performance tracking for neural agents and\n * connects to the existing performance dashboard infrastructure.\n */\n\nimport { NeuralPerformanceSnapshot, PerformanceAlert, SystemHealthMetrics } from '../types/neural'\nimport { Agent } from '../types/agent'\n\nexport interface PerformanceIntegrationConfig {\n  enableRealTimeMonitoring: boolean\n  enableBottleneckDetection: boolean\n  enablePredictiveAnalysis: boolean\n  enableAutoOptimization: boolean\n  dashboardEnabled: boolean\n  alertThresholds: {\n    inferenceTime: number // ms\n    memoryUsage: number // MB\n    cpuUsage: number // %\n    accuracy: number // minimum acceptable\n    errorRate: number // maximum acceptable\n  }\n  updateInterval: number // ms\n  historyRetention: number // hours\n}\n\nexport class PerformanceIntegration {\n  private performanceMonitor: any = null\n  private isInitialized = false\n  private config: PerformanceIntegrationConfig\n  private metricsHistory: Map<string, NeuralPerformanceSnapshot[]> = new Map()\n  private activeAlerts: Map<string, PerformanceAlert> = new Map()\n  private systemHealth: SystemHealthMetrics\n  \n  constructor(config: Partial<PerformanceIntegrationConfig> = {}) {\n    this.config = {\n      enableRealTimeMonitoring: true,\n      enableBottleneckDetection: true,\n      enablePredictiveAnalysis: false, // Requires ML model\n      enableAutoOptimization: false, // Safety first\n      dashboardEnabled: true,\n      alertThresholds: {\n        inferenceTime: 100, // 100ms\n        memoryUsage: 50, // 50MB\n        cpuUsage: 80, // 80%\n        accuracy: 0.85, // 85%\n        errorRate: 0.05 // 5%\n      },\n      updateInterval: 1000, // 1 second\n      historyRetention: 24, // 24 hours\n      ...config\n    }\n    \n    this.systemHealth = {\n      overallScore: 100,\n      componentScores: {\n        neural: 100,\n        memory: 100,\n        performance: 100,\n        network: 100,\n        wasm: 100\n      },\n      activeAlerts: [],\n      recommendations: [],\n      uptime: 0,\n      lastCheck: new Date()\n    }\n  }\n  \n  /**\n   * Initialize Performance Integration\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('📊 Initializing Performance Integration...')\n      \n      // Import and initialize performance monitoring suite\n      const PerformanceMonitoringSuite = require('../../../synaptic-mesh/src/neural/performance-monitoring-suite.js')\n      \n      this.performanceMonitor = new PerformanceMonitoringSuite({\n        // Neural-specific targets\n        targetSpawnTime: 100, // ms\n        targetMemoryPerAgent: this.config.alertThresholds.memoryUsage * 1024 * 1024, // Convert MB to bytes\n        targetInferenceTime: this.config.alertThresholds.inferenceTime, // ms\n        targetWasmOperationTime: 10, // ms\n        \n        // Feature flags\n        enableRealTimeMonitoring: this.config.enableRealTimeMonitoring,\n        enableBottleneckDetection: this.config.enableBottleneckDetection,\n        enableMLPrediction: this.config.enablePredictiveAnalysis,\n        enableDashboardUI: this.config.dashboardEnabled,\n        enableAutoOptimization: this.config.enableAutoOptimization,\n        \n        // Alert configuration\n        alertSeverityThreshold: 'medium',\n        \n        // Dashboard settings\n        dashboardPort: 8080,\n        dashboardUpdateInterval: this.config.updateInterval\n      })\n      \n      // Set up event handlers\n      this.setupEventHandlers()\n      \n      // Start monitoring if enabled\n      if (this.config.enableRealTimeMonitoring) {\n        await this.performanceMonitor.startMonitoring()\n      }\n      \n      this.isInitialized = true\n      console.log('✅ Performance Integration initialized')\n      \n    } catch (error) {\n      console.error('❌ Failed to initialize Performance Integration:', error)\n      throw error\n    }\n  }\n  \n  /**\n   * Setup Event Handlers\n   */\n  private setupEventHandlers(): void {\n    if (!this.performanceMonitor) return\n    \n    // Agent performance events\n    this.performanceMonitor.on('agentSpawnAnalysis', (data: any) => {\n      this.handleAgentSpawnMetrics(data)\n    })\n    \n    this.performanceMonitor.on('neuralInferenceAnalysis', (data: any) => {\n      this.handleInferenceMetrics(data)\n    })\n    \n    this.performanceMonitor.on('wasmOperationAnalysis', (data: any) => {\n      this.handleWasmMetrics(data)\n    })\n    \n    this.performanceMonitor.on('memoryAnalysis', (data: any) => {\n      this.handleMemoryMetrics(data)\n    })\n    \n    // Alert events\n    this.performanceMonitor.on('alert', (alert: any) => {\n      this.handlePerformanceAlert(alert)\n    })\n    \n    // Bottleneck events\n    this.performanceMonitor.on('bottleneckDetected', (bottleneck: any) => {\n      this.handleBottleneckDetected(bottleneck)\n    })\n    \n    this.performanceMonitor.on('bottleneckResolved', (bottleneck: any) => {\n      this.handleBottleneckResolved(bottleneck)\n    })\n    \n    // Optimization events\n    this.performanceMonitor.on('optimizationsApplied', (optimization: any) => {\n      this.handleOptimizationApplied(optimization)\n    })\n  }\n  \n  /**\n   * Record Agent Performance Metrics\n   */\n  recordAgentMetrics(agentId: string, metrics: Partial<NeuralPerformanceSnapshot>): void {\n    if (!this.isInitialized) {\n      console.warn('⚠️ Performance integration not initialized')\n      return\n    }\n    \n    const snapshot: NeuralPerformanceSnapshot = {\n      timestamp: new Date(),\n      agentId,\n      inferenceTime: metrics.inferenceTime || 0,\n      trainingTime: metrics.trainingTime,\n      preprocessingTime: metrics.preprocessingTime || 0,\n      postprocessingTime: metrics.postprocessingTime || 0,\n      memoryUsage: metrics.memoryUsage || 0,\n      cpuUsage: metrics.cpuUsage || 0,\n      gpuUsage: metrics.gpuUsage,\n      energyConsumption: metrics.energyConsumption || 0,\n      accuracy: metrics.accuracy || 0,\n      precision: metrics.precision || 0,\n      recall: metrics.recall || 0,\n      f1Score: metrics.f1Score || 0,\n      networkLatency: metrics.networkLatency || 0,\n      bandwidthUsage: metrics.bandwidthUsage || 0,\n      packetsLost: metrics.packetsLost || 0\n    }\n    \n    // Store in history\n    if (!this.metricsHistory.has(agentId)) {\n      this.metricsHistory.set(agentId, [])\n    }\n    \n    const agentHistory = this.metricsHistory.get(agentId)!\n    agentHistory.push(snapshot)\n    \n    // Limit history size\n    const maxHistorySize = (this.config.historyRetention * 3600) / (this.config.updateInterval / 1000)\n    if (agentHistory.length > maxHistorySize) {\n      agentHistory.shift()\n    }\n    \n    // Check thresholds and generate alerts\n    this.checkPerformanceThresholds(snapshot)\n    \n    // Report to performance monitor\n    if (this.performanceMonitor) {\n      this.performanceMonitor.emit('agentMetricsRecorded', snapshot)\n    }\n  }\n  \n  /**\n   * Get Agent Performance History\n   */\n  getAgentHistory(agentId: string, timeRange?: number): NeuralPerformanceSnapshot[] {\n    const history = this.metricsHistory.get(agentId) || []\n    \n    if (!timeRange) return history\n    \n    const cutoffTime = new Date(Date.now() - timeRange)\n    return history.filter(snapshot => snapshot.timestamp >= cutoffTime)\n  }\n  \n  /**\n   * Get System Health Metrics\n   */\n  getSystemHealth(): SystemHealthMetrics {\n    this.updateSystemHealth()\n    return { ...this.systemHealth }\n  }\n  \n  /**\n   * Get Performance Dashboard Data\n   */\n  getDashboardData(): any {\n    if (!this.performanceMonitor) {\n      return null\n    }\n    \n    return this.performanceMonitor.getPerformanceReport()\n  }\n  \n  /**\n   * Get Active Alerts\n   */\n  getActiveAlerts(): PerformanceAlert[] {\n    return Array.from(this.activeAlerts.values())\n  }\n  \n  /**\n   * Acknowledge Alert\n   */\n  acknowledgeAlert(alertId: string): boolean {\n    const alert = this.activeAlerts.get(alertId)\n    if (alert) {\n      alert.acknowledged = true\n      return true\n    }\n    return false\n  }\n  \n  /**\n   * Resolve Alert\n   */\n  resolveAlert(alertId: string): boolean {\n    const alert = this.activeAlerts.get(alertId)\n    if (alert) {\n      alert.resolvedAt = new Date()\n      this.activeAlerts.delete(alertId)\n      return true\n    }\n    return false\n  }\n  \n  /**\n   * Generate Performance Report\n   */\n  generatePerformanceReport(agentIds?: string[]): any {\n    const agents = agentIds || Array.from(this.metricsHistory.keys())\n    const report = {\n      timestamp: new Date(),\n      summary: {\n        totalAgents: agents.length,\n        averageInferenceTime: 0,\n        averageMemoryUsage: 0,\n        averageCpuUsage: 0,\n        averageAccuracy: 0\n      },\n      agentDetails: {} as any,\n      systemHealth: this.getSystemHealth(),\n      activeAlerts: this.getActiveAlerts(),\n      recommendations: this.generateRecommendations()\n    }\n    \n    // Calculate aggregated metrics\n    let totalInferenceTime = 0\n    let totalMemoryUsage = 0\n    let totalCpuUsage = 0\n    let totalAccuracy = 0\n    let validAgents = 0\n    \n    for (const agentId of agents) {\n      const history = this.getAgentHistory(agentId, 3600000) // Last hour\n      if (history.length === 0) continue\n      \n      const latestSnapshot = history[history.length - 1]\n      const agentReport = {\n        agentId,\n        latestMetrics: latestSnapshot,\n        averageMetrics: this.calculateAverageMetrics(history),\n        trendAnalysis: this.analyzeTrends(history)\n      }\n      \n      report.agentDetails[agentId] = agentReport\n      \n      totalInferenceTime += latestSnapshot.inferenceTime\n      totalMemoryUsage += latestSnapshot.memoryUsage\n      totalCpuUsage += latestSnapshot.cpuUsage\n      totalAccuracy += latestSnapshot.accuracy\n      validAgents++\n    }\n    \n    // Calculate averages\n    if (validAgents > 0) {\n      report.summary.averageInferenceTime = totalInferenceTime / validAgents\n      report.summary.averageMemoryUsage = totalMemoryUsage / validAgents\n      report.summary.averageCpuUsage = totalCpuUsage / validAgents\n      report.summary.averageAccuracy = totalAccuracy / validAgents\n    }\n    \n    return report\n  }\n  \n  /**\n   * Cleanup Resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.performanceMonitor) {\n      try {\n        await this.performanceMonitor.cleanup()\n        console.log('✅ Performance monitor cleaned up')\n      } catch (error) {\n        console.error('❌ Failed to cleanup performance monitor:', error)\n      }\n    }\n    \n    this.metricsHistory.clear()\n    this.activeAlerts.clear()\n    this.isInitialized = false\n  }\n  \n  // ===== PRIVATE METHODS =====\n  \n  private handleAgentSpawnMetrics(data: any): void {\n    console.log(`📊 Agent spawn metrics: avg ${data.average}ms (${data.count} agents)`)\n    \n    if (data.average > this.config.alertThresholds.inferenceTime * 2) {\n      this.generateAlert('agent_spawn_slow', 'high', {\n        averageSpawnTime: data.average,\n        target: this.config.alertThresholds.inferenceTime * 2,\n        count: data.count\n      })\n    }\n  }\n  \n  private handleInferenceMetrics(data: any): void {\n    console.log(`📊 Inference metrics: avg ${data.average}ms`)\n    \n    if (data.slowInferencesRatio > 0.3) {\n      this.generateAlert('inference_performance_degraded', 'medium', {\n        averageTime: data.average,\n        slowRatio: data.slowInferencesRatio,\n        target: this.config.alertThresholds.inferenceTime\n      })\n    }\n  }\n  \n  private handleWasmMetrics(data: any): void {\n    console.log(`📊 WASM metrics: avg ${data.average}ms`)\n    \n    // Check for WASM performance issues\n    if (data.average > 20) { // WASM operations should be very fast\n      this.generateAlert('wasm_performance_issue', 'medium', {\n        averageTime: data.average,\n        target: 10\n      })\n    }\n  }\n  \n  private handleMemoryMetrics(data: any): void {\n    console.log(`📊 Memory metrics: avg ${(data.average / 1024 / 1024).toFixed(1)}MB`)\n    \n    const memoryMB = data.average / 1024 / 1024\n    if (memoryMB > this.config.alertThresholds.memoryUsage) {\n      this.generateAlert('memory_usage_high', 'medium', {\n        averageUsage: memoryMB,\n        target: this.config.alertThresholds.memoryUsage\n      })\n    }\n  }\n  \n  private handlePerformanceAlert(alert: any): void {\n    console.log(`🚨 Performance alert: ${alert.type} (${alert.severity})`)\n    \n    const performanceAlert: PerformanceAlert = {\n      id: alert.id || `alert_${Date.now()}`,\n      agentId: alert.agentId || 'system',\n      timestamp: new Date(),\n      severity: alert.severity || 'medium',\n      type: 'performance',\n      message: alert.message || alert.type,\n      details: alert.data || {},\n      acknowledged: false\n    }\n    \n    this.activeAlerts.set(performanceAlert.id, performanceAlert)\n  }\n  \n  private handleBottleneckDetected(bottleneck: any): void {\n    console.log(`🔍 Bottleneck detected: ${bottleneck.component}`)\n    \n    this.generateAlert('bottleneck_detected', 'high', {\n      component: bottleneck.component,\n      severity: bottleneck.severity,\n      suggestions: bottleneck.optimizationSuggestions\n    })\n  }\n  \n  private handleBottleneckResolved(bottleneck: any): void {\n    console.log(`✅ Bottleneck resolved: ${bottleneck.component}`)\n    \n    // Find and resolve related alerts\n    for (const [alertId, alert] of this.activeAlerts) {\n      if (alert.details.component === bottleneck.component) {\n        this.resolveAlert(alertId)\n      }\n    }\n  }\n  \n  private handleOptimizationApplied(optimization: any): void {\n    console.log(`🔧 Optimization applied: ${optimization.optimizations.join(', ')}`)\n  }\n  \n  private checkPerformanceThresholds(snapshot: NeuralPerformanceSnapshot): void {\n    const { alertThresholds } = this.config\n    \n    // Check inference time\n    if (snapshot.inferenceTime > alertThresholds.inferenceTime) {\n      this.generateAlert('inference_time_exceeded', 'medium', {\n        agentId: snapshot.agentId,\n        inferenceTime: snapshot.inferenceTime,\n        threshold: alertThresholds.inferenceTime\n      })\n    }\n    \n    // Check memory usage\n    const memoryMB = snapshot.memoryUsage / 1024 / 1024\n    if (memoryMB > alertThresholds.memoryUsage) {\n      this.generateAlert('memory_threshold_exceeded', 'medium', {\n        agentId: snapshot.agentId,\n        memoryUsage: memoryMB,\n        threshold: alertThresholds.memoryUsage\n      })\n    }\n    \n    // Check CPU usage\n    if (snapshot.cpuUsage > alertThresholds.cpuUsage) {\n      this.generateAlert('cpu_threshold_exceeded', 'medium', {\n        agentId: snapshot.agentId,\n        cpuUsage: snapshot.cpuUsage,\n        threshold: alertThresholds.cpuUsage\n      })\n    }\n    \n    // Check accuracy\n    if (snapshot.accuracy < alertThresholds.accuracy && snapshot.accuracy > 0) {\n      this.generateAlert('accuracy_below_threshold', 'high', {\n        agentId: snapshot.agentId,\n        accuracy: snapshot.accuracy,\n        threshold: alertThresholds.accuracy\n      })\n    }\n  }\n  \n  private generateAlert(type: string, severity: PerformanceAlert['severity'], details: any): void {\n    const alert: PerformanceAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      agentId: details.agentId || 'system',\n      timestamp: new Date(),\n      severity,\n      type: type as any,\n      message: this.generateAlertMessage(type, details),\n      details,\n      acknowledged: false\n    }\n    \n    this.activeAlerts.set(alert.id, alert)\n    console.log(`🚨 Generated alert: ${alert.message}`)\n  }\n  \n  private generateAlertMessage(type: string, details: any): string {\n    switch (type) {\n      case 'inference_time_exceeded':\n        return `Agent ${details.agentId} inference time (${details.inferenceTime}ms) exceeded threshold (${details.threshold}ms)`\n      case 'memory_threshold_exceeded':\n        return `Agent ${details.agentId} memory usage (${details.memoryUsage.toFixed(1)}MB) exceeded threshold (${details.threshold}MB)`\n      case 'cpu_threshold_exceeded':\n        return `Agent ${details.agentId} CPU usage (${details.cpuUsage}%) exceeded threshold (${details.threshold}%)`\n      case 'accuracy_below_threshold':\n        return `Agent ${details.agentId} accuracy (${(details.accuracy * 100).toFixed(1)}%) below threshold (${(details.threshold * 100).toFixed(1)}%)`\n      case 'bottleneck_detected':\n        return `Performance bottleneck detected in ${details.component}`\n      default:\n        return `Performance issue detected: ${type}`\n    }\n  }\n  \n  private updateSystemHealth(): void {\n    const now = new Date()\n    const uptime = now.getTime() - (this.systemHealth.lastCheck?.getTime() || now.getTime())\n    \n    // Calculate component scores based on recent metrics\n    const componentScores = {\n      neural: this.calculateNeuralHealth(),\n      memory: this.calculateMemoryHealth(),\n      performance: this.calculatePerformanceHealth(),\n      network: this.calculateNetworkHealth(),\n      wasm: this.calculateWasmHealth()\n    }\n    \n    // Calculate overall score\n    const weights = { neural: 0.3, memory: 0.2, performance: 0.3, network: 0.1, wasm: 0.1 }\n    const overallScore = Object.entries(componentScores).reduce(\n      (score, [component, value]) => score + value * weights[component as keyof typeof weights],\n      0\n    )\n    \n    this.systemHealth = {\n      overallScore: Math.round(overallScore),\n      componentScores,\n      activeAlerts: Array.from(this.activeAlerts.values()),\n      recommendations: this.generateRecommendations(),\n      uptime: uptime,\n      lastCheck: now\n    }\n  }\n  \n  private calculateNeuralHealth(): number {\n    // Base health score\n    let score = 100\n    \n    // Deduct for alerts\n    const neuralAlerts = Array.from(this.activeAlerts.values()).filter(\n      alert => alert.type === 'performance' || alert.type === 'accuracy'\n    )\n    score -= neuralAlerts.length * 10\n    \n    return Math.max(0, score)\n  }\n  \n  private calculateMemoryHealth(): number {\n    let score = 100\n    const memoryAlerts = Array.from(this.activeAlerts.values()).filter(\n      alert => alert.type === 'memory'\n    )\n    score -= memoryAlerts.length * 15\n    return Math.max(0, score)\n  }\n  \n  private calculatePerformanceHealth(): number {\n    let score = 100\n    const performanceAlerts = Array.from(this.activeAlerts.values()).filter(\n      alert => alert.type === 'performance' || alert.type === 'latency'\n    )\n    score -= performanceAlerts.length * 12\n    return Math.max(0, score)\n  }\n  \n  private calculateNetworkHealth(): number {\n    // Simplified network health calculation\n    return 95 + Math.random() * 5 // 95-100%\n  }\n  \n  private calculateWasmHealth(): number {\n    // Check if WASM is working properly\n    return this.performanceMonitor ? 100 : 50\n  }\n  \n  private generateRecommendations(): string[] {\n    const recommendations: string[] = []\n    \n    if (this.systemHealth.overallScore < 80) {\n      recommendations.push('System performance is degraded. Consider investigating active alerts.')\n    }\n    \n    if (this.activeAlerts.size > 5) {\n      recommendations.push('High number of active alerts. Consider addressing critical issues first.')\n    }\n    \n    const memoryAlerts = Array.from(this.activeAlerts.values()).filter(a => a.type === 'memory')\n    if (memoryAlerts.length > 0) {\n      recommendations.push('Memory usage is high. Consider optimizing neural network architectures.')\n    }\n    \n    if (!this.config.enablePredictiveAnalysis) {\n      recommendations.push('Enable predictive analysis for better performance insights.')\n    }\n    \n    return recommendations\n  }\n  \n  private calculateAverageMetrics(history: NeuralPerformanceSnapshot[]): any {\n    if (history.length === 0) return null\n    \n    const sum = history.reduce((acc, snapshot) => ({\n      inferenceTime: acc.inferenceTime + snapshot.inferenceTime,\n      memoryUsage: acc.memoryUsage + snapshot.memoryUsage,\n      cpuUsage: acc.cpuUsage + snapshot.cpuUsage,\n      accuracy: acc.accuracy + snapshot.accuracy\n    }), { inferenceTime: 0, memoryUsage: 0, cpuUsage: 0, accuracy: 0 })\n    \n    const count = history.length\n    return {\n      inferenceTime: sum.inferenceTime / count,\n      memoryUsage: sum.memoryUsage / count,\n      cpuUsage: sum.cpuUsage / count,\n      accuracy: sum.accuracy / count\n    }\n  }\n  \n  private analyzeTrends(history: NeuralPerformanceSnapshot[]): any {\n    if (history.length < 2) return null\n    \n    const recent = history.slice(-Math.min(10, history.length))\n    const older = history.slice(0, Math.min(10, history.length))\n    \n    const recentAvg = this.calculateAverageMetrics(recent)\n    const olderAvg = this.calculateAverageMetrics(older)\n    \n    if (!recentAvg || !olderAvg) return null\n    \n    return {\n      inferenceTimeTrend: recentAvg.inferenceTime - olderAvg.inferenceTime,\n      memoryUsageTrend: recentAvg.memoryUsage - olderAvg.memoryUsage,\n      cpuUsageTrend: recentAvg.cpuUsage - olderAvg.cpuUsage,\n      accuracyTrend: recentAvg.accuracy - olderAvg.accuracy\n    }\n  }\n}\n\nexport default PerformanceIntegration"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}