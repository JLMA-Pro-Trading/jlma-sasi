{"version":3,"names":["cov_7sb6539dl","actualCoverage","useState","useEffect","useRef","useCallback","PerformanceOptimizer","usePerformanceMonitoring","initialConfig","b","f","metrics","setMetrics","s","wasmLoadTime","simdOperationTime","memoryUsage","neuralInferenceTime","agentSpawnTime","renderTime","networkLatency","consensusTime","fps","frameTime","config","setConfig","enableSIMD","enableWASMCaching","enableMemoryPooling","enableGPUAcceleration","maxMemoryPerAgent","targetFrameTime","batchSize","monitoringInterval","alerts","setAlerts","isOptimizing","setIsOptimizing","isMonitoring","setIsMonitoring","optimizer","setOptimizer","monitoringIntervalRef","frameTimeRef","lastFrameTimeRef","initOptimizer","opt","initialize","error","console","addAlert","cleanup","newOptimizer","then","type","message","alert","timestamp","Date","now","resolved","prev","measureFrameTime","performance","current","push","length","shift","avgFrameTime","reduce","sum","time","toFixed","requestAnimationFrame","collectMetrics","memoryInfo","memory","usedJSHeapSize","report","getPerformanceReport","setInterval","clearInterval","startMonitoring","startPerformanceMonitoring","log","stopMonitoring","runOptimization","runBenchmarks","results","updateConfig","newConfig","clearAlerts"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/hooks/usePerformanceMonitoring.ts"],"sourcesContent":["/**\n * React hook for performance monitoring and optimization\n */\n\nimport { useState, useEffect, useRef, useCallback } from 'react'\nimport PerformanceOptimizer from '../performance/performanceOptimizer'\n\ninterface PerformanceMetrics {\n  wasmLoadTime: number\n  simdOperationTime: number\n  memoryUsage: number\n  neuralInferenceTime: number\n  agentSpawnTime: number\n  renderTime: number\n  networkLatency: number\n  consensusTime: number\n  fps: number\n  frameTime: number\n}\n\ninterface PerformanceConfig {\n  enableSIMD: boolean\n  enableWASMCaching: boolean\n  enableMemoryPooling: boolean\n  enableGPUAcceleration: boolean\n  maxMemoryPerAgent: number\n  targetFrameTime: number\n  batchSize: number\n  monitoringInterval: number\n}\n\ninterface PerformanceAlert {\n  type: 'warning' | 'error' | 'info'\n  message: string\n  timestamp: number\n  resolved: boolean\n}\n\ninterface UsePerformanceMonitoringReturn {\n  metrics: PerformanceMetrics\n  config: PerformanceConfig\n  alerts: PerformanceAlert[]\n  isOptimizing: boolean\n  isMonitoring: boolean\n  optimizer: PerformanceOptimizer | null\n  startMonitoring: () => void\n  stopMonitoring: () => void\n  runOptimization: () => Promise<void>\n  runBenchmarks: () => Promise<any>\n  updateConfig: (newConfig: Partial<PerformanceConfig>) => void\n  clearAlerts: () => void\n  getPerformanceReport: () => any\n}\n\nexport function usePerformanceMonitoring(\n  initialConfig: Partial<PerformanceConfig> = {}\n): UsePerformanceMonitoringReturn {\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\n    wasmLoadTime: 0,\n    simdOperationTime: 0,\n    memoryUsage: 0,\n    neuralInferenceTime: 0,\n    agentSpawnTime: 0,\n    renderTime: 0,\n    networkLatency: 0,\n    consensusTime: 0,\n    fps: 0,\n    frameTime: 0\n  })\n\n  const [config, setConfig] = useState<PerformanceConfig>({\n    enableSIMD: true,\n    enableWASMCaching: true,\n    enableMemoryPooling: true,\n    enableGPUAcceleration: true,\n    maxMemoryPerAgent: 50 * 1024 * 1024, // 50MB\n    targetFrameTime: 16.67, // 60fps\n    batchSize: 32,\n    monitoringInterval: 1000, // 1 second\n    ...initialConfig\n  })\n\n  const [alerts, setAlerts] = useState<PerformanceAlert[]>([])\n  const [isOptimizing, setIsOptimizing] = useState(false)\n  const [isMonitoring, setIsMonitoring] = useState(false)\n  const [optimizer, setOptimizer] = useState<PerformanceOptimizer | null>(null)\n\n  const monitoringIntervalRef = useRef<NodeJS.Timeout>()\n  const frameTimeRef = useRef<number[]>([])\n  const lastFrameTimeRef = useRef<number>(0)\n\n  // Initialize optimizer\n  useEffect(() => {\n    const initOptimizer = async () => {\n      try {\n        const opt = new PerformanceOptimizer(config)\n        await opt.initialize()\n        setOptimizer(opt)\n      } catch (error) {\n        console.error('Failed to initialize performance optimizer:', error)\n        addAlert('error', 'Failed to initialize performance optimizer')\n      }\n    }\n\n    initOptimizer()\n\n    return () => {\n      if (optimizer) {\n        optimizer.cleanup()\n      }\n    }\n  }, [])\n\n  // Update optimizer config when config changes\n  useEffect(() => {\n    if (optimizer) {\n      // Reinitialize optimizer with new config\n      optimizer.cleanup()\n      const newOptimizer = new PerformanceOptimizer(config)\n      newOptimizer.initialize().then(() => {\n        setOptimizer(newOptimizer)\n      })\n    }\n  }, [config])\n\n  // Add alert helper\n  const addAlert = useCallback((type: 'warning' | 'error' | 'info', message: string) => {\n    const alert: PerformanceAlert = {\n      type,\n      message,\n      timestamp: Date.now(),\n      resolved: false\n    }\n    setAlerts(prev => [...prev, alert])\n  }, [])\n\n  // Monitor frame time\n  useEffect(() => {\n    const measureFrameTime = () => {\n      const now = performance.now()\n      if (lastFrameTimeRef.current) {\n        const frameTime = now - lastFrameTimeRef.current\n        frameTimeRef.current.push(frameTime)\n        \n        // Keep only last 60 frames\n        if (frameTimeRef.current.length > 60) {\n          frameTimeRef.current.shift()\n        }\n        \n        // Calculate FPS and average frame time\n        const avgFrameTime = frameTimeRef.current.reduce((sum, time) => sum + time, 0) / frameTimeRef.current.length\n        const fps = 1000 / avgFrameTime\n        \n        setMetrics(prev => ({\n          ...prev,\n          frameTime: avgFrameTime,\n          fps\n        }))\n        \n        // Check for performance issues\n        if (avgFrameTime > config.targetFrameTime * 1.5) {\n          addAlert('warning', `Frame time exceeding target: ${avgFrameTime.toFixed(2)}ms`)\n        }\n      }\n      lastFrameTimeRef.current = now\n      \n      if (isMonitoring) {\n        requestAnimationFrame(measureFrameTime)\n      }\n    }\n\n    if (isMonitoring) {\n      measureFrameTime()\n    }\n  }, [isMonitoring, config.targetFrameTime, addAlert])\n\n  // Performance monitoring loop\n  useEffect(() => {\n    if (!isMonitoring || !optimizer) return\n\n    const collectMetrics = () => {\n      try {\n        // Get memory usage\n        const memoryInfo = (performance as any).memory\n        if (memoryInfo) {\n          const memoryUsage = memoryInfo.usedJSHeapSize\n          setMetrics(prev => ({\n            ...prev,\n            memoryUsage\n          }))\n          \n          // Check memory usage\n          if (memoryUsage > config.maxMemoryPerAgent * 5) {\n            addAlert('warning', `High memory usage: ${(memoryUsage / 1024 / 1024).toFixed(1)}MB`)\n          }\n        }\n\n        // Get performance report from optimizer\n        const report = optimizer.getPerformanceReport()\n        if (report?.current) {\n          setMetrics(prev => ({\n            ...prev,\n            ...report.current\n          }))\n        }\n\n        // Check for various performance issues\n        if (report?.current?.wasmLoadTime > 1000) {\n          addAlert('warning', 'WASM modules loading slowly')\n        }\n        \n        if (report?.current?.neuralInferenceTime > 200) {\n          addAlert('warning', 'Neural inference time high')\n        }\n        \n        if (report?.current?.agentSpawnTime > 1000) {\n          addAlert('warning', 'Agent spawning slow')\n        }\n\n      } catch (error) {\n        console.error('Error collecting performance metrics:', error)\n        addAlert('error', 'Failed to collect performance metrics')\n      }\n    }\n\n    monitoringIntervalRef.current = setInterval(collectMetrics, config.monitoringInterval)\n\n    return () => {\n      if (monitoringIntervalRef.current) {\n        clearInterval(monitoringIntervalRef.current)\n      }\n    }\n  }, [isMonitoring, optimizer, config.monitoringInterval, config.maxMemoryPerAgent, addAlert])\n\n  // Start monitoring\n  const startMonitoring = useCallback(() => {\n    if (!optimizer) {\n      addAlert('error', 'Performance optimizer not initialized')\n      return\n    }\n    \n    setIsMonitoring(true)\n    optimizer.startPerformanceMonitoring()\n    addAlert('info', 'Performance monitoring started')\n    console.log('ðŸ“Š Performance monitoring started')\n  }, [optimizer, addAlert])\n\n  // Stop monitoring\n  const stopMonitoring = useCallback(() => {\n    setIsMonitoring(false)\n    if (monitoringIntervalRef.current) {\n      clearInterval(monitoringIntervalRef.current)\n    }\n    addAlert('info', 'Performance monitoring stopped')\n    console.log('ðŸ“Š Performance monitoring stopped')\n  }, [addAlert])\n\n  // Run optimization\n  const runOptimization = useCallback(async () => {\n    if (!optimizer) {\n      addAlert('error', 'Performance optimizer not initialized')\n      return\n    }\n\n    setIsOptimizing(true)\n    addAlert('info', 'Running performance optimization...')\n    \n    try {\n      await optimizer.initialize()\n      addAlert('info', 'Performance optimization completed')\n      console.log('ðŸš€ Performance optimization completed')\n    } catch (error) {\n      console.error('Performance optimization failed:', error)\n      addAlert('error', 'Performance optimization failed')\n    } finally {\n      setIsOptimizing(false)\n    }\n  }, [optimizer, addAlert])\n\n  // Run benchmarks\n  const runBenchmarks = useCallback(async () => {\n    if (!optimizer) {\n      addAlert('error', 'Performance optimizer not initialized')\n      return null\n    }\n\n    try {\n      addAlert('info', 'Running performance benchmarks...')\n      const results = await optimizer.runBenchmarks()\n      addAlert('info', 'Performance benchmarks completed')\n      return results\n    } catch (error) {\n      console.error('Benchmarks failed:', error)\n      addAlert('error', 'Performance benchmarks failed')\n      return null\n    }\n  }, [optimizer, addAlert])\n\n  // Update config\n  const updateConfig = useCallback((newConfig: Partial<PerformanceConfig>) => {\n    setConfig(prev => ({\n      ...prev,\n      ...newConfig\n    }))\n    addAlert('info', 'Performance configuration updated')\n  }, [addAlert])\n\n  // Clear alerts\n  const clearAlerts = useCallback(() => {\n    setAlerts([])\n  }, [])\n\n  // Get performance report\n  const getPerformanceReport = useCallback(() => {\n    if (!optimizer) return null\n    return optimizer.getPerformanceReport()\n  }, [optimizer])\n\n  return {\n    metrics,\n    config,\n    alerts,\n    isOptimizing,\n    isMonitoring,\n    optimizer,\n    startMonitoring,\n    stopMonitoring,\n    runOptimization,\n    runBenchmarks,\n    updateConfig,\n    clearAlerts,\n    getPerformanceReport\n  }\n}\n\nexport default usePerformanceMonitoring"],"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","ignoreList":[]}