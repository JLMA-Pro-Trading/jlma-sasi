{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/tdd/production-wasm-integration.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/tdd/production-wasm-integration.test.ts"],"sourcesContent":["/**\n * TDD Test Suite for Production WASM Integration\n * \n * This test suite follows Test-Driven Development methodology:\n * 1. RED: Write failing tests for WASM neural operations\n * 2. GREEN: Implement minimal WASM integration to pass tests\n * 3. REFACTOR: Optimize for SIMD performance and memory efficiency\n * \n * Performance Targets:\n * - SIMD matrix operations: 2-4x faster than JavaScript\n * - Memory usage: <50MB for WASM runtime\n * - Load time: <100ms for WASM module\n * - Integration overhead: <5ms per operation\n */\n\nimport { describe, test, expect, beforeEach, afterEach, beforeAll } from '@jest/globals'\nimport { ProductionWasmBridge } from '../../src/utils/ProductionWasmBridge'\nimport { PerformanceTestUtils } from '../utils/neural-test-utils'\n\ndescribe('Production WASM Integration - TDD Suite', () => {\n  let wasmBridge: ProductionWasmBridge\n  let memoryDetector: ReturnType<typeof PerformanceTestUtils.createMemoryLeakDetector>\n\n  beforeAll(async () => {\n    // Global setup for WASM environment\n    if (typeof global !== 'undefined') {\n      // Mock WebAssembly for Node.js testing\n      global.WebAssembly = {\n        Memory: jest.fn(() => ({\n          buffer: new ArrayBuffer(1024 * 1024)\n        })),\n        compile: jest.fn().mockResolvedValue({}),\n        instantiate: jest.fn().mockResolvedValue({ instance: {} }),\n        validate: jest.fn(() => true)\n      } as any\n\n      global.performance = {\n        now: jest.fn(() => Date.now())\n      } as any\n    }\n  })\n\n  beforeEach(() => {\n    wasmBridge = new ProductionWasmBridge()\n    memoryDetector = PerformanceTestUtils.createMemoryLeakDetector()\n  })\n\n  afterEach(() => {\n    // Check for memory leaks\n    const analysis = memoryDetector.analyze()\n    expect(analysis.leaked).toBe(false)\n    \n    if (wasmBridge) {\n      wasmBridge.cleanup()\n    }\n  })\n\n  // ============================================================================\n  // TDD CYCLE 1: BASIC INITIALIZATION AND SETUP\n  // ============================================================================\n\n  describe('TDD Cycle 1: WASM Module Initialization', () => {\n    test('RED: Should fail to initialize without WASM module', async () => {\n      // This test should initially fail, driving implementation\n      const result = await wasmBridge.initialize()\n      // In RED phase, this would fail. In GREEN phase, fallback makes it pass.\n      expect(typeof result).toBe('boolean')\n    })\n\n    test('GREEN: Should initialize successfully with fallback', async () => {\n      const result = await wasmBridge.initialize()\n      \n      expect(result).toBe(true)\n      expect(wasmBridge.isWasmInitialized()).toBe(true)\n    })\n\n    test('REFACTOR: Should meet load time performance target', async () => {\n      const startTime = performance.now()\n      await wasmBridge.initialize()\n      const loadTime = performance.now() - startTime\n      \n      // Performance target: <100ms load time\n      expect(loadTime).toBeLessThan(100)\n      \n      const metrics = wasmBridge.getPerformanceMetrics()\n      expect(metrics.loadTime).toBeLessThan(100)\n    })\n\n    test('Should provide accurate initialization status', async () => {\n      expect(wasmBridge.isWasmInitialized()).toBe(false)\n      \n      await wasmBridge.initialize()\n      \n      expect(wasmBridge.isWasmInitialized()).toBe(true)\n    })\n  })\n\n  // ============================================================================\n  // TDD CYCLE 2: NEURAL ACTIVATION OPERATIONS\n  // ============================================================================\n\n  describe('TDD Cycle 2: Neural Activation with SIMD', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize()\n    })\n\n    test('RED: Should fail with uninitalized module', () => {\n      const uninitializedBridge = new ProductionWasmBridge()\n      const inputs = new Float32Array([0.1, 0.5, 0.9])\n      \n      expect(() => uninitializedBridge.calculateNeuralActivation(inputs))\n        .toThrow('Production WASM module not initialized')\n    })\n\n    test('GREEN: Should calculate neural activation correctly', () => {\n      const inputs = new Float32Array([0.0, 0.5, 1.0, -0.5, -1.0])\n      \n      const outputs = wasmBridge.calculateNeuralActivation(inputs)\n      \n      expect(outputs).toBeInstanceOf(Float32Array)\n      expect(outputs.length).toBe(inputs.length)\n      \n      // Verify tanh-like behavior\n      for (let i = 0; i < outputs.length; i++) {\n        expect(outputs[i]).toBeGreaterThanOrEqual(-1)\n        expect(outputs[i]).toBeLessThanOrEqual(1)\n      }\n    })\n\n    test('REFACTOR: Should meet operation overhead target', () => {\n      const inputs = new Float32Array(1000)\n      inputs.fill(0.5)\n      \n      const startTime = performance.now()\n      wasmBridge.calculateNeuralActivation(inputs)\n      const operationTime = performance.now() - startTime\n      \n      // Performance target: <5ms operation overhead\n      expect(operationTime).toBeLessThan(5)\n    })\n\n    test('Should handle large input arrays efficiently', () => {\n      const largeInputs = new Float32Array(100000)\n      for (let i = 0; i < largeInputs.length; i++) {\n        largeInputs[i] = Math.random() * 2 - 1\n      }\n      \n      const startTime = performance.now()\n      const outputs = wasmBridge.calculateNeuralActivation(largeInputs)\n      const executionTime = performance.now() - startTime\n      \n      expect(outputs.length).toBe(largeInputs.length)\n      expect(executionTime).toBeLessThan(50) // Should process 100K elements in <50ms\n      \n      // Calculate throughput\n      const throughput = largeInputs.length / (executionTime / 1000)\n      expect(throughput).toBeGreaterThan(2000000) // >2M elements/sec\n    })\n\n    test('Should demonstrate SIMD acceleration benefits', () => {\n      const testSize = 10000\n      const inputs = new Float32Array(testSize)\n      inputs.fill(0.5)\n      \n      // WASM implementation\n      const wasmStart = performance.now()\n      wasmBridge.calculateNeuralActivation(inputs)\n      const wasmTime = performance.now() - wasmStart\n      \n      // JavaScript baseline\n      const jsStart = performance.now()\n      const jsResult = new Float32Array(testSize)\n      for (let i = 0; i < testSize; i++) {\n        jsResult[i] = Math.tanh(inputs[i] * 0.5)\n      }\n      const jsTime = performance.now() - jsStart\n      \n      // Performance target: WASM should be faster than JS\n      // (Note: In fallback mode, this might not always be true)\n      const speedup = jsTime / wasmTime\n      console.log(`WASM vs JS speedup: ${speedup.toFixed(2)}x`)\n      \n      // At minimum, WASM should not be significantly slower\n      expect(wasmTime).toBeLessThan(jsTime * 2)\n    })\n  })\n\n  // ============================================================================\n  // TDD CYCLE 3: CONNECTION OPTIMIZATION\n  // ============================================================================\n\n  describe('TDD Cycle 3: Connection Optimization', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize()\n    })\n\n    test('RED: Should fail with invalid input', () => {\n      expect(() => wasmBridge.optimizeConnections(null as any))\n        .toThrow()\n    })\n\n    test('GREEN: Should optimize connections within bounds', () => {\n      const connections = new Float32Array([0.1, 0.5, 0.8, 0.2, 0.9])\n      \n      const optimized = wasmBridge.optimizeConnections(connections)\n      \n      expect(optimized).toBeInstanceOf(Float32Array)\n      expect(optimized.length).toBe(connections.length)\n      \n      // All values should be in [0, 1] range\n      for (let i = 0; i < optimized.length; i++) {\n        expect(optimized[i]).toBeGreaterThanOrEqual(0)\n        expect(optimized[i]).toBeLessThanOrEqual(1)\n      }\n    })\n\n    test('REFACTOR: Should maintain optimization quality', () => {\n      const connections = new Float32Array(5000)\n      for (let i = 0; i < connections.length; i++) {\n        connections[i] = Math.random()\n      }\n      \n      const optimized = wasmBridge.optimizeConnections(connections)\n      \n      // Check that optimization introduces some variation\n      let differences = 0\n      for (let i = 0; i < connections.length; i++) {\n        if (Math.abs(optimized[i] - connections[i]) > 0.001) {\n          differences++\n        }\n      }\n      \n      // At least 50% of connections should be modified\n      expect(differences).toBeGreaterThan(connections.length * 0.5)\n    })\n\n    test('Should handle edge cases gracefully', () => {\n      // Empty array\n      const empty = wasmBridge.optimizeConnections(new Float32Array([]))\n      expect(empty.length).toBe(0)\n      \n      // Single element\n      const single = wasmBridge.optimizeConnections(new Float32Array([0.5]))\n      expect(single.length).toBe(1)\n      expect(single[0]).toBeGreaterThanOrEqual(0)\n      expect(single[0]).toBeLessThanOrEqual(1)\n      \n      // Boundary values\n      const boundaries = wasmBridge.optimizeConnections(new Float32Array([0.0, 1.0]))\n      expect(boundaries.length).toBe(2)\n      expect(boundaries[0]).toBeGreaterThanOrEqual(0)\n      expect(boundaries[1]).toBeLessThanOrEqual(1)\n    })\n  })\n\n  // ============================================================================\n  // TDD CYCLE 4: SPIKE TRAIN PROCESSING\n  // ============================================================================\n\n  describe('TDD Cycle 4: Spike Train Processing', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize()\n    })\n\n    test('RED: Should handle invalid window size', () => {\n      const spikes = new Float32Array([0.1, 0.8, 0.2])\n      \n      const result = wasmBridge.processSpikeTrainData(spikes, 0)\n      expect(typeof result).toBe('number')\n    })\n\n    test('GREEN: Should calculate spike rate correctly', () => {\n      const spikes = new Float32Array([0.0, 0.2, 0.8, 0.0, 1.0, 0.3, 0.0, 0.9])\n      const windowSize = 1000 // 1 second\n      \n      const spikeRate = wasmBridge.processSpikeTrainData(spikes, windowSize)\n      \n      expect(typeof spikeRate).toBe('number')\n      expect(spikeRate).toBeGreaterThanOrEqual(0)\n      \n      // Manual calculation: spikes above 0.1 threshold\n      const expectedSpikes = spikes.filter(s => s > 0.1).length\n      const expectedRate = expectedSpikes / (windowSize / 1000)\n      \n      // Allow some tolerance for floating point calculations\n      expect(Math.abs(spikeRate - expectedRate)).toBeLessThan(0.1)\n    })\n\n    test('REFACTOR: Should handle different window sizes efficiently', () => {\n      const spikes = new Float32Array(10000)\n      for (let i = 0; i < spikes.length; i++) {\n        spikes[i] = Math.random()\n      }\n      \n      const windowSizes = [100, 500, 1000, 2000, 5000]\n      \n      for (const windowSize of windowSizes) {\n        const startTime = performance.now()\n        const rate = wasmBridge.processSpikeTrainData(spikes, windowSize)\n        const processingTime = performance.now() - startTime\n        \n        expect(typeof rate).toBe('number')\n        expect(rate).toBeGreaterThanOrEqual(0)\n        expect(processingTime).toBeLessThan(10) // <10ms for any window size\n      }\n    })\n  })\n\n  // ============================================================================\n  // TDD CYCLE 5: MESH EFFICIENCY CALCULATION\n  // ============================================================================\n\n  describe('TDD Cycle 5: Mesh Efficiency Calculation', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize()\n    })\n\n    test('RED: Should handle mismatched array sizes', () => {\n      const neurons = new Float32Array([0.1, 0.2])\n      const synapses = new Float32Array([0.3, 0.4, 0.5, 0.6, 0.7])\n      \n      const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses)\n      \n      expect(typeof efficiency).toBe('number')\n      expect(efficiency).toBeGreaterThanOrEqual(0)\n    })\n\n    test('GREEN: Should calculate efficiency correctly', () => {\n      const neurons = new Float32Array([0.5, 0.7, 0.3, 0.8])\n      const synapses = new Float32Array([0.6, 0.4, 0.9, 0.2, 0.7, 0.5])\n      \n      const efficiency = wasmBridge.calculateMeshEfficiency(neurons, synapses)\n      \n      expect(typeof efficiency).toBe('number')\n      expect(efficiency).toBeGreaterThanOrEqual(0)\n      expect(efficiency).toBeLessThanOrEqual(1)\n      \n      // Manual calculation\n      const avgNeuronActivity = neurons.reduce((sum, val) => sum + val, 0) / neurons.length\n      const avgSynapseWeight = synapses.reduce((sum, val) => sum + val, 0) / synapses.length\n      const expectedEfficiency = avgNeuronActivity * avgSynapseWeight\n      \n      expect(Math.abs(efficiency - expectedEfficiency)).toBeLessThan(0.001)\n    })\n\n    test('REFACTOR: Should scale efficiently with large networks', () => {\n      const largeNeurons = new Float32Array(50000)\n      const largeSynapses = new Float32Array(100000)\n      \n      for (let i = 0; i < largeNeurons.length; i++) {\n        largeNeurons[i] = Math.random()\n      }\n      for (let i = 0; i < largeSynapses.length; i++) {\n        largeSynapses[i] = Math.random()\n      }\n      \n      const startTime = performance.now()\n      const efficiency = wasmBridge.calculateMeshEfficiency(largeNeurons, largeSynapses)\n      const calculationTime = performance.now() - startTime\n      \n      expect(typeof efficiency).toBe('number')\n      expect(calculationTime).toBeLessThan(20) // <20ms for large networks\n    })\n  })\n\n  // ============================================================================\n  // TDD CYCLE 6: PERFORMANCE OPTIMIZATION AND MONITORING\n  // ============================================================================\n\n  describe('TDD Cycle 6: Performance Optimization', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize()\n    })\n\n    test('RED: Should track performance metrics accurately', () => {\n      const initialMetrics = wasmBridge.getPerformanceMetrics()\n      expect(initialMetrics.operationsCount).toBe(0)\n      \n      // Perform operations\n      const inputs = new Float32Array([0.1, 0.2, 0.3])\n      wasmBridge.calculateNeuralActivation(inputs)\n      \n      const updatedMetrics = wasmBridge.getPerformanceMetrics()\n      expect(updatedMetrics.operationsCount).toBe(1)\n      expect(updatedMetrics.executionTime).toBeGreaterThan(0)\n    })\n\n    test('GREEN: Should meet memory usage targets', () => {\n      // Perform multiple operations to increase memory usage\n      for (let i = 0; i < 100; i++) {\n        const data = new Float32Array(1000)\n        data.fill(Math.random())\n        wasmBridge.calculateNeuralActivation(data)\n      }\n      \n      const memoryUsage = wasmBridge.getMemoryUsage()\n      \n      // Performance target: <50MB memory usage\n      expect(memoryUsage).toBeLessThan(50 * 1024 * 1024)\n    })\n\n    test('REFACTOR: Should maintain consistent performance', () => {\n      const iterations = 50\n      const testSize = 5000\n      const executionTimes: number[] = []\n      \n      for (let i = 0; i < iterations; i++) {\n        const inputs = new Float32Array(testSize)\n        inputs.fill(Math.random())\n        \n        const startTime = performance.now()\n        wasmBridge.calculateNeuralActivation(inputs)\n        const endTime = performance.now()\n        \n        executionTimes.push(endTime - startTime)\n      }\n      \n      const avgTime = executionTimes.reduce((sum, time) => sum + time, 0) / iterations\n      const variance = executionTimes.reduce((sum, time) => sum + Math.pow(time - avgTime, 2), 0) / iterations\n      const stdDev = Math.sqrt(variance)\n      const coefficientOfVariation = stdDev / avgTime\n      \n      // Performance should be consistent (<20% variation)\n      expect(coefficientOfVariation).toBeLessThan(0.2)\n      expect(avgTime).toBeLessThan(5) // Average should be <5ms\n    })\n\n    test('Should provide comprehensive benchmark results', async () => {\n      const benchmark = await wasmBridge.runBenchmark()\n      \n      expect(benchmark.operations_per_second).toBeGreaterThan(100000) // >100K ops/sec\n      expect(benchmark.memory_usage).toBeLessThan(50 * 1024 * 1024) // <50MB\n      expect(benchmark.average_operation_time).toBeLessThan(10) // <10ms average\n      expect(typeof benchmark.simd_acceleration).toBe('boolean')\n    })\n  })\n\n  // ============================================================================\n  // TDD CYCLE 7: ERROR HANDLING AND ROBUSTNESS\n  // ============================================================================\n\n  describe('TDD Cycle 7: Error Handling and Robustness', () => {\n    beforeEach(async () => {\n      await wasmBridge.initialize()\n    })\n\n    test('RED: Should handle null and undefined inputs', () => {\n      expect(() => wasmBridge.calculateNeuralActivation(null as any)).toThrow()\n      expect(() => wasmBridge.calculateNeuralActivation(undefined as any)).toThrow()\n    })\n\n    test('GREEN: Should handle extreme values gracefully', () => {\n      const extremeInputs = new Float32Array([\n        Number.MAX_VALUE,\n        Number.MIN_VALUE,\n        Infinity,\n        -Infinity,\n        NaN,\n        0\n      ])\n      \n      const outputs = wasmBridge.calculateNeuralActivation(extremeInputs)\n      \n      expect(outputs).toBeInstanceOf(Float32Array)\n      expect(outputs.length).toBe(extremeInputs.length)\n      \n      // Results should be finite (tanh handles extreme values)\n      for (let i = 0; i < outputs.length; i++) {\n        if (!isNaN(extremeInputs[i]) && isFinite(extremeInputs[i])) {\n          expect(isFinite(outputs[i])).toBe(true)\n        }\n      }\n    })\n\n    test('REFACTOR: Should provide health monitoring', () => {\n      const health = wasmBridge.healthCheck()\n      \n      expect(health.status).toMatch(/^(healthy|warning|error)$/)\n      expect(Array.isArray(health.issues)).toBe(true)\n      expect(health.metrics).toBeDefined()\n      \n      if (health.status === 'healthy') {\n        expect(health.issues.length).toBe(0)\n      }\n    })\n\n    test('Should handle cleanup properly', () => {\n      expect(wasmBridge.isWasmInitialized()).toBe(true)\n      \n      wasmBridge.cleanup()\n      \n      expect(wasmBridge.isWasmInitialized()).toBe(false)\n      expect(wasmBridge.getMemoryUsage()).toBe(0)\n      expect(wasmBridge.getOperationsCount()).toBe(0)\n    })\n\n    test('Should allow re-initialization after cleanup', async () => {\n      wasmBridge.cleanup()\n      expect(wasmBridge.isWasmInitialized()).toBe(false)\n      \n      const result = await wasmBridge.initialize()\n      expect(result).toBe(true)\n      expect(wasmBridge.isWasmInitialized()).toBe(true)\n    })\n  })\n\n  // ============================================================================\n  // TDD CYCLE 8: INTEGRATION WITH NEURAL AGENT MANAGER\n  // ============================================================================\n\n  describe('TDD Cycle 8: Neural Agent Manager Integration', () => {\n    test('RED: Should integrate with NeuralAgentManager interface', async () => {\n      await wasmBridge.initialize()\n      \n      // Test interface compatibility\n      expect(typeof wasmBridge.calculateNeuralActivation).toBe('function')\n      expect(typeof wasmBridge.optimizeConnections).toBe('function')\n      expect(typeof wasmBridge.getPerformanceMetrics).toBe('function')\n      expect(typeof wasmBridge.isWasmInitialized).toBe('function')\n      expect(typeof wasmBridge.isSIMDSupported).toBe('function')\n    })\n\n    test('GREEN: Should provide production-ready performance', async () => {\n      await wasmBridge.initialize()\n      \n      // Simulate neural agent workload\n      const neuralData = new Float32Array(2048) // Typical neural layer size\n      neuralData.fill(0.5)\n      \n      const startTime = performance.now()\n      \n      // Multiple operations as in real neural agent\n      for (let i = 0; i < 10; i++) {\n        wasmBridge.calculateNeuralActivation(neuralData)\n        wasmBridge.optimizeConnections(neuralData.slice(0, 1024))\n      }\n      \n      const totalTime = performance.now() - startTime\n      const avgOperationTime = totalTime / 20 // 20 operations total\n      \n      expect(avgOperationTime).toBeLessThan(5) // <5ms per operation\n    })\n\n    test('REFACTOR: Should scale with multiple concurrent operations', async () => {\n      await wasmBridge.initialize()\n      \n      const concurrentOps = 50\n      const promises: Promise<any>[] = []\n      \n      for (let i = 0; i < concurrentOps; i++) {\n        const data = new Float32Array(1000)\n        data.fill(Math.random())\n        \n        promises.push(\n          Promise.resolve(wasmBridge.calculateNeuralActivation(data))\n        )\n      }\n      \n      const startTime = performance.now()\n      await Promise.all(promises)\n      const totalTime = performance.now() - startTime\n      \n      expect(totalTime).toBeLessThan(100) // All operations in <100ms\n      \n      const metrics = wasmBridge.getPerformanceMetrics()\n      expect(metrics.operationsCount).toBe(concurrentOps)\n    })\n  })\n\n  // ============================================================================\n  // FINAL VALIDATION: COMPLETE INTEGRATION TEST\n  // ============================================================================\n\n  describe('Final Integration Validation', () => {\n    test('Complete WASM Performance Layer Integration', async () => {\n      // Initialize production WASM bridge\n      const result = await wasmBridge.initialize()\n      expect(result).toBe(true)\n      \n      // Validate all performance targets\n      const health = wasmBridge.healthCheck()\n      console.log('🏁 Final integration health check:', health)\n      \n      // Run comprehensive benchmark\n      const benchmark = await wasmBridge.runBenchmark()\n      console.log('📊 Final performance benchmark:', benchmark)\n      \n      // Validate all TDD requirements\n      expect(wasmBridge.isWasmInitialized()).toBe(true)\n      expect(benchmark.operations_per_second).toBeGreaterThan(100000)\n      expect(benchmark.memory_usage).toBeLessThan(50 * 1024 * 1024)\n      expect(benchmark.average_operation_time).toBeLessThan(10)\n      \n      // Clean up\n      wasmBridge.cleanup()\n      \n      console.log('✅ TDD WASM Performance Layer Integration COMPLETED')\n    })\n  })\n})"],"version":3}