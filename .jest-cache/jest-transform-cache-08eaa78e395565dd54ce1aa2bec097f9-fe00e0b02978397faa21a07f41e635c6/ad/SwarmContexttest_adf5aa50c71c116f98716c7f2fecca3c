9186f2cc36e49f19ee869b2454a682ac
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock the neural services
jest.mock('../../../src/services/NeuralAgentManager', () => ({
    NeuralAgentManager: jest.fn().mockImplementation(() => ({
        initialize: jest.fn().mockResolvedValue(true),
        spawnAgent: jest.fn().mockResolvedValue('agent-123'),
        getActiveAgents: jest.fn().mockReturnValue([]),
        getPerformanceMetrics: jest.fn().mockReturnValue({
            totalAgentsSpawned: 0,
            averageSpawnTime: 0,
            averageInferenceTime: 0,
            memoryUsage: 0,
            activeLearningTasks: 0,
            systemHealthScore: 100
        }),
        terminateAgent: jest.fn().mockResolvedValue(undefined),
        runInference: jest.fn().mockResolvedValue([0.5, 0.3, 0.8]),
        trainAgent: jest.fn().mockResolvedValue({
            sessionId: 'session-123',
            agentId: 'agent-123',
            finalAccuracy: 0.85,
            epochs: 10
        }),
        shareKnowledge: jest.fn().mockResolvedValue(undefined),
        cleanup: jest.fn().mockResolvedValue(undefined),
        on: jest.fn(),
        off: jest.fn(),
        emit: jest.fn()
    }))
}));
jest.mock('../../../src/services/NeuralMeshService', () => ({
    NeuralMeshService: jest.fn().mockImplementation(() => ({
        initialize: jest.fn().mockResolvedValue(true),
        addNode: jest.fn().mockResolvedValue('node-123'),
        createConnection: jest.fn().mockResolvedValue(undefined),
        propagateSignal: jest.fn().mockResolvedValue({ output: 0.7 }),
        getPerformanceMetrics: jest.fn().mockReturnValue({
            propagationTime: 15,
            learningRate: 0.001,
            networkEfficiency: 0.85,
            memoryUsage: 1024,
            nodeUtilization: 0.75
        }),
        shutdown: jest.fn().mockResolvedValue(undefined),
        on: jest.fn(),
        off: jest.fn(),
        emit: jest.fn()
    }))
}));
/**
 * Comprehensive Unit Tests for SwarmContext
 * Target: 90%+ coverage for context provider and hooks
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
const SwarmContext_1 = require("../../../src/contexts/SwarmContext");
describe('SwarmContext - Comprehensive Tests', () => {
    let mockConfig;
    beforeEach(() => {
        jest.clearAllMocks();
        mockConfig = {
            maxAgents: 10,
            autoSpawn: true,
            performance: {
                enableMonitoring: true,
                targetSpawnTime: 75,
                targetInferenceTime: 100
            },
            mesh: {
                topology: 'hierarchical',
                learningRate: 0.001,
                maxNodes: 100
            }
        };
    });
    describe('SwarmProvider', () => {
        test('should provide default swarm state', () => {
            const TestComponent = () => {
                const context = react_1.default.useContext(SwarmContext_1.SwarmContext);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("span", { "data-testid": "agents-count", children: context.agents.length }), (0, jsx_runtime_1.jsx)("span", { "data-testid": "is-loading", children: context.isLoading.toString() }), (0, jsx_runtime_1.jsx)("span", { "data-testid": "error", children: context.error || 'no-error' })] }));
            };
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }));
            expect(document.querySelector('[data-testid="agents-count"]')).toHaveTextContent('0');
            expect(document.querySelector('[data-testid="is-loading"]')).toHaveTextContent('false');
            expect(document.querySelector('[data-testid="error"]')).toHaveTextContent('no-error');
        });
        test('should initialize services on mount', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }))
            });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
        });
        test('should handle initialization errors', async () => {
            // Mock initialization failure
            const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');
            NeuralAgentManager.mockImplementationOnce(() => ({
                initialize: jest.fn().mockRejectedValue(new Error('Init failed')),
                on: jest.fn(),
                off: jest.fn()
            }));
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }))
            });
            await (0, react_2.waitFor)(() => {
                expect(result.current.error).toBe('Failed to initialize swarm: Init failed');
            });
        });
        test('should cleanup on unmount', () => {
            const mockCleanup = jest.fn();
            const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');
            NeuralAgentManager.mockImplementationOnce(() => ({
                initialize: jest.fn().mockResolvedValue(true),
                cleanup: mockCleanup,
                on: jest.fn(),
                off: jest.fn()
            }));
            const { unmount } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }))
            });
            unmount();
            expect(mockCleanup).toHaveBeenCalled();
        });
    });
    describe('useSwarm Hook', () => {
        let wrapper;
        beforeEach(() => {
            wrapper = ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }));
        });
        test('should throw error when used outside provider', () => {
            // Mock console.error to avoid test output noise
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            expect(() => {
                (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)());
            }).toThrow('useSwarm must be used within a SwarmProvider');
            consoleSpy.mockRestore();
        });
        test('should spawn agent successfully', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            await (0, react_2.act)(async () => {
                const agentId = await result.current.spawnAgent({
                    type: 'researcher',
                    cognitivePattern: 'divergent'
                });
                expect(agentId).toBe('agent-123');
            });
        });
        test('should handle spawn agent errors', async () => {
            const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');
            NeuralAgentManager.mockImplementationOnce(() => ({
                initialize: jest.fn().mockResolvedValue(true),
                spawnAgent: jest.fn().mockRejectedValue(new Error('Spawn failed')),
                on: jest.fn(),
                off: jest.fn(),
                cleanup: jest.fn()
            }));
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            await (0, react_2.act)(async () => {
                try {
                    await result.current.spawnAgent({ type: 'researcher' });
                }
                catch (error) {
                    expect(error.message).toBe('Spawn failed');
                }
            });
        });
        test('should terminate agent successfully', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            await (0, react_2.act)(async () => {
                await result.current.terminateAgent('agent-123');
            });
            // Should not throw any errors
        });
        test('should run inference successfully', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            let inferenceResult = [];
            await (0, react_2.act)(async () => {
                inferenceResult = await result.current.runInference('agent-123', [0.1, 0.5, 0.9]);
            });
            expect(inferenceResult).toEqual([0.5, 0.3, 0.8]);
        });
        test('should train agent successfully', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            const trainingData = [
                { inputs: [0, 0], outputs: [0] },
                { inputs: [1, 1], outputs: [1] }
            ];
            let trainingResult;
            await (0, react_2.act)(async () => {
                trainingResult = await result.current.trainAgent('agent-123', trainingData, 10);
            });
            expect(trainingResult.sessionId).toBe('session-123');
            expect(trainingResult.finalAccuracy).toBe(0.85);
        });
        test('should share knowledge between agents', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            await (0, react_2.act)(async () => {
                await result.current.shareKnowledge('agent-source', ['agent-target-1', 'agent-target-2']);
            });
            // Should not throw any errors
        });
        test('should provide performance metrics', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            const metrics = result.current.getPerformanceMetrics();
            expect(metrics).toBeDefined();
            expect(metrics.totalAgentsSpawned).toBe(0);
            expect(metrics.systemHealthScore).toBe(100);
        });
        test('should refresh swarm state', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            await (0, react_2.act)(async () => {
                await result.current.refreshSwarm();
            });
            // Should update agents list and metrics
        });
        test('should handle loading states correctly', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            // Initially loading during initialization
            expect(result.current.isLoading).toBe(true);
            await (0, react_2.waitFor)(() => {
                expect(result.current.isLoading).toBe(false);
                expect(result.current.isInitialized).toBe(true);
            });
        });
    });
    describe('Real-time Updates', () => {
        let wrapper;
        beforeEach(() => {
            wrapper = ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }));
        });
        test('should handle agent spawned events', async () => {
            const mockAgentManager = {
                initialize: jest.fn().mockResolvedValue(true),
                getActiveAgents: jest.fn().mockReturnValue([]),
                getPerformanceMetrics: jest.fn().mockReturnValue({}),
                on: jest.fn(),
                off: jest.fn(),
                cleanup: jest.fn()
            };
            const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');
            NeuralAgentManager.mockImplementationOnce(() => mockAgentManager);
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            // Simulate agent spawned event
            const onCall = mockAgentManager.on.mock.calls.find(call => call[0] === 'agentSpawned');
            if (onCall) {
                const eventHandler = onCall[1];
                (0, react_2.act)(() => {
                    eventHandler({ agentId: 'new-agent', spawnTime: 50 });
                });
            }
            // Should trigger state updates
        });
        test('should handle performance metric updates', async () => {
            const mockAgentManager = {
                initialize: jest.fn().mockResolvedValue(true),
                getActiveAgents: jest.fn().mockReturnValue([]),
                getPerformanceMetrics: jest.fn().mockReturnValue({
                    systemHealthScore: 95
                }),
                on: jest.fn(),
                off: jest.fn(),
                cleanup: jest.fn()
            };
            const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');
            NeuralAgentManager.mockImplementationOnce(() => mockAgentManager);
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            // Performance metrics should be updated
            expect(result.current.getPerformanceMetrics().systemHealthScore).toBe(95);
        });
    });
    describe('Error Handling', () => {
        let wrapper;
        beforeEach(() => {
            wrapper = ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }));
        });
        test('should handle service initialization failures gracefully', async () => {
            const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');
            NeuralAgentManager.mockImplementationOnce(() => ({
                initialize: jest.fn().mockRejectedValue(new Error('Service unavailable')),
                on: jest.fn(),
                off: jest.fn(),
                cleanup: jest.fn()
            }));
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.error).toContain('Service unavailable');
                expect(result.current.isInitialized).toBe(false);
            });
        });
        test('should handle operation failures without crashing', async () => {
            const mockAgentManager = {
                initialize: jest.fn().mockResolvedValue(true),
                spawnAgent: jest.fn().mockRejectedValue(new Error('Spawn error')),
                on: jest.fn(),
                off: jest.fn(),
                cleanup: jest.fn()
            };
            const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');
            NeuralAgentManager.mockImplementationOnce(() => mockAgentManager);
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            await (0, react_2.act)(async () => {
                try {
                    await result.current.spawnAgent({ type: 'researcher' });
                }
                catch (error) {
                    expect(error.message).toBe('Spawn error');
                }
            });
            // Context should still be functional
            expect(result.current.isInitialized).toBe(true);
        });
        test('should clear errors when operations succeed', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), { wrapper });
            // Set an error state
            (0, react_2.act)(() => {
                result.current.setError('Test error');
            });
            expect(result.current.error).toBe('Test error');
            // Successful operation should clear error
            await (0, react_2.act)(async () => {
                await result.current.refreshSwarm();
            });
            expect(result.current.error).toBeNull();
        });
    });
    describe('Configuration', () => {
        test('should handle missing configuration gracefully', () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { children: children }))
            });
            // Should use default configuration
            expect(result.current).toBeDefined();
        });
        test('should merge custom configuration with defaults', () => {
            const customConfig = {
                maxAgents: 5,
                performance: {
                    enableMonitoring: false
                }
            };
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: customConfig, children: children }))
            });
            // Should use custom values while maintaining defaults for unspecified options
            expect(result.current).toBeDefined();
        });
        test('should validate configuration values', () => {
            const invalidConfig = {
                maxAgents: -1,
                performance: {
                    targetSpawnTime: 'invalid'
                }
            };
            // Should handle invalid config gracefully
            expect(() => {
                (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                    wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: invalidConfig, children: children }))
                });
            }).not.toThrow();
        });
    });
    describe('Memory Management', () => {
        test('should clean up event listeners on unmount', () => {
            const mockOff = jest.fn();
            const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');
            NeuralAgentManager.mockImplementationOnce(() => ({
                initialize: jest.fn().mockResolvedValue(true),
                on: jest.fn(),
                off: mockOff,
                cleanup: jest.fn()
            }));
            const { unmount } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }))
            });
            unmount();
            // Should remove event listeners
            expect(mockOff).toHaveBeenCalled();
        });
        test('should handle rapid re-renders without memory leaks', () => {
            const { rerender } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }))
            });
            // Rapidly re-render multiple times
            for (let i = 0; i < 10; i++) {
                rerender();
            }
            // Should not accumulate memory or cause errors
        });
    });
    describe('Performance Optimization', () => {
        test('should memoize expensive operations', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }))
            });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            // Call the same operation multiple times
            const metrics1 = result.current.getPerformanceMetrics();
            const metrics2 = result.current.getPerformanceMetrics();
            // Should return the same reference for unchanged data
            expect(metrics1).toBe(metrics2);
        });
        test('should debounce frequent updates', async () => {
            const { result } = (0, react_2.renderHook)(() => (0, SwarmContext_1.useSwarm)(), {
                wrapper: ({ children }) => ((0, jsx_runtime_1.jsx)(SwarmContext_1.SwarmProvider, { config: mockConfig, children: children }))
            });
            await (0, react_2.waitFor)(() => {
                expect(result.current.isInitialized).toBe(true);
            });
            // Rapidly call refresh multiple times
            await (0, react_2.act)(async () => {
                await Promise.all([
                    result.current.refreshSwarm(),
                    result.current.refreshSwarm(),
                    result.current.refreshSwarm()
                ]);
            });
            // Should handle rapid calls efficiently
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,