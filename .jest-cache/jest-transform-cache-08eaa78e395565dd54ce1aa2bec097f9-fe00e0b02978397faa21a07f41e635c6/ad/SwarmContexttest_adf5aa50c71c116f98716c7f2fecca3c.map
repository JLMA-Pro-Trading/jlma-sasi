{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/contexts/SwarmContext.test.tsx","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/contexts/SwarmContext.test.tsx"],"sourcesContent":["/**\n * Comprehensive Unit Tests for SwarmContext\n * Target: 90%+ coverage for context provider and hooks\n */\n\nimport React from 'react';\nimport { render, renderHook, act, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { SwarmContext, SwarmProvider, useSwarm } from '../../../src/contexts/SwarmContext';\n\n// Mock the neural services\njest.mock('../../../src/services/NeuralAgentManager', () => ({\n  NeuralAgentManager: jest.fn().mockImplementation(() => ({\n    initialize: jest.fn().mockResolvedValue(true),\n    spawnAgent: jest.fn().mockResolvedValue('agent-123'),\n    getActiveAgents: jest.fn().mockReturnValue([]),\n    getPerformanceMetrics: jest.fn().mockReturnValue({\n      totalAgentsSpawned: 0,\n      averageSpawnTime: 0,\n      averageInferenceTime: 0,\n      memoryUsage: 0,\n      activeLearningTasks: 0,\n      systemHealthScore: 100\n    }),\n    terminateAgent: jest.fn().mockResolvedValue(undefined),\n    runInference: jest.fn().mockResolvedValue([0.5, 0.3, 0.8]),\n    trainAgent: jest.fn().mockResolvedValue({\n      sessionId: 'session-123',\n      agentId: 'agent-123',\n      finalAccuracy: 0.85,\n      epochs: 10\n    }),\n    shareKnowledge: jest.fn().mockResolvedValue(undefined),\n    cleanup: jest.fn().mockResolvedValue(undefined),\n    on: jest.fn(),\n    off: jest.fn(),\n    emit: jest.fn()\n  }))\n}));\n\njest.mock('../../../src/services/NeuralMeshService', () => ({\n  NeuralMeshService: jest.fn().mockImplementation(() => ({\n    initialize: jest.fn().mockResolvedValue(true),\n    addNode: jest.fn().mockResolvedValue('node-123'),\n    createConnection: jest.fn().mockResolvedValue(undefined),\n    propagateSignal: jest.fn().mockResolvedValue({ output: 0.7 }),\n    getPerformanceMetrics: jest.fn().mockReturnValue({\n      propagationTime: 15,\n      learningRate: 0.001,\n      networkEfficiency: 0.85,\n      memoryUsage: 1024,\n      nodeUtilization: 0.75\n    }),\n    shutdown: jest.fn().mockResolvedValue(undefined),\n    on: jest.fn(),\n    off: jest.fn(),\n    emit: jest.fn()\n  }))\n}));\n\ndescribe('SwarmContext - Comprehensive Tests', () => {\n  let mockConfig: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockConfig = {\n      maxAgents: 10,\n      autoSpawn: true,\n      performance: {\n        enableMonitoring: true,\n        targetSpawnTime: 75,\n        targetInferenceTime: 100\n      },\n      mesh: {\n        topology: 'hierarchical',\n        learningRate: 0.001,\n        maxNodes: 100\n      }\n    };\n  });\n\n  describe('SwarmProvider', () => {\n    test('should provide default swarm state', () => {\n      const TestComponent = () => {\n        const context = React.useContext(SwarmContext);\n        return (\n          <div>\n            <span data-testid=\"agents-count\">{context.agents.length}</span>\n            <span data-testid=\"is-loading\">{context.isLoading.toString()}</span>\n            <span data-testid=\"error\">{context.error || 'no-error'}</span>\n          </div>\n        );\n      };\n\n      render(\n        <SwarmProvider config={mockConfig}>\n          <TestComponent />\n        </SwarmProvider>\n      );\n\n      expect(document.querySelector('[data-testid=\"agents-count\"]')).toHaveTextContent('0');\n      expect(document.querySelector('[data-testid=\"is-loading\"]')).toHaveTextContent('false');\n      expect(document.querySelector('[data-testid=\"error\"]')).toHaveTextContent('no-error');\n    });\n\n    test('should initialize services on mount', async () => {\n      const { result } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider config={mockConfig}>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n    });\n\n    test('should handle initialization errors', async () => {\n      // Mock initialization failure\n      const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');\n      NeuralAgentManager.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockRejectedValue(new Error('Init failed')),\n        on: jest.fn(),\n        off: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider config={mockConfig}>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      await waitFor(() => {\n        expect(result.current.error).toBe('Failed to initialize swarm: Init failed');\n      });\n    });\n\n    test('should cleanup on unmount', () => {\n      const mockCleanup = jest.fn();\n      const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');\n      NeuralAgentManager.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        cleanup: mockCleanup,\n        on: jest.fn(),\n        off: jest.fn()\n      }));\n\n      const { unmount } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider config={mockConfig}>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      unmount();\n\n      expect(mockCleanup).toHaveBeenCalled();\n    });\n  });\n\n  describe('useSwarm Hook', () => {\n    let wrapper: React.FC<{ children: React.ReactNode }>;\n\n    beforeEach(() => {\n      wrapper = ({ children }) => (\n        <SwarmProvider config={mockConfig}>\n          {children}\n        </SwarmProvider>\n      );\n    });\n\n    test('should throw error when used outside provider', () => {\n      // Mock console.error to avoid test output noise\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      expect(() => {\n        renderHook(() => useSwarm());\n      }).toThrow('useSwarm must be used within a SwarmProvider');\n\n      consoleSpy.mockRestore();\n    });\n\n    test('should spawn agent successfully', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        const agentId = await result.current.spawnAgent({\n          type: 'researcher',\n          cognitivePattern: 'divergent'\n        });\n        expect(agentId).toBe('agent-123');\n      });\n    });\n\n    test('should handle spawn agent errors', async () => {\n      const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');\n      NeuralAgentManager.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        spawnAgent: jest.fn().mockRejectedValue(new Error('Spawn failed')),\n        on: jest.fn(),\n        off: jest.fn(),\n        cleanup: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.spawnAgent({ type: 'researcher' });\n        } catch (error) {\n          expect(error.message).toBe('Spawn failed');\n        }\n      });\n    });\n\n    test('should terminate agent successfully', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        await result.current.terminateAgent('agent-123');\n      });\n\n      // Should not throw any errors\n    });\n\n    test('should run inference successfully', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      let inferenceResult: number[] = [];\n      await act(async () => {\n        inferenceResult = await result.current.runInference('agent-123', [0.1, 0.5, 0.9]);\n      });\n\n      expect(inferenceResult).toEqual([0.5, 0.3, 0.8]);\n    });\n\n    test('should train agent successfully', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      const trainingData = [\n        { inputs: [0, 0], outputs: [0] },\n        { inputs: [1, 1], outputs: [1] }\n      ];\n\n      let trainingResult: any;\n      await act(async () => {\n        trainingResult = await result.current.trainAgent('agent-123', trainingData, 10);\n      });\n\n      expect(trainingResult.sessionId).toBe('session-123');\n      expect(trainingResult.finalAccuracy).toBe(0.85);\n    });\n\n    test('should share knowledge between agents', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        await result.current.shareKnowledge('agent-source', ['agent-target-1', 'agent-target-2']);\n      });\n\n      // Should not throw any errors\n    });\n\n    test('should provide performance metrics', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      const metrics = result.current.getPerformanceMetrics();\n\n      expect(metrics).toBeDefined();\n      expect(metrics.totalAgentsSpawned).toBe(0);\n      expect(metrics.systemHealthScore).toBe(100);\n    });\n\n    test('should refresh swarm state', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        await result.current.refreshSwarm();\n      });\n\n      // Should update agents list and metrics\n    });\n\n    test('should handle loading states correctly', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      // Initially loading during initialization\n      expect(result.current.isLoading).toBe(true);\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n        expect(result.current.isInitialized).toBe(true);\n      });\n    });\n  });\n\n  describe('Real-time Updates', () => {\n    let wrapper: React.FC<{ children: React.ReactNode }>;\n\n    beforeEach(() => {\n      wrapper = ({ children }) => (\n        <SwarmProvider config={mockConfig}>\n          {children}\n        </SwarmProvider>\n      );\n    });\n\n    test('should handle agent spawned events', async () => {\n      const mockAgentManager = {\n        initialize: jest.fn().mockResolvedValue(true),\n        getActiveAgents: jest.fn().mockReturnValue([]),\n        getPerformanceMetrics: jest.fn().mockReturnValue({}),\n        on: jest.fn(),\n        off: jest.fn(),\n        cleanup: jest.fn()\n      };\n\n      const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');\n      NeuralAgentManager.mockImplementationOnce(() => mockAgentManager);\n\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Simulate agent spawned event\n      const onCall = mockAgentManager.on.mock.calls.find(call => call[0] === 'agentSpawned');\n      if (onCall) {\n        const eventHandler = onCall[1];\n        act(() => {\n          eventHandler({ agentId: 'new-agent', spawnTime: 50 });\n        });\n      }\n\n      // Should trigger state updates\n    });\n\n    test('should handle performance metric updates', async () => {\n      const mockAgentManager = {\n        initialize: jest.fn().mockResolvedValue(true),\n        getActiveAgents: jest.fn().mockReturnValue([]),\n        getPerformanceMetrics: jest.fn().mockReturnValue({\n          systemHealthScore: 95\n        }),\n        on: jest.fn(),\n        off: jest.fn(),\n        cleanup: jest.fn()\n      };\n\n      const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');\n      NeuralAgentManager.mockImplementationOnce(() => mockAgentManager);\n\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Performance metrics should be updated\n      expect(result.current.getPerformanceMetrics().systemHealthScore).toBe(95);\n    });\n  });\n\n  describe('Error Handling', () => {\n    let wrapper: React.FC<{ children: React.ReactNode }>;\n\n    beforeEach(() => {\n      wrapper = ({ children }) => (\n        <SwarmProvider config={mockConfig}>\n          {children}\n        </SwarmProvider>\n      );\n    });\n\n    test('should handle service initialization failures gracefully', async () => {\n      const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');\n      NeuralAgentManager.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockRejectedValue(new Error('Service unavailable')),\n        on: jest.fn(),\n        off: jest.fn(),\n        cleanup: jest.fn()\n      }));\n\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.error).toContain('Service unavailable');\n        expect(result.current.isInitialized).toBe(false);\n      });\n    });\n\n    test('should handle operation failures without crashing', async () => {\n      const mockAgentManager = {\n        initialize: jest.fn().mockResolvedValue(true),\n        spawnAgent: jest.fn().mockRejectedValue(new Error('Spawn error')),\n        on: jest.fn(),\n        off: jest.fn(),\n        cleanup: jest.fn()\n      };\n\n      const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');\n      NeuralAgentManager.mockImplementationOnce(() => mockAgentManager);\n\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      await act(async () => {\n        try {\n          await result.current.spawnAgent({ type: 'researcher' });\n        } catch (error) {\n          expect(error.message).toBe('Spawn error');\n        }\n      });\n\n      // Context should still be functional\n      expect(result.current.isInitialized).toBe(true);\n    });\n\n    test('should clear errors when operations succeed', async () => {\n      const { result } = renderHook(() => useSwarm(), { wrapper });\n\n      // Set an error state\n      act(() => {\n        (result.current as any).setError('Test error');\n      });\n\n      expect(result.current.error).toBe('Test error');\n\n      // Successful operation should clear error\n      await act(async () => {\n        await result.current.refreshSwarm();\n      });\n\n      expect(result.current.error).toBeNull();\n    });\n  });\n\n  describe('Configuration', () => {\n    test('should handle missing configuration gracefully', () => {\n      const { result } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      // Should use default configuration\n      expect(result.current).toBeDefined();\n    });\n\n    test('should merge custom configuration with defaults', () => {\n      const customConfig = {\n        maxAgents: 5,\n        performance: {\n          enableMonitoring: false\n        }\n      };\n\n      const { result } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider config={customConfig}>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      // Should use custom values while maintaining defaults for unspecified options\n      expect(result.current).toBeDefined();\n    });\n\n    test('should validate configuration values', () => {\n      const invalidConfig = {\n        maxAgents: -1,\n        performance: {\n          targetSpawnTime: 'invalid'\n        }\n      };\n\n      // Should handle invalid config gracefully\n      expect(() => {\n        renderHook(() => useSwarm(), {\n          wrapper: ({ children }) => (\n            <SwarmProvider config={invalidConfig as any}>\n              {children}\n            </SwarmProvider>\n          )\n        });\n      }).not.toThrow();\n    });\n  });\n\n  describe('Memory Management', () => {\n    test('should clean up event listeners on unmount', () => {\n      const mockOff = jest.fn();\n      const { NeuralAgentManager } = require('../../../src/services/NeuralAgentManager');\n      NeuralAgentManager.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        on: jest.fn(),\n        off: mockOff,\n        cleanup: jest.fn()\n      }));\n\n      const { unmount } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider config={mockConfig}>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      unmount();\n\n      // Should remove event listeners\n      expect(mockOff).toHaveBeenCalled();\n    });\n\n    test('should handle rapid re-renders without memory leaks', () => {\n      const { rerender } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider config={mockConfig}>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      // Rapidly re-render multiple times\n      for (let i = 0; i < 10; i++) {\n        rerender();\n      }\n\n      // Should not accumulate memory or cause errors\n    });\n  });\n\n  describe('Performance Optimization', () => {\n    test('should memoize expensive operations', async () => {\n      const { result } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider config={mockConfig}>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Call the same operation multiple times\n      const metrics1 = result.current.getPerformanceMetrics();\n      const metrics2 = result.current.getPerformanceMetrics();\n\n      // Should return the same reference for unchanged data\n      expect(metrics1).toBe(metrics2);\n    });\n\n    test('should debounce frequent updates', async () => {\n      const { result } = renderHook(() => useSwarm(), {\n        wrapper: ({ children }) => (\n          <SwarmProvider config={mockConfig}>\n            {children}\n          </SwarmProvider>\n        )\n      });\n\n      await waitFor(() => {\n        expect(result.current.isInitialized).toBe(true);\n      });\n\n      // Rapidly call refresh multiple times\n      await act(async () => {\n        await Promise.all([\n          result.current.refreshSwarm(),\n          result.current.refreshSwarm(),\n          result.current.refreshSwarm()\n        ]);\n      });\n\n      // Should handle rapid calls efficiently\n    });\n  });\n});"],"version":3}