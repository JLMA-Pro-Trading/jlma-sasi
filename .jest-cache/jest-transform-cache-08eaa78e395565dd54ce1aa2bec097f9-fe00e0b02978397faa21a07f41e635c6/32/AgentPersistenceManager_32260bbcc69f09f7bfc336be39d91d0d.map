{"version":3,"names":["cov_52xrixujp","actualCoverage","Database","path","fs","performance","AgentPersistenceManager","constructor","dbPath","b","f","s","Object","defineProperty","resolve","config","timeout","maxConnections","busyTimeout","cacheSize","mmapSize","walMode","synchronous","initialize","dbDir","dirname","existsSync","mkdirSync","recursive","db","verbose","process","env","NODE_ENV","console","log","undefined","configureSQLitePerformance","createSchema","createIndexes","isInitialized","error","Error","message","pragma","schemas","schema","exec","indexes","index","saveAgent","startTime","now","stmt","prepare","result","run","id","type","status","cognitivePattern","JSON","stringify","networkLayers","learningRate","momentum","createdAt","lastActive","memoryUsageMB","performanceScore","spawnTimeMs","configJson","metadataJson","saveTime","warn","toFixed","getAgent","row","get","retrieveTime","cognitive_pattern","parse","network_layers","learning_rate","created_at","last_active","memory_usage_mb","performance_score","spawn_time_ms","config_json","metadata_json","updateAgentStatus","Date","changes","updateTime","recordMetric","metric","agentId","metricType","value","unit","recordedAt","context","getAgentMetrics","query","params","push","rows","all","map","agent_id","metric_type","recorded_at","context_json","batchSaveAgents","agents","transaction","agentList","agent","batchTime","avgTime","length","getAllAgents","filter","conditions","join","getTables","name","getIndexes","getJournalMode","Array","isArray","journal_mode","close"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/persistence/AgentPersistenceManager.ts"],"sourcesContent":["/**\n * AgentPersistenceManager - SQLite Database Layer for Phase 2A\n * Implements TDD-driven database operations with performance monitoring\n * \n * Performance Requirements:\n * - Agent spawn: <75ms\n * - Database operations: <50ms\n * - Memory usage: <50MB per agent\n * - Test coverage: >95%\n */\n\nimport Database, { Database as DatabaseType } from 'better-sqlite3';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { performance } from 'perf_hooks';\nimport type { \n  AgentConfig, \n  AgentMetric, \n  AgentMemoryEntry, \n  SessionState,\n  NeuralWeightRecord,\n  DatabaseConnectionConfig,\n  BatchOperation\n} from '../types/agent';\n\nexport class AgentPersistenceManager {\n  private db: DatabaseType | null = null;\n  private dbPath: string;\n  private config: DatabaseConnectionConfig;\n  private isInitialized: boolean = false;\n  private writeQueue: Array<() => Promise<any>> = [];\n  private isProcessingQueue: boolean = false;\n\n  constructor(dbPath: string = './.swarm/agents.db') {\n    this.dbPath = path.resolve(dbPath);\n    this.config = {\n      path: this.dbPath,\n      timeout: 30000,\n      maxConnections: 5,\n      busyTimeout: 5000,\n      cacheSize: 64000, // 64MB cache\n      mmapSize: 268435456, // 256MB mmap\n      walMode: true,\n      synchronous: 'NORMAL'\n    };\n  }\n\n  /**\n   * Initialize SQLite database with Phase 2A schema and performance optimizations\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Ensure directory exists\n      const dbDir = path.dirname(this.dbPath);\n      if (!fs.existsSync(dbDir)) {\n        fs.mkdirSync(dbDir, { recursive: true });\n      }\n\n      // Initialize database connection\n      this.db = new Database(this.dbPath, {\n        timeout: this.config.timeout,\n        verbose: process.env.NODE_ENV === 'development' ? console.log : undefined\n      });\n\n      // Configure SQLite for performance\n      await this.configureSQLitePerformance();\n\n      // Create schema\n      await this.createSchema();\n\n      // Create indexes for performance\n      await this.createIndexes();\n\n      this.isInitialized = true;\n      console.log('‚úÖ AgentPersistenceManager initialized successfully');\n\n    } catch (error) {\n      console.error('‚ùå Failed to initialize AgentPersistenceManager:', error);\n      throw new Error(`Database initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Configure SQLite for optimal performance\n   */\n  private async configureSQLitePerformance(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    // Enable WAL mode for concurrent reads\n    this.db.pragma('journal_mode = WAL');\n    \n    // Set synchronous mode for balanced performance/safety\n    this.db.pragma(`synchronous = ${this.config.synchronous}`);\n    \n    // Configure cache size\n    this.db.pragma(`cache_size = -${this.config.cacheSize / 1024}`); // Negative = KB\n    \n    // Use memory for temporary storage\n    this.db.pragma('temp_store = MEMORY');\n    \n    // Configure memory mapping\n    this.db.pragma(`mmap_size = ${this.config.mmapSize}`);\n    \n    // Set busy timeout\n    this.db.pragma(`busy_timeout = ${this.config.busyTimeout}`);\n    \n    // Enable foreign key constraints\n    this.db.pragma('foreign_keys = ON');\n    \n    console.log('üîß SQLite performance configuration applied');\n  }\n\n  /**\n   * Create database schema for Phase 2A\n   */\n  private async createSchema(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const schemas = [\n      // Agent Lifecycle Management\n      `CREATE TABLE IF NOT EXISTS agents (\n        id TEXT PRIMARY KEY,\n        type TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'spawning',\n        cognitive_pattern TEXT NOT NULL,\n        network_layers TEXT NOT NULL,\n        learning_rate REAL DEFAULT 0.01,\n        momentum REAL DEFAULT 0.0,\n        created_at INTEGER NOT NULL,\n        last_active INTEGER NOT NULL,\n        memory_usage_mb REAL DEFAULT 0,\n        performance_score REAL DEFAULT 0,\n        spawn_time_ms INTEGER DEFAULT NULL,\n        config_json TEXT DEFAULT '{}',\n        metadata_json TEXT DEFAULT '{}'\n      )`,\n\n      // Neural Network State Persistence\n      `CREATE TABLE IF NOT EXISTS neural_weights (\n        agent_id TEXT NOT NULL,\n        layer_index INTEGER NOT NULL,\n        weight_data BLOB NOT NULL,\n        bias_data BLOB NOT NULL,\n        updated_at INTEGER NOT NULL,\n        checksum TEXT NOT NULL,\n        compression_type TEXT DEFAULT 'gzip',\n        PRIMARY KEY (agent_id, layer_index),\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Agent Memory and Knowledge Base\n      `CREATE TABLE IF NOT EXISTS agent_memory (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        agent_id TEXT NOT NULL,\n        memory_type TEXT NOT NULL,\n        key TEXT NOT NULL,\n        value_data BLOB NOT NULL,\n        importance_score REAL DEFAULT 0.5,\n        access_count INTEGER DEFAULT 0,\n        created_at INTEGER NOT NULL,\n        last_accessed INTEGER NOT NULL,\n        ttl_expires INTEGER DEFAULT NULL,\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Performance Metrics and Monitoring\n      `CREATE TABLE IF NOT EXISTS agent_metrics (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        agent_id TEXT NOT NULL,\n        metric_type TEXT NOT NULL,\n        value REAL NOT NULL,\n        unit TEXT NOT NULL,\n        recorded_at INTEGER NOT NULL,\n        context_json TEXT DEFAULT '{}',\n        FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE\n      )`,\n\n      // Cross-Session State Management\n      `CREATE TABLE IF NOT EXISTS session_state (\n        id TEXT PRIMARY KEY,\n        swarm_topology TEXT NOT NULL,\n        active_agents TEXT NOT NULL,\n        coordination_state BLOB NOT NULL,\n        created_at INTEGER NOT NULL,\n        last_checkpoint INTEGER NOT NULL,\n        is_active BOOLEAN DEFAULT TRUE\n      )`\n    ];\n\n    for (const schema of schemas) {\n      this.db.exec(schema);\n    }\n\n    console.log('üìã Database schema created successfully');\n  }\n\n  /**\n   * Create indexes for Phase 2A performance requirements\n   */\n  private async createIndexes(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const indexes = [\n      'CREATE INDEX IF NOT EXISTS idx_agents_status ON agents(status, last_active)',\n      'CREATE INDEX IF NOT EXISTS idx_agents_type ON agents(type, status)',\n      'CREATE INDEX IF NOT EXISTS idx_neural_weights_agent ON neural_weights(agent_id)',\n      'CREATE INDEX IF NOT EXISTS idx_agent_memory_type ON agent_memory(agent_id, memory_type)',\n      'CREATE INDEX IF NOT EXISTS idx_agent_memory_importance ON agent_memory(importance_score DESC, last_accessed DESC)',\n      'CREATE INDEX IF NOT EXISTS idx_metrics_agent_type ON agent_metrics(agent_id, metric_type, recorded_at)',\n      'CREATE INDEX IF NOT EXISTS idx_session_active ON session_state(is_active, last_checkpoint)'\n    ];\n\n    for (const index of indexes) {\n      this.db.exec(index);\n    }\n\n    console.log('üîç Database indexes created successfully');\n  }\n\n  /**\n   * Save agent configuration to database\n   * Performance target: <50ms\n   */\n  async saveAgent(config: AgentConfig): Promise<AgentConfig> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        INSERT INTO agents (\n          id, type, status, cognitive_pattern, network_layers, learning_rate, momentum,\n          created_at, last_active, memory_usage_mb, performance_score, spawn_time_ms,\n          config_json, metadata_json\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n\n      const result = stmt.run(\n        config.id,\n        config.type,\n        config.status,\n        config.cognitivePattern,\n        JSON.stringify(config.networkLayers),\n        config.learningRate || 0.01,\n        config.momentum || 0.0,\n        config.createdAt,\n        config.lastActive,\n        config.memoryUsageMB || 0,\n        config.performanceScore || 0,\n        config.spawnTimeMs,\n        config.configJson || '{}',\n        config.metadataJson || '{}'\n      );\n\n      const saveTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (saveTime > 50) {\n        console.warn(`‚ö†Ô∏è Agent save time exceeded threshold: ${saveTime.toFixed(2)}ms`);\n      }\n\n      return config;\n\n    } catch (error) {\n      const saveTime = performance.now() - startTime;\n      console.error(`‚ùå Failed to save agent ${config.id} (${saveTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve agent by ID\n   * Performance target: <50ms\n   */\n  async getAgent(id: string): Promise<AgentConfig | null> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        SELECT * FROM agents WHERE id = ?\n      `);\n\n      const row = stmt.get(id) as any;\n\n      const retrieveTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (retrieveTime > 50) {\n        console.warn(`‚ö†Ô∏è Agent retrieval time exceeded threshold: ${retrieveTime.toFixed(2)}ms`);\n      }\n\n      if (!row) return null;\n\n      return {\n        id: row.id,\n        type: row.type,\n        cognitivePattern: row.cognitive_pattern,\n        networkLayers: JSON.parse(row.network_layers),\n        learningRate: row.learning_rate,\n        momentum: row.momentum,\n        status: row.status,\n        createdAt: row.created_at,\n        lastActive: row.last_active,\n        memoryUsageMB: row.memory_usage_mb,\n        performanceScore: row.performance_score,\n        spawnTimeMs: row.spawn_time_ms,\n        configJson: row.config_json,\n        metadataJson: row.metadata_json\n      };\n\n    } catch (error) {\n      const retrieveTime = performance.now() - startTime;\n      console.error(`‚ùå Failed to retrieve agent ${id} (${retrieveTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Update agent status atomically\n   * Performance target: <50ms\n   */\n  async updateAgentStatus(id: string, status: string): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const stmt = this.db.prepare(`\n        UPDATE agents SET status = ?, last_active = ? WHERE id = ?\n      `);\n\n      const result = stmt.run(status, Date.now(), id);\n\n      if (result.changes === 0) {\n        throw new Error(`Agent not found: ${id}`);\n      }\n\n      const updateTime = performance.now() - startTime;\n      \n      // Log performance warning if exceeding threshold\n      if (updateTime > 50) {\n        console.warn(`‚ö†Ô∏è Agent status update time exceeded threshold: ${updateTime.toFixed(2)}ms`);\n      }\n\n    } catch (error) {\n      const updateTime = performance.now() - startTime;\n      console.error(`‚ùå Failed to update agent status ${id} (${updateTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Record performance metric\n   */\n  async recordMetric(metric: AgentMetric): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      INSERT INTO agent_metrics (agent_id, metric_type, value, unit, recorded_at, context_json)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      metric.agentId,\n      metric.metricType,\n      metric.value,\n      metric.unit,\n      metric.recordedAt,\n      JSON.stringify(metric.context || {})\n    );\n  }\n\n  /**\n   * Get agent metrics by type\n   */\n  async getAgentMetrics(agentId: string, metricType?: string): Promise<AgentMetric[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    let query = 'SELECT * FROM agent_metrics WHERE agent_id = ?';\n    const params: any[] = [agentId];\n\n    if (metricType) {\n      query += ' AND metric_type = ?';\n      params.push(metricType);\n    }\n\n    query += ' ORDER BY recorded_at DESC';\n\n    const stmt = this.db.prepare(query);\n    const rows = stmt.all(...params) as any[];\n\n    return rows.map(row => ({\n      id: row.id,\n      agentId: row.agent_id,\n      metricType: row.metric_type,\n      value: row.value,\n      unit: row.unit,\n      recordedAt: row.recorded_at,\n      context: JSON.parse(row.context_json || '{}')\n    }));\n  }\n\n  /**\n   * Batch save multiple agents efficiently\n   */\n  async batchSaveAgents(agents: AgentConfig[]): Promise<void> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const startTime = performance.now();\n\n    try {\n      const transaction = this.db.transaction((agentList: AgentConfig[]) => {\n        const stmt = this.db!.prepare(`\n          INSERT INTO agents (\n            id, type, status, cognitive_pattern, network_layers, learning_rate, momentum,\n            created_at, last_active, memory_usage_mb, performance_score, spawn_time_ms,\n            config_json, metadata_json\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        `);\n\n        for (const agent of agentList) {\n          stmt.run(\n            agent.id,\n            agent.type,\n            agent.status,\n            agent.cognitivePattern,\n            JSON.stringify(agent.networkLayers),\n            agent.learningRate || 0.01,\n            agent.momentum || 0.0,\n            agent.createdAt,\n            agent.lastActive,\n            agent.memoryUsageMB || 0,\n            agent.performanceScore || 0,\n            agent.spawnTimeMs,\n            agent.configJson || '{}',\n            agent.metadataJson || '{}'\n          );\n        }\n      });\n\n      transaction(agents);\n\n      const batchTime = performance.now() - startTime;\n      const avgTime = batchTime / agents.length;\n\n      console.log(`üìä Batch saved ${agents.length} agents in ${batchTime.toFixed(2)}ms (avg: ${avgTime.toFixed(2)}ms/agent)`);\n\n    } catch (error) {\n      const batchTime = performance.now() - startTime;\n      console.error(`‚ùå Failed to batch save agents (${batchTime.toFixed(2)}ms):`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all agents with optional filtering\n   */\n  async getAllAgents(filter?: { type?: string; status?: string }): Promise<AgentConfig[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    let query = 'SELECT * FROM agents';\n    const params: any[] = [];\n\n    if (filter) {\n      const conditions: string[] = [];\n      \n      if (filter.type) {\n        conditions.push('type = ?');\n        params.push(filter.type);\n      }\n      \n      if (filter.status) {\n        conditions.push('status = ?');\n        params.push(filter.status);\n      }\n      \n      if (conditions.length > 0) {\n        query += ' WHERE ' + conditions.join(' AND ');\n      }\n    }\n\n    query += ' ORDER BY created_at DESC';\n\n    const stmt = this.db.prepare(query);\n    const rows = stmt.all(...params) as any[];\n\n    return rows.map(row => ({\n      id: row.id,\n      type: row.type,\n      cognitivePattern: row.cognitive_pattern,\n      networkLayers: JSON.parse(row.network_layers),\n      learningRate: row.learning_rate,\n      momentum: row.momentum,\n      status: row.status,\n      createdAt: row.created_at,\n      lastActive: row.last_active,\n      memoryUsageMB: row.memory_usage_mb,\n      performanceScore: row.performance_score,\n      spawnTimeMs: row.spawn_time_ms,\n      configJson: row.config_json,\n      metadataJson: row.metadata_json\n    }));\n  }\n\n  /**\n   * Get database table names (for testing)\n   */\n  async getTables(): Promise<string[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\n    `);\n    \n    const rows = stmt.all() as any[];\n    return rows.map(row => row.name);\n  }\n\n  /**\n   * Get database index names (for testing)\n   */\n  async getIndexes(): Promise<string[]> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const stmt = this.db.prepare(`\n      SELECT name FROM sqlite_master WHERE type='index' AND name NOT LIKE 'sqlite_%'\n    `);\n    \n    const rows = stmt.all() as any[];\n    return rows.map(row => row.name);\n  }\n\n  /**\n   * Get journal mode (for testing)\n   */\n  async getJournalMode(): Promise<string> {\n    if (!this.isInitialized || !this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const result = this.db.pragma('journal_mode');\n    \n    // Handle both string and object responses from better-sqlite3\n    if (typeof result === 'string') {\n      return result;\n    } else if (Array.isArray(result) && result.length > 0 && result[0].journal_mode) {\n      return result[0].journal_mode;\n    } else if (typeof result === 'object' && result.journal_mode) {\n      return result.journal_mode;\n    }\n    \n    return 'unknown';\n  }\n\n  /**\n   * Close database connection\n   */\n  async close(): Promise<void> {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n    this.isInitialized = false;\n    console.log('üîí Database connection closed');\n  }\n}"],"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","ignoreList":[]}