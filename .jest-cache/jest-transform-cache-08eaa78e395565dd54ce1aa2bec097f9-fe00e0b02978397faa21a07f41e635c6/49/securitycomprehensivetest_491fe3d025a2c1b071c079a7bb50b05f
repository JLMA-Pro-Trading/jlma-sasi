a390f51ff091d1b956434e7d93ee5b64
"use strict";
/**
 * Comprehensive Security Test Suite
 * Tests all security measures implemented in the neural agent system
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const SecurityValidator_1 = require("../../src/security/SecurityValidator");
const SecurityMonitor_1 = require("../../src/security/SecurityMonitor");
const crypto = __importStar(require("crypto"));
(0, globals_1.describe)('Security Test Suite', () => {
    let securityValidator;
    let securityMonitor;
    (0, globals_1.beforeEach)(() => {
        securityValidator = new SecurityValidator_1.SecurityValidator({
            enableInputValidation: true,
            enableRateLimiting: true,
            enableAuditLogging: true,
            maxInputSize: 1024,
            rateLimitWindow: 60,
            rateLimitMaxRequests: 10
        });
        securityMonitor = new SecurityMonitor_1.SecurityMonitor(securityValidator);
    });
    (0, globals_1.afterEach)(() => {
        securityMonitor.stop();
    });
    (0, globals_1.describe)('SQL Injection Prevention', () => {
        (0, globals_1.it)('should detect SQL injection attempts', () => {
            const maliciousQuery = "SELECT * FROM users WHERE id = ?";
            const maliciousParams = ["1; DROP TABLE users; --"];
            const result = securityValidator.validateSQLParameters(maliciousQuery, maliciousParams);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors.length).toBeGreaterThan(0);
            (0, globals_1.expect)(result.errors[0]).toContain('SQL injection');
            (0, globals_1.expect)(result.securityScore).toBeLessThan(100);
        });
        (0, globals_1.it)('should sanitize SQL parameters', () => {
            const query = "SELECT * FROM agents WHERE type = ?";
            const params = ["'malicious'; DROP TABLE agents; --"];
            const result = securityValidator.validateSQLParameters(query, params);
            (0, globals_1.expect)(result.sanitizedInput).toBeDefined();
            (0, globals_1.expect)(result.sanitizedInput[0]).not.toContain("'");
            (0, globals_1.expect)(result.sanitizedInput[0]).not.toContain(";");
            (0, globals_1.expect)(result.sanitizedInput[0]).not.toContain("--");
        });
        (0, globals_1.it)('should handle safe SQL parameters correctly', () => {
            const query = "SELECT * FROM agents WHERE id = ? AND type = ?";
            const params = ["agent123", "neural"];
            const result = securityValidator.validateSQLParameters(query, params);
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.errors.length).toBe(0);
            (0, globals_1.expect)(result.securityScore).toBe(100);
        });
        (0, globals_1.it)('should reject oversized parameters', () => {
            const query = "SELECT * FROM agents WHERE description = ?";
            const largeParam = "x".repeat(2000); // Exceeds 1024 limit
            const params = [largeParam];
            const result = securityValidator.validateSQLParameters(query, params);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors.some(e => e.includes('exceeds maximum length'))).toBe(true);
        });
    });
    (0, globals_1.describe)('Neural Input Validation', () => {
        (0, globals_1.it)('should validate normal neural inputs', () => {
            const inputs = new Float32Array([0.5, -0.3, 0.8, 0.1]);
            const result = securityValidator.validateNeuralInput(inputs);
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.errors.length).toBe(0);
            (0, globals_1.expect)(result.securityScore).toBe(100);
        });
        (0, globals_1.it)('should detect oversized neural inputs', () => {
            const inputs = new Float32Array(15000); // Too large
            const result = securityValidator.validateNeuralInput(inputs);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors.some(e => e.includes('too large'))).toBe(true);
            (0, globals_1.expect)(result.securityScore).toBeLessThan(100);
        });
        (0, globals_1.it)('should detect NaN and Infinity values', () => {
            const inputs = new Float32Array([0.5, NaN, Infinity, -Infinity]);
            const result = securityValidator.validateNeuralInput(inputs);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors.some(e => e.includes('Invalid values'))).toBe(true);
            (0, globals_1.expect)(result.sanitizedInput).toBeDefined();
            const sanitized = result.sanitizedInput;
            (0, globals_1.expect)(isFinite(sanitized[1])).toBe(true); // NaN should be replaced
            (0, globals_1.expect)(isFinite(sanitized[2])).toBe(true); // Infinity should be replaced
        });
        (0, globals_1.it)('should clamp extreme values', () => {
            const inputs = new Float32Array([5000, -3000, 0.5]);
            const result = securityValidator.validateNeuralInput(inputs);
            (0, globals_1.expect)(result.sanitizedInput).toBeDefined();
            const sanitized = result.sanitizedInput;
            (0, globals_1.expect)(sanitized[0]).toBeLessThanOrEqual(1000);
            (0, globals_1.expect)(sanitized[1]).toBeGreaterThanOrEqual(-1000);
            (0, globals_1.expect)(sanitized[2]).toBe(0.5); // Normal value unchanged
        });
    });
    (0, globals_1.describe)('Neural Weight Integrity', () => {
        (0, globals_1.it)('should validate weight integrity with correct checksum', () => {
            const weights = Buffer.from(new Float32Array([0.1, 0.2, 0.3, 0.4]).buffer);
            const checksum = crypto.createHash('sha256').update(weights).digest('hex');
            const result = securityValidator.validateNeuralWeights(weights, checksum);
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.errors.length).toBe(0);
            (0, globals_1.expect)(result.securityScore).toBe(100);
        });
        (0, globals_1.it)('should detect weight corruption', () => {
            const weights = Buffer.from(new Float32Array([0.1, 0.2, 0.3, 0.4]).buffer);
            const wrongChecksum = 'incorrect_checksum';
            const result = securityValidator.validateNeuralWeights(weights, wrongChecksum);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors.some(e => e.includes('integrity check failed'))).toBe(true);
            (0, globals_1.expect)(result.securityScore).toBe(0);
        });
        (0, globals_1.it)('should detect suspicious weight patterns', () => {
            // Create weights with all zeros (suspicious pattern)
            const suspiciousWeights = Buffer.from(new Float32Array(1000).fill(0).buffer);
            const checksum = crypto.createHash('sha256').update(suspiciousWeights).digest('hex');
            const result = securityValidator.validateNeuralWeights(suspiciousWeights, checksum);
            (0, globals_1.expect)(result.errors.some(e => e.includes('Suspicious weight patterns'))).toBe(true);
            (0, globals_1.expect)(result.securityScore).toBeLessThan(100);
        });
        (0, globals_1.it)('should reject oversized weight data', () => {
            const largeWeights = Buffer.alloc(200 * 1024 * 1024); // 200MB
            const checksum = crypto.createHash('sha256').update(largeWeights).digest('hex');
            const result = securityValidator.validateNeuralWeights(largeWeights, checksum);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors.some(e => e.includes('too large'))).toBe(true);
        });
    });
    (0, globals_1.describe)('Rate Limiting', () => {
        (0, globals_1.it)('should allow requests within limit', () => {
            const identifier = 'test_user';
            for (let i = 0; i < 5; i++) {
                const result = securityValidator.checkRateLimit(identifier);
                (0, globals_1.expect)(result.isValid).toBe(true);
            }
        });
        (0, globals_1.it)('should block requests exceeding limit', () => {
            const identifier = 'heavy_user';
            // Make requests up to the limit
            for (let i = 0; i < 10; i++) {
                securityValidator.checkRateLimit(identifier);
            }
            // Next request should be blocked
            const result = securityValidator.checkRateLimit(identifier);
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.errors.some(e => e.includes('Rate limit exceeded'))).toBe(true);
            (0, globals_1.expect)(result.securityScore).toBe(0);
        });
        (0, globals_1.it)('should reset rate limit after window', async () => {
            // This test would require time manipulation in a real scenario
            // For now, we'll test the basic functionality
            const validator = new SecurityValidator_1.SecurityValidator({
                rateLimitWindow: 1, // 1 second window
                rateLimitMaxRequests: 2
            });
            const identifier = 'test_reset';
            // Use up the limit
            validator.checkRateLimit(identifier);
            validator.checkRateLimit(identifier);
            let result = validator.checkRateLimit(identifier);
            (0, globals_1.expect)(result.isValid).toBe(false);
            // Wait for window to reset (in real test, would use fake timers)
            await new Promise(resolve => setTimeout(resolve, 1100));
            result = validator.checkRateLimit(identifier);
            (0, globals_1.expect)(result.isValid).toBe(true);
        });
    });
    (0, globals_1.describe)('Encryption/Decryption', () => {
        (0, globals_1.it)('should encrypt and decrypt data correctly', () => {
            const originalData = 'sensitive neural agent data';
            const encrypted = securityValidator.encryptData(originalData);
            (0, globals_1.expect)(encrypted).not.toBe(originalData);
            (0, globals_1.expect)(encrypted.includes(':')).toBe(true); // Should have format iv:tag:data
            const decrypted = securityValidator.decryptData(encrypted);
            (0, globals_1.expect)(decrypted).toBe(originalData);
        });
        (0, globals_1.it)('should handle encryption of different data types', () => {
            const testData = JSON.stringify({
                agentId: 'agent123',
                weights: [0.1, 0.2, 0.3],
                metadata: { type: 'neural', version: '1.0' }
            });
            const encrypted = securityValidator.encryptData(testData);
            const decrypted = securityValidator.decryptData(encrypted);
            (0, globals_1.expect)(decrypted).toBe(testData);
            const parsed = JSON.parse(decrypted);
            (0, globals_1.expect)(parsed.agentId).toBe('agent123');
        });
        (0, globals_1.it)('should reject invalid encrypted data format', () => {
            (0, globals_1.expect)(() => {
                securityValidator.decryptData('invalid_format');
            }).toThrow('Invalid encrypted data format');
        });
    });
    (0, globals_1.describe)('Secure Random Generation', () => {
        (0, globals_1.it)('should generate cryptographically secure random numbers', () => {
            const random1 = securityValidator.generateSecureRandom(100);
            const random2 = securityValidator.generateSecureRandom(100);
            (0, globals_1.expect)(random1.length).toBe(100);
            (0, globals_1.expect)(random2.length).toBe(100);
            // Should not be identical (extremely unlikely with crypto random)
            (0, globals_1.expect)(random1).not.toEqual(random2);
            // Values should be in range [-0.5, 0.5]
            for (let i = 0; i < random1.length; i++) {
                (0, globals_1.expect)(random1[i]).toBeGreaterThanOrEqual(-0.5);
                (0, globals_1.expect)(random1[i]).toBeLessThanOrEqual(0.5);
            }
        });
        (0, globals_1.it)('should generate different sequences each time', () => {
            const sequences = Array.from({ length: 5 }, () => securityValidator.generateSecureRandom(10));
            // All sequences should be different
            for (let i = 0; i < sequences.length; i++) {
                for (let j = i + 1; j < sequences.length; j++) {
                    (0, globals_1.expect)(sequences[i]).not.toEqual(sequences[j]);
                }
            }
        });
    });
    (0, globals_1.describe)('Security Monitoring', () => {
        (0, globals_1.it)('should start and stop monitoring', () => {
            (0, globals_1.expect)(securityMonitor.isWasmInitialized).toBeDefined();
            securityMonitor.start();
            // Monitor should be running
            securityMonitor.stop();
            // Monitor should be stopped
        });
        (0, globals_1.it)('should collect security metrics', async () => {
            securityMonitor.start();
            // Wait for metrics collection
            await new Promise(resolve => setTimeout(resolve, 100));
            const dashboard = securityMonitor.getSecurityDashboard();
            (0, globals_1.expect)(dashboard.currentMetrics).toBeDefined();
            (0, globals_1.expect)(dashboard.currentMetrics.systemHealth).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(dashboard.currentMetrics.systemHealth).toBeLessThanOrEqual(100);
            (0, globals_1.expect)(dashboard.threatSummary).toBeDefined();
            (0, globals_1.expect)(dashboard.alertSummary).toBeDefined();
        });
        (0, globals_1.it)('should detect and report threats', (done) => {
            securityMonitor.start();
            securityMonitor.on('threat_detected', (threat) => {
                (0, globals_1.expect)(threat.id).toBeDefined();
                (0, globals_1.expect)(threat.type).toBeDefined();
                (0, globals_1.expect)(threat.severity).toBeDefined();
                (0, globals_1.expect)(threat.timestamp).toBeDefined();
                done();
            });
            // Trigger a threat by attempting SQL injection
            securityValidator.validateSQLParameters("SELECT * FROM users WHERE id = ?", ["1; DROP TABLE users; --"]);
        });
        (0, globals_1.it)('should create alerts for critical events', (done) => {
            securityMonitor.start();
            securityMonitor.on('alert_created', (alert) => {
                (0, globals_1.expect)(alert.id).toBeDefined();
                (0, globals_1.expect)(alert.severity).toBeDefined();
                (0, globals_1.expect)(alert.category).toBeDefined();
                (0, globals_1.expect)(alert.message).toBeDefined();
                done();
            });
            // Trigger critical threat (weight corruption)
            const corruptWeights = Buffer.from('corrupted data');
            securityValidator.validateNeuralWeights(corruptWeights, 'wrong_checksum');
        });
    });
    (0, globals_1.describe)('Audit Logging', () => {
        (0, globals_1.it)('should log security events', () => {
            // Trigger some security events
            securityValidator.validateSQLParameters("SELECT * FROM test", ["safe_param"]);
            securityValidator.checkRateLimit("test_user");
            const logs = securityValidator.getAuditLogs();
            (0, globals_1.expect)(logs.length).toBeGreaterThan(0);
            const sqlLog = logs.find(log => log.action === 'sql_validation');
            (0, globals_1.expect)(sqlLog).toBeDefined();
            (0, globals_1.expect)(sqlLog.timestamp).toBeDefined();
            (0, globals_1.expect)(sqlLog.details).toBeDefined();
        });
        (0, globals_1.it)('should filter audit logs correctly', () => {
            // Generate some logs
            securityValidator.validateSQLParameters("SELECT * FROM test", ["param1"]);
            securityValidator.checkRateLimit("user1");
            securityValidator.validateNeuralInput(new Float32Array([1, 2, 3]));
            const sqlLogs = securityValidator.getAuditLogs({ action: 'sql_validation' });
            const rateLimitLogs = securityValidator.getAuditLogs({ action: 'rate_limit_check' });
            (0, globals_1.expect)(sqlLogs.every(log => log.action === 'sql_validation')).toBe(true);
            // Note: rate_limit_check might not exist if no events triggered
        });
        (0, globals_1.it)('should respect time-based filtering', () => {
            const startTime = Date.now();
            securityValidator.validateSQLParameters("SELECT * FROM test", ["param"]);
            const recentLogs = securityValidator.getAuditLogs({ startTime });
            const oldLogs = securityValidator.getAuditLogs({ endTime: startTime - 1000 });
            (0, globals_1.expect)(recentLogs.length).toBeGreaterThan(0);
            (0, globals_1.expect)(oldLogs.length).toBe(0);
        });
    });
    (0, globals_1.describe)('Security Compliance Report', () => {
        (0, globals_1.it)('should generate comprehensive security report', () => {
            // Generate some security activity
            securityValidator.validateSQLParameters("SELECT * FROM test", ["safe"]);
            securityValidator.checkRateLimit("user1");
            securityValidator.validateNeuralInput(new Float32Array([1, 2, 3]));
            const report = securityValidator.generateSecurityReport();
            (0, globals_1.expect)(report.summary).toBeDefined();
            (0, globals_1.expect)(report.summary.totalAuditEvents).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(report.summary.rateLimit.enabled).toBe(true);
            (0, globals_1.expect)(report.summary.encryption.enabled).toBe(true);
            (0, globals_1.expect)(report.summary.encryption.keyLength).toBe(256); // 32 bytes * 8
            (0, globals_1.expect)(report.recommendations).toBeDefined();
            (0, globals_1.expect)(Array.isArray(report.recommendations)).toBe(true);
            (0, globals_1.expect)(report.recommendations.length).toBeGreaterThan(0);
            (0, globals_1.expect)(report.recentAlerts).toBeDefined();
            (0, globals_1.expect)(Array.isArray(report.recentAlerts)).toBe(true);
        });
        (0, globals_1.it)('should track critical and high-risk events', () => {
            // Trigger high-risk events
            securityValidator.validateSQLParameters("SELECT * FROM test", ["'; DROP TABLE test; --"]);
            securityValidator.validateNeuralWeights(Buffer.from('corrupt'), 'wrong');
            const report = securityValidator.generateSecurityReport();
            (0, globals_1.expect)(report.summary.criticalEvents).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(report.summary.highRiskEvents).toBeGreaterThanOrEqual(0);
        });
    });
    (0, globals_1.describe)('Performance Impact', () => {
        (0, globals_1.it)('should validate inputs within performance thresholds', () => {
            const startTime = performance.now();
            // Test multiple validation operations
            for (let i = 0; i < 100; i++) {
                securityValidator.validateSQLParameters("SELECT * FROM test WHERE id = ?", [`param${i}`]);
                securityValidator.validateNeuralInput(new Float32Array([Math.random(), Math.random()]));
                securityValidator.checkRateLimit(`user${i % 10}`);
            }
            const duration = performance.now() - startTime;
            // Should complete 100 validations in under 100ms
            (0, globals_1.expect)(duration).toBeLessThan(100);
        });
        (0, globals_1.it)('should handle large datasets efficiently', () => {
            const largeInput = new Float32Array(1000).fill(0.5);
            const startTime = performance.now();
            const result = securityValidator.validateNeuralInput(largeInput);
            const duration = performance.now() - startTime;
            (0, globals_1.expect)(duration).toBeLessThan(10); // Should validate 1000 elements in under 10ms
            (0, globals_1.expect)(result.isValid).toBe(true);
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.it)('should handle empty inputs gracefully', () => {
            (0, globals_1.expect)(() => {
                securityValidator.validateSQLParameters("", []);
                securityValidator.validateNeuralInput(new Float32Array(0));
                securityValidator.checkRateLimit("");
            }).not.toThrow();
        });
        (0, globals_1.it)('should handle null and undefined inputs', () => {
            (0, globals_1.expect)(() => {
                securityValidator.validateSQLParameters("SELECT 1", [null, undefined]);
            }).not.toThrow();
        });
        (0, globals_1.it)('should handle malformed data gracefully', () => {
            (0, globals_1.expect)(() => {
                securityValidator.decryptData("malformed:data:format:extra");
            }).toThrow();
            (0, globals_1.expect)(() => {
                securityValidator.validateNeuralWeights(Buffer.from("invalid"), "checksum");
            }).not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,