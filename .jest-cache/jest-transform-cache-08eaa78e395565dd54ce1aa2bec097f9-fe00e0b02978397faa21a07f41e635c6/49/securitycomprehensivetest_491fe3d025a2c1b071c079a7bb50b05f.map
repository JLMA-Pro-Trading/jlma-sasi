{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/security/security-comprehensive.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/security/security-comprehensive.test.ts"],"sourcesContent":["/**\n * Comprehensive Security Test Suite\n * Tests all security measures implemented in the neural agent system\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { SecurityValidator } from '../../src/security/SecurityValidator';\nimport { SecurityMonitor } from '../../src/security/SecurityMonitor';\nimport * as crypto from 'crypto';\n\ndescribe('Security Test Suite', () => {\n  let securityValidator: SecurityValidator;\n  let securityMonitor: SecurityMonitor;\n\n  beforeEach(() => {\n    securityValidator = new SecurityValidator({\n      enableInputValidation: true,\n      enableRateLimiting: true,\n      enableAuditLogging: true,\n      maxInputSize: 1024,\n      rateLimitWindow: 60,\n      rateLimitMaxRequests: 10\n    });\n    \n    securityMonitor = new SecurityMonitor(securityValidator);\n  });\n\n  afterEach(() => {\n    securityMonitor.stop();\n  });\n\n  describe('SQL Injection Prevention', () => {\n    it('should detect SQL injection attempts', () => {\n      const maliciousQuery = \"SELECT * FROM users WHERE id = ?\";\n      const maliciousParams = [\"1; DROP TABLE users; --\"];\n\n      const result = securityValidator.validateSQLParameters(maliciousQuery, maliciousParams);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors[0]).toContain('SQL injection');\n      expect(result.securityScore).toBeLessThan(100);\n    });\n\n    it('should sanitize SQL parameters', () => {\n      const query = \"SELECT * FROM agents WHERE type = ?\";\n      const params = [\"'malicious'; DROP TABLE agents; --\"];\n\n      const result = securityValidator.validateSQLParameters(query, params);\n\n      expect(result.sanitizedInput).toBeDefined();\n      expect(result.sanitizedInput![0]).not.toContain(\"'\");\n      expect(result.sanitizedInput![0]).not.toContain(\";\");\n      expect(result.sanitizedInput![0]).not.toContain(\"--\");\n    });\n\n    it('should handle safe SQL parameters correctly', () => {\n      const query = \"SELECT * FROM agents WHERE id = ? AND type = ?\";\n      const params = [\"agent123\", \"neural\"];\n\n      const result = securityValidator.validateSQLParameters(query, params);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors.length).toBe(0);\n      expect(result.securityScore).toBe(100);\n    });\n\n    it('should reject oversized parameters', () => {\n      const query = \"SELECT * FROM agents WHERE description = ?\";\n      const largeParam = \"x\".repeat(2000); // Exceeds 1024 limit\n      const params = [largeParam];\n\n      const result = securityValidator.validateSQLParameters(query, params);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.includes('exceeds maximum length'))).toBe(true);\n    });\n  });\n\n  describe('Neural Input Validation', () => {\n    it('should validate normal neural inputs', () => {\n      const inputs = new Float32Array([0.5, -0.3, 0.8, 0.1]);\n\n      const result = securityValidator.validateNeuralInput(inputs);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors.length).toBe(0);\n      expect(result.securityScore).toBe(100);\n    });\n\n    it('should detect oversized neural inputs', () => {\n      const inputs = new Float32Array(15000); // Too large\n\n      const result = securityValidator.validateNeuralInput(inputs);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.includes('too large'))).toBe(true);\n      expect(result.securityScore).toBeLessThan(100);\n    });\n\n    it('should detect NaN and Infinity values', () => {\n      const inputs = new Float32Array([0.5, NaN, Infinity, -Infinity]);\n\n      const result = securityValidator.validateNeuralInput(inputs);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.includes('Invalid values'))).toBe(true);\n      expect(result.sanitizedInput).toBeDefined();\n      \n      const sanitized = result.sanitizedInput as Float32Array;\n      expect(isFinite(sanitized[1])).toBe(true); // NaN should be replaced\n      expect(isFinite(sanitized[2])).toBe(true); // Infinity should be replaced\n    });\n\n    it('should clamp extreme values', () => {\n      const inputs = new Float32Array([5000, -3000, 0.5]);\n\n      const result = securityValidator.validateNeuralInput(inputs);\n\n      expect(result.sanitizedInput).toBeDefined();\n      const sanitized = result.sanitizedInput as Float32Array;\n      expect(sanitized[0]).toBeLessThanOrEqual(1000);\n      expect(sanitized[1]).toBeGreaterThanOrEqual(-1000);\n      expect(sanitized[2]).toBe(0.5); // Normal value unchanged\n    });\n  });\n\n  describe('Neural Weight Integrity', () => {\n    it('should validate weight integrity with correct checksum', () => {\n      const weights = Buffer.from(new Float32Array([0.1, 0.2, 0.3, 0.4]).buffer);\n      const checksum = crypto.createHash('sha256').update(weights).digest('hex');\n\n      const result = securityValidator.validateNeuralWeights(weights, checksum);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors.length).toBe(0);\n      expect(result.securityScore).toBe(100);\n    });\n\n    it('should detect weight corruption', () => {\n      const weights = Buffer.from(new Float32Array([0.1, 0.2, 0.3, 0.4]).buffer);\n      const wrongChecksum = 'incorrect_checksum';\n\n      const result = securityValidator.validateNeuralWeights(weights, wrongChecksum);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.includes('integrity check failed'))).toBe(true);\n      expect(result.securityScore).toBe(0);\n    });\n\n    it('should detect suspicious weight patterns', () => {\n      // Create weights with all zeros (suspicious pattern)\n      const suspiciousWeights = Buffer.from(new Float32Array(1000).fill(0).buffer);\n      const checksum = crypto.createHash('sha256').update(suspiciousWeights).digest('hex');\n\n      const result = securityValidator.validateNeuralWeights(suspiciousWeights, checksum);\n\n      expect(result.errors.some(e => e.includes('Suspicious weight patterns'))).toBe(true);\n      expect(result.securityScore).toBeLessThan(100);\n    });\n\n    it('should reject oversized weight data', () => {\n      const largeWeights = Buffer.alloc(200 * 1024 * 1024); // 200MB\n      const checksum = crypto.createHash('sha256').update(largeWeights).digest('hex');\n\n      const result = securityValidator.validateNeuralWeights(largeWeights, checksum);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.includes('too large'))).toBe(true);\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should allow requests within limit', () => {\n      const identifier = 'test_user';\n\n      for (let i = 0; i < 5; i++) {\n        const result = securityValidator.checkRateLimit(identifier);\n        expect(result.isValid).toBe(true);\n      }\n    });\n\n    it('should block requests exceeding limit', () => {\n      const identifier = 'heavy_user';\n\n      // Make requests up to the limit\n      for (let i = 0; i < 10; i++) {\n        securityValidator.checkRateLimit(identifier);\n      }\n\n      // Next request should be blocked\n      const result = securityValidator.checkRateLimit(identifier);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.includes('Rate limit exceeded'))).toBe(true);\n      expect(result.securityScore).toBe(0);\n    });\n\n    it('should reset rate limit after window', async () => {\n      // This test would require time manipulation in a real scenario\n      // For now, we'll test the basic functionality\n      const validator = new SecurityValidator({\n        rateLimitWindow: 1, // 1 second window\n        rateLimitMaxRequests: 2\n      });\n\n      const identifier = 'test_reset';\n      \n      // Use up the limit\n      validator.checkRateLimit(identifier);\n      validator.checkRateLimit(identifier);\n      \n      let result = validator.checkRateLimit(identifier);\n      expect(result.isValid).toBe(false);\n\n      // Wait for window to reset (in real test, would use fake timers)\n      await new Promise(resolve => setTimeout(resolve, 1100));\n      \n      result = validator.checkRateLimit(identifier);\n      expect(result.isValid).toBe(true);\n    });\n  });\n\n  describe('Encryption/Decryption', () => {\n    it('should encrypt and decrypt data correctly', () => {\n      const originalData = 'sensitive neural agent data';\n\n      const encrypted = securityValidator.encryptData(originalData);\n      expect(encrypted).not.toBe(originalData);\n      expect(encrypted.includes(':')).toBe(true); // Should have format iv:tag:data\n\n      const decrypted = securityValidator.decryptData(encrypted);\n      expect(decrypted).toBe(originalData);\n    });\n\n    it('should handle encryption of different data types', () => {\n      const testData = JSON.stringify({\n        agentId: 'agent123',\n        weights: [0.1, 0.2, 0.3],\n        metadata: { type: 'neural', version: '1.0' }\n      });\n\n      const encrypted = securityValidator.encryptData(testData);\n      const decrypted = securityValidator.decryptData(encrypted);\n      \n      expect(decrypted).toBe(testData);\n      const parsed = JSON.parse(decrypted);\n      expect(parsed.agentId).toBe('agent123');\n    });\n\n    it('should reject invalid encrypted data format', () => {\n      expect(() => {\n        securityValidator.decryptData('invalid_format');\n      }).toThrow('Invalid encrypted data format');\n    });\n  });\n\n  describe('Secure Random Generation', () => {\n    it('should generate cryptographically secure random numbers', () => {\n      const random1 = securityValidator.generateSecureRandom(100);\n      const random2 = securityValidator.generateSecureRandom(100);\n\n      expect(random1.length).toBe(100);\n      expect(random2.length).toBe(100);\n      \n      // Should not be identical (extremely unlikely with crypto random)\n      expect(random1).not.toEqual(random2);\n      \n      // Values should be in range [-0.5, 0.5]\n      for (let i = 0; i < random1.length; i++) {\n        expect(random1[i]).toBeGreaterThanOrEqual(-0.5);\n        expect(random1[i]).toBeLessThanOrEqual(0.5);\n      }\n    });\n\n    it('should generate different sequences each time', () => {\n      const sequences = Array.from({ length: 5 }, () => \n        securityValidator.generateSecureRandom(10)\n      );\n\n      // All sequences should be different\n      for (let i = 0; i < sequences.length; i++) {\n        for (let j = i + 1; j < sequences.length; j++) {\n          expect(sequences[i]).not.toEqual(sequences[j]);\n        }\n      }\n    });\n  });\n\n  describe('Security Monitoring', () => {\n    it('should start and stop monitoring', () => {\n      expect(securityMonitor.isWasmInitialized).toBeDefined();\n      \n      securityMonitor.start();\n      // Monitor should be running\n      \n      securityMonitor.stop();\n      // Monitor should be stopped\n    });\n\n    it('should collect security metrics', async () => {\n      securityMonitor.start();\n      \n      // Wait for metrics collection\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const dashboard = securityMonitor.getSecurityDashboard();\n      \n      expect(dashboard.currentMetrics).toBeDefined();\n      expect(dashboard.currentMetrics.systemHealth).toBeGreaterThanOrEqual(0);\n      expect(dashboard.currentMetrics.systemHealth).toBeLessThanOrEqual(100);\n      expect(dashboard.threatSummary).toBeDefined();\n      expect(dashboard.alertSummary).toBeDefined();\n    });\n\n    it('should detect and report threats', (done) => {\n      securityMonitor.start();\n      \n      securityMonitor.on('threat_detected', (threat) => {\n        expect(threat.id).toBeDefined();\n        expect(threat.type).toBeDefined();\n        expect(threat.severity).toBeDefined();\n        expect(threat.timestamp).toBeDefined();\n        done();\n      });\n      \n      // Trigger a threat by attempting SQL injection\n      securityValidator.validateSQLParameters(\n        \"SELECT * FROM users WHERE id = ?\",\n        [\"1; DROP TABLE users; --\"]\n      );\n    });\n\n    it('should create alerts for critical events', (done) => {\n      securityMonitor.start();\n      \n      securityMonitor.on('alert_created', (alert) => {\n        expect(alert.id).toBeDefined();\n        expect(alert.severity).toBeDefined();\n        expect(alert.category).toBeDefined();\n        expect(alert.message).toBeDefined();\n        done();\n      });\n      \n      // Trigger critical threat (weight corruption)\n      const corruptWeights = Buffer.from('corrupted data');\n      securityValidator.validateNeuralWeights(corruptWeights, 'wrong_checksum');\n    });\n  });\n\n  describe('Audit Logging', () => {\n    it('should log security events', () => {\n      // Trigger some security events\n      securityValidator.validateSQLParameters(\"SELECT * FROM test\", [\"safe_param\"]);\n      securityValidator.checkRateLimit(\"test_user\");\n      \n      const logs = securityValidator.getAuditLogs();\n      expect(logs.length).toBeGreaterThan(0);\n      \n      const sqlLog = logs.find(log => log.action === 'sql_validation');\n      expect(sqlLog).toBeDefined();\n      expect(sqlLog!.timestamp).toBeDefined();\n      expect(sqlLog!.details).toBeDefined();\n    });\n\n    it('should filter audit logs correctly', () => {\n      // Generate some logs\n      securityValidator.validateSQLParameters(\"SELECT * FROM test\", [\"param1\"]);\n      securityValidator.checkRateLimit(\"user1\");\n      securityValidator.validateNeuralInput(new Float32Array([1, 2, 3]));\n      \n      const sqlLogs = securityValidator.getAuditLogs({ action: 'sql_validation' });\n      const rateLimitLogs = securityValidator.getAuditLogs({ action: 'rate_limit_check' });\n      \n      expect(sqlLogs.every(log => log.action === 'sql_validation')).toBe(true);\n      // Note: rate_limit_check might not exist if no events triggered\n    });\n\n    it('should respect time-based filtering', () => {\n      const startTime = Date.now();\n      \n      securityValidator.validateSQLParameters(\"SELECT * FROM test\", [\"param\"]);\n      \n      const recentLogs = securityValidator.getAuditLogs({ startTime });\n      const oldLogs = securityValidator.getAuditLogs({ endTime: startTime - 1000 });\n      \n      expect(recentLogs.length).toBeGreaterThan(0);\n      expect(oldLogs.length).toBe(0);\n    });\n  });\n\n  describe('Security Compliance Report', () => {\n    it('should generate comprehensive security report', () => {\n      // Generate some security activity\n      securityValidator.validateSQLParameters(\"SELECT * FROM test\", [\"safe\"]);\n      securityValidator.checkRateLimit(\"user1\");\n      securityValidator.validateNeuralInput(new Float32Array([1, 2, 3]));\n      \n      const report = securityValidator.generateSecurityReport();\n      \n      expect(report.summary).toBeDefined();\n      expect(report.summary.totalAuditEvents).toBeGreaterThanOrEqual(0);\n      expect(report.summary.rateLimit.enabled).toBe(true);\n      expect(report.summary.encryption.enabled).toBe(true);\n      expect(report.summary.encryption.keyLength).toBe(256); // 32 bytes * 8\n      \n      expect(report.recommendations).toBeDefined();\n      expect(Array.isArray(report.recommendations)).toBe(true);\n      expect(report.recommendations.length).toBeGreaterThan(0);\n      \n      expect(report.recentAlerts).toBeDefined();\n      expect(Array.isArray(report.recentAlerts)).toBe(true);\n    });\n\n    it('should track critical and high-risk events', () => {\n      // Trigger high-risk events\n      securityValidator.validateSQLParameters(\"SELECT * FROM test\", [\"'; DROP TABLE test; --\"]);\n      securityValidator.validateNeuralWeights(Buffer.from('corrupt'), 'wrong');\n      \n      const report = securityValidator.generateSecurityReport();\n      \n      expect(report.summary.criticalEvents).toBeGreaterThanOrEqual(0);\n      expect(report.summary.highRiskEvents).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Performance Impact', () => {\n    it('should validate inputs within performance thresholds', () => {\n      const startTime = performance.now();\n      \n      // Test multiple validation operations\n      for (let i = 0; i < 100; i++) {\n        securityValidator.validateSQLParameters(\"SELECT * FROM test WHERE id = ?\", [`param${i}`]);\n        securityValidator.validateNeuralInput(new Float32Array([Math.random(), Math.random()]));\n        securityValidator.checkRateLimit(`user${i % 10}`);\n      }\n      \n      const duration = performance.now() - startTime;\n      \n      // Should complete 100 validations in under 100ms\n      expect(duration).toBeLessThan(100);\n    });\n\n    it('should handle large datasets efficiently', () => {\n      const largeInput = new Float32Array(1000).fill(0.5);\n      const startTime = performance.now();\n      \n      const result = securityValidator.validateNeuralInput(largeInput);\n      \n      const duration = performance.now() - startTime;\n      \n      expect(duration).toBeLessThan(10); // Should validate 1000 elements in under 10ms\n      expect(result.isValid).toBe(true);\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle empty inputs gracefully', () => {\n      expect(() => {\n        securityValidator.validateSQLParameters(\"\", []);\n        securityValidator.validateNeuralInput(new Float32Array(0));\n        securityValidator.checkRateLimit(\"\");\n      }).not.toThrow();\n    });\n\n    it('should handle null and undefined inputs', () => {\n      expect(() => {\n        securityValidator.validateSQLParameters(\"SELECT 1\", [null, undefined]);\n      }).not.toThrow();\n    });\n\n    it('should handle malformed data gracefully', () => {\n      expect(() => {\n        securityValidator.decryptData(\"malformed:data:format:extra\");\n      }).toThrow();\n      \n      expect(() => {\n        securityValidator.validateNeuralWeights(Buffer.from(\"invalid\"), \"checksum\");\n      }).not.toThrow();\n    });\n  });\n});"],"version":3}