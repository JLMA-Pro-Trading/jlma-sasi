e9def69520cdff9c9ff239ee5da04368
"use strict";
/**
 * Neural Agent Persistence Tests for Phase 2A
 * Tests SQLite persistence with performance thresholds and data integrity
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const sqlite_setup_1 = require("../sqlite-setup");
const performance_setup_1 = require("../performance-setup");
describe('Neural Agent Persistence', () => {
    let db;
    beforeEach(async () => {
        db = await sqlite_setup_1.sqliteTestUtils.createTestDatabase();
    });
    afterEach(async () => {
        if (db) {
            db.close();
        }
    });
    describe('Agent State Persistence', () => {
        test('should save agent state within performance threshold (<75ms)', async () => {
            const agentData = sqlite_setup_1.sqliteTestUtils.generateAgentStateData({
                id: 'test-agent-persistence-001',
                agent_type: 'mlp',
                neural_config: JSON.stringify({
                    type: 'mlp',
                    architecture: [10, 5, 1],
                    activationFunction: 'relu'
                })
            });
            const { duration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('agent-state-save', async () => {
                await new Promise((resolve, reject) => {
                    sqlite_setup_1.mockSQLiteDB.run('INSERT INTO agent_states (id, agent_type, neural_config, created_at, last_active) VALUES (?, ?, ?, ?, ?)', [agentData.id, agentData.agent_type, agentData.neural_config, agentData.created_at, agentData.last_active], (err) => err ? reject(err) : resolve(undefined));
                });
            });
            // Assert performance threshold
            expect(duration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE);
            // Verify data saved correctly
            const savedAgent = sqlite_setup_1.mockSQLiteDB.getTestData('agent_states')
                .find((agent) => agent.id === agentData.id);
            expect(savedAgent).toBeDefined();
            expect(savedAgent.agent_type).toBe(agentData.agent_type);
        });
        test('should load agent state within performance threshold (<100ms)', async () => {
            // Setup test data
            const agentData = sqlite_setup_1.sqliteTestUtils.generateAgentStateData();
            sqlite_setup_1.mockSQLiteDB.setTestData('agent_states', [agentData]);
            const { result, duration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('agent-state-load', async () => {
                return new Promise((resolve, reject) => {
                    sqlite_setup_1.mockSQLiteDB.get('SELECT * FROM agent_states WHERE id = ?', [agentData.id], (err, row) => err ? reject(err) : resolve(row));
                });
            });
            // Assert performance threshold
            expect(duration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.PERSISTENCE_LOAD);
            // Verify data loaded correctly
            expect(result).toBeDefined();
            expect(result.id).toBe(agentData.id);
        });
        test('should handle batch save operations efficiently', async () => {
            const agentCount = 10;
            const agentDataList = Array.from({ length: agentCount }, () => sqlite_setup_1.sqliteTestUtils.generateAgentStateData());
            const { duration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('batch-agent-save', async () => {
                for (const agentData of agentDataList) {
                    await new Promise((resolve, reject) => {
                        sqlite_setup_1.mockSQLiteDB.run('INSERT INTO agent_states (id, agent_type, neural_config, created_at, last_active) VALUES (?, ?, ?, ?, ?)', [agentData.id, agentData.agent_type, agentData.neural_config, agentData.created_at, agentData.last_active], (err) => err ? reject(err) : resolve(undefined));
                    });
                }
            });
            // Batch operations should complete within reasonable time
            expect(duration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.BATCH_PROCESSING);
            // Verify all agents saved
            const savedAgents = sqlite_setup_1.mockSQLiteDB.getTestData('agent_states');
            expect(savedAgents).toHaveLength(agentCount);
        });
    });
    describe('Neural Weights Persistence', () => {
        test('should save and load neural weights with data integrity', async () => {
            const agentId = 'weight-test-agent-001';
            const weights = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5]);
            const biases = new Float32Array([0.01, 0.02]);
            const agentData = sqlite_setup_1.sqliteTestUtils.generateAgentStateData({
                id: agentId,
                weights: Buffer.from(weights.buffer),
                biases: Buffer.from(biases.buffer)
            });
            // Save weights
            const { duration: saveDuration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('weights-save', async () => {
                await new Promise((resolve, reject) => {
                    sqlite_setup_1.mockSQLiteDB.run('INSERT INTO agent_states (id, agent_type, neural_config, weights, biases, created_at, last_active) VALUES (?, ?, ?, ?, ?, ?, ?)', [agentData.id, agentData.agent_type, agentData.neural_config, agentData.weights, agentData.biases, agentData.created_at, agentData.last_active], (err) => err ? reject(err) : resolve(undefined));
                });
            });
            expect(saveDuration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE);
            // Load weights
            const { result: loadedAgent, duration: loadDuration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('weights-load', async () => {
                return new Promise((resolve, reject) => {
                    sqlite_setup_1.mockSQLiteDB.get('SELECT * FROM agent_states WHERE id = ?', [agentId], (err, row) => err ? reject(err) : resolve(row));
                });
            });
            expect(loadDuration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.PERSISTENCE_LOAD);
            // Verify data integrity
            expect(loadedAgent).toBeDefined();
            expect(loadedAgent.id).toBe(agentId);
            // Note: In real implementation, you'd verify Buffer.from(weights.buffer) matches
        });
    });
    describe('Training Session Persistence', () => {
        test('should persist training sessions with performance metrics', async () => {
            const agentId = 'training-agent-001';
            const sessionData = sqlite_setup_1.sqliteTestUtils.generateTrainingSessionData(agentId, {
                epochs: 50,
                final_accuracy: 0.92,
                convergence_epoch: 35
            });
            const { duration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('training-session-save', async () => {
                await new Promise((resolve, reject) => {
                    sqlite_setup_1.mockSQLiteDB.run('INSERT INTO training_sessions (session_id, agent_id, start_time, end_time, epochs, data_points, final_accuracy) VALUES (?, ?, ?, ?, ?, ?, ?)', [sessionData.session_id, sessionData.agent_id, sessionData.start_time, sessionData.end_time, sessionData.epochs, sessionData.data_points, sessionData.final_accuracy], (err) => err ? reject(err) : resolve(undefined));
                });
            });
            expect(duration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.PERSISTENCE_SAVE);
            // Verify training session data integrity
            const savedSessions = sqlite_setup_1.mockSQLiteDB.getTestData('training_sessions');
            const savedSession = savedSessions.find((s) => s.session_id === sessionData.session_id);
            expect(savedSession).toBeDefined();
            expect(savedSession.final_accuracy).toBe(sessionData.final_accuracy);
        });
    });
    describe('Cross-Session Persistence', () => {
        test('should maintain data integrity across sessions', async () => {
            const agentId = 'cross-session-agent-001';
            const originalData = sqlite_setup_1.sqliteTestUtils.generateAgentStateData({
                id: agentId,
                total_inferences: 150,
                learning_progress: 0.85
            });
            // Simulate session 1: Save agent state
            sqlite_setup_1.mockSQLiteDB.setTestData('agent_states', [originalData]);
            // Simulate session end and restart
            const { duration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('cross-session-restore', async () => {
                return await sqlite_setup_1.sqliteTestUtils.validateCrossSessionPersistence(sqlite_setup_1.mockSQLiteDB, agentId);
            });
            expect(duration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.CROSS_SESSION_RESTORE);
            // Verify data persists across sessions
            const restoredAgent = sqlite_setup_1.mockSQLiteDB.getTestData('agent_states')
                .find((agent) => agent.id === agentId);
            expect(restoredAgent).toBeDefined();
            expect(restoredAgent.total_inferences).toBe(originalData.total_inferences);
            expect(restoredAgent.learning_progress).toBe(originalData.learning_progress);
        });
        test('should handle session interruption gracefully', async () => {
            const agentData = sqlite_setup_1.sqliteTestUtils.generateAgentStateData();
            // Simulate interrupted save operation
            try {
                await new Promise((resolve, reject) => {
                    sqlite_setup_1.mockSQLiteDB.run('INSERT INTO agent_states (id, agent_type, neural_config) VALUES (?, ?, ?)', [agentData.id, agentData.agent_type, agentData.neural_config], (err) => {
                        // Simulate interruption
                        reject(new Error('Session interrupted'));
                    });
                });
            }
            catch (error) {
                expect(error).toBeInstanceOf(Error);
            }
            // Verify no partial data is saved
            const savedAgents = sqlite_setup_1.mockSQLiteDB.getTestData('agent_states');
            const partialAgent = savedAgents.find((agent) => agent.id === agentData.id);
            expect(partialAgent).toBeUndefined();
        });
    });
    describe('Knowledge Sharing Persistence', () => {
        test('should persist knowledge sharing events efficiently', async () => {
            const sourceAgentId = 'source-agent-001';
            const targetAgentId = 'target-agent-001';
            const sharingData = sqlite_setup_1.sqliteTestUtils.generateKnowledgeSharingData(sourceAgentId, targetAgentId);
            const { duration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('knowledge-sharing-save', async () => {
                await new Promise((resolve, reject) => {
                    sqlite_setup_1.mockSQLiteDB.run('INSERT INTO knowledge_sharing (id, source_agent_id, target_agent_id, shared_at, knowledge_type, knowledge_data) VALUES (?, ?, ?, ?, ?, ?)', [sharingData.id, sharingData.source_agent_id, sharingData.target_agent_id, sharingData.shared_at, sharingData.knowledge_type, sharingData.knowledge_data], (err) => err ? reject(err) : resolve(undefined));
                });
            });
            expect(duration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.KNOWLEDGE_SHARING);
            // Verify knowledge sharing data
            const savedSharing = sqlite_setup_1.mockSQLiteDB.getTestData('knowledge_sharing');
            const savedEvent = savedSharing.find((event) => event.id === sharingData.id);
            expect(savedEvent).toBeDefined();
            expect(savedEvent.source_agent_id).toBe(sourceAgentId);
            expect(savedEvent.target_agent_id).toBe(targetAgentId);
        });
    });
    describe('Performance Metrics Persistence', () => {
        test('should track and persist performance metrics over time', async () => {
            const agentId = 'metrics-agent-001';
            const metricsData = Array.from({ length: 20 }, () => sqlite_setup_1.sqliteTestUtils.generatePerformanceMetrics(agentId));
            const { duration } = await performance_setup_1.performanceTestUtils.measureAsyncOperation('metrics-batch-save', async () => {
                for (const metric of metricsData) {
                    await new Promise((resolve, reject) => {
                        sqlite_setup_1.mockSQLiteDB.run('INSERT INTO performance_metrics (id, agent_id, metric_type, metric_value, recorded_at) VALUES (?, ?, ?, ?, ?)', [metric.id, metric.agent_id, metric.metric_type, metric.metric_value, metric.recorded_at], (err) => err ? reject(err) : resolve(undefined));
                    });
                }
            });
            expect(duration).toBeLessThan(performance_setup_1.PERFORMANCE_THRESHOLDS.BATCH_PROCESSING);
            // Verify metrics saved
            const savedMetrics = sqlite_setup_1.mockSQLiteDB.getTestData('performance_metrics');
            expect(savedMetrics).toHaveLength(metricsData.length);
            // Verify all metrics belong to correct agent
            savedMetrics.forEach((metric) => {
                expect(metric.agent_id).toBe(agentId);
            });
        });
    });
    describe('Database Migration and Schema Evolution', () => {
        test('should handle schema migrations without data loss', async () => {
            // Simulate old schema data
            const oldSchemaData = {
                id: 'migration-test-agent',
                agent_type: 'mlp',
                neural_config: '{"type":"mlp"}',
                created_at: Date.now()
            };
            sqlite_setup_1.mockSQLiteDB.setTestData('agent_states', [oldSchemaData]);
            // Simulate migration
            const migrationSteps = await sqlite_setup_1.sqliteTestUtils.testDataMigration('1.0.0', '2.0.0');
            expect(migrationSteps).toHaveLength(2); // Expected migration steps
            // Verify data preserved after migration
            const migratedData = sqlite_setup_1.mockSQLiteDB.getTestData('agent_states');
            const migratedAgent = migratedData.find((agent) => agent.id === oldSchemaData.id);
            expect(migratedAgent).toBeDefined();
            expect(migratedAgent.agent_type).toBe(oldSchemaData.agent_type);
        });
    });
    describe('Persistence Error Handling', () => {
        test('should handle database connection errors gracefully', async () => {
            // Mock database error
            const originalRun = sqlite_setup_1.mockSQLiteDB.run;
            sqlite_setup_1.mockSQLiteDB.run = globals_1.jest.fn().mockImplementation((sql, params, callback) => {
                callback(new Error('Database connection failed'));
            });
            const agentData = sqlite_setup_1.sqliteTestUtils.generateAgentStateData();
            await expect(new Promise((resolve, reject) => {
                sqlite_setup_1.mockSQLiteDB.run('INSERT INTO agent_states (id, agent_type) VALUES (?, ?)', [agentData.id, agentData.agent_type], (err) => err ? reject(err) : resolve(undefined));
            })).rejects.toThrow('Database connection failed');
            // Restore original function
            sqlite_setup_1.mockSQLiteDB.run = originalRun;
        });
        test('should validate data integrity on load', async () => {
            // Setup corrupted data
            const corruptedData = {
                id: 'corrupted-agent',
                agent_type: null, // Invalid data
                neural_config: 'invalid-json{',
                created_at: 'not-a-number'
            };
            sqlite_setup_1.mockSQLiteDB.setTestData('agent_states', [corruptedData]);
            const result = await new Promise((resolve, reject) => {
                sqlite_setup_1.mockSQLiteDB.get('SELECT * FROM agent_states WHERE id = ?', [corruptedData.id], (err, row) => err ? reject(err) : resolve(row));
            });
            // Verify corrupted data is detected
            expect(result).toBeDefined();
            expect(result.agent_type).toBeNull();
            expect(result.neural_config).toBe('invalid-json{');
        });
    });
});
// Hook for coordination tracking
afterEach(async () => {
    await new Promise(resolve => setTimeout(resolve, 10));
    const hookResult = await require('../coordination-setup').coordinationTestUtils.mockHooksExecution('post-edit', {
        file: 'neural-persistence.test.ts',
        operation: 'test_completion',
        performance: 'within_thresholds'
    });
    expect(hookResult.executed).toBe(true);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,