{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/McpService.ts","mappings":";AAAA;;GAEG;;;AAyDH,MAAM,UAAU;IAAhB;QACU;;;;mBAAkC,IAAI,GAAG,EAAE;WAAA;QAC3C;;;;mBAAsB;gBAC5B,aAAa,EAAE,CAAC;gBAChB,kBAAkB,EAAE,CAAC;gBACrB,cAAc,EAAE,CAAC;gBACjB,mBAAmB,EAAE,CAAC;gBACtB,MAAM,EAAE,CAAC;gBACT,WAAW,EAAE,CAAC;gBACd,UAAU,EAAE,CAAC;gBACb,aAAa,EAAE,IAAI,GAAG,EAAE;aACzB;WAAA;QACO;;;;;WAAoC;QACpC;;;;;WAAsC;IA+chD,CAAC;IA7cC,KAAK,CAAC,UAAU;QACd,IAAI,CAAC;YACH,kCAAkC;YAClC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA;YAE5B,0BAA0B;YAC1B,IAAI,CAAC,qBAAqB,EAAE,CAAA;YAE5B,2BAA2B;YAC3B,IAAI,CAAC,sBAAsB,EAAE,CAAA;YAE7B,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAA;QACrD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAA;YACzD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,IAAI,CAAC;YACH,4BAA4B;YAC5B,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAA;YAC5D,IAAI,gBAAgB,EAAE,CAAC;gBACrB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAA;YACzD,CAAC;YAED,0BAA0B;YAC1B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAA;YACxD,IAAI,cAAc,EAAE,CAAC;gBACnB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,EAAE,cAAc,CAAC,CAAA;YACrD,CAAC;YAED,8BAA8B;YAC9B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACpD,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC5B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;YACrC,CAAC,CAAC,CAAA;YAEF,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAA;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAA;YACtD,OAAO,EAAE,CAAA;QACX,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,sBAAsB;QAClC,IAAI,CAAC;YACH,oCAAoC;YACpC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;YAE7C,OAAO;gBACL,EAAE,EAAE,aAAa;gBACjB,IAAI,EAAE,aAAa;gBACnB,MAAM,EAAE,WAAW;gBACnB,OAAO,EAAE,gBAAgB;gBACzB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE;gBACpB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,KAAK;aACb,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAA;YAC3D,OAAO,IAAI,CAAA;QACb,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,oBAAoB;QAChC,IAAI,CAAC;YACH,kCAAkC;YAClC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;YAE3C,OAAO;gBACL,EAAE,EAAE,WAAW;gBACf,IAAI,EAAE,WAAW;gBACjB,MAAM,EAAE,WAAW;gBACnB,OAAO,EAAE,QAAQ;gBACjB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE;gBACpB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,KAAK;aACb,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAA;YACzD,OAAO,IAAI,CAAA;QACb,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,MAAM,OAAO,GAAgB,EAAE,CAAA;QAE/B,4DAA4D;QAC5D,IAAI,CAAC;YACH,8DAA8D;YAC9D,kDAAkD;YAClD,MAAM,WAAW,GAAG;gBAClB;oBACE,EAAE,EAAE,oBAAoB;oBACxB,IAAI,EAAE,oBAAoB;oBAC1B,MAAM,EAAE,OAAgB;oBACxB,OAAO,EAAE,OAAO;oBAChB,WAAW,EAAE,EAAE;oBACf,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM;oBAC7B,IAAI,EAAE,WAAoB;oBAC1B,KAAK,EAAE;wBACL;4BACE,IAAI,EAAE,kBAAkB;4BACxB,WAAW,EAAE,yBAAyB;4BACtC,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE;4BACrE,UAAU,EAAE,CAAC;4BACb,mBAAmB,EAAE,GAAG;4BACxB,WAAW,EAAE,IAAI;4BACjB,QAAQ,EAAE,QAAQ;yBACnB;qBACF;iBACF;aACF,CAAA;YAED,OAAO,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAA;QAC9B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAA;QAC3D,CAAC;QAED,OAAO,OAAO,CAAA;IAChB,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,sCAAsC;QACtC,OAAO;YACL;gBACE,IAAI,EAAE,8BAA8B;gBACpC,WAAW,EAAE,kDAAkD;gBAC/D,UAAU,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE;gBAC3E,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,GAAG;gBACxB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,cAAc;aACzB;YACD;gBACE,IAAI,EAAE,+BAA+B;gBACrC,WAAW,EAAE,8BAA8B;gBAC3C,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE;gBACrE,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,EAAE;gBACvB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,QAAQ;aACnB;YACD;gBACE,IAAI,EAAE,oCAAoC;gBAC1C,WAAW,EAAE,oCAAoC;gBACjD,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE;gBACtE,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,GAAG;gBACxB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,iCAAiC;gBACvC,WAAW,EAAE,6BAA6B;gBAC1C,UAAU,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE;gBACjC,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,EAAE;gBACvB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,QAAQ;aACnB;YACD;gBACE,IAAI,EAAE,gCAAgC;gBACtC,WAAW,EAAE,kCAAkC;gBAC/C,UAAU,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE;gBAChE,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,EAAE;gBACvB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,QAAQ;aACnB;YACD;gBACE,IAAI,EAAE,sCAAsC;gBAC5C,WAAW,EAAE,8BAA8B;gBAC3C,UAAU,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE;gBACrD,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,GAAG;gBACxB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,aAAa;aACxB;SACF,CAAA;IACH,CAAC;IAEO,KAAK,CAAC,gBAAgB;QAC5B,oCAAoC;QACpC,OAAO;YACL;gBACE,IAAI,EAAE,4BAA4B;gBAClC,WAAW,EAAE,gDAAgD;gBAC7D,UAAU,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE;gBAC3E,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,GAAG;gBACxB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,cAAc;aACzB;YACD;gBACE,IAAI,EAAE,6BAA6B;gBACnC,WAAW,EAAE,gCAAgC;gBAC7C,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE;gBACrD,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,GAAG;gBACxB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,QAAQ;aACnB;YACD;gBACE,IAAI,EAAE,kCAAkC;gBACxC,WAAW,EAAE,qCAAqC;gBAClD,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE;gBACtE,UAAU,EAAE,CAAC;gBACb,mBAAmB,EAAE,GAAG;gBACxB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,+BAA+B;gBACrC,WAAW,EAAE,iDAAiD;gBAC9D,UAAU,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE;gBACjC,UAAU,EAAE,EAAE;gBACd,mBAAmB,EAAE,GAAG;gBACxB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,QAAQ;aACnB;SACF,CAAA;IACH,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAgB,EAAE,QAAgB,EAAE,UAA+B;QACnF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAEzC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,UAAU,QAAQ,YAAY,CAAC,CAAA;QACjD,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAA;QACxD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,QAAQ,QAAQ,wBAAwB,QAAQ,EAAE,CAAC,CAAA;QACrE,CAAC;QAED,IAAI,CAAC;YACH,mBAAmB;YACnB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAA;YACxE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YAEvC,iBAAiB;YACjB,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAA;YAE1D,OAAO;gBACL,QAAQ;gBACR,UAAU;gBACV,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,MAAM;gBAChB,QAAQ;aACT,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YAEvC,iBAAiB;YACjB,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAA;YAE3D,OAAO;gBACL,QAAQ;gBACR,UAAU;gBACV,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,IAAI;gBACd,QAAQ;gBACR,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAA;QACH,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,MAAiB,EAAE,IAAa,EAAE,UAA+B;QAClG,+CAA+C;QAC/C,QAAQ,MAAM,CAAC,IAAI,EAAE,CAAC;YACpB,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAA;YACxD,KAAK,WAAW;gBACd,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAA;YAC5D,KAAK,KAAK;gBACR,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAA;YACtD;gBACE,MAAM,IAAI,KAAK,CAAC,4BAA4B,MAAM,CAAC,IAAI,EAAE,CAAC,CAAA;QAC9D,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,MAAiB,EAAE,IAAa,EAAE,UAA+B;QAC9F,gCAAgC;QAChC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;QAE5E,6CAA6C;QAC7C,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjC,OAAO;gBACL,MAAM,EAAE,QAAQ;gBAChB,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;gBAC3B,OAAO,EAAE;oBACP,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;oBACxB,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;oBAC3B,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;iBAC5C;aACF,CAAA;QACH,CAAC;QAED,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC/B,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,SAAS,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC9B,QAAQ,EAAE,UAAU,CAAC,QAAQ,IAAI,MAAM;gBACvC,MAAM,EAAE,UAAU,CAAC,SAAS,IAAI,CAAC;aAClC,CAAA;QACH,CAAC;QAED,OAAO;YACL,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,QAAQ,IAAI,CAAC,IAAI,wBAAwB;YACjD,UAAU;SACX,CAAA;IACH,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,MAAiB,EAAE,IAAa,EAAE,UAA+B;QAClG,oCAAoC;QACpC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;QAE5E,OAAO;YACL,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,kBAAkB,IAAI,CAAC,IAAI,WAAW;YAC9C,UAAU;SACX,CAAA;IACH,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,MAAiB,EAAE,IAAa,EAAE,UAA+B;QAC5F,8BAA8B;QAC9B,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;QAE5E,OAAO;YACL,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,YAAY,IAAI,CAAC,IAAI,WAAW;YACxC,UAAU;SACX,CAAA;IACH,CAAC;IAEO,iBAAiB,CAAC,QAAgB,EAAE,QAAgB,EAAE,QAAgB,EAAE,OAAgB;QAC9F,wBAAwB;QACxB,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAA;QAC5B,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAA;QACnC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAA;QAC/B,CAAC;QAED,+BAA+B;QAC/B,IAAI,CAAC,OAAO,CAAC,mBAAmB,GAAG,CACjC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;YAChF,IAAI,CAAC,OAAO,CAAC,aAAa,CAC3B,CAAA;QAED,wBAAwB;QACxB,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAC5D,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,aAAa,GAAG;gBACd,QAAQ;gBACR,YAAY,EAAE,CAAC;gBACf,UAAU,EAAE,CAAC;gBACb,YAAY,EAAE,CAAC;gBACf,WAAW,EAAE,IAAI,IAAI,EAAE;gBACvB,MAAM,EAAE,GAAG;aACZ,CAAA;YACD,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAA;QACzD,CAAC;QAED,aAAa,CAAC,YAAY,EAAE,CAAA;QAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,aAAa,CAAC,UAAU,EAAE,CAAA;QAC5B,CAAC;QACD,aAAa,CAAC,YAAY,GAAG,CAC3B,CAAC,aAAa,CAAC,YAAY,GAAG,CAAC,aAAa,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;YAC1E,aAAa,CAAC,YAAY,CAC3B,CAAA;QACD,aAAa,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAA;QACtC,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAA;QAEvG,0BAA0B;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACzC,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAA;YACxD,IAAI,IAAI,EAAE,CAAC;gBACT,IAAI,CAAC,UAAU,EAAE,CAAA;gBACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAA;gBAC1B,IAAI,CAAC,mBAAmB,GAAG,CACzB,CAAC,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;oBAC7D,IAAI,CAAC,UAAU,CAChB,CAAA;gBACD,IAAI,CAAC,WAAW,GAAG,OAAO;oBACxB,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU;oBACpE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAA;YAClE,CAAC;QACH,CAAC;IACH,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,GAAG,EAAE;YAC1C,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAC5B,CAAC,EAAE,KAAK,CAAC,CAAA,CAAC,yBAAyB;IACrC,CAAC;IAEO,sBAAsB;QAC5B,IAAI,CAAC,qBAAqB,GAAG,WAAW,CAAC,GAAG,EAAE;YAC5C,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAC5B,CAAC,EAAE,IAAI,CAAC,CAAA,CAAC,yBAAyB;IACpC,CAAC;IAEO,KAAK,CAAC,mBAAmB;QAC/B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;YAC3C,IAAI,CAAC;gBACH,wBAAwB;gBACxB,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;gBAE3E,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;gBAC5B,MAAM,CAAC,MAAM,GAAG,WAAW,CAAA;gBAC3B,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;YACpF,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,CAAC,MAAM,GAAG,OAAO,CAAA;gBACvB,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC,CAAA;YAC3D,CAAC;QACH,CAAC;IACH,CAAC;IAEO,mBAAmB;QACzB,kCAAkC;QAClC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,CAAA,CAAC,UAAU;QACvD,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,CAAA,CAAC,KAAK;QAC1D,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,KAAK,CAAA;IACrE,CAAC;IAED,UAAU;QACR,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAA;IAC1C,CAAC;IAED,SAAS,CAAC,EAAU;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IAC7B,CAAC;IAED,UAAU;QACR,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAA;IAC/B,CAAC;IAED,OAAO;QACL,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;QACzC,CAAC;QACD,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/B,aAAa,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;QAC3C,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;IACtB,CAAC;CACF;AAEY,QAAA,UAAU,GAAG,IAAI,UAAU,EAAE,CAAA;AAC1C,kBAAe,kBAAU,CAAA","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/McpService.ts"],"sourcesContent":["/**\n * MCP Service for managing MCP server connections and tool executions\n */\n\nexport interface McpServer {\n  id: string\n  name: string\n  status: 'connected' | 'disconnected' | 'error'\n  version: string\n  tools: McpTool[]\n  healthScore: number\n  lastPing: number\n  uri?: string\n  type?: 'stdio' | 'sse' | 'websocket'\n  config?: any\n}\n\nexport interface McpTool {\n  name: string\n  description: string\n  parameters: Record<string, any>\n  lastUsed?: Date\n  usageCount: number\n  averageResponseTime: number\n  successRate: number\n  category: string\n  schema?: any\n}\n\nexport interface McpMetrics {\n  totalRequests: number\n  successfulRequests: number\n  failedRequests: number\n  averageResponseTime: number\n  uptime: number\n  memoryUsage: number\n  tokenUsage: number\n  serverMetrics: Map<string, ServerMetrics>\n}\n\nexport interface ServerMetrics {\n  serverId: string\n  requestCount: number\n  errorCount: number\n  responseTime: number\n  lastRequest: Date\n  health: number\n}\n\nexport interface McpExecutionResult {\n  toolName: string\n  parameters: Record<string, any>\n  timestamp: Date\n  success: boolean\n  response: any\n  duration: number\n  error?: string\n}\n\nclass McpService {\n  private servers: Map<string, McpServer> = new Map()\n  private metrics: McpMetrics = {\n    totalRequests: 0,\n    successfulRequests: 0,\n    failedRequests: 0,\n    averageResponseTime: 0,\n    uptime: 0,\n    memoryUsage: 0,\n    tokenUsage: 0,\n    serverMetrics: new Map()\n  }\n  private healthCheckInterval?: NodeJS.Timeout\n  private metricsUpdateInterval?: NodeJS.Timeout\n\n  async initialize(): Promise<void> {\n    try {\n      // Initialize MCP server discovery\n      await this.discoverServers()\n      \n      // Start health monitoring\n      this.startHealthMonitoring()\n      \n      // Start metrics collection\n      this.startMetricsCollection()\n      \n      console.log('MCP Service initialized successfully')\n    } catch (error) {\n      console.error('Failed to initialize MCP service:', error)\n      throw error\n    }\n  }\n\n  async discoverServers(): Promise<McpServer[]> {\n    try {\n      // Check for Claude Flow MCP\n      const claudeFlowServer = await this.detectClaudeFlowServer()\n      if (claudeFlowServer) {\n        this.servers.set(claudeFlowServer.id, claudeFlowServer)\n      }\n\n      // Check for RUV Swarm MCP\n      const ruvSwarmServer = await this.detectRuvSwarmServer()\n      if (ruvSwarmServer) {\n        this.servers.set(ruvSwarmServer.id, ruvSwarmServer)\n      }\n\n      // Check for other MCP servers\n      const otherServers = await this.detectOtherServers()\n      otherServers.forEach(server => {\n        this.servers.set(server.id, server)\n      })\n\n      return Array.from(this.servers.values())\n    } catch (error) {\n      console.error('Error discovering MCP servers:', error)\n      return []\n    }\n  }\n\n  private async detectClaudeFlowServer(): Promise<McpServer | null> {\n    try {\n      // Check if Claude Flow is available\n      const tools = await this.getClaudeFlowTools()\n      \n      return {\n        id: 'claude-flow',\n        name: 'Claude Flow',\n        status: 'connected',\n        version: '2.0.0-alpha.43',\n        healthScore: 95,\n        lastPing: Date.now(),\n        type: 'stdio',\n        tools: tools\n      }\n    } catch (error) {\n      console.warn('Claude Flow MCP server not detected:', error)\n      return null\n    }\n  }\n\n  private async detectRuvSwarmServer(): Promise<McpServer | null> {\n    try {\n      // Check if RUV Swarm is available\n      const tools = await this.getRuvSwarmTools()\n      \n      return {\n        id: 'ruv-swarm',\n        name: 'RUV Swarm',\n        status: 'connected',\n        version: '1.0.14',\n        healthScore: 87,\n        lastPing: Date.now(),\n        type: 'stdio',\n        tools: tools\n      }\n    } catch (error) {\n      console.warn('RUV Swarm MCP server not detected:', error)\n      return null\n    }\n  }\n\n  private async detectOtherServers(): Promise<McpServer[]> {\n    const servers: McpServer[] = []\n    \n    // Check for additional MCP servers that might be configured\n    try {\n      // This would typically read from configuration or environment\n      // For now, we'll simulate some common MCP servers\n      const mockServers = [\n        {\n          id: 'github-integration',\n          name: 'GitHub Integration',\n          status: 'error' as const,\n          version: '1.2.3',\n          healthScore: 45,\n          lastPing: Date.now() - 120000,\n          type: 'websocket' as const,\n          tools: [\n            {\n              name: 'github_pr_manage',\n              description: 'Pull request management',\n              parameters: { repo: 'string', action: 'string', pr_number: 'number' },\n              usageCount: 8,\n              averageResponseTime: 445,\n              successRate: 67.3,\n              category: 'github'\n            }\n          ]\n        }\n      ]\n      \n      servers.push(...mockServers)\n    } catch (error) {\n      console.warn('Error detecting other MCP servers:', error)\n    }\n    \n    return servers\n  }\n\n  private async getClaudeFlowTools(): Promise<McpTool[]> {\n    // Simulate Claude Flow tool discovery\n    return [\n      {\n        name: 'mcp__claude-flow__swarm_init',\n        description: 'Initialize swarm with topology and configuration',\n        parameters: { topology: 'string', maxAgents: 'number', strategy: 'string' },\n        usageCount: 23,\n        averageResponseTime: 145,\n        successRate: 96.5,\n        category: 'coordination'\n      },\n      {\n        name: 'mcp__claude-flow__agent_spawn',\n        description: 'Create specialized AI agents',\n        parameters: { type: 'string', name: 'string', capabilities: 'array' },\n        usageCount: 18,\n        averageResponseTime: 89,\n        successRate: 98.2,\n        category: 'agents'\n      },\n      {\n        name: 'mcp__claude-flow__task_orchestrate',\n        description: 'Orchestrate complex task workflows',\n        parameters: { task: 'string', strategy: 'string', priority: 'string' },\n        usageCount: 31,\n        averageResponseTime: 203,\n        successRate: 94.8,\n        category: 'tasks'\n      },\n      {\n        name: 'mcp__claude-flow__neural_status',\n        description: 'Check neural network status',\n        parameters: { modelId: 'string' },\n        usageCount: 42,\n        averageResponseTime: 67,\n        successRate: 99.1,\n        category: 'neural'\n      },\n      {\n        name: 'mcp__claude-flow__memory_usage',\n        description: 'Store/retrieve persistent memory',\n        parameters: { action: 'string', key: 'string', value: 'string' },\n        usageCount: 35,\n        averageResponseTime: 78,\n        successRate: 97.8,\n        category: 'memory'\n      },\n      {\n        name: 'mcp__claude-flow__performance_report',\n        description: 'Generate performance reports',\n        parameters: { format: 'string', timeframe: 'string' },\n        usageCount: 12,\n        averageResponseTime: 234,\n        successRate: 92.1,\n        category: 'performance'\n      }\n    ]\n  }\n\n  private async getRuvSwarmTools(): Promise<McpTool[]> {\n    // Simulate RUV Swarm tool discovery\n    return [\n      {\n        name: 'mcp__ruv-swarm__swarm_init',\n        description: 'Initialize a new swarm with specified topology',\n        parameters: { topology: 'string', maxAgents: 'number', strategy: 'string' },\n        usageCount: 15,\n        averageResponseTime: 156,\n        successRate: 91.2,\n        category: 'coordination'\n      },\n      {\n        name: 'mcp__ruv-swarm__agent_spawn',\n        description: 'Spawn a new agent in the swarm',\n        parameters: { type: 'string', capabilities: 'array' },\n        usageCount: 12,\n        averageResponseTime: 134,\n        successRate: 88.7,\n        category: 'agents'\n      },\n      {\n        name: 'mcp__ruv-swarm__task_orchestrate',\n        description: 'Orchestrate a task across the swarm',\n        parameters: { task: 'string', strategy: 'string', priority: 'string' },\n        usageCount: 9,\n        averageResponseTime: 198,\n        successRate: 85.4,\n        category: 'tasks'\n      },\n      {\n        name: 'mcp__ruv-swarm__neural_status',\n        description: 'Get neural agent status and performance metrics',\n        parameters: { agentId: 'string' },\n        usageCount: 20,\n        averageResponseTime: 112,\n        successRate: 93.6,\n        category: 'neural'\n      }\n    ]\n  }\n\n  async executeTool(serverId: string, toolName: string, parameters: Record<string, any>): Promise<McpExecutionResult> {\n    const startTime = Date.now()\n    const server = this.servers.get(serverId)\n    \n    if (!server) {\n      throw new Error(`Server ${serverId} not found`)\n    }\n\n    const tool = server.tools.find(t => t.name === toolName)\n    if (!tool) {\n      throw new Error(`Tool ${toolName} not found on server ${serverId}`)\n    }\n\n    try {\n      // Execute the tool\n      const result = await this.performToolExecution(server, tool, parameters)\n      const duration = Date.now() - startTime\n      \n      // Update metrics\n      this.updateToolMetrics(serverId, toolName, duration, true)\n      \n      return {\n        toolName,\n        parameters,\n        timestamp: new Date(),\n        success: true,\n        response: result,\n        duration\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      \n      // Update metrics\n      this.updateToolMetrics(serverId, toolName, duration, false)\n      \n      return {\n        toolName,\n        parameters,\n        timestamp: new Date(),\n        success: false,\n        response: null,\n        duration,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  private async performToolExecution(server: McpServer, tool: McpTool, parameters: Record<string, any>): Promise<any> {\n    // Simulate tool execution based on server type\n    switch (server.type) {\n      case 'stdio':\n        return this.executeStdioTool(server, tool, parameters)\n      case 'websocket':\n        return this.executeWebSocketTool(server, tool, parameters)\n      case 'sse':\n        return this.executeSseTool(server, tool, parameters)\n      default:\n        throw new Error(`Unsupported server type: ${server.type}`)\n    }\n  }\n\n  private async executeStdioTool(server: McpServer, tool: McpTool, parameters: Record<string, any>): Promise<any> {\n    // Simulate stdio tool execution\n    await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 400))\n    \n    // Simulate different responses based on tool\n    if (tool.name.includes('status')) {\n      return {\n        status: 'active',\n        health: Math.random() * 100,\n        metrics: {\n          cpu: Math.random() * 100,\n          memory: Math.random() * 100,\n          connections: Math.floor(Math.random() * 50)\n        }\n      }\n    }\n    \n    if (tool.name.includes('init')) {\n      return {\n        success: true,\n        swarmId: `swarm-${Date.now()}`,\n        topology: parameters.topology || 'mesh',\n        agents: parameters.maxAgents || 5\n      }\n    }\n    \n    return {\n      success: true,\n      result: `Tool ${tool.name} executed successfully`,\n      parameters\n    }\n  }\n\n  private async executeWebSocketTool(server: McpServer, tool: McpTool, parameters: Record<string, any>): Promise<any> {\n    // Simulate WebSocket tool execution\n    await new Promise(resolve => setTimeout(resolve, 200 + Math.random() * 800))\n    \n    return {\n      success: true,\n      result: `WebSocket tool ${tool.name} executed`,\n      parameters\n    }\n  }\n\n  private async executeSseTool(server: McpServer, tool: McpTool, parameters: Record<string, any>): Promise<any> {\n    // Simulate SSE tool execution\n    await new Promise(resolve => setTimeout(resolve, 150 + Math.random() * 600))\n    \n    return {\n      success: true,\n      result: `SSE tool ${tool.name} executed`,\n      parameters\n    }\n  }\n\n  private updateToolMetrics(serverId: string, toolName: string, duration: number, success: boolean): void {\n    // Update global metrics\n    this.metrics.totalRequests++\n    if (success) {\n      this.metrics.successfulRequests++\n    } else {\n      this.metrics.failedRequests++\n    }\n    \n    // Update average response time\n    this.metrics.averageResponseTime = (\n      (this.metrics.averageResponseTime * (this.metrics.totalRequests - 1) + duration) /\n      this.metrics.totalRequests\n    )\n    \n    // Update server metrics\n    let serverMetrics = this.metrics.serverMetrics.get(serverId)\n    if (!serverMetrics) {\n      serverMetrics = {\n        serverId,\n        requestCount: 0,\n        errorCount: 0,\n        responseTime: 0,\n        lastRequest: new Date(),\n        health: 100\n      }\n      this.metrics.serverMetrics.set(serverId, serverMetrics)\n    }\n    \n    serverMetrics.requestCount++\n    if (!success) {\n      serverMetrics.errorCount++\n    }\n    serverMetrics.responseTime = (\n      (serverMetrics.responseTime * (serverMetrics.requestCount - 1) + duration) /\n      serverMetrics.requestCount\n    )\n    serverMetrics.lastRequest = new Date()\n    serverMetrics.health = Math.max(0, 100 - (serverMetrics.errorCount / serverMetrics.requestCount) * 100)\n    \n    // Update tool usage stats\n    const server = this.servers.get(serverId)\n    if (server) {\n      const tool = server.tools.find(t => t.name === toolName)\n      if (tool) {\n        tool.usageCount++\n        tool.lastUsed = new Date()\n        tool.averageResponseTime = (\n          (tool.averageResponseTime * (tool.usageCount - 1) + duration) /\n          tool.usageCount\n        )\n        tool.successRate = success\n          ? (tool.successRate * (tool.usageCount - 1) + 100) / tool.usageCount\n          : (tool.successRate * (tool.usageCount - 1)) / tool.usageCount\n      }\n    }\n  }\n\n  private startHealthMonitoring(): void {\n    this.healthCheckInterval = setInterval(() => {\n      this.performHealthChecks()\n    }, 30000) // Check every 30 seconds\n  }\n\n  private startMetricsCollection(): void {\n    this.metricsUpdateInterval = setInterval(() => {\n      this.updateSystemMetrics()\n    }, 5000) // Update every 5 seconds\n  }\n\n  private async performHealthChecks(): Promise<void> {\n    for (const server of this.servers.values()) {\n      try {\n        // Simulate health check\n        await new Promise(resolve => setTimeout(resolve, 50 + Math.random() * 200))\n        \n        server.lastPing = Date.now()\n        server.status = 'connected'\n        server.healthScore = Math.min(100, server.healthScore + (Math.random() - 0.3) * 5)\n      } catch (error) {\n        server.status = 'error'\n        server.healthScore = Math.max(0, server.healthScore - 10)\n      }\n    }\n  }\n\n  private updateSystemMetrics(): void {\n    // Simulate system metrics updates\n    this.metrics.uptime = Date.now() / 1000 / 60 // minutes\n    this.metrics.memoryUsage = Math.random() * 500 + 100 // MB\n    this.metrics.tokenUsage = Math.floor(Math.random() * 10000) + 20000\n  }\n\n  getServers(): McpServer[] {\n    return Array.from(this.servers.values())\n  }\n\n  getServer(id: string): McpServer | undefined {\n    return this.servers.get(id)\n  }\n\n  getMetrics(): McpMetrics {\n    return { ...this.metrics }\n  }\n\n  async refreshServers(): Promise<McpServer[]> {\n    return this.discoverServers()\n  }\n\n  destroy(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval)\n    }\n    if (this.metricsUpdateInterval) {\n      clearInterval(this.metricsUpdateInterval)\n    }\n    this.servers.clear()\n  }\n}\n\nexport const mcpService = new McpService()\nexport default mcpService"],"version":3}