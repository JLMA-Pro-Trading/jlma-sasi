{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/persistence/agent-persistence-manager.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/persistence/agent-persistence-manager.test.ts"],"sourcesContent":["/**\n * TDD Unit Tests for Agent Persistence Manager\n * Tests SQLite database operations with Phase 2A performance requirements\n */\n\nimport { performance } from 'perf_hooks';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { AgentPersistenceManager } from '../../../src/persistence/AgentPersistenceManager';\nimport type { AgentConfig, AgentState } from '../../../src/types/agent';\n\ndescribe('AgentPersistenceManager - TDD Implementation', () => {\n  let persistenceManager: AgentPersistenceManager;\n  let testDbPath: string;\n\n  beforeEach(async () => {\n    // Create unique test database for each test\n    testDbPath = path.join(__dirname, `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}.db`);\n    persistenceManager = new AgentPersistenceManager(testDbPath);\n    await persistenceManager.initialize();\n  });\n\n  afterEach(async () => {\n    // Clean up test database\n    if (persistenceManager) {\n      await persistenceManager.close();\n    }\n    if (fs.existsSync(testDbPath)) {\n      fs.unlinkSync(testDbPath);\n    }\n  });\n\n  describe('Database Initialization - TDD Red Phase', () => {\n    test('should create all required tables with proper schema', async () => {\n      // TDD: Testing database schema creation\n      const tables = await persistenceManager.getTables();\n      \n      expect(tables).toContain('agents');\n      expect(tables).toContain('neural_weights');\n      expect(tables).toContain('agent_memory');\n      expect(tables).toContain('agent_metrics');\n      expect(tables).toContain('session_state');\n    });\n\n    test('should create all required indexes for performance', async () => {\n      // TDD: Testing index creation for Phase 2A performance requirements\n      const indexes = await persistenceManager.getIndexes();\n      \n      expect(indexes).toContain('idx_agents_status');\n      expect(indexes).toContain('idx_agents_type');\n      expect(indexes).toContain('idx_neural_weights_agent');\n      expect(indexes).toContain('idx_agent_memory_type');\n      expect(indexes).toContain('idx_metrics_agent_type');\n    });\n\n    test('should enable WAL mode for concurrent access', async () => {\n      // TDD: Testing WAL mode configuration\n      const journalMode = await persistenceManager.getJournalMode();\n      expect(journalMode).toBe('wal');\n    });\n  });\n\n  describe('Agent CRUD Operations - TDD Red Phase', () => {\n    test('should save agent with all required fields within 50ms', async () => {\n      // TDD Red: This test should fail initially\n      const agentConfig: AgentConfig = {\n        id: 'test-agent-001',\n        type: 'researcher',\n        cognitivePattern: 'divergent',\n        networkLayers: [64, 128, 64, 32],\n        learningRate: 0.7,\n        momentum: 0.3,\n        status: 'spawning' as AgentState,\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        memoryUsageMB: 0,\n        performanceScore: 0,\n        spawnTimeMs: null,\n        configJson: JSON.stringify({\n          temperature: 0.8,\n          maxTokens: 2048\n        }),\n        metadataJson: JSON.stringify({\n          priority: 'high',\n          tags: ['research', 'analysis']\n        })\n      };\n\n      const startTime = performance.now();\n      const savedAgent = await persistenceManager.saveAgent(agentConfig);\n      const saveTime = performance.now() - startTime;\n\n      // Phase 2A requirement: database operations <50ms\n      expect(saveTime).toBeLessThan(50);\n\n      // Validate saved data\n      expect(savedAgent.id).toBe(agentConfig.id);\n      expect(savedAgent.type).toBe(agentConfig.type);\n      expect(savedAgent.status).toBe('spawning');\n      expect(savedAgent.createdAt).toBeGreaterThan(0);\n    });\n\n    test('should retrieve agent by ID within 50ms', async () => {\n      // TDD Red: This test should fail initially\n      const agentConfig: AgentConfig = {\n        id: 'test-agent-002',\n        type: 'coder',\n        cognitivePattern: 'convergent',\n        networkLayers: [128, 256, 128, 64],\n        learningRate: 0.5,\n        momentum: 0.2,\n        status: 'active' as AgentState,\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      };\n\n      await persistenceManager.saveAgent(agentConfig);\n\n      const startTime = performance.now();\n      const retrievedAgent = await persistenceManager.getAgent(agentConfig.id);\n      const retrieveTime = performance.now() - startTime;\n\n      // Phase 2A requirement: database operations <50ms\n      expect(retrieveTime).toBeLessThan(50);\n\n      // Validate retrieved data\n      expect(retrievedAgent).toBeDefined();\n      expect(retrievedAgent!.id).toBe(agentConfig.id);\n      expect(retrievedAgent!.type).toBe(agentConfig.type);\n      expect(retrievedAgent!.cognitivePattern).toBe(agentConfig.cognitivePattern);\n    });\n\n    test('should update agent status atomically within 50ms', async () => {\n      // TDD Red: This test should fail initially\n      const agentId = 'test-agent-003';\n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'analyst',\n        cognitivePattern: 'critical',\n        networkLayers: [96, 192, 96, 48],\n        status: 'spawning' as AgentState,\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      });\n\n      const startTime = performance.now();\n      await persistenceManager.updateAgentStatus(agentId, 'active');\n      const updateTime = performance.now() - startTime;\n\n      // Phase 2A requirement: database operations <50ms\n      expect(updateTime).toBeLessThan(50);\n\n      // Validate status change\n      const updatedAgent = await persistenceManager.getAgent(agentId);\n      expect(updatedAgent!.status).toBe('active');\n    });\n\n    test('should handle concurrent agent saves without corruption', async () => {\n      // TDD Red: This test should fail initially\n      const concurrentSaves = Array.from({ length: 10 }, (_, i) => \n        persistenceManager.saveAgent({\n          id: `concurrent-agent-${i}`,\n          type: 'optimizer',\n          cognitivePattern: 'systems',\n          networkLayers: [80, 160, 80, 40],\n          status: 'spawning' as AgentState,\n          createdAt: Date.now(),\n          lastActive: Date.now()\n        })\n      );\n\n      const startTime = performance.now();\n      const results = await Promise.all(concurrentSaves);\n      const totalTime = performance.now() - startTime;\n\n      // All saves should succeed\n      expect(results).toHaveLength(10);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n        expect(result.id).toMatch(/concurrent-agent-\\d/);\n      });\n\n      // Average save time should be reasonable\n      const avgSaveTime = totalTime / 10;\n      expect(avgSaveTime).toBeLessThan(75); // Slightly higher threshold for concurrent operations\n    });\n\n    test('should prevent duplicate agent IDs', async () => {\n      // TDD Red: This test should fail initially\n      const agentConfig: AgentConfig = {\n        id: 'duplicate-test',\n        type: 'coordinator',\n        cognitivePattern: 'adaptive',\n        networkLayers: [112, 224, 112, 56],\n        status: 'spawning' as AgentState,\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      };\n\n      // First save should succeed\n      await persistenceManager.saveAgent(agentConfig);\n\n      // Second save should fail\n      await expect(persistenceManager.saveAgent(agentConfig))\n        .rejects.toThrow(/UNIQUE constraint failed/);\n    });\n\n    test('should validate required fields', async () => {\n      // TDD Red: This test should fail initially\n      \n      // Missing required fields should fail\n      await expect(persistenceManager.saveAgent({} as AgentConfig))\n        .rejects.toThrow(/NOT NULL constraint failed/);\n\n      await expect(persistenceManager.saveAgent({ \n        id: 'test',\n        type: 'researcher' \n      } as AgentConfig))\n        .rejects.toThrow(/NOT NULL constraint failed/);\n    });\n  });\n\n  describe('Performance Metrics Tracking - TDD Red Phase', () => {\n    test('should record agent spawn metrics', async () => {\n      // TDD Red: This test should fail initially\n      const agentId = 'metrics-test-agent';\n      const spawnTime = 65; // ms\n\n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'researcher',\n        cognitivePattern: 'divergent',\n        networkLayers: [64, 128, 64],\n        status: 'active' as AgentState,\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        spawnTimeMs: spawnTime\n      });\n\n      await persistenceManager.recordMetric({\n        agentId,\n        metricType: 'spawn_time',\n        value: spawnTime,\n        unit: 'ms',\n        recordedAt: Date.now(),\n        context: { target: 75, status: 'pass' }\n      });\n\n      const metrics = await persistenceManager.getAgentMetrics(agentId, 'spawn_time');\n      expect(metrics).toHaveLength(1);\n      expect(metrics[0].value).toBe(spawnTime);\n      expect(metrics[0].unit).toBe('ms');\n    });\n\n    test('should track memory usage metrics', async () => {\n      // TDD Red: This test should fail initially\n      const agentId = 'memory-test-agent';\n      const memoryUsage = 35.5; // MB\n\n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'coder',\n        cognitivePattern: 'convergent',\n        networkLayers: [128, 256, 128],\n        status: 'active' as AgentState,\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        memoryUsageMB: memoryUsage\n      });\n\n      await persistenceManager.recordMetric({\n        agentId,\n        metricType: 'memory_usage',\n        value: memoryUsage,\n        unit: 'mb',\n        recordedAt: Date.now(),\n        context: { target: 50, status: 'pass' }\n      });\n\n      const metrics = await persistenceManager.getAgentMetrics(agentId, 'memory_usage');\n      expect(metrics[0].value).toBe(memoryUsage);\n      expect(metrics[0].unit).toBe('mb');\n    });\n  });\n\n  describe('Batch Operations - TDD Red Phase', () => {\n    test('should handle batch agent saves efficiently', async () => {\n      // TDD Red: This test should fail initially\n      const agents: AgentConfig[] = Array.from({ length: 50 }, (_, i) => ({\n        id: `batch-agent-${i}`,\n        type: ['researcher', 'coder', 'analyst', 'optimizer', 'coordinator'][i % 5] as any,\n        cognitivePattern: ['convergent', 'divergent', 'critical', 'systems', 'adaptive'][i % 5] as any,\n        networkLayers: [64, 128, 64, 32],\n        status: 'spawning' as AgentState,\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      }));\n\n      const startTime = performance.now();\n      await persistenceManager.batchSaveAgents(agents);\n      const batchTime = performance.now() - startTime;\n\n      // Batch operation should be more efficient than individual saves\n      expect(batchTime).toBeLessThan(200); // 200ms for 50 agents = 4ms per agent\n\n      // Verify all agents were saved\n      const savedAgents = await persistenceManager.getAllAgents();\n      expect(savedAgents).toHaveLength(50);\n    });\n  });\n\n  describe('Data Integrity and Consistency - TDD Red Phase', () => {\n    test('should maintain ACID properties during concurrent operations', async () => {\n      // TDD Red: This test should fail initially\n      const concurrentOperations = [];\n\n      // Simulate concurrent read/write operations\n      for (let i = 0; i < 20; i++) {\n        concurrentOperations.push(\n          persistenceManager.saveAgent({\n            id: `acid-test-${i}`,\n            type: 'researcher',\n            cognitivePattern: 'divergent',\n            networkLayers: [64, 128, 64],\n            status: 'spawning' as AgentState,\n            createdAt: Date.now(),\n            lastActive: Date.now()\n          })\n        );\n\n        if (i > 5) {\n          // Add some read operations\n          concurrentOperations.push(\n            persistenceManager.getAgent(`acid-test-${i - 5}`)\n          );\n        }\n      }\n\n      const startTime = performance.now();\n      const results = await Promise.allSettled(concurrentOperations);\n      const totalTime = performance.now() - startTime;\n\n      // All operations should complete successfully\n      const failures = results.filter(r => r.status === 'rejected');\n      expect(failures).toHaveLength(0);\n\n      // Performance should still be reasonable\n      expect(totalTime).toBeLessThan(500); // 500ms for mixed operations\n    });\n  });\n\n  describe('Error Handling and Recovery - TDD Red Phase', () => {\n    test('should handle database corruption gracefully', async () => {\n      // TDD Red: This test should fail initially\n      \n      // Save some data first\n      await persistenceManager.saveAgent({\n        id: 'corruption-test',\n        type: 'researcher',\n        cognitivePattern: 'divergent',\n        networkLayers: [64, 128, 64],\n        status: 'active' as AgentState,\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      });\n\n      // Close the database\n      await persistenceManager.close();\n\n      // Corrupt the database file (simulate corruption)\n      fs.writeFileSync(testDbPath, 'corrupted data');\n\n      // Try to initialize again - should handle corruption\n      const corruptedManager = new AgentPersistenceManager(testDbPath);\n      \n      await expect(corruptedManager.initialize()).rejects.toThrow();\n    });\n\n    test('should implement connection pooling for high concurrency', async () => {\n      // TDD Red: This test should fail initially\n      \n      // Test connection pooling under high load\n      const highConcurrencyOps = Array.from({ length: 100 }, (_, i) =>\n        persistenceManager.saveAgent({\n          id: `pool-test-${i}`,\n          type: 'researcher',\n          cognitivePattern: 'divergent',\n          networkLayers: [64, 128, 64],\n          status: 'spawning' as AgentState,\n          createdAt: Date.now(),\n          lastActive: Date.now()\n        })\n      );\n\n      const startTime = performance.now();\n      await Promise.all(highConcurrencyOps);\n      const totalTime = performance.now() - startTime;\n\n      // Should handle high concurrency efficiently\n      expect(totalTime).toBeLessThan(1000); // 1 second for 100 operations\n    });\n  });\n});"],"version":3}