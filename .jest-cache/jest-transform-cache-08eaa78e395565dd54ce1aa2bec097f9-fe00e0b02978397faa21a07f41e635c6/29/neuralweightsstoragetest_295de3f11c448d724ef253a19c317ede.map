{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/persistence/neural-weights-storage.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/persistence/neural-weights-storage.test.ts"],"sourcesContent":["/**\n * TDD Unit Tests for Neural Weights Storage\n * Tests neural weight serialization and compression with Phase 2A requirements\n */\n\nimport { performance } from 'perf_hooks';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { AgentPersistenceManager } from '../../../src/persistence/AgentPersistenceManager';\n\ndescribe('Neural Weights Storage - TDD Implementation', () => {\n  let persistenceManager: AgentPersistenceManager;\n  let testDbPath: string;\n\n  beforeEach(async () => {\n    testDbPath = path.join(__dirname, `neural-weights-${Date.now()}-${Math.random().toString(36).substr(2, 9)}.db`);\n    persistenceManager = new AgentPersistenceManager(testDbPath);\n    await persistenceManager.initialize();\n  });\n\n  afterEach(async () => {\n    if (persistenceManager) {\n      await persistenceManager.close();\n    }\n    if (fs.existsSync(testDbPath)) {\n      fs.unlinkSync(testDbPath);\n    }\n  });\n\n  describe('TDD Red Phase - Neural Weight Persistence', () => {\n    test('should save neural weights for multiple layers', async () => {\n      // TDD Red: This will help test neural_weights table operations\n      const agentId = 'neural-weights-agent';\n      \n      // First create an agent\n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'researcher',\n        cognitivePattern: 'divergent',\n        networkLayers: [64, 128, 64],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      } as any);\n\n      // The actual neural weights storage would be implemented in a separate class\n      // For now we test the database structure is ready for it\n      const tables = await persistenceManager.getTables();\n      expect(tables).toContain('neural_weights');\n    });\n\n    test('should handle memory optimization for large neural networks', async () => {\n      // TDD Red: Test for memory efficiency requirements\n      const initialMemory = process.memoryUsage().heapUsed;\n      \n      // Create multiple agents to test memory usage\n      const agents = Array.from({ length: 10 }, (_, i) => ({\n        id: `memory-test-agent-${i}`,\n        type: 'coder',\n        cognitivePattern: 'convergent',\n        networkLayers: [256, 512, 256, 128], // Larger networks\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        memoryUsageMB: 45 // Close to 50MB limit\n      }));\n\n      for (const agent of agents) {\n        await persistenceManager.saveAgent(agent as any);\n      }\n\n      const finalMemory = process.memoryUsage().heapUsed;\n      const memoryIncrease = finalMemory - initialMemory;\n      \n      // Memory increase should be reasonable (less than 100MB for 10 agents)\n      expect(memoryIncrease).toBeLessThan(100 * 1024 * 1024);\n    });\n\n    test('should validate agent memory usage limits', async () => {\n      // TDD Red: Test Phase 2A memory requirements\n      const agentId = 'memory-limit-test';\n      \n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'analyst',\n        cognitivePattern: 'critical',\n        networkLayers: [128, 256, 128],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        memoryUsageMB: 45.5\n      } as any);\n\n      const savedAgent = await persistenceManager.getAgent(agentId);\n      expect(savedAgent!.memoryUsageMB).toBe(45.5);\n      expect(savedAgent!.memoryUsageMB!).toBeLessThan(50); // Phase 2A requirement\n    });\n  });\n\n  describe('TDD Red Phase - Agent Memory Operations', () => {\n    test('should test agent_memory table structure', async () => {\n      // TDD Red: Verify agent_memory table exists and is ready\n      const tables = await persistenceManager.getTables();\n      expect(tables).toContain('agent_memory');\n      \n      // The actual memory operations would be implemented separately\n      // This tests the database infrastructure is ready\n    });\n\n    test('should handle TTL expiration for agent memory', async () => {\n      // TDD Red: Test memory TTL functionality structure\n      const agentId = 'ttl-test-agent';\n      \n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'optimizer',\n        cognitivePattern: 'systems',\n        networkLayers: [96, 192, 96],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      } as any);\n\n      // Memory operations would be tested when implemented\n      const agent = await persistenceManager.getAgent(agentId);\n      expect(agent).toBeDefined();\n    });\n  });\n\n  describe('TDD Red Phase - Performance Validation', () => {\n    test('should track multiple performance metrics types', async () => {\n      // TDD Red: Test comprehensive performance tracking\n      const agentId = 'performance-metrics-agent';\n      \n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'coordinator',\n        cognitivePattern: 'adaptive',\n        networkLayers: [112, 224, 112],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      } as any);\n\n      // Record multiple types of metrics\n      const metrics = [\n        { metricType: 'spawn_time', value: 65, unit: 'ms' },\n        { metricType: 'inference_time', value: 85, unit: 'ms' },\n        { metricType: 'memory_usage', value: 42.5, unit: 'mb' },\n        { metricType: 'cpu_usage', value: 15.2, unit: 'percent' }\n      ];\n\n      for (const metric of metrics) {\n        await persistenceManager.recordMetric({\n          agentId,\n          metricType: metric.metricType as any,\n          value: metric.value,\n          unit: metric.unit as any,\n          recordedAt: Date.now(),\n          context: { target: metric.metricType === 'spawn_time' ? 75 : 100 }\n        } as any);\n      }\n\n      // Verify all metrics were recorded\n      const allMetrics = await persistenceManager.getAgentMetrics(agentId);\n      expect(allMetrics).toHaveLength(4);\n      \n      // Test specific metric retrieval\n      const spawnMetrics = await persistenceManager.getAgentMetrics(agentId, 'spawn_time');\n      expect(spawnMetrics).toHaveLength(1);\n      expect(spawnMetrics[0].value).toBe(65);\n    });\n\n    test('should handle high-frequency metric recording', async () => {\n      // TDD Red: Test performance under load\n      const agentId = 'high-freq-metrics-agent';\n      \n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'researcher',\n        cognitivePattern: 'divergent',\n        networkLayers: [64, 128, 64],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      } as any);\n\n      // Record many metrics quickly\n      const startTime = performance.now();\n      const promises = Array.from({ length: 50 }, (_, i) => \n        persistenceManager.recordMetric({\n          agentId,\n          metricType: 'inference_time',\n          value: 80 + Math.random() * 20, // 80-100ms\n          unit: 'ms',\n          recordedAt: Date.now() + i,\n          context: { iteration: i }\n        } as any)\n      );\n\n      await Promise.all(promises);\n      const totalTime = performance.now() - startTime;\n\n      // Should handle 50 metric recordings efficiently\n      expect(totalTime).toBeLessThan(200); // 200ms for 50 operations = 4ms per operation\n      \n      const metrics = await persistenceManager.getAgentMetrics(agentId, 'inference_time');\n      expect(metrics).toHaveLength(50);\n    });\n  });\n\n  describe('TDD Red Phase - Database Integrity', () => {\n    test('should maintain foreign key constraints', async () => {\n      // TDD Red: Test referential integrity\n      const agentId = 'foreign-key-test-agent';\n      \n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'coder',\n        cognitivePattern: 'convergent',\n        networkLayers: [128, 256, 128],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      } as any);\n\n      // Record a metric\n      await persistenceManager.recordMetric({\n        agentId,\n        metricType: 'spawn_time',\n        value: 70,\n        unit: 'ms',\n        recordedAt: Date.now()\n      } as any);\n\n      // Verify metric exists\n      const metrics = await persistenceManager.getAgentMetrics(agentId);\n      expect(metrics).toHaveLength(1);\n\n      // Foreign key constraints would be tested when we implement delete operations\n      // For now, we test the structure is correct\n      const tables = await persistenceManager.getTables();\n      expect(tables).toContain('agent_metrics');\n    });\n\n    test('should handle database connection errors gracefully', async () => {\n      // TDD Red: Test error handling\n      await persistenceManager.close();\n      \n      // Operations on closed database should fail gracefully\n      await expect(persistenceManager.saveAgent({\n        id: 'error-test',\n        type: 'researcher',\n        cognitivePattern: 'divergent',\n        networkLayers: [64, 128, 64],\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now()\n      } as any)).rejects.toThrow('Database not initialized');\n    });\n\n    test('should validate network layers serialization', async () => {\n      // TDD Red: Test complex data serialization\n      const agentId = 'serialization-test-agent';\n      const complexLayers = [512, 1024, 512, 256, 128, 64, 32, 16, 8, 4];\n      \n      await persistenceManager.saveAgent({\n        id: agentId,\n        type: 'neural',\n        cognitivePattern: 'adaptive',\n        networkLayers: complexLayers,\n        status: 'active',\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        configJson: JSON.stringify({ \n          activation: 'relu',\n          dropout: 0.2,\n          batchNorm: true \n        }),\n        metadataJson: JSON.stringify({ \n          version: '2.0',\n          framework: 'custom',\n          optimization: 'adam'\n        })\n      } as any);\n\n      const savedAgent = await persistenceManager.getAgent(agentId);\n      expect(savedAgent!.networkLayers).toEqual(complexLayers);\n      expect(savedAgent!.configJson).toBeDefined();\n      expect(savedAgent!.metadataJson).toBeDefined();\n      \n      // Verify JSON parsing\n      const config = JSON.parse(savedAgent!.configJson!);\n      expect(config.activation).toBe('relu');\n      \n      const metadata = JSON.parse(savedAgent!.metadataJson!);\n      expect(metadata.version).toBe('2.0');\n    });\n  });\n\n  describe('TDD Red Phase - Advanced Filtering and Queries', () => {\n    test('should filter agents by type and status', async () => {\n      // TDD Red: Test advanced query capabilities\n      const agents = [\n        { id: 'filter-1', type: 'researcher', status: 'active' },\n        { id: 'filter-2', type: 'researcher', status: 'idle' },\n        { id: 'filter-3', type: 'coder', status: 'active' },\n        { id: 'filter-4', type: 'coder', status: 'active' }\n      ];\n\n      for (const agent of agents) {\n        await persistenceManager.saveAgent({\n          ...agent,\n          cognitivePattern: 'divergent',\n          networkLayers: [64, 128, 64],\n          createdAt: Date.now(),\n          lastActive: Date.now()\n        } as any);\n      }\n\n      // Test filtering by type\n      const researchers = await persistenceManager.getAllAgents({ type: 'researcher' });\n      expect(researchers).toHaveLength(2);\n      \n      // Test filtering by status\n      const activeAgents = await persistenceManager.getAllAgents({ status: 'active' });\n      expect(activeAgents).toHaveLength(3);\n      \n      // Test filtering by both\n      const activeCoders = await persistenceManager.getAllAgents({ \n        type: 'coder', \n        status: 'active' \n      });\n      expect(activeCoders).toHaveLength(2);\n    });\n  });\n});"],"version":3}