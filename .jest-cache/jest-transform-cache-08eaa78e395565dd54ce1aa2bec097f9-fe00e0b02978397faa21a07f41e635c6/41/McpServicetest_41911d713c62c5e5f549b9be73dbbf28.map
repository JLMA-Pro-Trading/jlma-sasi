{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/McpService.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/McpService.test.ts"],"sourcesContent":["import { jest } from '@jest/globals'\nimport { mcpService, McpService } from '../../../src/services/McpService'\n\ndescribe('McpService', () => {\n  let service: McpService\n\n  beforeEach(() => {\n    // Create a new instance for each test\n    service = new (McpService as any)()\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    service.destroy()\n  })\n\n  describe('initialization', () => {\n    test('initializes successfully', async () => {\n      await expect(service.initialize()).resolves.not.toThrow()\n    })\n\n    test('discovers MCP servers on initialization', async () => {\n      await service.initialize()\n      \n      const servers = service.getServers()\n      expect(servers).toHaveLength(2) // Claude Flow and RUV Swarm\n      \n      const claudeFlow = servers.find(s => s.id === 'claude-flow')\n      expect(claudeFlow).toBeDefined()\n      expect(claudeFlow!.name).toBe('Claude Flow')\n      expect(claudeFlow!.status).toBe('connected')\n      expect(claudeFlow!.tools.length).toBeGreaterThan(0)\n    })\n\n    test('starts health monitoring on initialization', async () => {\n      await service.initialize()\n      \n      const initialHealthScore = service.getServer('claude-flow')?.healthScore\n      \n      // Wait for health check interval\n      await new Promise(resolve => setTimeout(resolve, 35000))\n      \n      const updatedHealthScore = service.getServer('claude-flow')?.healthScore\n      \n      // Health score should be updated (may be same value but lastPing should be different)\n      expect(service.getServer('claude-flow')?.lastPing).toBeGreaterThan(Date.now() - 35000)\n    })\n  })\n\n  describe('server management', () => {\n    beforeEach(async () => {\n      await service.initialize()\n    })\n\n    test('returns all servers', () => {\n      const servers = service.getServers()\n      expect(servers).toHaveLength(2)\n      expect(servers.map(s => s.id)).toContain('claude-flow')\n      expect(servers.map(s => s.id)).toContain('ruv-swarm')\n    })\n\n    test('returns specific server by id', () => {\n      const server = service.getServer('claude-flow')\n      expect(server).toBeDefined()\n      expect(server!.id).toBe('claude-flow')\n      expect(server!.name).toBe('Claude Flow')\n    })\n\n    test('returns undefined for non-existent server', () => {\n      const server = service.getServer('non-existent')\n      expect(server).toBeUndefined()\n    })\n\n    test('refreshes servers', async () => {\n      const initialServers = service.getServers()\n      const refreshedServers = await service.refreshServers()\n      \n      expect(refreshedServers).toHaveLength(initialServers.length)\n      expect(refreshedServers.map(s => s.id)).toEqual(initialServers.map(s => s.id))\n    })\n  })\n\n  describe('tool execution', () => {\n    beforeEach(async () => {\n      await service.initialize()\n    })\n\n    test('executes tool successfully', async () => {\n      const result = await service.executeTool(\n        'claude-flow',\n        'mcp__claude-flow__swarm_init',\n        { topology: 'mesh', maxAgents: 5 }\n      )\n      \n      expect(result.success).toBe(true)\n      expect(result.toolName).toBe('mcp__claude-flow__swarm_init')\n      expect(result.parameters).toEqual({ topology: 'mesh', maxAgents: 5 })\n      expect(result.response).toBeDefined()\n      expect(result.duration).toBeGreaterThan(0)\n    })\n\n    test('handles tool execution errors', async () => {\n      const result = await service.executeTool(\n        'non-existent-server',\n        'some-tool',\n        {}\n      )\n      \n      expect(result.success).toBe(false)\n      expect(result.error).toBeDefined()\n      expect(result.error).toContain('Server non-existent-server not found')\n    })\n\n    test('handles non-existent tool errors', async () => {\n      const result = await service.executeTool(\n        'claude-flow',\n        'non-existent-tool',\n        {}\n      )\n      \n      expect(result.success).toBe(false)\n      expect(result.error).toBeDefined()\n      expect(result.error).toContain('Tool non-existent-tool not found')\n    })\n\n    test('updates tool usage statistics', async () => {\n      const initialServer = service.getServer('claude-flow')!\n      const initialTool = initialServer.tools.find(t => t.name === 'mcp__claude-flow__swarm_init')!\n      const initialUsageCount = initialTool.usageCount\n      \n      await service.executeTool(\n        'claude-flow',\n        'mcp__claude-flow__swarm_init',\n        { topology: 'mesh' }\n      )\n      \n      const updatedServer = service.getServer('claude-flow')!\n      const updatedTool = updatedServer.tools.find(t => t.name === 'mcp__claude-flow__swarm_init')!\n      \n      expect(updatedTool.usageCount).toBe(initialUsageCount + 1)\n      expect(updatedTool.lastUsed).toBeDefined()\n    })\n\n    test('updates metrics after tool execution', async () => {\n      const initialMetrics = service.getMetrics()\n      \n      await service.executeTool(\n        'claude-flow',\n        'mcp__claude-flow__swarm_init',\n        { topology: 'mesh' }\n      )\n      \n      const updatedMetrics = service.getMetrics()\n      \n      expect(updatedMetrics.totalRequests).toBe(initialMetrics.totalRequests + 1)\n      expect(updatedMetrics.successfulRequests).toBe(initialMetrics.successfulRequests + 1)\n    })\n  })\n\n  describe('metrics collection', () => {\n    beforeEach(async () => {\n      await service.initialize()\n    })\n\n    test('returns metrics object', () => {\n      const metrics = service.getMetrics()\n      \n      expect(metrics).toBeDefined()\n      expect(metrics.totalRequests).toBeDefined()\n      expect(metrics.successfulRequests).toBeDefined()\n      expect(metrics.failedRequests).toBeDefined()\n      expect(metrics.averageResponseTime).toBeDefined()\n      expect(metrics.uptime).toBeDefined()\n      expect(metrics.memoryUsage).toBeDefined()\n      expect(metrics.tokenUsage).toBeDefined()\n      expect(metrics.serverMetrics).toBeDefined()\n    })\n\n    test('updates metrics over time', async () => {\n      const initialMetrics = service.getMetrics()\n      \n      // Wait for metrics update interval\n      await new Promise(resolve => setTimeout(resolve, 6000))\n      \n      const updatedMetrics = service.getMetrics()\n      \n      expect(updatedMetrics.uptime).toBeGreaterThan(initialMetrics.uptime)\n    })\n  })\n\n  describe('health monitoring', () => {\n    beforeEach(async () => {\n      await service.initialize()\n    })\n\n    test('performs health checks periodically', async () => {\n      const initialServer = service.getServer('claude-flow')!\n      const initialPing = initialServer.lastPing\n      \n      // Wait for health check interval\n      await new Promise(resolve => setTimeout(resolve, 35000))\n      \n      const updatedServer = service.getServer('claude-flow')!\n      expect(updatedServer.lastPing).toBeGreaterThan(initialPing)\n    })\n\n    test('maintains server health scores', async () => {\n      const server = service.getServer('claude-flow')!\n      expect(server.healthScore).toBeGreaterThan(0)\n      expect(server.healthScore).toBeLessThanOrEqual(100)\n    })\n  })\n\n  describe('server types', () => {\n    beforeEach(async () => {\n      await service.initialize()\n    })\n\n    test('handles stdio server type', async () => {\n      const claudeFlow = service.getServer('claude-flow')!\n      expect(claudeFlow.type).toBe('stdio')\n      \n      const result = await service.executeTool(\n        'claude-flow',\n        'mcp__claude-flow__swarm_init',\n        { topology: 'mesh' }\n      )\n      \n      expect(result.success).toBe(true)\n    })\n\n    test('handles websocket server type', async () => {\n      // GitHub integration server should be websocket type\n      const servers = service.getServers()\n      const githubServer = servers.find(s => s.type === 'websocket')\n      \n      if (githubServer) {\n        expect(githubServer.type).toBe('websocket')\n        \n        const result = await service.executeTool(\n          githubServer.id,\n          githubServer.tools[0].name,\n          {}\n        )\n        \n        expect(result).toBeDefined()\n      }\n    })\n  })\n\n  describe('error handling', () => {\n    test('handles initialization errors gracefully', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {})\n      \n      // Mock a method to throw an error\n      const mockService = new (McpService as any)()\n      mockService.discoverServers = jest.fn().mockRejectedValue(new Error('Discovery failed'))\n      \n      await expect(mockService.initialize()).rejects.toThrow('Discovery failed')\n      \n      consoleSpy.mockRestore()\n    })\n\n    test('handles server detection errors gracefully', async () => {\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {})\n      \n      await service.initialize()\n      \n      // Service should still initialize even if some servers fail to detect\n      const servers = service.getServers()\n      expect(servers).toBeDefined()\n      \n      consoleSpy.mockRestore()\n    })\n  })\n\n  describe('cleanup', () => {\n    test('destroys service properly', async () => {\n      await service.initialize()\n      \n      const servers = service.getServers()\n      expect(servers.length).toBeGreaterThan(0)\n      \n      service.destroy()\n      \n      const serversAfterDestroy = service.getServers()\n      expect(serversAfterDestroy).toHaveLength(0)\n    })\n  })\n})"],"version":3}