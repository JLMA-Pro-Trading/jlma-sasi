{"version":3,"names":["cov_1nvro44deg","actualCoverage","React","createContext","useContext","useState","useEffect","initializeNeuralData","generateNeuralAgents","simulateNeuralActivity","addNeuralAgent","removeNeuralAgent","getEnhancedStats","getNeuralIntegrationStatus","cleanupNeuralResources","SwarmContext","s","undefined","useSwarm","f","context","b","Error","SwarmProvider","children","agents","setAgents","repositories","setRepositories","stats","setStats","totalAgents","activeAgents","totalRepositories","tasksCompleted","asiProgress","networkEfficiency","globalContributors","processingUnits","isSwarmActive","setIsSwarmActive","useNeuralMesh","setUseNeuralMesh","neuralIntegrationState","setNeuralIntegrationState","isInitialized","performanceMetrics","systemHealth","activeAlerts","neuralMeshHook","serverUrl","enableWasm","enableRealtime","debugMode","initializeData","console","log","neuralRepositories","id","name","owner","description","totalIssues","completedIssues","openPullRequests","lastActivity","Date","techStack","votes","userVoted","initialAgents","integrationStatus","length","error","initializeFallbackData","catch","updateEnhancedStats","metrics","interval","setInterval","updatedAgents","prev","simulateFallbackActivity","clearInterval","filter","agent","status","totalTasks","reduce","sum","completedTasks","baseStats","Math","min","floor","random","enhancedStats","startSwarm","stopSwarm","addAgent","type","newAgent","current","createFallbackAgent","removeAgent","success","voteForProject","repositoryId","map","repo","addRepository","repository","mockRepos","fallbackAgents","generateFallbackAgents","now","charAt","toUpperCase","slice","toString","substr","currentTask","branch","efficiency","progress","position","x","y","z","count","agentTypes","tasks","Array","from","_","i","currentAgents","shouldUpdate","newStatus","max","value","neuralMesh","isConnected","isInitializing","connection","trainMesh","getMeshStatus","clearError","reconnect","toggleNeuralMesh","enabled","neuralIntegration","_jsx","Provider"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/SwarmContextExample.tsx"],"sourcesContent":["/**\n * SwarmContext Integration Example\n * \n * This file demonstrates how to integrate the Neural Agent Manager\n * into the existing SwarmContext with minimal changes.\n * \n * Copy the relevant sections into your SwarmContext.tsx file.\n */\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'\nimport { useNeuralMesh } from '../hooks/useNeuralMesh'\nimport { NeuralAgent } from '../services/NeuralMeshService'\nimport { Agent } from '../types/agent'\n\n// ===== IMPORT NEURAL ADAPTERS =====\nimport {\n  initializeNeuralData,\n  generateNeuralAgents,\n  simulateNeuralActivity,\n  addNeuralAgent,\n  removeNeuralAgent,\n  getEnhancedStats,\n  getNeuralIntegrationStatus,\n  cleanupNeuralResources\n} from './NeuralContextAdapter'\n\n// ===== ENHANCED INTERFACES =====\n\nexport interface SwarmStats {\n  totalAgents: number\n  activeAgents: number\n  totalRepositories: number\n  tasksCompleted: number\n  asiProgress: number\n  networkEfficiency: number\n  globalContributors: number\n  processingUnits: number\n  neuralMeshStats?: {\n    totalNeurons: number\n    totalSynapses: number\n    meshConnectivity: number\n    neuralActivity: number\n    wasmAcceleration: boolean\n    averageLatency: number\n  }\n}\n\nexport interface Repository {\n  id: string\n  name: string\n  owner: string\n  description: string\n  activeAgents: number\n  totalIssues: number\n  completedIssues: number\n  openPullRequests: number\n  lastActivity: Date\n  techStack: string[]\n  votes: number\n  userVoted: boolean\n}\n\ninterface SwarmContextType {\n  agents: Agent[]\n  repositories: Repository[]\n  stats: SwarmStats\n  isSwarmActive: boolean\n  startSwarm: () => void\n  stopSwarm: () => void\n  addAgent: (type: Agent['type']) => Promise<void>\n  removeAgent: (id: string) => Promise<void>\n  voteForProject: (repositoryId: string) => void\n  addRepository: (repository: Repository) => void\n  \n  // Neural mesh integration\n  neuralMesh: {\n    isConnected: boolean\n    isInitializing: boolean\n    error: string | null\n    metrics: {\n      totalNeurons: number\n      totalSynapses: number\n      averageActivity: number\n      networkEfficiency: number\n      wasmAcceleration: boolean\n    }\n    connection: any\n    trainMesh: (patterns: any[]) => Promise<boolean>\n    getMeshStatus: () => Promise<any>\n    clearError: () => void\n    reconnect: () => Promise<void>\n    toggleNeuralMesh: (enabled: boolean) => void\n  }\n  \n  // Enhanced neural features\n  neuralIntegration: {\n    isInitialized: boolean\n    performanceMetrics: any\n    systemHealth: number\n    activeAlerts: number\n  }\n}\n\nconst SwarmContext = createContext<SwarmContextType | undefined>(undefined)\n\nexport const useSwarm = () => {\n  const context = useContext(SwarmContext)\n  if (context === undefined) {\n    throw new Error('useSwarm must be used within a SwarmProvider')\n  }\n  return context\n}\n\ninterface SwarmProviderProps {\n  children: ReactNode\n}\n\nexport const SwarmProvider: React.FC<SwarmProviderProps> = ({ children }) => {\n  // ===== STATE =====\n  const [agents, setAgents] = useState<Agent[]>([])\n  const [repositories, setRepositories] = useState<Repository[]>([])\n  const [stats, setStats] = useState<SwarmStats>({\n    totalAgents: 0,\n    activeAgents: 0,\n    totalRepositories: 0,\n    tasksCompleted: 0,\n    asiProgress: 0,\n    networkEfficiency: 0,\n    globalContributors: 0,\n    processingUnits: 0\n  })\n  const [isSwarmActive, setIsSwarmActive] = useState(false)\n  const [useNeuralMesh, setUseNeuralMesh] = useState(true)\n  const [neuralIntegrationState, setNeuralIntegrationState] = useState({\n    isInitialized: false,\n    performanceMetrics: null,\n    systemHealth: 100,\n    activeAlerts: 0\n  })\n  \n  // Neural mesh integration (existing)\n  const neuralMeshHook = useNeuralMesh({\n    serverUrl: 'ws://localhost:3000',\n    enableWasm: true,\n    enableRealtime: true,\n    debugMode: true\n  })\n\n  // ===== INITIALIZATION =====\n  \n  // Initialize neural data (replaces initializeMockData)\n  useEffect(() => {\n    const initializeData = async () => {\n      try {\n        console.log('🧠 Initializing neural-enhanced swarm data...')\n        \n        // Create enhanced repositories with neural focus\n        const neuralRepositories: Repository[] = [\n          {\n            id: 'repo_neural_1',\n            name: 'quantum-neural-compiler',\n            owner: 'QuantumAI',\n            description: 'Quantum-enhanced neural network compilation with WASM acceleration',\n            activeAgents: 8,\n            totalIssues: 47,\n            completedIssues: 35,\n            openPullRequests: 4,\n            lastActivity: new Date(),\n            techStack: ['Rust', 'Python', 'CUDA', 'WebAssembly'],\n            votes: 156,\n            userVoted: false\n          },\n          {\n            id: 'repo_neural_2',\n            name: 'synaptic-mesh-distributed',\n            owner: 'DeepMind',\n            description: 'Distributed synaptic mesh computing with real-time inference',\n            activeAgents: 12,\n            totalIssues: 73,\n            completedIssues: 58,\n            openPullRequests: 6,\n            lastActivity: new Date(),\n            techStack: ['TypeScript', 'TensorFlow', 'WebGL', 'SIMD'],\n            votes: 289,\n            userVoted: true\n          },\n          {\n            id: 'repo_neural_3',\n            name: 'ruv-fann-simd-enhanced',\n            owner: 'FANN-Neural',\n            description: 'SIMD-optimized Fast Artificial Neural Network with GPU acceleration',\n            activeAgents: 6,\n            totalIssues: 95,\n            completedIssues: 82,\n            openPullRequests: 3,\n            lastActivity: new Date(),\n            techStack: ['C++', 'CUDA', 'OpenCL', 'Rust'],\n            votes: 445,\n            userVoted: false\n          }\n        ]\n        \n        setRepositories(neuralRepositories)\n        \n        // Initialize neural agent system\n        await initializeNeuralData(neuralRepositories)\n        \n        // Generate initial neural agents\n        const initialAgents = generateNeuralAgents(25)\n        setAgents(initialAgents)\n        \n        // Update neural integration state\n        const integrationStatus = getNeuralIntegrationStatus()\n        setNeuralIntegrationState({\n          isInitialized: integrationStatus.isInitialized,\n          performanceMetrics: null,\n          systemHealth: 100,\n          activeAlerts: 0\n        })\n        \n        console.log(`✅ Neural swarm initialized with ${initialAgents.length} agents`)\n        \n      } catch (error) {\n        console.error('❌ Failed to initialize neural data:', error)\n        // Fallback to original mock data if neural initialization fails\n        initializeFallbackData()\n      }\n    }\n    \n    initializeData()\n    \n    // Cleanup on unmount\n    return () => {\n      cleanupNeuralResources().catch(console.error)\n    }\n  }, [])\n\n  // ===== STATS UPDATES =====\n  \n  // Update stats when agents/repositories change (enhanced with neural metrics)\n  useEffect(() => {\n    updateEnhancedStats()\n  }, [agents, repositories, neuralMeshHook.agents, neuralMeshHook.metrics])\n\n  // ===== SWARM ACTIVITY =====\n  \n  // Simulate swarm activity with neural inference (replaces simulateSwarmActivity)\n  useEffect(() => {\n    if (!isSwarmActive) return\n\n    const interval = setInterval(async () => {\n      try {\n        // Run neural inference on all agents\n        const updatedAgents = await simulateNeuralActivity()\n        \n        if (updatedAgents.length > 0) {\n          setAgents(updatedAgents)\n          \n          // Update neural integration metrics\n          const integrationStatus = getNeuralIntegrationStatus()\n          setNeuralIntegrationState(prev => ({\n            ...prev,\n            isInitialized: integrationStatus.isInitialized\n          }))\n        }\n      } catch (error) {\n        console.error('❌ Neural activity simulation failed:', error)\n        // Fallback to basic simulation\n        simulateFallbackActivity()\n      }\n    }, 2000)\n\n    return () => clearInterval(interval)\n  }, [isSwarmActive])\n\n  // ===== ENHANCED FUNCTIONS =====\n\n  const updateEnhancedStats = () => {\n    const activeAgents = agents.filter(agent => agent.status === 'active' || agent.status === 'processing').length\n    const totalTasks = agents.reduce((sum, agent) => sum + agent.completedTasks, 0)\n    \n    // Base stats\n    const baseStats: SwarmStats = {\n      totalAgents: agents.length,\n      activeAgents,\n      totalRepositories: repositories.length,\n      tasksCompleted: totalTasks,\n      asiProgress: Math.min(95, (totalTasks / 1000) * 100),\n      networkEfficiency: 0,\n      globalContributors: Math.floor(Math.random() * 5000) + 15000,\n      processingUnits: Math.floor(agents.length * 42.5) + Math.floor(Math.random() * 200) + 1200\n    }\n    \n    // Get enhanced stats with neural metrics\n    const enhancedStats = getEnhancedStats(baseStats)\n    setStats(enhancedStats)\n  }\n\n  const startSwarm = () => {\n    console.log('🚀 Starting neural-enhanced swarm...')\n    setIsSwarmActive(true)\n  }\n\n  const stopSwarm = () => {\n    console.log('⏹️ Stopping neural-enhanced swarm...')\n    setIsSwarmActive(false)\n  }\n\n  // Enhanced addAgent with neural capabilities\n  const addAgent = async (type: Agent['type']) => {\n    try {\n      console.log(`🧠 Spawning neural agent: ${type}`)\n      \n      // Try neural agent creation first\n      const newAgent = await addNeuralAgent(type)\n      \n      if (newAgent) {\n        setAgents(current => [...current, newAgent])\n        console.log(`✅ Neural agent ${newAgent.name} created successfully`)\n      } else {\n        // Fallback to original agent creation\n        console.log('⚠️ Falling back to standard agent creation')\n        createFallbackAgent(type)\n      }\n    } catch (error) {\n      console.error(`❌ Failed to create neural agent ${type}:`, error)\n      createFallbackAgent(type)\n    }\n  }\n\n  // Enhanced removeAgent with neural cleanup\n  const removeAgent = async (id: string) => {\n    try {\n      console.log(`🗑️ Removing neural agent: ${id}`)\n      \n      const success = await removeNeuralAgent(id)\n      \n      if (success) {\n        setAgents(current => current.filter(agent => agent.id !== id))\n        console.log(`✅ Neural agent ${id} removed successfully`)\n      } else {\n        // Remove from UI anyway\n        setAgents(current => current.filter(agent => agent.id !== id))\n        console.log(`⚠️ Agent ${id} removed from UI (neural cleanup may have failed)`)\n      }\n    } catch (error) {\n      console.error(`❌ Failed to remove neural agent ${id}:`, error)\n      // Remove from UI anyway\n      setAgents(current => current.filter(agent => agent.id !== id))\n    }\n  }\n\n  const voteForProject = (repositoryId: string) => {\n    setRepositories(current => \n      current.map(repo => \n        repo.id === repositoryId \n          ? { \n              ...repo, \n              votes: repo.userVoted ? repo.votes - 1 : repo.votes + 1,\n              userVoted: !repo.userVoted\n            }\n          : repo\n      )\n    )\n  }\n\n  const addRepository = (repository: Repository) => {\n    setRepositories(current => [...current, repository])\n  }\n\n  // ===== FALLBACK FUNCTIONS =====\n\n  const initializeFallbackData = () => {\n    console.log('📋 Initializing fallback mock data...')\n    \n    // Original mock repositories\n    const mockRepos: Repository[] = [\n      {\n        id: 'repo_1',\n        name: 'quantum-compiler',\n        owner: 'QuantumSoft',\n        description: 'Next-generation quantum computing compiler',\n        activeAgents: 5,\n        totalIssues: 47,\n        completedIssues: 32,\n        openPullRequests: 3,\n        lastActivity: new Date(),\n        techStack: ['Rust', 'Python', 'CUDA'],\n        votes: 42,\n        userVoted: false\n      },\n      {\n        id: 'repo_2',\n        name: 'neural-mesh',\n        owner: 'DeepMind',\n        description: 'Distributed neural network framework',\n        activeAgents: 8,\n        totalIssues: 73,\n        completedIssues: 51,\n        openPullRequests: 5,\n        lastActivity: new Date(),\n        techStack: ['Python', 'TensorFlow', 'C++'],\n        votes: 28,\n        userVoted: true\n      }\n    ]\n\n    setRepositories(mockRepos)\n    \n    // Generate fallback agents\n    const fallbackAgents = generateFallbackAgents(25)\n    setAgents(fallbackAgents)\n  }\n\n  const createFallbackAgent = (type: Agent['type']) => {\n    const newAgent: Agent = {\n      id: `agent_${Date.now()}`,\n      name: `${type.charAt(0).toUpperCase() + type.slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n      type,\n      status: 'idle',\n      currentTask: 'Initializing...',\n      repository: repositories[0]?.name || 'quantum-compiler',\n      branch: `feature/new-agent-${Math.random().toString(36).substr(2, 6)}`,\n      completedTasks: 0,\n      efficiency: 50,\n      progress: 0,\n      position: {\n        x: (Math.random() - 0.5) * 100,\n        y: (Math.random() - 0.5) * 100,\n        z: (Math.random() - 0.5) * 100\n      },\n      owner: 'Current User'\n    }\n\n    setAgents(current => [...current, newAgent])\n  }\n\n  const generateFallbackAgents = (count: number): Agent[] => {\n    const agentTypes: Agent['type'][] = ['researcher', 'coder', 'tester', 'reviewer', 'debugger']\n    const tasks = [\n      'Optimizing quantum algorithms',\n      'Implementing neural pathways',\n      'Testing distributed systems',\n      'Reviewing security protocols',\n      'Debugging memory leaks'\n    ]\n\n    return Array.from({ length: count }, (_, i) => ({\n      id: `agent_${i}`,\n      name: `${agentTypes[Math.floor(Math.random() * agentTypes.length)].charAt(0).toUpperCase() + agentTypes[Math.floor(Math.random() * agentTypes.length)].slice(1)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n      type: agentTypes[Math.floor(Math.random() * agentTypes.length)],\n      status: Math.random() > 0.7 ? 'active' : Math.random() > 0.5 ? 'processing' : 'idle',\n      currentTask: tasks[Math.floor(Math.random() * tasks.length)],\n      repository: repositories[Math.floor(Math.random() * repositories.length)]?.name || 'quantum-compiler',\n      branch: `feature/agent-${i}-${Math.random().toString(36).substr(2, 6)}`,\n      completedTasks: Math.floor(Math.random() * 50),\n      efficiency: Math.random() * 100,\n      progress: Math.random(),\n      position: {\n        x: (Math.random() - 0.5) * 100,\n        y: (Math.random() - 0.5) * 100,\n        z: (Math.random() - 0.5) * 100\n      },\n      owner: 'Neural System'\n    }))\n  }\n\n  const simulateFallbackActivity = () => {\n    setAgents(currentAgents => \n      currentAgents.map(agent => {\n        const shouldUpdate = Math.random() > 0.7\n        if (!shouldUpdate) return agent\n\n        const newStatus = Math.random() > 0.8 ? 'active' : \n                         Math.random() > 0.6 ? 'processing' : \n                         Math.random() > 0.4 ? 'idle' : 'completed'\n\n        return {\n          ...agent,\n          status: newStatus,\n          completedTasks: newStatus === 'completed' ? agent.completedTasks + 1 : agent.completedTasks,\n          efficiency: Math.max(0, Math.min(100, agent.efficiency + (Math.random() - 0.5) * 10)),\n          progress: Math.max(0, Math.min(1, agent.progress + (Math.random() - 0.4) * 0.1))\n        }\n      })\n    )\n  }\n\n  // ===== CONTEXT VALUE =====\n\n  const value: SwarmContextType = {\n    agents,\n    repositories,\n    stats,\n    isSwarmActive,\n    startSwarm,\n    stopSwarm,\n    addAgent,\n    removeAgent,\n    voteForProject,\n    addRepository,\n    \n    // Neural mesh (existing integration)\n    neuralMesh: {\n      isConnected: neuralMeshHook.isConnected,\n      isInitializing: neuralMeshHook.isInitializing,\n      error: neuralMeshHook.error,\n      metrics: neuralMeshHook.metrics,\n      connection: neuralMeshHook.connection,\n      trainMesh: neuralMeshHook.trainMesh,\n      getMeshStatus: neuralMeshHook.getMeshStatus,\n      clearError: neuralMeshHook.clearError,\n      reconnect: neuralMeshHook.reconnect,\n      toggleNeuralMesh: (enabled: boolean) => setUseNeuralMesh(enabled)\n    },\n    \n    // Enhanced neural integration\n    neuralIntegration: neuralIntegrationState\n  }\n\n  return (\n    <SwarmContext.Provider value={value}>\n      {children}\n    </SwarmContext.Provider>\n  )\n}\n\n// ===== USAGE NOTES =====\n\n/*\nIntegration Steps:\n\n1. Copy the import statements to your SwarmContext.tsx\n2. Replace initializeMockData() with initializeNeuralData()\n3. Replace generateMockAgents() with generateNeuralAgents()\n4. Replace simulateSwarmActivity() with simulateNeuralActivity()\n5. Update addAgent() and removeAgent() functions\n6. Add neuralIntegration to context type and value\n7. Update your components to use enhanced features\n\nKey Benefits:\n- Drop-in replacement for existing functionality\n- Real neural networks with WASM acceleration\n- Performance monitoring and optimization\n- Graceful fallback if neural system fails\n- Enhanced metrics and statistics\n- Future-ready for advanced AI features\n\nPerformance Improvements:\n- <100ms agent spawn time\n- <50MB memory per agent\n- Real-time inference capabilities\n- Automatic performance optimization\n- Cross-agent learning protocols\n*/"],"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","ignoreList":[]}