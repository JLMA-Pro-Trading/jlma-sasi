{"version":3,"names":["describe","test","expect","beforeAll","afterAll","beforeEach","afterEach","require","puppeteer","browser","page","workflowManager","systemMonitor","launch","headless","args","newPage","setViewport","width","height","initialize","jest","fn","startWorkflow","pauseWorkflow","resumeWorkflow","stopWorkflow","getStatus","getResults","startMonitoring","stopMonitoring","getMetrics","generateReport","close","goto","clearAllMocks","waitForSelector","timeout","landingPageLoaded","evaluate","document","querySelector","toBe","click","dashboardLoaded","type","select","agentCreated","config","nodeCount","topology","neuralLayers","global","testUtils","waitFor","status","phase","toHaveBeenCalledTimes","meshConnection","window","synapticMesh","isConnected","coordinationTest","swarm","agents","id","coordination","neuralCoordination","coordinate","success","realtimeMetrics","neuralUpdates","processedRequests","errors","mockWebSocket","send","data","onmessage","readyState","updateResults","updates","i","update","timestamp","Date","now","weights","Array","from","length","Math","random","bias","accuracy","push","Promise","resolve","setTimeout","totalUpdates","processedCount","streamingTest","duration","messagesPerSecond","expectedMessages","streamingResults","testConfig","results","messagesSent","messagesReceived","averageLatency","startTime","endTime","messageStart","message","Float32Array","fill","messageEnd","latency","error","toBeGreaterThan","toBeLessThan","loadTest","concurrentUsers","actionsPerUser","actionDelay","pages","userPage","userActions","map","userIndex","userMetrics","actions","totalTime","action","actionStart","performance","actionEnd","allUserMetrics","all","totalActions","reduce","sum","metrics","totalErrors","averageTime","memoryTest","iterations","memoryPerIteration","memoryResults","memoryAllocated","memoryFreed","gcCount","memoryBlocks","block","freedBlocks","splice","setOfflineMode","offlineResults","attempts","failures","retries","fetch","recoveryResults","successes","crashTest","crashTypes","recoveryAttempts","crashType","crashResults","detected","recovered","recoveryTime","recoveryStart","recoveryEnd","consistencyTest","dataPoints","syncInterval","tolerance","consistencyResults","syncedPoints","inconsistencies","averageDeviation","sasiData","synapticData","dataPoint","value","metadata","source","deviation","abs"],"sources":["complete-workflow.test.js"],"sourcesContent":["// End-to-end tests for complete SASI/Synaptic-mesh workflow\nconst { describe, test, expect, beforeAll, afterAll, beforeEach, afterEach } = require('@jest/globals');\nconst puppeteer = require('puppeteer');\n\ndescribe('Complete Workflow E2E Tests', () => {\n  let browser;\n  let page;\n  let workflowManager;\n  let systemMonitor;\n  \n  beforeAll(async () => {\n    // Launch browser for E2E testing\n    browser = await puppeteer.launch({\n      headless: true,\n      args: ['--no-sandbox', '--disable-setuid-sandbox']\n    });\n    \n    page = await browser.newPage();\n    \n    // Set up viewport\n    await page.setViewport({ width: 1920, height: 1080 });\n    \n    // Initialize workflow manager\n    workflowManager = {\n      initialize: jest.fn(),\n      startWorkflow: jest.fn(),\n      pauseWorkflow: jest.fn(),\n      resumeWorkflow: jest.fn(),\n      stopWorkflow: jest.fn(),\n      getStatus: jest.fn(),\n      getResults: jest.fn()\n    };\n    \n    // Initialize system monitor\n    systemMonitor = {\n      startMonitoring: jest.fn(),\n      stopMonitoring: jest.fn(),\n      getMetrics: jest.fn(),\n      generateReport: jest.fn()\n    };\n    \n    await workflowManager.initialize();\n    await systemMonitor.startMonitoring();\n  });\n  \n  afterAll(async () => {\n    await systemMonitor.stopMonitoring();\n    await browser.close();\n  });\n  \n  beforeEach(async () => {\n    await page.goto('http://localhost:3000');\n  });\n  \n  afterEach(async () => {\n    jest.clearAllMocks();\n  });\n  \n  describe('Complete Integration Workflow', () => {\n    test('should execute full SASI initialization and visualization', async () => {\n      // Test SASI landing page load\n      await page.waitForSelector('.landing-page', { timeout: 10000 });\n      \n      const landingPageLoaded = await page.evaluate(() => {\n        return document.querySelector('.landing-page') !== null;\n      });\n      \n      expect(landingPageLoaded).toBe(true);\n      \n      // Test dashboard navigation\n      await page.click('.dashboard-link');\n      await page.waitForSelector('.dashboard-container', { timeout: 10000 });\n      \n      const dashboardLoaded = await page.evaluate(() => {\n        return document.querySelector('.dashboard-container') !== null;\n      });\n      \n      expect(dashboardLoaded).toBe(true);\n      \n      // Test agent creation\n      await page.click('.create-agent-button');\n      await page.waitForSelector('.agent-creation-modal', { timeout: 5000 });\n      \n      await page.type('.agent-name-input', 'TestAgent');\n      await page.select('.agent-type-select', 'researcher');\n      await page.click('.create-agent-submit');\n      \n      await page.waitForSelector('.agent-list-item', { timeout: 5000 });\n      \n      const agentCreated = await page.evaluate(() => {\n        return document.querySelector('.agent-list-item') !== null;\n      });\n      \n      expect(agentCreated).toBe(true);\n    });\n    \n    test('should initialize and connect to Synaptic mesh', async () => {\n      // Start workflow\n      await workflowManager.startWorkflow({\n        type: 'synaptic_initialization',\n        config: {\n          nodeCount: 10,\n          topology: 'mesh',\n          neuralLayers: [256, 128, 64]\n        }\n      });\n      \n      // Wait for initialization\n      await global.testUtils.waitFor(async () => {\n        const status = await workflowManager.getStatus();\n        return status.phase === 'initialized';\n      }, 30000);\n      \n      expect(workflowManager.startWorkflow).toHaveBeenCalledTimes(1);\n      \n      // Test mesh connection\n      const meshConnection = await page.evaluate(() => {\n        return window.synapticMesh && window.synapticMesh.isConnected;\n      });\n      \n      expect(meshConnection).toBe(true);\n    });\n    \n    test('should perform neural agent coordination', async () => {\n      // Navigate to swarm management\n      await page.click('.swarm-management-link');\n      await page.waitForSelector('.swarm-visualization', { timeout: 10000 });\n      \n      // Create a swarm\n      await page.click('.create-swarm-button');\n      await page.waitForSelector('.swarm-creation-form', { timeout: 5000 });\n      \n      await page.type('.swarm-name-input', 'TestSwarm');\n      await page.select('.swarm-topology-select', 'mesh');\n      await page.click('.create-swarm-submit');\n      \n      await page.waitForSelector('.swarm-item', { timeout: 5000 });\n      \n      // Test agent coordination\n      const coordinationTest = await page.evaluate(async () => {\n        const swarm = {\n          agents: [\n            { id: 'agent-1', type: 'researcher' },\n            { id: 'agent-2', type: 'coder' },\n            { id: 'agent-3', type: 'analyst' }\n          ]\n        };\n        \n        // Simulate coordination\n        const coordination = await window.neuralCoordination.coordinate(swarm);\n        return coordination.success;\n      });\n      \n      expect(coordinationTest).toBe(true);\n    });\n  });\n  \n  describe('Real-time Data Processing', () => {\n    test('should handle real-time neural updates', async () => {\n      // Set up real-time monitoring\n      await page.evaluate(() => {\n        window.realtimeMetrics = {\n          neuralUpdates: 0,\n          processedRequests: 0,\n          errors: 0\n        };\n        \n        // Mock WebSocket connection\n        window.mockWebSocket = {\n          send: (data) => {\n            window.realtimeMetrics.processedRequests++;\n            return true;\n          },\n          onmessage: null,\n          readyState: 1\n        };\n      });\n      \n      // Navigate to real-time dashboard\n      await page.click('.realtime-dashboard-link');\n      await page.waitForSelector('.realtime-metrics', { timeout: 10000 });\n      \n      // Simulate real-time updates\n      const updateResults = await page.evaluate(async () => {\n        const updates = [];\n        \n        for (let i = 0; i < 100; i++) {\n          const update = {\n            type: 'neural_update',\n            timestamp: Date.now(),\n            data: {\n              weights: Array.from({ length: 10 }, () => Math.random()),\n              bias: Math.random(),\n              accuracy: 0.8 + Math.random() * 0.2\n            }\n          };\n          \n          updates.push(update);\n          window.realtimeMetrics.neuralUpdates++;\n          \n          // Simulate processing delay\n          await new Promise(resolve => setTimeout(resolve, 10));\n        }\n        \n        return {\n          totalUpdates: updates.length,\n          processedCount: window.realtimeMetrics.neuralUpdates,\n          errors: window.realtimeMetrics.errors\n        };\n      });\n      \n      expect(updateResults.totalUpdates).toBe(100);\n      expect(updateResults.processedCount).toBe(100);\n      expect(updateResults.errors).toBe(0);\n    });\n    \n    test('should handle high-frequency data streaming', async () => {\n      const streamingTest = {\n        duration: 10000, // 10 seconds\n        messagesPerSecond: 100,\n        expectedMessages: 1000\n      };\n      \n      // Start streaming simulation\n      const streamingResults = await page.evaluate(async (testConfig) => {\n        const results = {\n          messagesSent: 0,\n          messagesReceived: 0,\n          averageLatency: 0,\n          errors: 0\n        };\n        \n        const startTime = Date.now();\n        const endTime = startTime + testConfig.duration;\n        \n        while (Date.now() < endTime) {\n          const messageStart = Date.now();\n          \n          try {\n            // Simulate high-frequency message\n            const message = {\n              id: results.messagesSent,\n              timestamp: messageStart,\n              data: new Float32Array(100).fill(Math.random())\n            };\n            \n            // Simulate processing\n            await new Promise(resolve => setTimeout(resolve, 1));\n            \n            const messageEnd = Date.now();\n            const latency = messageEnd - messageStart;\n            \n            results.messagesSent++;\n            results.messagesReceived++;\n            results.averageLatency = (results.averageLatency * (results.messagesReceived - 1) + latency) / results.messagesReceived;\n            \n          } catch (error) {\n            results.errors++;\n          }\n          \n          // Maintain frequency\n          await new Promise(resolve => setTimeout(resolve, 1000 / testConfig.messagesPerSecond));\n        }\n        \n        return results;\n      }, streamingTest);\n      \n      expect(streamingResults.messagesSent).toBeGreaterThan(streamingTest.expectedMessages * 0.8);\n      expect(streamingResults.messagesReceived).toBeGreaterThan(streamingTest.expectedMessages * 0.8);\n      expect(streamingResults.averageLatency).toBeLessThan(50);\n      expect(streamingResults.errors).toBeLessThan(10);\n    });\n  });\n  \n  describe('Performance Under Load', () => {\n    test('should maintain performance under concurrent user load', async () => {\n      const loadTest = {\n        concurrentUsers: 5,\n        actionsPerUser: 20,\n        actionDelay: 100\n      };\n      \n      // Open multiple tabs to simulate concurrent users\n      const pages = [];\n      for (let i = 0; i < loadTest.concurrentUsers; i++) {\n        const userPage = await browser.newPage();\n        await userPage.goto('http://localhost:3000');\n        pages.push(userPage);\n      }\n      \n      // Simulate concurrent user actions\n      const userActions = pages.map(async (userPage, userIndex) => {\n        const userMetrics = {\n          actions: 0,\n          errors: 0,\n          totalTime: 0\n        };\n        \n        for (let action = 0; action < loadTest.actionsPerUser; action++) {\n          const actionStart = performance.now();\n          \n          try {\n            // Simulate user actions\n            await userPage.click('.dashboard-link');\n            await userPage.waitForSelector('.dashboard-container', { timeout: 5000 });\n            \n            await userPage.click('.create-agent-button');\n            await userPage.waitForSelector('.agent-creation-modal', { timeout: 5000 });\n            \n            await userPage.type('.agent-name-input', `User${userIndex}Agent${action}`);\n            await userPage.click('.create-agent-submit');\n            \n            userMetrics.actions++;\n            \n          } catch (error) {\n            userMetrics.errors++;\n          }\n          \n          const actionEnd = performance.now();\n          userMetrics.totalTime += (actionEnd - actionStart);\n          \n          await new Promise(resolve => setTimeout(resolve, loadTest.actionDelay));\n        }\n        \n        return userMetrics;\n      });\n      \n      const allUserMetrics = await Promise.all(userActions);\n      \n      // Analyze results\n      const totalActions = allUserMetrics.reduce((sum, metrics) => sum + metrics.actions, 0);\n      const totalErrors = allUserMetrics.reduce((sum, metrics) => sum + metrics.errors, 0);\n      const averageTime = allUserMetrics.reduce((sum, metrics) => sum + metrics.totalTime, 0) / allUserMetrics.length;\n      \n      expect(totalActions).toBeGreaterThan(loadTest.concurrentUsers * loadTest.actionsPerUser * 0.8);\n      expect(totalErrors).toBeLessThan(totalActions * 0.1);\n      expect(averageTime / loadTest.actionsPerUser).toBeLessThan(2000); // < 2 seconds per action\n      \n      // Close user pages\n      for (const userPage of pages) {\n        await userPage.close();\n      }\n    });\n    \n    test('should handle memory pressure gracefully', async () => {\n      const memoryTest = {\n        iterations: 50,\n        memoryPerIteration: 1024 * 1024 // 1MB per iteration\n      };\n      \n      const memoryResults = await page.evaluate(async (testConfig) => {\n        const results = {\n          iterations: 0,\n          memoryAllocated: 0,\n          memoryFreed: 0,\n          errors: 0,\n          gcCount: 0\n        };\n        \n        const memoryBlocks = [];\n        \n        for (let i = 0; i < testConfig.iterations; i++) {\n          try {\n            // Allocate memory\n            const block = new Float32Array(testConfig.memoryPerIteration / 4);\n            block.fill(Math.random());\n            memoryBlocks.push(block);\n            \n            results.memoryAllocated += testConfig.memoryPerIteration;\n            results.iterations++;\n            \n            // Simulate processing\n            await new Promise(resolve => setTimeout(resolve, 100));\n            \n            // Periodically free memory\n            if (i % 10 === 0 && memoryBlocks.length > 5) {\n              const freedBlocks = memoryBlocks.splice(0, 5);\n              results.memoryFreed += freedBlocks.length * testConfig.memoryPerIteration;\n            }\n            \n          } catch (error) {\n            results.errors++;\n          }\n        }\n        \n        return results;\n      }, memoryTest);\n      \n      expect(memoryResults.iterations).toBe(memoryTest.iterations);\n      expect(memoryResults.errors).toBeLessThan(memoryTest.iterations * 0.1);\n      expect(memoryResults.memoryAllocated).toBeGreaterThan(0);\n    });\n  });\n  \n  describe('Error Recovery and Resilience', () => {\n    test('should recover from network failures', async () => {\n      // Simulate network failure\n      await page.setOfflineMode(true);\n      \n      // Attempt operations during network failure\n      const offlineResults = await page.evaluate(async () => {\n        const results = {\n          attempts: 0,\n          failures: 0,\n          retries: 0\n        };\n        \n        for (let i = 0; i < 10; i++) {\n          results.attempts++;\n          \n          try {\n            // Simulate network request\n            await fetch('/api/agents');\n          } catch (error) {\n            results.failures++;\n          }\n        }\n        \n        return results;\n      });\n      \n      expect(offlineResults.failures).toBe(offlineResults.attempts);\n      \n      // Restore network\n      await page.setOfflineMode(false);\n      \n      // Test recovery\n      const recoveryResults = await page.evaluate(async () => {\n        const results = {\n          attempts: 0,\n          successes: 0,\n          errors: 0\n        };\n        \n        for (let i = 0; i < 5; i++) {\n          results.attempts++;\n          \n          try {\n            // Simulate recovery attempt\n            await new Promise(resolve => setTimeout(resolve, 100));\n            results.successes++;\n          } catch (error) {\n            results.errors++;\n          }\n        }\n        \n        return results;\n      });\n      \n      expect(recoveryResults.successes).toBeGreaterThan(recoveryResults.attempts * 0.8);\n    });\n    \n    test('should handle system crashes gracefully', async () => {\n      const crashTest = {\n        crashTypes: ['memory_overflow', 'infinite_loop', 'null_pointer'],\n        recoveryAttempts: 3\n      };\n      \n      for (const crashType of crashTest.crashTypes) {\n        // Simulate system crash\n        const crashResults = await page.evaluate(async (type) => {\n          const results = {\n            crashType: type,\n            detected: false,\n            recovered: false,\n            recoveryTime: 0\n          };\n          \n          const recoveryStart = Date.now();\n          \n          try {\n            // Simulate crash detection\n            results.detected = true;\n            \n            // Simulate recovery\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            results.recovered = true;\n            \n            const recoveryEnd = Date.now();\n            results.recoveryTime = recoveryEnd - recoveryStart;\n            \n          } catch (error) {\n            results.recovered = false;\n          }\n          \n          return results;\n        }, crashType);\n        \n        expect(crashResults.detected).toBe(true);\n        expect(crashResults.recovered).toBe(true);\n        expect(crashResults.recoveryTime).toBeLessThan(5000); // Should recover within 5 seconds\n      }\n    });\n  });\n  \n  describe('Data Integrity and Consistency', () => {\n    test('should maintain data consistency across systems', async () => {\n      const consistencyTest = {\n        dataPoints: 100,\n        syncInterval: 1000,\n        tolerance: 0.01\n      };\n      \n      const consistencyResults = await page.evaluate(async (testConfig) => {\n        const results = {\n          dataPoints: 0,\n          syncedPoints: 0,\n          inconsistencies: 0,\n          averageDeviation: 0\n        };\n        \n        const sasiData = [];\n        const synapticData = [];\n        \n        for (let i = 0; i < testConfig.dataPoints; i++) {\n          const dataPoint = {\n            id: i,\n            timestamp: Date.now(),\n            value: Math.random(),\n            metadata: { source: 'test' }\n          };\n          \n          // Simulate data in both systems\n          sasiData.push(dataPoint);\n          synapticData.push({ ...dataPoint, value: dataPoint.value + (Math.random() - 0.5) * 0.001 });\n          \n          results.dataPoints++;\n          \n          // Check consistency\n          const deviation = Math.abs(sasiData[i].value - synapticData[i].value);\n          results.averageDeviation = (results.averageDeviation * i + deviation) / (i + 1);\n          \n          if (deviation < testConfig.tolerance) {\n            results.syncedPoints++;\n          } else {\n            results.inconsistencies++;\n          }\n        }\n        \n        return results;\n      }, consistencyTest);\n      \n      expect(consistencyResults.dataPoints).toBe(consistencyTest.dataPoints);\n      expect(consistencyResults.syncedPoints).toBeGreaterThan(consistencyTest.dataPoints * 0.9);\n      expect(consistencyResults.averageDeviation).toBeLessThan(consistencyTest.tolerance);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}