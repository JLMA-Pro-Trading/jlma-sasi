{"version":3,"names":["describe","test","expect","beforeAll","afterAll","beforeEach","afterEach","require","wasmInstance","wasmMemory","wasmImports","WebAssembly","Memory","initial","maximum","env","memory","abort","Error","__wbg_log_log","ptr","len","__wbg_random_random","Math","random","exports","add","jest","fn","a","b","multiply","neural_process","inputPtr","inputLen","outputPtr","neural_train","dataPtr","dataLen","iterations","simd_vector_add","aPtr","bPtr","resultPtr","init_neural_network","layers","neurons","get_memory_usage","clearAllMocks","wasmLoader","load","instantiate","validate","wasmConfig","module","imports","toHaveBeenCalledWith","networkConfig","activation","learningRate","result","length","toBe","memoryManager","allocate","deallocate","resize","map","memoryRequest","size","alignment","type","inputData","Float32Array","outputData","inputBuffer","Uint8Array","buffer","outputBuffer","forEach","byte","index","trainingData","inputs","outputs","trainingConfig","epochs","batchSize","dataSize","accuracy","toBeGreaterThan","weightOptimizer","optimize","quantize","prune","weights","layer1","layer2","layer3","vectorA","vectorB","simdResult","simdBenchmark","vectorSize","operations","benchmarkResults","operation","startTime","performance","now","i","endTime","duration","throughput","push","memoryStats","byteLength","allocated","freed","peak","memoryOperations","op","currentUsage","memoryUsage","toHaveBeenCalledTimes","growthTest","initialPages","maxPages","growthIncrement","memoryGrowth","grow","pages","currentPages","errorHandler","catch","recover","log","errorScenarios","description","scenario","error","invalidInputs","undefined","NaN","Infinity","inputValidator","sanitize","handle","input","validationResult","valid","performanceMonitor","startProfiling","stopProfiling","getMetrics","analyze","operationTime","toBeLessThan","metrics","bottleneckDetector","identify","suggest","performanceData","name","time","calls","cpuUsage","dataExchange","jsToWasm","wasmToJs","convert","jsData","numbers","strings","objects","wasmData","processedData","jsResult","asyncOperations","startAsync","checkProgress","getResult","cancel","asyncTasks","promises","task","Promise","resolve","setTimeout","results","all","toHaveLength"],"sources":["wasm-integration.test.js"],"sourcesContent":["// WASM integration tests for neural processing\nconst { describe, test, expect, beforeAll, afterAll, beforeEach, afterEach } = require('@jest/globals');\n\ndescribe('WASM Integration Tests', () => {\n  let wasmInstance;\n  let wasmMemory;\n  let wasmImports;\n  \n  beforeAll(async () => {\n    // Initialize WASM testing environment\n    wasmMemory = new WebAssembly.Memory({ initial: 1, maximum: 10 });\n    \n    wasmImports = {\n      env: {\n        memory: wasmMemory,\n        abort: () => {\n          throw new Error('WASM abort called');\n        },\n        __wbg_log_log: (ptr, len) => {\n          // Mock logging function\n          return 0;\n        },\n        __wbg_random_random: () => {\n          return Math.random();\n        }\n      }\n    };\n    \n    // Mock WASM module\n    wasmInstance = {\n      exports: {\n        memory: wasmMemory,\n        add: jest.fn((a, b) => a + b),\n        multiply: jest.fn((a, b) => a * b),\n        neural_process: jest.fn((inputPtr, inputLen, outputPtr) => {\n          // Mock neural processing\n          return inputLen;\n        }),\n        neural_train: jest.fn((dataPtr, dataLen, iterations) => {\n          // Mock training\n          return 0.95; // Mock accuracy\n        }),\n        simd_vector_add: jest.fn((aPtr, bPtr, resultPtr, len) => {\n          // Mock SIMD operation\n          return 0;\n        }),\n        init_neural_network: jest.fn((layers, neurons) => {\n          // Mock network initialization\n          return 1; // Success\n        }),\n        get_memory_usage: jest.fn(() => {\n          return 1024; // Mock memory usage\n        })\n      }\n    };\n  });\n  \n  afterAll(async () => {\n    // Cleanup WASM resources\n    wasmMemory = null;\n    wasmInstance = null;\n  });\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  afterEach(() => {\n    // Reset WASM state if needed\n  });\n  \n  describe('WASM Module Loading and Initialization', () => {\n    test('should load WASM module successfully', async () => {\n      const wasmLoader = {\n        load: jest.fn(),\n        instantiate: jest.fn(),\n        validate: jest.fn()\n      };\n      \n      const wasmConfig = {\n        module: 'neural_mesh.wasm',\n        imports: wasmImports,\n        memory: { initial: 1, maximum: 10 }\n      };\n      \n      await wasmLoader.load(wasmConfig);\n      await wasmLoader.instantiate(wasmConfig);\n      \n      expect(wasmLoader.load).toHaveBeenCalledWith(wasmConfig);\n      expect(wasmLoader.instantiate).toHaveBeenCalledWith(wasmConfig);\n    });\n    \n    test('should initialize neural network in WASM', async () => {\n      const networkConfig = {\n        layers: 4,\n        neurons: [784, 256, 128, 10],\n        activation: 'relu',\n        learningRate: 0.01\n      };\n      \n      const result = wasmInstance.exports.init_neural_network(\n        networkConfig.layers,\n        networkConfig.neurons.length\n      );\n      \n      expect(wasmInstance.exports.init_neural_network).toHaveBeenCalledWith(\n        networkConfig.layers,\n        networkConfig.neurons.length\n      );\n      expect(result).toBe(1); // Success\n    });\n    \n    test('should handle WASM memory allocation', async () => {\n      const memoryManager = {\n        allocate: jest.fn(),\n        deallocate: jest.fn(),\n        resize: jest.fn(),\n        map: jest.fn()\n      };\n      \n      const memoryRequest = {\n        size: 1024 * 1024, // 1MB\n        alignment: 8,\n        type: 'neural_weights'\n      };\n      \n      await memoryManager.allocate(memoryRequest);\n      \n      expect(memoryManager.allocate).toHaveBeenCalledWith(memoryRequest);\n    });\n  });\n  \n  describe('Neural Processing in WASM', () => {\n    test('should process neural network inference', async () => {\n      const inputData = new Float32Array([1, 2, 3, 4, 5]);\n      const outputData = new Float32Array(10);\n      \n      // Simulate data transfer to WASM memory\n      const inputBuffer = new Uint8Array(wasmMemory.buffer, 0, inputData.length * 4);\n      const outputBuffer = new Uint8Array(wasmMemory.buffer, inputData.length * 4, outputData.length * 4);\n      \n      // Copy input data to WASM memory\n      new Uint8Array(inputData.buffer).forEach((byte, index) => {\n        inputBuffer[index] = byte;\n      });\n      \n      const result = wasmInstance.exports.neural_process(\n        0, // inputPtr\n        inputData.length,\n        inputData.length * 4 // outputPtr\n      );\n      \n      expect(wasmInstance.exports.neural_process).toHaveBeenCalledWith(\n        0,\n        inputData.length,\n        inputData.length * 4\n      );\n      expect(result).toBe(inputData.length);\n    });\n    \n    test('should handle neural network training', async () => {\n      const trainingData = {\n        inputs: [\n          new Float32Array([1, 2, 3]),\n          new Float32Array([4, 5, 6]),\n          new Float32Array([7, 8, 9])\n        ],\n        outputs: [\n          new Float32Array([0.1]),\n          new Float32Array([0.2]),\n          new Float32Array([0.3])\n        ]\n      };\n      \n      const trainingConfig = {\n        epochs: 100,\n        batchSize: 32,\n        learningRate: 0.01\n      };\n      \n      // Simulate training data transfer\n      const dataSize = trainingData.inputs.length * trainingData.inputs[0].length;\n      \n      const accuracy = wasmInstance.exports.neural_train(\n        0, // dataPtr\n        dataSize,\n        trainingConfig.epochs\n      );\n      \n      expect(wasmInstance.exports.neural_train).toHaveBeenCalledWith(\n        0,\n        dataSize,\n        trainingConfig.epochs\n      );\n      expect(accuracy).toBeGreaterThan(0.9); // Should achieve > 90% accuracy\n    });\n    \n    test('should optimize neural weights', async () => {\n      const weightOptimizer = {\n        optimize: jest.fn(),\n        quantize: jest.fn(),\n        prune: jest.fn(),\n        validate: jest.fn()\n      };\n      \n      const weights = {\n        layer1: new Float32Array([0.1, 0.2, 0.3, 0.4]),\n        layer2: new Float32Array([0.5, 0.6, 0.7, 0.8]),\n        layer3: new Float32Array([0.9, 1.0, 1.1, 1.2])\n      };\n      \n      await weightOptimizer.optimize(weights);\n      \n      expect(weightOptimizer.optimize).toHaveBeenCalledWith(weights);\n    });\n  });\n  \n  describe('SIMD Operations in WASM', () => {\n    test('should perform SIMD vector operations', async () => {\n      const vectorA = new Float32Array([1, 2, 3, 4, 5, 6, 7, 8]);\n      const vectorB = new Float32Array([8, 7, 6, 5, 4, 3, 2, 1]);\n      const result = new Float32Array(8);\n      \n      // Simulate SIMD vector addition\n      const simdResult = wasmInstance.exports.simd_vector_add(\n        0, // aPtr\n        vectorA.length * 4, // bPtr\n        vectorA.length * 8, // resultPtr\n        vectorA.length\n      );\n      \n      expect(wasmInstance.exports.simd_vector_add).toHaveBeenCalledWith(\n        0,\n        vectorA.length * 4,\n        vectorA.length * 8,\n        vectorA.length\n      );\n      expect(simdResult).toBe(0); // Success\n    });\n    \n    test('should benchmark SIMD performance', async () => {\n      const simdBenchmark = {\n        vectorSize: 1024,\n        iterations: 10000,\n        operations: ['add', 'multiply', 'dot_product']\n      };\n      \n      const benchmarkResults = [];\n      \n      for (const operation of simdBenchmark.operations) {\n        const startTime = performance.now();\n        \n        for (let i = 0; i < simdBenchmark.iterations; i++) {\n          // Simulate SIMD operation\n          await wasmInstance.exports.simd_vector_add(\n            0,\n            simdBenchmark.vectorSize * 4,\n            simdBenchmark.vectorSize * 8,\n            simdBenchmark.vectorSize\n          );\n        }\n        \n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        const throughput = simdBenchmark.iterations / duration * 1000;\n        \n        benchmarkResults.push({\n          operation,\n          duration,\n          throughput,\n          vectorSize: simdBenchmark.vectorSize\n        });\n      }\n      \n      expect(benchmarkResults.length).toBe(simdBenchmark.operations.length);\n      \n      // Check that all operations achieve reasonable throughput\n      benchmarkResults.forEach(result => {\n        expect(result.throughput).toBeGreaterThan(100); // > 100 ops/sec\n      });\n    });\n  });\n  \n  describe('Memory Management', () => {\n    test('should manage WASM memory efficiently', async () => {\n      const memoryStats = {\n        initial: wasmMemory.buffer.byteLength,\n        allocated: 0,\n        freed: 0,\n        peak: 0\n      };\n      \n      const memoryOperations = [\n        { operation: 'allocate', size: 1024 },\n        { operation: 'allocate', size: 2048 },\n        { operation: 'allocate', size: 4096 },\n        { operation: 'free', size: 1024 },\n        { operation: 'allocate', size: 8192 }\n      ];\n      \n      for (const op of memoryOperations) {\n        if (op.operation === 'allocate') {\n          memoryStats.allocated += op.size;\n        } else if (op.operation === 'free') {\n          memoryStats.freed += op.size;\n        }\n        \n        const currentUsage = memoryStats.allocated - memoryStats.freed;\n        if (currentUsage > memoryStats.peak) {\n          memoryStats.peak = currentUsage;\n        }\n      }\n      \n      const memoryUsage = wasmInstance.exports.get_memory_usage();\n      \n      expect(wasmInstance.exports.get_memory_usage).toHaveBeenCalledTimes(1);\n      expect(memoryUsage).toBeGreaterThan(0);\n      expect(memoryStats.peak).toBeGreaterThan(0);\n    });\n    \n    test('should handle memory growth', async () => {\n      const growthTest = {\n        initialPages: 1,\n        maxPages: 10,\n        growthIncrement: 1\n      };\n      \n      const memoryGrowth = {\n        grow: jest.fn(),\n        pages: jest.fn(),\n        validate: jest.fn()\n      };\n      \n      let currentPages = growthTest.initialPages;\n      \n      while (currentPages < growthTest.maxPages) {\n        await memoryGrowth.grow(growthTest.growthIncrement);\n        currentPages += growthTest.growthIncrement;\n      }\n      \n      expect(memoryGrowth.grow).toHaveBeenCalledTimes(growthTest.maxPages - growthTest.initialPages);\n    });\n  });\n  \n  describe('Error Handling and Edge Cases', () => {\n    test('should handle WASM runtime errors', async () => {\n      const errorHandler = {\n        catch: jest.fn(),\n        recover: jest.fn(),\n        log: jest.fn()\n      };\n      \n      const errorScenarios = [\n        { type: 'out_of_bounds', description: 'Memory access out of bounds' },\n        { type: 'stack_overflow', description: 'Stack overflow' },\n        { type: 'invalid_instruction', description: 'Invalid instruction' }\n      ];\n      \n      for (const scenario of errorScenarios) {\n        try {\n          // Simulate error condition\n          await errorHandler.catch(scenario);\n        } catch (error) {\n          await errorHandler.recover(error);\n        }\n      }\n      \n      expect(errorHandler.catch).toHaveBeenCalledTimes(errorScenarios.length);\n    });\n    \n    test('should handle invalid input data', async () => {\n      const invalidInputs = [\n        null,\n        undefined,\n        [],\n        {},\n        'invalid',\n        NaN,\n        Infinity,\n        new Float32Array([NaN, Infinity, -Infinity])\n      ];\n      \n      const inputValidator = {\n        validate: jest.fn(),\n        sanitize: jest.fn(),\n        handle: jest.fn()\n      };\n      \n      for (const input of invalidInputs) {\n        const validationResult = await inputValidator.validate(input);\n        \n        if (!validationResult.valid) {\n          await inputValidator.sanitize(input);\n        }\n      }\n      \n      expect(inputValidator.validate).toHaveBeenCalledTimes(invalidInputs.length);\n    });\n  });\n  \n  describe('Performance Monitoring', () => {\n    test('should monitor WASM execution performance', async () => {\n      const performanceMonitor = {\n        startProfiling: jest.fn(),\n        stopProfiling: jest.fn(),\n        getMetrics: jest.fn(),\n        analyze: jest.fn()\n      };\n      \n      await performanceMonitor.startProfiling();\n      \n      // Simulate various WASM operations\n      const operations = [\n        () => wasmInstance.exports.add(1, 2),\n        () => wasmInstance.exports.multiply(3, 4),\n        () => wasmInstance.exports.neural_process(0, 100, 400),\n        () => wasmInstance.exports.simd_vector_add(0, 400, 800, 100)\n      ];\n      \n      for (const operation of operations) {\n        const startTime = performance.now();\n        operation();\n        const endTime = performance.now();\n        \n        // Record operation time\n        const operationTime = endTime - startTime;\n        expect(operationTime).toBeLessThan(100); // Should complete within 100ms\n      }\n      \n      await performanceMonitor.stopProfiling();\n      const metrics = await performanceMonitor.getMetrics();\n      \n      expect(performanceMonitor.startProfiling).toHaveBeenCalledTimes(1);\n      expect(performanceMonitor.stopProfiling).toHaveBeenCalledTimes(1);\n      expect(performanceMonitor.getMetrics).toHaveBeenCalledTimes(1);\n    });\n    \n    test('should detect performance bottlenecks', async () => {\n      const bottleneckDetector = {\n        analyze: jest.fn(),\n        identify: jest.fn(),\n        suggest: jest.fn(),\n        optimize: jest.fn()\n      };\n      \n      const performanceData = {\n        operations: [\n          { name: 'neural_process', time: 150, calls: 1000 },\n          { name: 'simd_vector_add', time: 5, calls: 10000 },\n          { name: 'memory_allocation', time: 50, calls: 100 }\n        ],\n        memoryUsage: [1024, 2048, 4096, 8192],\n        cpuUsage: [20, 40, 60, 80]\n      };\n      \n      await bottleneckDetector.analyze(performanceData);\n      \n      expect(bottleneckDetector.analyze).toHaveBeenCalledWith(performanceData);\n    });\n  });\n  \n  describe('Integration with JavaScript', () => {\n    test('should handle JavaScript-WASM data exchange', async () => {\n      const dataExchange = {\n        jsToWasm: jest.fn(),\n        wasmToJs: jest.fn(),\n        validate: jest.fn(),\n        convert: jest.fn()\n      };\n      \n      const jsData = {\n        numbers: [1, 2, 3, 4, 5],\n        strings: ['hello', 'world'],\n        objects: { a: 1, b: 2 }\n      };\n      \n      // Convert JS data to WASM format\n      const wasmData = await dataExchange.jsToWasm(jsData);\n      \n      // Process in WASM\n      const processedData = wasmInstance.exports.neural_process(0, jsData.numbers.length, 100);\n      \n      // Convert back to JS\n      const jsResult = await dataExchange.wasmToJs(processedData);\n      \n      expect(dataExchange.jsToWasm).toHaveBeenCalledWith(jsData);\n      expect(dataExchange.wasmToJs).toHaveBeenCalledWith(processedData);\n      expect(processedData).toBe(jsData.numbers.length);\n    });\n    \n    test('should handle asynchronous WASM operations', async () => {\n      const asyncOperations = {\n        startAsync: jest.fn(),\n        checkProgress: jest.fn(),\n        getResult: jest.fn(),\n        cancel: jest.fn()\n      };\n      \n      const asyncTasks = [\n        { name: 'neural_training', duration: 5000 },\n        { name: 'data_processing', duration: 2000 },\n        { name: 'optimization', duration: 3000 }\n      ];\n      \n      const promises = asyncTasks.map(async (task) => {\n        await asyncOperations.startAsync(task);\n        \n        // Simulate async operation\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        const result = await asyncOperations.getResult(task);\n        return result;\n      });\n      \n      const results = await Promise.all(promises);\n      \n      expect(asyncOperations.startAsync).toHaveBeenCalledTimes(asyncTasks.length);\n      expect(asyncOperations.getResult).toHaveBeenCalledTimes(asyncTasks.length);\n      expect(results).toHaveLength(asyncTasks.length);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}