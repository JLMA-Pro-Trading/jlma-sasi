{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/SwarmContextIntegration.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/services/SwarmContextIntegration.ts"],"sourcesContent":["/**\n * SwarmContext Integration Layer\n * \n * Provides drop-in replacement functions for SwarmContext mock methods:\n * - initializeMockData() → initializeNeuralData()\n * - generateMockAgents() → generateNeuralAgents()\n * - simulateSwarmActivity() → simulateNeuralActivity()\n * \n * Maintains full compatibility with existing SwarmContext while adding\n * real neural capabilities via NeuralAgentManager.\n */\n\nimport NeuralAgentManager from './NeuralAgentManager'\nimport { Agent } from '../types/agent'\nimport { Repository, SwarmStats } from '../contexts/SwarmContext'\n\nexport interface NeuralSwarmIntegration {\n  neuralManager: NeuralAgentManager\n  isInitialized: boolean\n  initializationPromise: Promise<void> | null\n}\n\nexport class SwarmContextIntegration {\n  private static instance: SwarmContextIntegration | null = null\n  private neuralManager: NeuralAgentManager | null = null\n  private isInitialized = false\n  private initializationPromise: Promise<void> | null = null\n  \n  // Integration state\n  private repositories: Repository[] = []\n  private agents: Agent[] = []\n  private lastActivity = Date.now()\n  \n  private constructor() {\n    // Singleton pattern for integration layer\n  }\n  \n  static getInstance(): SwarmContextIntegration {\n    if (!SwarmContextIntegration.instance) {\n      SwarmContextIntegration.instance = new SwarmContextIntegration()\n    }\n    return SwarmContextIntegration.instance\n  }\n  \n  /**\n   * Initialize Neural Data\n   * Replaces initializeMockData() from SwarmContext\n   */\n  async initializeNeuralData(repositories: Repository[]): Promise<void> {\n    if (this.initializationPromise) {\n      return this.initializationPromise\n    }\n    \n    this.initializationPromise = this.performInitialization(repositories)\n    return this.initializationPromise\n  }\n  \n  private async performInitialization(repositories: Repository[]): Promise<void> {\n    try {\n      console.log('🧠 Initializing Neural Swarm Integration...')\n      \n      // Store repositories for agent generation\n      this.repositories = repositories\n      \n      // Initialize Neural Agent Manager\n      this.neuralManager = new NeuralAgentManager({\n        maxAgents: 25,\n        memoryLimitPerAgent: 50 * 1024 * 1024,\n        performanceMonitoring: true,\n        simdEnabled: true,\n        crossLearningEnabled: true,\n        persistenceEnabled: true,\n        inferenceTimeout: 100\n      })\n      \n      // Initialize neural manager - if initialize method exists\n      if ('initialize' in this.neuralManager && typeof this.neuralManager.initialize === 'function') {\n        await this.neuralManager.initialize()\n      }\n      \n      // Generate initial neural agents\n      // Spawn neural agents - if spawnNeuralAgents method exists\n      if (this.neuralManager.spawnAgent) {\n        // Generate initial agents using spawnAgent method\n        this.agents = []\n        for (let i = 0; i < 25; i++) {\n          try {\n            const agentId = await this.neuralManager.spawnAgent({\n              type: 'mlp',\n              architecture: [128, 64, 32, 16]\n            })\n            const agent = this.neuralManager.getAgentState(agentId)\n            if (agent) {\n              this.agents.push(agent as any)\n            }\n          } catch (error) {\n            console.warn(`Failed to spawn agent ${i}:`, error)\n          }\n        }\n      } else {\n        this.agents = []\n      }\n      \n      this.isInitialized = true\n      this.lastActivity = Date.now()\n      \n      console.log(`✅ Neural Swarm Integration initialized with ${this.agents.length} neural agents`)\n      \n    } catch (error) {\n      console.error('❌ Failed to initialize Neural Swarm Integration:', error)\n      \n      // Fallback to mock data if neural initialization fails\n      console.log('⚠️ Falling back to enhanced mock data...')\n      this.generateFallbackMockData()\n      this.isInitialized = true\n    }\n  }\n  \n  /**\n   * Generate Neural Agents\n   * Replaces generateMockAgents() from SwarmContext\n   */\n  generateNeuralAgents(count: number): Agent[] {\n    if (!this.isInitialized || !this.neuralManager) {\n      console.warn('⚠️ Neural manager not initialized, using fallback generation')\n      return this.generateFallbackAgents(count)\n    }\n    \n    // Return existing agents or spawn new ones if needed\n    if (this.agents.length >= count) {\n      return this.agents.slice(0, count)\n    }\n    \n    // Spawn additional agents asynchronously\n    const additionalCount = count - this.agents.length\n    this.spawnAdditionalAgents(additionalCount)\n    \n    return this.agents\n  }\n  \n  /**\n   * Simulate Neural Activity\n   * Replaces simulateSwarmActivity() from SwarmContext\n   */\n  async simulateNeuralActivity(): Promise<Agent[]> {\n    if (!this.isInitialized || !this.neuralManager) {\n      console.warn('⚠️ Neural manager not initialized, using fallback simulation')\n      return this.simulateFallbackActivity()\n    }\n    \n    try {\n      // Run neural inference on all agents\n      const updatedAgents = []\n      for (const agent of this.agents) {\n        try {\n          // Run inference with dummy inputs\n          const inputs = [0.1, 0.2, 0.3, 0.4] // dummy inputs\n          await this.neuralManager.runInference(agent.id, inputs)\n          updatedAgents.push(agent)\n        } catch (error) {\n          console.warn(`Inference failed for agent ${agent.id}:`, error)\n        }\n      }\n      \n      // Update internal state\n      this.agents = updatedAgents\n      this.lastActivity = Date.now()\n      \n      return updatedAgents\n      \n    } catch (error) {\n      console.error('❌ Neural activity simulation failed:', error)\n      return this.simulateFallbackActivity()\n    }\n  }\n  \n  /**\n   * Add Neural Agent\n   * Enhanced version of addAgent() for SwarmContext\n   */\n  async addNeuralAgent(type: Agent['type']): Promise<Agent | null> {\n    if (!this.isInitialized || !this.neuralManager) {\n      console.warn('⚠️ Neural manager not initialized, creating fallback agent')\n      return this.createFallbackAgent(type)\n    }\n    \n    try {\n      // Spawn single neural agent\n      const newAgentId = await this.neuralManager.spawnAgent({\n        type: 'mlp',\n        architecture: [128, 64, 32, 16]\n      })\n      \n      if (newAgentId) {\n        const agentState = this.neuralManager.getAgentState(newAgentId)\n        if (agentState) {\n          const newAgent = { ...agentState, type } as unknown as Agent // Override type if specified\n          this.agents.push(newAgent)\n          return newAgent\n        }\n      }\n      \n      return null\n      \n    } catch (error) {\n      console.error('❌ Failed to add neural agent:', error)\n      return this.createFallbackAgent(type)\n    }\n  }\n  \n  /**\n   * Remove Neural Agent\n   * Enhanced version of removeAgent() for SwarmContext\n   */\n  async removeNeuralAgent(agentId: string): Promise<boolean> {\n    if (!this.isInitialized || !this.neuralManager) {\n      console.warn('⚠️ Neural manager not initialized, removing from fallback list')\n      this.agents = this.agents.filter(agent => agent.id !== agentId)\n      return true\n    }\n    \n    try {\n      // Terminate neural agent\n      await this.neuralManager.terminateAgent(agentId)\n      \n      // Remove from local list\n      this.agents = this.agents.filter(agent => agent.id !== agentId)\n      \n      return true\n      \n    } catch (error) {\n      console.error(`❌ Failed to remove neural agent ${agentId}:`, error)\n      \n      // Remove from local list anyway\n      this.agents = this.agents.filter(agent => agent.id !== agentId)\n      return false\n    }\n  }\n  \n  /**\n   * Get Enhanced Stats\n   * Provides neural-enhanced statistics for SwarmContext\n   */\n  getEnhancedStats(baseStats: SwarmStats): SwarmStats {\n    if (!this.isInitialized || !this.neuralManager) {\n      return {\n        ...baseStats,\n        neuralMeshStats: {\n          totalNeurons: 0,\n          totalSynapses: 0,\n          meshConnectivity: 0,\n          neuralActivity: 0,\n          wasmAcceleration: false,\n          averageLatency: 0\n        }\n      }\n    }\n    \n    try {\n      const metrics = this.neuralManager.getPerformanceMetrics()\n      \n      return {\n        ...baseStats,\n        totalAgents: this.agents.length,\n        activeAgents: this.agents.filter(a => a.status === 'active').length,\n        networkEfficiency: metrics.systemHealthScore,\n        neuralMeshStats: {\n          totalNeurons: 0,\n          totalSynapses: 0,\n          meshConnectivity: 0,\n          neuralActivity: 0,\n          wasmAcceleration: false,\n          averageLatency: metrics.averageInferenceTime\n        }\n      }\n    } catch (error) {\n      console.error('❌ Failed to get enhanced stats:', error)\n      return baseStats\n    }\n  }\n  \n  /**\n   * Get Integration Status\n   */\n  getIntegrationStatus(): NeuralSwarmIntegration {\n    return {\n      neuralManager: this.neuralManager!,\n      isInitialized: this.isInitialized,\n      initializationPromise: this.initializationPromise\n    }\n  }\n  \n  /**\n   * Cleanup Neural Resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.neuralManager) {\n      try {\n        await this.neuralManager.cleanup()\n        console.log('✅ Neural resources cleaned up')\n      } catch (error) {\n        console.error('❌ Failed to cleanup neural resources:', error)\n      }\n    }\n    \n    this.neuralManager = null\n    this.isInitialized = false\n    this.initializationPromise = null\n    this.agents = []\n    this.repositories = []\n  }\n  \n  // ===== FALLBACK METHODS =====\n  \n  /**\n   * Generate fallback mock data when neural initialization fails\n   */\n  private generateFallbackMockData(): void {\n    console.log('📋 Generating enhanced fallback mock data...')\n    \n    // Enhanced mock repositories with neural context\n    this.repositories = [\n      {\n        id: 'repo_1',\n        name: 'neural-architecture-search',\n        owner: 'DeepMind',\n        description: 'Automated neural architecture discovery with reinforcement learning',\n        activeAgents: 8,\n        totalIssues: 47,\n        completedIssues: 32,\n        openPullRequests: 3,\n        lastActivity: new Date(),\n        techStack: ['Python', 'TensorFlow', 'JAX', 'CUDA'],\n        votes: 156,\n        userVoted: false\n      },\n      {\n        id: 'repo_2',\n        name: 'synaptic-mesh-framework',\n        owner: 'OpenAI',\n        description: 'Distributed neural mesh computing with WASM acceleration',\n        activeAgents: 12,\n        totalIssues: 73,\n        completedIssues: 51,\n        openPullRequests: 5,\n        lastActivity: new Date(),\n        techStack: ['Rust', 'WebAssembly', 'TypeScript', 'C++'],\n        votes: 289,\n        userVoted: true\n      },\n      {\n        id: 'repo_3',\n        name: 'ruv-fann-enhanced',\n        owner: 'FANN-Community',\n        description: 'Fast Artificial Neural Network library with SIMD optimization',\n        activeAgents: 6,\n        totalIssues: 95,\n        completedIssues: 78,\n        openPullRequests: 2,\n        lastActivity: new Date(),\n        techStack: ['C', 'Rust', 'Python', 'WebAssembly'],\n        votes: 445,\n        userVoted: false\n      }\n    ]\n    \n    // Generate enhanced mock agents\n    this.agents = this.generateFallbackAgents(25)\n  }\n  \n  /**\n   * Generate fallback agents with neural-like properties\n   */\n  private generateFallbackAgents(count: number): Agent[] {\n    const agentTypes: Agent['type'][] = ['researcher', 'coder', 'tester', 'reviewer', 'debugger']\n    const neuralTasks = [\n      'Training convolutional neural networks',\n      'Optimizing SIMD vectorization',\n      'Implementing transformer attention',\n      'Debugging memory allocation',\n      'Analyzing gradient flow',\n      'Testing inference performance',\n      'Reviewing neural architectures',\n      'Optimizing WASM execution',\n      'Implementing backpropagation',\n      'Tuning hyperparameters'\n    ]\n    \n    const owners = [\n      'Neural-Researcher-Alpha', 'Code-Generator-Beta', 'Test-Validator-Gamma',\n      'Architecture-Reviewer-Delta', 'Debug-Specialist-Epsilon', 'Performance-Optimizer-Zeta'\n    ]\n    \n    return Array.from({ length: count }, (_, i) => {\n      const agentType = agentTypes[Math.floor(Math.random() * agentTypes.length)]\n      const repository = this.repositories[Math.floor(Math.random() * this.repositories.length)]\n      \n      return {\n        id: `neural_fallback_${i}`,\n        name: `${agentType.charAt(0).toUpperCase() + agentType.slice(1)}-Neural-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n        type: agentType,\n        status: Math.random() > 0.7 ? 'active' : Math.random() > 0.5 ? 'processing' : 'idle',\n        currentTask: neuralTasks[Math.floor(Math.random() * neuralTasks.length)],\n        repository: repository?.name || 'neural-architecture-search',\n        branch: `neural/enhanced-${i}-${Math.random().toString(36).substr(2, 6)}`,\n        completedTasks: Math.floor(Math.random() * 50),\n        efficiency: 75 + Math.random() * 20, // 75-95% efficiency\n        progress: Math.random(),\n        position: {\n          x: (Math.random() - 0.5) * 200,\n          y: (Math.random() - 0.5) * 200,\n          z: (Math.random() - 0.5) * 200\n        },\n        owner: owners[Math.floor(Math.random() * owners.length)],\n        neuralId: `fallback_neural_${i}_${Date.now()}`,\n        meshConnection: {\n          connected: Math.random() > 0.2, // 80% connection rate\n          meshId: `fallback_mesh_${Math.floor(i / 5)}`,\n          nodeType: this.mapAgentTypeToNodeType(agentType),\n          layer: Math.floor(Math.random() * 6) + 1,\n          synapses: Math.floor(Math.random() * 100) + 20,\n          activation: Math.random(),\n          lastSpike: new Date(Date.now() - Math.random() * 60000) // Within last minute\n        },\n        realtime: {\n          cpuUsage: Math.random() * 40 + 20, // 20-60%\n          memoryUsage: Math.random() * 45 + 15, // 15-60MB\n          networkLatency: Math.random() * 15 + 5, // 5-20ms\n          wasmPerformance: 1.0 // No WASM acceleration in fallback\n        }\n      }\n    })\n  }\n  \n  /**\n   * Create single fallback agent\n   */\n  private createFallbackAgent(type: Agent['type']): Agent {\n    const agents = this.generateFallbackAgents(1)\n    const agent = agents[0]\n    agent.type = type\n    agent.name = `${type.charAt(0).toUpperCase() + type.slice(1)}-Fallback-${Math.random().toString(36).substr(2, 4).toUpperCase()}`\n    return agent\n  }\n  \n  /**\n   * Simulate fallback activity\n   */\n  private simulateFallbackActivity(): Agent[] {\n    return this.agents.map(agent => {\n      const shouldUpdate = Math.random() > 0.3 // 70% update chance\n      if (!shouldUpdate) return agent\n      \n      // Simulate neural-like updates\n      const newStatus = Math.random() > 0.8 ? 'active' : \n                       Math.random() > 0.6 ? 'processing' : \n                       Math.random() > 0.4 ? 'idle' : 'completed'\n      \n      const completedTasks = newStatus === 'completed' ? \n                            agent.completedTasks + 1 : \n                            agent.completedTasks\n      \n      // Update efficiency based on performance\n      const efficiencyDelta = (Math.random() - 0.5) * 5 // ±2.5%\n      const newEfficiency = Math.max(50, Math.min(100, agent.efficiency + efficiencyDelta))\n      \n      // Update progress\n      const progressDelta = newStatus === 'processing' ? 0.1 : \n                           newStatus === 'active' ? 0.05 : \n                           newStatus === 'completed' ? -agent.progress : 0\n      const newProgress = Math.max(0, Math.min(1, agent.progress + progressDelta))\n      \n      // Update position with neural-like movement\n      const movementRange = 3\n      const newPosition = {\n        x: agent.position.x + (Math.random() - 0.5) * movementRange,\n        y: agent.position.y + (Math.random() - 0.5) * movementRange,\n        z: agent.position.z + (Math.random() - 0.5) * movementRange\n      }\n      \n      // Update mesh connection\n      const meshConnection = agent.meshConnection ? {\n        ...agent.meshConnection,\n        activation: Math.random(),\n        lastSpike: new Date()\n      } : undefined\n      \n      // Update realtime metrics\n      const realtime = agent.realtime ? {\n        cpuUsage: Math.max(10, Math.min(80, agent.realtime.cpuUsage + (Math.random() - 0.5) * 10)),\n        memoryUsage: Math.max(10, Math.min(80, agent.realtime.memoryUsage + (Math.random() - 0.5) * 5)),\n        networkLatency: Math.max(1, Math.min(50, agent.realtime.networkLatency + (Math.random() - 0.5) * 2)),\n        wasmPerformance: agent.realtime.wasmPerformance\n      } : undefined\n      \n      return {\n        ...agent,\n        status: newStatus,\n        completedTasks,\n        efficiency: newEfficiency,\n        progress: newProgress,\n        position: newPosition,\n        meshConnection,\n        realtime\n      }\n    })\n  }\n  \n  /**\n   * Spawn additional agents asynchronously\n   */\n  private async spawnAdditionalAgents(count: number): Promise<void> {\n    if (!this.neuralManager) return\n    \n    try {\n      const newAgents = []\n      for (let i = 0; i < count; i++) {\n        try {\n          const agentId = await this.neuralManager.spawnAgent({\n            type: 'mlp',\n            architecture: [128, 64, 32, 16]\n          })\n          const agent = this.neuralManager.getAgentState(agentId)\n          if (agent) {\n            newAgents.push(agent as any)\n          }\n        } catch (error) {\n          console.warn(`Failed to spawn agent ${i}:`, error)\n        }\n      }\n      this.agents.push(...newAgents)\n      console.log(`✅ Spawned ${newAgents.length} additional neural agents`)\n    } catch (error) {\n      console.error('❌ Failed to spawn additional agents:', error)\n      \n      // Fallback to mock agents\n      const fallbackAgents = this.generateFallbackAgents(count)\n      this.agents.push(...fallbackAgents)\n    }\n  }\n  \n  private mapAgentTypeToNodeType(agentType: Agent['type']): string {\n    const mapping = {\n      'researcher': 'sensory',\n      'coder': 'motor',\n      'tester': 'inter',\n      'reviewer': 'pyramidal',\n      'debugger': 'purkinje'\n    }\n    return mapping[agentType] || 'inter'\n  }\n}\n\n// Export singleton instance for easy integration\nexport const neuralSwarmIntegration = SwarmContextIntegration.getInstance()\n\nexport default SwarmContextIntegration"],"version":3}