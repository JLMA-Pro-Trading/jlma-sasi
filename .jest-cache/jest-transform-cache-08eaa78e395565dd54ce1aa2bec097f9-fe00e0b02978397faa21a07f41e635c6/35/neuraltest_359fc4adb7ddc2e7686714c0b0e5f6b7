af39df99e4c5b289394301277228570d
"use strict";
/**
 * Unit Tests for Neural Type Definitions and Validation
 * Target: 95%+ coverage for type guards and validation functions
 */
Object.defineProperty(exports, "__esModule", { value: true });
const neural_1 = require("../../../src/types/neural");
describe('Neural Types - Comprehensive Tests', () => {
    describe('AgentState Enum', () => {
        test('should include all required states', () => {
            expect(neural_1.AgentState.INITIALIZING).toBe('initializing');
            expect(neural_1.AgentState.ACTIVE).toBe('active');
            expect(neural_1.AgentState.IDLE).toBe('idle');
            expect(neural_1.AgentState.LEARNING).toBe('learning');
            expect(neural_1.AgentState.TERMINATING).toBe('terminating');
            expect(neural_1.AgentState.ERROR).toBe('error');
        });
        test('should validate agent states correctly', () => {
            expect((0, neural_1.isValidAgentState)('active')).toBe(true);
            expect((0, neural_1.isValidAgentState)('learning')).toBe(true);
            expect((0, neural_1.isValidAgentState)('invalid')).toBe(false);
            expect((0, neural_1.isValidAgentState)('')).toBe(false);
            expect((0, neural_1.isValidAgentState)(null)).toBe(false);
            expect((0, neural_1.isValidAgentState)(undefined)).toBe(false);
        });
    });
    describe('NeuralConfiguration Validation', () => {
        test('should validate valid neural configurations', () => {
            const validConfig = {
                type: 'mlp',
                architecture: [10, 5, 1],
                activationFunction: 'tanh',
                learningRate: 0.001,
                batchSize: 32,
                epochs: 100
            };
            expect((0, neural_1.isValidNeuralConfiguration)(validConfig)).toBe(true);
        });
        test('should reject invalid neural configurations', () => {
            // Missing required fields
            expect((0, neural_1.isValidNeuralConfiguration)({})).toBe(false);
            expect((0, neural_1.isValidNeuralConfiguration)(null)).toBe(false);
            expect((0, neural_1.isValidNeuralConfiguration)(undefined)).toBe(false);
            // Invalid type
            expect((0, neural_1.isValidNeuralConfiguration)({
                type: '',
                architecture: [10, 1]
            })).toBe(false);
            // Invalid architecture
            expect((0, neural_1.isValidNeuralConfiguration)({
                type: 'mlp',
                architecture: []
            })).toBe(false);
            expect((0, neural_1.isValidNeuralConfiguration)({
                type: 'mlp',
                architecture: [-1, 5, 1]
            })).toBe(false);
            // Invalid learning rate
            expect((0, neural_1.isValidNeuralConfiguration)({
                type: 'mlp',
                architecture: [10, 1],
                learningRate: -0.1
            })).toBe(false);
            expect((0, neural_1.isValidNeuralConfiguration)({
                type: 'mlp',
                architecture: [10, 1],
                learningRate: 2.0
            })).toBe(false);
        });
        test('should validate network architectures', () => {
            expect((0, neural_1.validateNetworkArchitecture)([10, 5, 1])).toBe(true);
            expect((0, neural_1.validateNetworkArchitecture)([1])).toBe(true);
            expect((0, neural_1.validateNetworkArchitecture)([784, 128, 64, 10])).toBe(true);
            // Invalid architectures
            expect((0, neural_1.validateNetworkArchitecture)([])).toBe(false);
            expect((0, neural_1.validateNetworkArchitecture)([0, 5, 1])).toBe(false);
            expect((0, neural_1.validateNetworkArchitecture)([10, -1, 1])).toBe(false);
            expect((0, neural_1.validateNetworkArchitecture)([10, 5.5, 1])).toBe(false);
            expect((0, neural_1.validateNetworkArchitecture)(null)).toBe(false);
            expect((0, neural_1.validateNetworkArchitecture)(undefined)).toBe(false);
        });
        test('should normalize activation functions', () => {
            expect((0, neural_1.normalizeActivationFunction)('tanh')).toBe('tanh');
            expect((0, neural_1.normalizeActivationFunction)('relu')).toBe('relu');
            expect((0, neural_1.normalizeActivationFunction)('sigmoid')).toBe('sigmoid');
            expect((0, neural_1.normalizeActivationFunction)('linear')).toBe('linear');
            // Case normalization
            expect((0, neural_1.normalizeActivationFunction)('TANH')).toBe('tanh');
            expect((0, neural_1.normalizeActivationFunction)('ReLU')).toBe('relu');
            expect((0, neural_1.normalizeActivationFunction)('Sigmoid')).toBe('sigmoid');
            // Invalid functions should return default
            expect((0, neural_1.normalizeActivationFunction)('invalid')).toBe('tanh');
            expect((0, neural_1.normalizeActivationFunction)('')).toBe('tanh');
            expect((0, neural_1.normalizeActivationFunction)(null)).toBe('tanh');
            expect((0, neural_1.normalizeActivationFunction)(undefined)).toBe('tanh');
        });
    });
    describe('Edge Cases and Error Handling', () => {
        test('should handle edge case network architectures', () => {
            // Very large networks
            const largeArch = new Array(1000).fill(10);
            expect((0, neural_1.validateNetworkArchitecture)(largeArch)).toBe(true);
            // Single neuron networks
            expect((0, neural_1.validateNetworkArchitecture)([1])).toBe(true);
            // Very wide networks
            expect((0, neural_1.validateNetworkArchitecture)([10000, 1])).toBe(true);
        });
        test('should handle special numeric values', () => {
            expect((0, neural_1.validateNetworkArchitecture)([Infinity, 5, 1])).toBe(false);
            expect((0, neural_1.validateNetworkArchitecture)([NaN, 5, 1])).toBe(false);
            expect((0, neural_1.validateNetworkArchitecture)([10, Number.MAX_VALUE, 1])).toBe(true);
        });
        test('should validate complex neural configurations', () => {
            const complexConfig = {
                type: 'lstm',
                architecture: [784, 256, 128, 10],
                activationFunction: 'relu',
                learningRate: 0.001,
                batchSize: 64,
                epochs: 200,
                dropoutRate: 0.2,
                regularization: 'l2',
                optimizer: 'adam',
                lossFunction: 'crossentropy'
            };
            expect((0, neural_1.isValidNeuralConfiguration)(complexConfig)).toBe(true);
        });
        test('should handle mixed type inputs', () => {
            const mixedConfig = {
                type: 123, // Should be string
                architecture: "10,5,1", // Should be array
                learningRate: "0.001" // Should be number
            };
            expect((0, neural_1.isValidNeuralConfiguration)(mixedConfig)).toBe(false);
        });
    });
    describe('Performance Validation', () => {
        test('should validate large configurations efficiently', () => {
            const largeConfig = {
                type: 'cnn',
                architecture: new Array(1000).fill(128),
                activationFunction: 'relu',
                learningRate: 0.001
            };
            const startTime = performance.now();
            const isValid = (0, neural_1.isValidNeuralConfiguration)(largeConfig);
            const endTime = performance.now();
            expect(isValid).toBe(true);
            expect(endTime - startTime).toBeLessThan(100); // Should complete in < 100ms
        });
        test('should handle repeated validations efficiently', () => {
            const config = {
                type: 'mlp',
                architecture: [10, 5, 1],
                activationFunction: 'tanh'
            };
            const startTime = performance.now();
            for (let i = 0; i < 1000; i++) {
                (0, neural_1.isValidNeuralConfiguration)(config);
            }
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(100); // Should handle 1000 validations in < 100ms
        });
    });
    describe('Type Guards', () => {
        test('should correctly identify valid neural agents', () => {
            const validAgent = {
                id: 'agent-123',
                config: {
                    type: 'mlp',
                    architecture: [10, 5, 1]
                },
                state: neural_1.AgentState.ACTIVE,
                createdAt: Date.now(),
                lastActive: Date.now(),
                memoryUsage: 1024,
                totalInferences: 0,
                averageInferenceTime: 0,
                learningProgress: 0,
                connectionStrength: 1.0
            };
            // Test would require implementing isValidNeuralAgent function
            // For now, testing the components we have
            expect((0, neural_1.isValidAgentState)(validAgent.state)).toBe(true);
            expect((0, neural_1.isValidNeuralConfiguration)(validAgent.config)).toBe(true);
        });
        test('should handle circular references gracefully', () => {
            const circularConfig = {
                type: 'mlp',
                architecture: [10, 5, 1]
            };
            circularConfig.self = circularConfig;
            // Should not cause infinite recursion
            expect(() => (0, neural_1.isValidNeuralConfiguration)(circularConfig)).not.toThrow();
        });
        test('should validate nested configuration objects', () => {
            const nestedConfig = {
                type: 'transformer',
                architecture: [512, 256, 128],
                activationFunction: 'gelu',
                attention: {
                    heads: 8,
                    dimensions: 64,
                    dropout: 0.1
                },
                layers: {
                    encoder: 6,
                    decoder: 6,
                    feedForward: 2048
                }
            };
            expect((0, neural_1.isValidNeuralConfiguration)(nestedConfig)).toBe(true);
        });
    });
    describe('Custom Type Extensions', () => {
        test('should handle custom network types', () => {
            const customConfig = {
                type: 'custom_gan',
                architecture: [100, 256, 512, 784],
                activationFunction: 'leaky_relu',
                discriminator: {
                    architecture: [784, 512, 256, 1],
                    activationFunction: 'sigmoid'
                }
            };
            expect((0, neural_1.isValidNeuralConfiguration)(customConfig)).toBe(true);
        });
        test('should validate experimental activation functions', () => {
            expect((0, neural_1.normalizeActivationFunction)('swish')).toBe('tanh'); // Falls back to default
            expect((0, neural_1.normalizeActivationFunction)('mish')).toBe('tanh'); // Falls back to default
            expect((0, neural_1.normalizeActivationFunction)('gelu')).toBe('tanh'); // Falls back to default
        });
        test('should handle dynamic architecture definitions', () => {
            const dynamicArch = [
                Math.floor(Math.random() * 100) + 1,
                Math.floor(Math.random() * 50) + 1,
                Math.floor(Math.random() * 10) + 1
            ];
            expect((0, neural_1.validateNetworkArchitecture)(dynamicArch)).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,