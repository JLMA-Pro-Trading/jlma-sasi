{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/types/neural.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/types/neural.test.ts"],"sourcesContent":["/**\n * Unit Tests for Neural Type Definitions and Validation\n * Target: 95%+ coverage for type guards and validation functions\n */\n\nimport { \n  AgentState, \n  NeuralConfiguration, \n  isValidAgentState,\n  isValidNeuralConfiguration,\n  validateNetworkArchitecture,\n  normalizeActivationFunction\n} from '../../../src/types/neural';\n\ndescribe('Neural Types - Comprehensive Tests', () => {\n  describe('AgentState Enum', () => {\n    test('should include all required states', () => {\n      expect(AgentState.INITIALIZING).toBe('initializing');\n      expect(AgentState.ACTIVE).toBe('active');\n      expect(AgentState.IDLE).toBe('idle');\n      expect(AgentState.LEARNING).toBe('learning');\n      expect(AgentState.TERMINATING).toBe('terminating');\n      expect(AgentState.ERROR).toBe('error');\n    });\n\n    test('should validate agent states correctly', () => {\n      expect(isValidAgentState('active')).toBe(true);\n      expect(isValidAgentState('learning')).toBe(true);\n      expect(isValidAgentState('invalid')).toBe(false);\n      expect(isValidAgentState('')).toBe(false);\n      expect(isValidAgentState(null)).toBe(false);\n      expect(isValidAgentState(undefined)).toBe(false);\n    });\n  });\n\n  describe('NeuralConfiguration Validation', () => {\n    test('should validate valid neural configurations', () => {\n      const validConfig: NeuralConfiguration = {\n        type: 'mlp',\n        architecture: [10, 5, 1],\n        activationFunction: 'tanh',\n        learningRate: 0.001,\n        batchSize: 32,\n        epochs: 100\n      };\n\n      expect(isValidNeuralConfiguration(validConfig)).toBe(true);\n    });\n\n    test('should reject invalid neural configurations', () => {\n      // Missing required fields\n      expect(isValidNeuralConfiguration({})).toBe(false);\n      expect(isValidNeuralConfiguration(null)).toBe(false);\n      expect(isValidNeuralConfiguration(undefined)).toBe(false);\n\n      // Invalid type\n      expect(isValidNeuralConfiguration({\n        type: '',\n        architecture: [10, 1]\n      })).toBe(false);\n\n      // Invalid architecture\n      expect(isValidNeuralConfiguration({\n        type: 'mlp',\n        architecture: []\n      })).toBe(false);\n\n      expect(isValidNeuralConfiguration({\n        type: 'mlp',\n        architecture: [-1, 5, 1]\n      })).toBe(false);\n\n      // Invalid learning rate\n      expect(isValidNeuralConfiguration({\n        type: 'mlp',\n        architecture: [10, 1],\n        learningRate: -0.1\n      })).toBe(false);\n\n      expect(isValidNeuralConfiguration({\n        type: 'mlp',\n        architecture: [10, 1],\n        learningRate: 2.0\n      })).toBe(false);\n    });\n\n    test('should validate network architectures', () => {\n      expect(validateNetworkArchitecture([10, 5, 1])).toBe(true);\n      expect(validateNetworkArchitecture([1])).toBe(true);\n      expect(validateNetworkArchitecture([784, 128, 64, 10])).toBe(true);\n\n      // Invalid architectures\n      expect(validateNetworkArchitecture([])).toBe(false);\n      expect(validateNetworkArchitecture([0, 5, 1])).toBe(false);\n      expect(validateNetworkArchitecture([10, -1, 1])).toBe(false);\n      expect(validateNetworkArchitecture([10, 5.5, 1])).toBe(false);\n      expect(validateNetworkArchitecture(null)).toBe(false);\n      expect(validateNetworkArchitecture(undefined)).toBe(false);\n    });\n\n    test('should normalize activation functions', () => {\n      expect(normalizeActivationFunction('tanh')).toBe('tanh');\n      expect(normalizeActivationFunction('relu')).toBe('relu');\n      expect(normalizeActivationFunction('sigmoid')).toBe('sigmoid');\n      expect(normalizeActivationFunction('linear')).toBe('linear');\n\n      // Case normalization\n      expect(normalizeActivationFunction('TANH')).toBe('tanh');\n      expect(normalizeActivationFunction('ReLU')).toBe('relu');\n      expect(normalizeActivationFunction('Sigmoid')).toBe('sigmoid');\n\n      // Invalid functions should return default\n      expect(normalizeActivationFunction('invalid')).toBe('tanh');\n      expect(normalizeActivationFunction('')).toBe('tanh');\n      expect(normalizeActivationFunction(null)).toBe('tanh');\n      expect(normalizeActivationFunction(undefined)).toBe('tanh');\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    test('should handle edge case network architectures', () => {\n      // Very large networks\n      const largeArch = new Array(1000).fill(10);\n      expect(validateNetworkArchitecture(largeArch)).toBe(true);\n\n      // Single neuron networks\n      expect(validateNetworkArchitecture([1])).toBe(true);\n\n      // Very wide networks\n      expect(validateNetworkArchitecture([10000, 1])).toBe(true);\n    });\n\n    test('should handle special numeric values', () => {\n      expect(validateNetworkArchitecture([Infinity, 5, 1])).toBe(false);\n      expect(validateNetworkArchitecture([NaN, 5, 1])).toBe(false);\n      expect(validateNetworkArchitecture([10, Number.MAX_VALUE, 1])).toBe(true);\n    });\n\n    test('should validate complex neural configurations', () => {\n      const complexConfig = {\n        type: 'lstm',\n        architecture: [784, 256, 128, 10],\n        activationFunction: 'relu',\n        learningRate: 0.001,\n        batchSize: 64,\n        epochs: 200,\n        dropoutRate: 0.2,\n        regularization: 'l2',\n        optimizer: 'adam',\n        lossFunction: 'crossentropy'\n      };\n\n      expect(isValidNeuralConfiguration(complexConfig)).toBe(true);\n    });\n\n    test('should handle mixed type inputs', () => {\n      const mixedConfig = {\n        type: 123, // Should be string\n        architecture: \"10,5,1\", // Should be array\n        learningRate: \"0.001\" // Should be number\n      };\n\n      expect(isValidNeuralConfiguration(mixedConfig as any)).toBe(false);\n    });\n  });\n\n  describe('Performance Validation', () => {\n    test('should validate large configurations efficiently', () => {\n      const largeConfig = {\n        type: 'cnn',\n        architecture: new Array(1000).fill(128),\n        activationFunction: 'relu',\n        learningRate: 0.001\n      };\n\n      const startTime = performance.now();\n      const isValid = isValidNeuralConfiguration(largeConfig);\n      const endTime = performance.now();\n\n      expect(isValid).toBe(true);\n      expect(endTime - startTime).toBeLessThan(100); // Should complete in < 100ms\n    });\n\n    test('should handle repeated validations efficiently', () => {\n      const config = {\n        type: 'mlp',\n        architecture: [10, 5, 1],\n        activationFunction: 'tanh'\n      };\n\n      const startTime = performance.now();\n      for (let i = 0; i < 1000; i++) {\n        isValidNeuralConfiguration(config);\n      }\n      const endTime = performance.now();\n\n      expect(endTime - startTime).toBeLessThan(100); // Should handle 1000 validations in < 100ms\n    });\n  });\n\n  describe('Type Guards', () => {\n    test('should correctly identify valid neural agents', () => {\n      const validAgent = {\n        id: 'agent-123',\n        config: {\n          type: 'mlp',\n          architecture: [10, 5, 1]\n        },\n        state: AgentState.ACTIVE,\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        memoryUsage: 1024,\n        totalInferences: 0,\n        averageInferenceTime: 0,\n        learningProgress: 0,\n        connectionStrength: 1.0\n      };\n\n      // Test would require implementing isValidNeuralAgent function\n      // For now, testing the components we have\n      expect(isValidAgentState(validAgent.state)).toBe(true);\n      expect(isValidNeuralConfiguration(validAgent.config)).toBe(true);\n    });\n\n    test('should handle circular references gracefully', () => {\n      const circularConfig: any = {\n        type: 'mlp',\n        architecture: [10, 5, 1]\n      };\n      circularConfig.self = circularConfig;\n\n      // Should not cause infinite recursion\n      expect(() => isValidNeuralConfiguration(circularConfig)).not.toThrow();\n    });\n\n    test('should validate nested configuration objects', () => {\n      const nestedConfig = {\n        type: 'transformer',\n        architecture: [512, 256, 128],\n        activationFunction: 'gelu',\n        attention: {\n          heads: 8,\n          dimensions: 64,\n          dropout: 0.1\n        },\n        layers: {\n          encoder: 6,\n          decoder: 6,\n          feedForward: 2048\n        }\n      };\n\n      expect(isValidNeuralConfiguration(nestedConfig)).toBe(true);\n    });\n  });\n\n  describe('Custom Type Extensions', () => {\n    test('should handle custom network types', () => {\n      const customConfig = {\n        type: 'custom_gan',\n        architecture: [100, 256, 512, 784],\n        activationFunction: 'leaky_relu',\n        discriminator: {\n          architecture: [784, 512, 256, 1],\n          activationFunction: 'sigmoid'\n        }\n      };\n\n      expect(isValidNeuralConfiguration(customConfig)).toBe(true);\n    });\n\n    test('should validate experimental activation functions', () => {\n      expect(normalizeActivationFunction('swish')).toBe('tanh'); // Falls back to default\n      expect(normalizeActivationFunction('mish')).toBe('tanh'); // Falls back to default\n      expect(normalizeActivationFunction('gelu')).toBe('tanh'); // Falls back to default\n    });\n\n    test('should handle dynamic architecture definitions', () => {\n      const dynamicArch = [\n        Math.floor(Math.random() * 100) + 1,\n        Math.floor(Math.random() * 50) + 1,\n        Math.floor(Math.random() * 10) + 1\n      ];\n\n      expect(validateNetworkArchitecture(dynamicArch)).toBe(true);\n    });\n  });\n});"],"version":3}