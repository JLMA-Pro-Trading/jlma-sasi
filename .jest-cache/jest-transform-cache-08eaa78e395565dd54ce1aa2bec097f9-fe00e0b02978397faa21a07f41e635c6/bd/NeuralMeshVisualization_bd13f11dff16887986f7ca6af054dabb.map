{"version":3,"names":["cov_1w22o48ia7","actualCoverage","React","useRef","useEffect","useState","THREE","s","NeuralMeshVisualization","agents","neuralAgents","isActive","meshMetrics","onAgentClick","f","mountRef","sceneRef","rendererRef","cameraRef","animationIdRef","webglError","setWebglError","visualizationMode","setVisualizationMode","neuralNodesRef","Map","connectionsRef","activityWaveRef","raycasterRef","Raycaster","mouseRef","Vector2","current","b","mount","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","lookAt","renderer","WebGLRenderer","antialias","alpha","preserveDrawingBuffer","powerPreference","setSize","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","setupLighting","createNeuralMeshBase","setupMouseInteraction","startAnimationLoop","handleResize","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","cleanup","error","console","message","updateNeuralNodes","updateConnections","updateActivityVisualization","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","castShadow","shadow","mapSize","width","height","neuralGlow","PointLight","gridHelper","GridHelper","y","layer","layerGeometry","RingGeometry","layerMaterial","MeshBasicMaterial","color","setHSL","transparent","opacity","layerRing","Mesh","rotation","x","Math","PI","currentNodes","nodeId","node","entries","find","agent","neuralProperties","neuronId","remove","mesh","connections","forEach","conn","delete","get","createNeuralNode","updateNeuralNode","neuralProps","baseSize","getNodeSize","nodeType","size","activation","geometry","getNodeGeometry","material","MeshPhongMaterial","getNodeColor","emissive","angle","random","radius","Vector3","cos","sin","copy","userData","id","activity","scale","setScalar","lastSpike","Date","now","getTime","spikeIntensity","currentConnections","nodes","line","clear","sourceNode","targetId","targetNode","connection","createSynapticConnection","source","target","BufferGeometry","setFromPoints","LineBasicMaterial","Line","weight","particles","colors","pos","i","floor","push","z","r","g","length","setAttribute","Float32BufferAttribute","PointsMaterial","vertexColors","Points","onMouseMove","event","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseClick","setFromCamera","intersects","intersectObjects","children","intersected","object","animate","updateNeuralAnimations","render","requestAnimationFrame","time","breathe","sizes","ConeGeometry","SphereGeometry","OctahedronGeometry","BoxGeometry","baseColors","baseColor","activityColor","lerp","cancelAnimationFrame","removeChild","dispose","_jsxs","className","totalNeurons","totalSynapses","averageActivity","toFixed","networkEfficiency","wasmAcceleration","_jsx","onClick","ref"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/components/NeuralMeshVisualization.tsx"],"sourcesContent":["/**\n * Neural Mesh Visualization Component\n * \n * Enhanced Three.js visualization that displays real-time neural mesh data\n * from the Synaptic MCP server, including neural activity, synaptic connections,\n * and WASM performance metrics.\n */\n\nimport React, { useRef, useEffect, useState, useCallback } from 'react'\nimport * as THREE from 'three'\nimport { Agent } from '../types/agent'\nimport { NeuralAgent } from '../services/NeuralMeshService'\nimport '../styles/SwarmVisualization.css'\n\ninterface NeuralMeshVisualizationProps {\n  agents: Agent[]\n  neuralAgents: NeuralAgent[]\n  isActive: boolean\n  meshMetrics: {\n    totalNeurons: number\n    totalSynapses: number\n    averageActivity: number\n    networkEfficiency: number\n    wasmAcceleration: boolean\n  }\n  onAgentClick?: (agent: Agent) => void\n}\n\ninterface NeuralNode {\n  id: string\n  position: THREE.Vector3\n  mesh: THREE.Mesh\n  connections: THREE.Line[]\n  activity: number\n  type: 'sensory' | 'motor' | 'inter' | 'pyramidal' | 'purkinje'\n  layer: number\n}\n\ninterface SynapticConnection {\n  id: string\n  source: string\n  target: string\n  line: THREE.Line\n  weight: number\n  activity: number\n}\n\nexport const NeuralMeshVisualization: React.FC<NeuralMeshVisualizationProps> = ({\n  agents,\n  neuralAgents,\n  isActive,\n  meshMetrics,\n  onAgentClick\n}) => {\n  const mountRef = useRef<HTMLDivElement>(null)\n  const sceneRef = useRef<THREE.Scene>()\n  const rendererRef = useRef<THREE.WebGLRenderer>()\n  const cameraRef = useRef<THREE.PerspectiveCamera>()\n  const animationIdRef = useRef<number>()\n  const [webglError, setWebglError] = useState<string | null>(null)\n  const [visualizationMode, setVisualizationMode] = useState<'neural' | 'activity' | 'connections'>('neural')\n  \n  // Neural mesh state\n  const neuralNodesRef = useRef<Map<string, NeuralNode>>(new Map())\n  const connectionsRef = useRef<Map<string, SynapticConnection>>(new Map())\n  const activityWaveRef = useRef<THREE.Points>()\n  const raycasterRef = useRef<THREE.Raycaster>(new THREE.Raycaster())\n  const mouseRef = useRef<THREE.Vector2>(new THREE.Vector2())\n\n  // Initialize Three.js scene with neural mesh setup\n  useEffect(() => {\n    if (!mountRef.current) return\n\n    try {\n      const mount = mountRef.current\n      setWebglError(null)\n\n      // Create scene\n      const scene = new THREE.Scene()\n      scene.background = new THREE.Color(0x000510)\n      \n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, mount.clientWidth / mount.clientHeight, 0.1, 1000)\n      camera.position.set(0, 50, 100)\n      camera.lookAt(0, 0, 0)\n      \n      // Create renderer\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true,\n        preserveDrawingBuffer: false,\n        powerPreference: 'high-performance'\n      })\n      renderer.setSize(mount.clientWidth, mount.clientHeight)\n      renderer.shadowMap.enabled = true\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap\n      \n      mount.appendChild(renderer.domElement)\n      \n      // Store references\n      sceneRef.current = scene\n      rendererRef.current = renderer\n      cameraRef.current = camera\n      \n      // Add lighting\n      setupLighting(scene)\n      \n      // Create neural mesh base structure\n      createNeuralMeshBase(scene)\n      \n      // Add mouse interaction\n      setupMouseInteraction(mount, camera, scene)\n      \n      // Start animation loop\n      startAnimationLoop()\n      \n      // Handle window resize\n      const handleResize = () => {\n        if (!mount || !camera || !renderer) return\n        \n        camera.aspect = mount.clientWidth / mount.clientHeight\n        camera.updateProjectionMatrix()\n        renderer.setSize(mount.clientWidth, mount.clientHeight)\n      }\n      \n      window.addEventListener('resize', handleResize)\n      \n      return () => {\n        window.removeEventListener('resize', handleResize)\n        cleanup()\n      }\n    } catch (error) {\n      console.error('Neural mesh visualization initialization failed:', error)\n      setWebglError(error.message)\n    }\n  }, [])\n\n  // Update neural agents visualization\n  useEffect(() => {\n    if (!sceneRef.current || !neuralAgents) return\n    \n    updateNeuralNodes()\n    updateConnections()\n    updateActivityVisualization()\n  }, [neuralAgents, meshMetrics])\n\n  // Setup lighting for neural mesh\n  const setupLighting = (scene: THREE.Scene) => {\n    // Ambient light\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.3)\n    scene.add(ambientLight)\n    \n    // Main directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8)\n    directionalLight.position.set(50, 100, 50)\n    directionalLight.castShadow = true\n    directionalLight.shadow.mapSize.width = 2048\n    directionalLight.shadow.mapSize.height = 2048\n    scene.add(directionalLight)\n    \n    // Neural activity glow light\n    const neuralGlow = new THREE.PointLight(0x00ffff, 0.5, 200)\n    neuralGlow.position.set(0, 20, 0)\n    scene.add(neuralGlow)\n  }\n\n  // Create base neural mesh structure\n  const createNeuralMeshBase = (scene: THREE.Scene) => {\n    // Create neural mesh grid\n    const gridHelper = new THREE.GridHelper(200, 20, 0x0088ff, 0x004488)\n    gridHelper.position.y = -10\n    scene.add(gridHelper)\n    \n    // Create layer indicators\n    for (let layer = 1; layer <= 6; layer++) {\n      const layerGeometry = new THREE.RingGeometry(layer * 15, layer * 15 + 1, 32)\n      const layerMaterial = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(layer / 6, 0.7, 0.3),\n        transparent: true,\n        opacity: 0.2\n      })\n      const layerRing = new THREE.Mesh(layerGeometry, layerMaterial)\n      layerRing.rotation.x = -Math.PI / 2\n      layerRing.position.y = layer * 5\n      scene.add(layerRing)\n    }\n  }\n\n  // Update neural nodes based on neural agents\n  const updateNeuralNodes = () => {\n    if (!sceneRef.current) return\n    \n    const scene = sceneRef.current\n    const currentNodes = neuralNodesRef.current\n    \n    // Remove nodes that no longer exist\n    for (const [nodeId, node] of currentNodes.entries()) {\n      if (!neuralAgents.find(agent => agent.neuralProperties.neuronId === nodeId)) {\n        scene.remove(node.mesh)\n        node.connections.forEach(conn => scene.remove(conn))\n        currentNodes.delete(nodeId)\n      }\n    }\n    \n    // Add or update nodes\n    neuralAgents.forEach(agent => {\n      const nodeId = agent.neuralProperties.neuronId\n      let node = currentNodes.get(nodeId)\n      \n      if (!node) {\n        // Create new neural node\n        node = createNeuralNode(agent)\n        currentNodes.set(nodeId, node)\n        scene.add(node.mesh)\n      } else {\n        // Update existing node\n        updateNeuralNode(node, agent)\n      }\n    })\n  }\n\n  // Create a neural node mesh\n  const createNeuralNode = (agent: NeuralAgent): NeuralNode => {\n    const neuralProps = agent.neuralProperties\n    \n    // Determine node size based on type and activity\n    const baseSize = getNodeSize(neuralProps.nodeType)\n    const size = baseSize * (1 + neuralProps.activation * 0.5)\n    \n    // Create node geometry\n    const geometry = getNodeGeometry(neuralProps.nodeType, size)\n    \n    // Create node material\n    const material = new THREE.MeshPhongMaterial({\n      color: getNodeColor(neuralProps.nodeType, neuralProps.activation),\n      transparent: true,\n      opacity: 0.8 + neuralProps.activation * 0.2,\n      emissive: new THREE.Color().setHSL(neuralProps.activation, 0.5, 0.1)\n    })\n    \n    const mesh = new THREE.Mesh(geometry, material)\n    \n    // Position based on layer and random spread\n    const angle = Math.random() * Math.PI * 2\n    const radius = neuralProps.layer * 15 + (Math.random() - 0.5) * 10\n    const position = new THREE.Vector3(\n      Math.cos(angle) * radius,\n      neuralProps.layer * 5 + (Math.random() - 0.5) * 3,\n      Math.sin(angle) * radius\n    )\n    \n    mesh.position.copy(position)\n    mesh.userData = { agent, nodeType: 'neural' }\n    \n    return {\n      id: neuralProps.neuronId,\n      position,\n      mesh,\n      connections: [],\n      activity: neuralProps.activation,\n      type: neuralProps.nodeType,\n      layer: neuralProps.layer\n    }\n  }\n\n  // Update neural node appearance\n  const updateNeuralNode = (node: NeuralNode, agent: NeuralAgent) => {\n    const neuralProps = agent.neuralProperties\n    \n    // Update activity\n    node.activity = neuralProps.activation\n    \n    // Update material\n    const material = node.mesh.material as THREE.MeshPhongMaterial\n    material.color = getNodeColor(neuralProps.nodeType, neuralProps.activation)\n    material.opacity = 0.8 + neuralProps.activation * 0.2\n    material.emissive = new THREE.Color().setHSL(neuralProps.activation, 0.5, 0.1)\n    \n    // Update scale based on activity\n    const scale = 1 + neuralProps.activation * 0.3\n    node.mesh.scale.setScalar(scale)\n    \n    // Add spike animation\n    if (neuralProps.lastSpike && Date.now() - neuralProps.lastSpike.getTime() < 1000) {\n      const spikeIntensity = 1 - (Date.now() - neuralProps.lastSpike.getTime()) / 1000\n      material.emissive.setHSL(0.6, 1, spikeIntensity * 0.5)\n    }\n  }\n\n  // Update synaptic connections\n  const updateConnections = () => {\n    if (!sceneRef.current) return\n    \n    const scene = sceneRef.current\n    const currentConnections = connectionsRef.current\n    const nodes = neuralNodesRef.current\n    \n    // Clear existing connections\n    currentConnections.forEach(conn => {\n      scene.remove(conn.line)\n    })\n    currentConnections.clear()\n    \n    // Create new connections based on neural agents\n    neuralAgents.forEach(agent => {\n      const sourceNode = nodes.get(agent.neuralProperties.neuronId)\n      if (!sourceNode) return\n      \n      agent.neuralProperties.connections.forEach(targetId => {\n        const targetNode = nodes.get(targetId)\n        if (!targetNode) return\n        \n        const connection = createSynapticConnection(sourceNode, targetNode)\n        currentConnections.set(connection.id, connection)\n        scene.add(connection.line)\n      })\n    })\n  }\n\n  // Create synaptic connection\n  const createSynapticConnection = (source: NeuralNode, target: NeuralNode): SynapticConnection => {\n    const geometry = new THREE.BufferGeometry().setFromPoints([\n      source.position,\n      target.position\n    ])\n    \n    const material = new THREE.LineBasicMaterial({\n      color: 0x00aaff,\n      transparent: true,\n      opacity: 0.3\n    })\n    \n    const line = new THREE.Line(geometry, material)\n    \n    return {\n      id: `${source.id}-${target.id}`,\n      source: source.id,\n      target: target.id,\n      line,\n      weight: 1.0,\n      activity: 0\n    }\n  }\n\n  // Update activity visualization\n  const updateActivityVisualization = () => {\n    if (!sceneRef.current || visualizationMode !== 'activity') return\n    \n    const scene = sceneRef.current\n    \n    // Remove existing activity wave\n    if (activityWaveRef.current) {\n      scene.remove(activityWaveRef.current)\n    }\n    \n    // Create activity wave visualization\n    const particles = []\n    const colors = []\n    \n    neuralAgents.forEach(agent => {\n      const pos = agent.position\n      const activity = agent.neuralProperties.activation\n      \n      // Create particles for active neurons\n      if (activity > 0.1) {\n        for (let i = 0; i < Math.floor(activity * 10); i++) {\n          particles.push(\n            pos.x + (Math.random() - 0.5) * 10,\n            pos.y + (Math.random() - 0.5) * 10,\n            pos.z + (Math.random() - 0.5) * 10\n          )\n          \n          const color = new THREE.Color().setHSL(activity, 0.8, 0.6)\n          colors.push(color.r, color.g, color.b)\n        }\n      }\n    })\n    \n    if (particles.length > 0) {\n      const geometry = new THREE.BufferGeometry()\n      geometry.setAttribute('position', new THREE.Float32BufferAttribute(particles, 3))\n      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3))\n      \n      const material = new THREE.PointsMaterial({\n        size: 2,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8\n      })\n      \n      activityWaveRef.current = new THREE.Points(geometry, material)\n      scene.add(activityWaveRef.current)\n    }\n  }\n\n  // Mouse interaction setup\n  const setupMouseInteraction = (mount: HTMLDivElement, camera: THREE.PerspectiveCamera, scene: THREE.Scene) => {\n    const onMouseMove = (event: MouseEvent) => {\n      const rect = mount.getBoundingClientRect()\n      mouseRef.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1\n      mouseRef.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1\n    }\n    \n    const onMouseClick = (event: MouseEvent) => {\n      if (!raycasterRef.current) return\n      \n      raycasterRef.current.setFromCamera(mouseRef.current, camera)\n      const intersects = raycasterRef.current.intersectObjects(scene.children, true)\n      \n      if (intersects.length > 0) {\n        const intersected = intersects[0].object\n        if (intersected.userData && intersected.userData.agent) {\n          onAgentClick?.(intersected.userData.agent)\n        }\n      }\n    }\n    \n    mount.addEventListener('mousemove', onMouseMove)\n    mount.addEventListener('click', onMouseClick)\n  }\n\n  // Animation loop\n  const startAnimationLoop = () => {\n    const animate = () => {\n      if (!rendererRef.current || !sceneRef.current || !cameraRef.current) return\n      \n      // Update neural activity animations\n      updateNeuralAnimations()\n      \n      // Render scene\n      rendererRef.current.render(sceneRef.current, cameraRef.current)\n      \n      animationIdRef.current = requestAnimationFrame(animate)\n    }\n    \n    animate()\n  }\n\n  // Update neural animations\n  const updateNeuralAnimations = () => {\n    const time = Date.now() * 0.001\n    \n    // Animate neural nodes\n    neuralNodesRef.current.forEach(node => {\n      // Breathing animation based on activity\n      const breathe = 1 + Math.sin(time * 2 + node.activity * 10) * 0.1 * node.activity\n      node.mesh.scale.setScalar(breathe)\n      \n      // Rotation based on type\n      if (node.type === 'pyramidal') {\n        node.mesh.rotation.y += 0.01\n      }\n    })\n    \n    // Animate connections\n    connectionsRef.current.forEach(connection => {\n      const material = connection.line.material as THREE.LineBasicMaterial\n      material.opacity = 0.3 + Math.sin(time * 3) * 0.1\n    })\n  }\n\n  // Utility functions\n  const getNodeSize = (type: string): number => {\n    const sizes = {\n      'sensory': 1.5,\n      'motor': 1.8,\n      'inter': 1.0,\n      'pyramidal': 2.0,\n      'purkinje': 2.5\n    }\n    return sizes[type] || 1.0\n  }\n\n  const getNodeGeometry = (type: string, size: number): THREE.BufferGeometry => {\n    switch (type) {\n      case 'pyramidal':\n        return new THREE.ConeGeometry(size, size * 2, 8)\n      case 'purkinje':\n        return new THREE.SphereGeometry(size, 16, 16)\n      case 'sensory':\n        return new THREE.OctahedronGeometry(size)\n      case 'motor':\n        return new THREE.BoxGeometry(size, size, size)\n      default:\n        return new THREE.SphereGeometry(size, 8, 8)\n    }\n  }\n\n  const getNodeColor = (type: string, activity: number): THREE.Color => {\n    const baseColors = {\n      'sensory': 0x00ff00,\n      'motor': 0xff0000,\n      'inter': 0x0000ff,\n      'pyramidal': 0xffff00,\n      'purkinje': 0xff00ff\n    }\n    \n    const baseColor = new THREE.Color(baseColors[type] || 0x888888)\n    const activityColor = new THREE.Color(0xffffff)\n    \n    return baseColor.lerp(activityColor, activity * 0.5)\n  }\n\n  // Cleanup\n  const cleanup = () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current)\n    }\n    \n    if (rendererRef.current && mountRef.current) {\n      mountRef.current.removeChild(rendererRef.current.domElement)\n      rendererRef.current.dispose()\n    }\n    \n    // Clear neural state\n    neuralNodesRef.current.clear()\n    connectionsRef.current.clear()\n  }\n\n  // Render component\n  return (\n    <div className=\"swarm-visualization\">\n      <div className=\"neural-controls\">\n        <div className=\"neural-stats\">\n          <span>Neurons: {meshMetrics.totalNeurons}</span>\n          <span>Synapses: {meshMetrics.totalSynapses}</span>\n          <span>Activity: {(meshMetrics.averageActivity * 100).toFixed(1)}%</span>\n          <span>Efficiency: {(meshMetrics.networkEfficiency * 100).toFixed(1)}%</span>\n          {meshMetrics.wasmAcceleration && <span className=\"wasm-badge\">WASM</span>}\n        </div>\n        \n        <div className=\"visualization-modes\">\n          <button \n            className={visualizationMode === 'neural' ? 'active' : ''}\n            onClick={() => setVisualizationMode('neural')}\n          >\n            Neural Nodes\n          </button>\n          <button \n            className={visualizationMode === 'activity' ? 'active' : ''}\n            onClick={() => setVisualizationMode('activity')}\n          >\n            Activity Wave\n          </button>\n          <button \n            className={visualizationMode === 'connections' ? 'active' : ''}\n            onClick={() => setVisualizationMode('connections')}\n          >\n            Connections\n          </button>\n        </div>\n      </div>\n      \n      <div ref={mountRef} className=\"visualization-container\">\n        {webglError && (\n          <div className=\"webgl-error\">\n            <h3>WebGL Error</h3>\n            <p>{webglError}</p>\n            <p>Neural mesh visualization requires WebGL support.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}"],"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","ignoreList":[]}