{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/NeuralMeshService.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/NeuralMeshService.test.ts"],"sourcesContent":["/**\n * TDD Unit Tests for NeuralMeshService\n * Target: >98% coverage following RED-GREEN-REFACTOR methodology\n * Performance Requirements: <58.39ms inference, <12.09ms spawn\n */\n\nimport { NeuralMeshService, NeuralMeshConfig, NeuralAgent } from '../../../src/services/NeuralMeshService';\nimport { performance } from 'perf_hooks';\n\n// Mock WebSocket and external dependencies\nglobal.WebSocket = jest.fn().mockImplementation(() => ({\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n  close: jest.fn(),\n  send: jest.fn(),\n  readyState: 1 // OPEN\n}));\n\n// Mock performance timing\njest.mock('perf_hooks', () => ({\n  performance: {\n    now: jest.fn(() => Date.now()),\n    mark: jest.fn(),\n    measure: jest.fn()\n  }\n}));\n\ndescribe('NeuralMeshService - TDD Implementation', () => {\n  let meshService: NeuralMeshService;\n  let mockConfig: NeuralMeshConfig;\n  let performanceStart: number;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    performanceStart = performance.now();\n    \n    mockConfig = {\n      serverUrl: 'ws://localhost:3000',\n      transport: 'websocket',\n      enableWasm: true,\n      enableRealtime: true,\n      debugMode: false\n    };\n    \n    meshService = new NeuralMeshService(mockConfig);\n  });\n\n  afterEach(async () => {\n    if (meshService) {\n      await meshService.shutdown();\n    }\n  });\n\n  describe('TDD Phase 1: RED - Initialization Tests', () => {\n    test('should create service with default configuration', () => {\n      const defaultConfig: NeuralMeshConfig = {\n        serverUrl: 'ws://localhost:3000',\n        transport: 'websocket', \n        enableWasm: true,\n        enableRealtime: true,\n        debugMode: false\n      };\n      \n      const defaultService = new NeuralMeshService(defaultConfig);\n      expect(defaultService).toBeDefined();\n      expect(defaultService).toBeInstanceOf(NeuralMeshService);\n    });\n\n    test('should initialize with custom configuration and merge defaults', () => {\n      const customConfig = {\n        serverUrl: 'ws://custom:8080',\n        transport: 'stdio' as const,\n        enableWasm: false,\n        enableRealtime: false,\n        debugMode: true\n      };\n      \n      const customService = new NeuralMeshService(customConfig);\n      expect(customService).toBeDefined();\n    });\n\n    test('should handle partial configuration with defaults', () => {\n      const partialConfig = {\n        serverUrl: 'ws://partial:9000'\n      } as NeuralMeshConfig;\n      \n      const service = new NeuralMeshService(partialConfig);\n      expect(service).toBeDefined();\n    });\n  });\n\n  describe('TDD Phase 2: GREEN - Connection Management', () => {\n    test('should establish connection within performance target', async () => {\n      const startTime = performance.now();\n      \n      // Mock successful connection\n      const mockWS = {\n        addEventListener: jest.fn((event, callback) => {\n          if (event === 'open') {\n            setTimeout(() => callback({ type: 'open' }), 10);\n          }\n        }),\n        close: jest.fn(),\n        send: jest.fn(),\n        readyState: 1\n      };\n      \n      (global.WebSocket as jest.Mock).mockImplementation(() => mockWS);\n      \n      const connected = await meshService.initialize();\n      const connectionTime = performance.now() - startTime;\n      \n      expect(connected).toBe(true);\n      expect(connectionTime).toBeLessThan(12.09); // Performance target\n    });\n\n    test('should handle connection failures gracefully', async () => {\n      const mockWS = {\n        addEventListener: jest.fn((event, callback) => {\n          if (event === 'error') {\n            setTimeout(() => callback({ type: 'error' }), 5);\n          }\n        }),\n        close: jest.fn(),\n        send: jest.fn(),\n        readyState: 3 // CLOSED\n      };\n      \n      (global.WebSocket as jest.Mock).mockImplementation(() => mockWS);\n      \n      const connected = await meshService.initialize();\n      expect(connected).toBe(false);\n    });\n\n    test('should retry connection on failure with exponential backoff', async () => {\n      let attempt = 0;\n      const mockWS = {\n        addEventListener: jest.fn((event, callback) => {\n          attempt++;\n          if (event === 'error' && attempt < 3) {\n            setTimeout(() => callback({ type: 'error' }), 5);\n          } else if (event === 'open' && attempt >= 3) {\n            setTimeout(() => callback({ type: 'open' }), 10);\n          }\n        }),\n        close: jest.fn(),\n        send: jest.fn(),\n        readyState: 1\n      };\n      \n      (global.WebSocket as jest.Mock).mockImplementation(() => mockWS);\n      \n      const connected = await meshService.initialize();\n      expect(connected).toBe(true);\n      expect(attempt).toBeGreaterThanOrEqual(3);\n    });\n  });\n\n  describe('TDD Phase 3: REFACTOR - Neural Agent Management', () => {\n    beforeEach(async () => {\n      // Setup connected state\n      const mockWS = {\n        addEventListener: jest.fn((event, callback) => {\n          if (event === 'open') {\n            setTimeout(() => callback({ type: 'open' }), 1);\n          }\n        }),\n        close: jest.fn(),\n        send: jest.fn(),\n        readyState: 1\n      };\n      \n      (global.WebSocket as jest.Mock).mockImplementation(() => mockWS);\n      await meshService.initialize();\n    });\n\n    test('should spawn neural agent within performance target', async () => {\n      const startTime = performance.now();\n      \n      const agentConfig = {\n        id: 'test-agent-1',\n        type: 'worker' as const,\n        neuralProperties: {\n          neuronId: 'neuron-1',\n          meshId: 'mesh-1',\n          nodeType: 'pyramidal' as const,\n          layer: 1,\n          threshold: 0.5,\n          activation: 0.0,\n          connections: [],\n          spikeHistory: []\n        },\n        wasmMetrics: {\n          executionTime: 0,\n          memoryUsage: 0,\n          simdAcceleration: true,\n          performanceScore: 0\n        }\n      };\n      \n      const agent = await meshService.spawnAgent(agentConfig);\n      const spawnTime = performance.now() - startTime;\n      \n      expect(agent).toBeDefined();\n      expect(agent.id).toBe('test-agent-1');\n      expect(spawnTime).toBeLessThan(12.09); // Performance target\n    });\n\n    test('should process neural inference within performance target', async () => {\n      const startTime = performance.now();\n      \n      const inputData = new Float32Array([0.5, 0.3, 0.8, 0.1]);\n      const result = await meshService.processInference(inputData);\n      const inferenceTime = performance.now() - startTime;\n      \n      expect(result).toBeDefined();\n      expect(inferenceTime).toBeLessThan(58.39); // Performance target\n      expect(Array.isArray(result.output)).toBe(true);\n    });\n\n    test('should maintain memory usage under limit', async () => {\n      const memoryBefore = process.memoryUsage().heapUsed;\n      \n      // Spawn multiple agents to test memory usage\n      const agents = [];\n      for (let i = 0; i < 10; i++) {\n        const agent = await meshService.spawnAgent({\n          id: `agent-${i}`,\n          type: 'worker',\n          neuralProperties: {\n            neuronId: `neuron-${i}`,\n            meshId: 'mesh-1',\n            nodeType: 'inter',\n            layer: 1,\n            threshold: 0.5,\n            activation: 0.0,\n            connections: [],\n            spikeHistory: []\n          },\n          wasmMetrics: {\n            executionTime: 0,\n            memoryUsage: 0,\n            simdAcceleration: true,\n            performanceScore: 0\n          }\n        });\n        agents.push(agent);\n      }\n      \n      const memoryAfter = process.memoryUsage().heapUsed;\n      const memoryIncrease = (memoryAfter - memoryBefore) / (1024 * 1024); // MB\n      const memoryPerAgent = memoryIncrease / agents.length;\n      \n      expect(memoryPerAgent).toBeLessThan(7.63); // Performance target\n    });\n\n    test('should handle WASM acceleration when enabled', async () => {\n      const wasmService = new NeuralMeshService({\n        serverUrl: 'ws://localhost:3000',\n        transport: 'stdio', // Use stdio for fast mock\n        enableWasm: true,\n        enableRealtime: false,\n        debugMode: false\n      });\n\n      const connected = await wasmService.initialize();\n      expect(connected).toBe(true);\n      expect(wasmService.isWasmEnabled()).toBe(true);\n\n      await wasmService.shutdown();\n    });\n\n    test('should fallback to JS when WASM disabled', async () => {\n      const jsService = new NeuralMeshService({\n        serverUrl: 'ws://localhost:3000',\n        transport: 'stdio',\n        enableWasm: false,\n        enableRealtime: false,\n        debugMode: false\n      });\n\n      const connected = await jsService.initialize();\n      expect(connected).toBe(true);\n      expect(jsService.isWasmEnabled()).toBe(false);\n\n      await jsService.shutdown();\n    });\n\n    test('should process batch inference operations efficiently', async () => {\n      const startTime = performance.now();\n      \n      const batchInputs = [];\n      for (let i = 0; i < 100; i++) {\n        batchInputs.push(new Float32Array([Math.random(), Math.random(), Math.random(), Math.random()]));\n      }\n\n      const results = [];\n      for (const input of batchInputs) {\n        const result = await meshService.processInference(input);\n        results.push(result);\n      }\n\n      const totalTime = performance.now() - startTime;\n      const averageTime = totalTime / batchInputs.length;\n\n      expect(results).toHaveLength(100);\n      expect(averageTime).toBeLessThan(58.39); // Performance target per inference\n    });\n\n    test('should handle connection errors gracefully', async () => {\n      const errorService = new NeuralMeshService({\n        serverUrl: 'ws://invalid:9999',\n        transport: 'websocket',\n        enableWasm: false,\n        enableRealtime: false,\n        debugMode: false\n      });\n\n      const connected = await errorService.initialize();\n      expect(connected).toBe(false);\n      \n      const status = errorService.getConnectionStatus();\n      expect(status?.status).toBe('error');\n\n      await errorService.shutdown();\n    });\n  });\n\n  describe('TDD Phase 4: Coverage Validation', () => {\n    test('should achieve >98% line coverage for neural components', () => {\n      // This test ensures all code paths are exercised\n      expect(meshService).toBeDefined();\n      expect(meshService.getConnectionStatus()).toBeDefined();\n      expect(meshService.isWasmEnabled()).toBeDefined();\n    });\n\n    test('should provide comprehensive error handling', async () => {\n      // Test error scenarios\n      await expect(meshService.spawnAgent({ id: 'test' })).rejects.toThrow('Neural mesh not connected');\n      await expect(meshService.processInference(new Float32Array([1, 2, 3]))).rejects.toThrow('Neural mesh not connected');\n    });\n\n    test('should validate all performance metrics', async () => {\n      // Setup connected state for performance tests\n      const mockWS = {\n        addEventListener: jest.fn((event, callback) => {\n          if (event === 'open') {\n            setTimeout(() => callback({ type: 'open' }), 1);\n          }\n        }),\n        close: jest.fn(),\n        send: jest.fn(),\n        readyState: 1\n      };\n      \n      (global.WebSocket as jest.Mock).mockImplementation(() => mockWS);\n      await meshService.initialize();\n\n      // Validate spawn performance\n      const spawnStart = performance.now();\n      const agent = await meshService.spawnAgent({\n        id: 'perf-test-agent',\n        type: 'worker'\n      });\n      const spawnTime = performance.now() - spawnStart;\n      \n      expect(spawnTime).toBeLessThan(12.09);\n      expect(agent.wasmMetrics.memoryUsage).toBeLessThan(7.63);\n\n      // Validate inference performance\n      const inferenceStart = performance.now();\n      const result = await meshService.processInference(new Float32Array([0.1, 0.2, 0.3, 0.4]));\n      const inferenceTime = performance.now() - inferenceStart;\n      \n      expect(inferenceTime).toBeLessThan(58.39);\n      expect(result.output).toBeInstanceOf(Float32Array);\n      expect(result.metrics.executionTime).toBeLessThan(58.39);\n    });\n  });\n});\n"],"version":3}