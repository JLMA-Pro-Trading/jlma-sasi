{"file":"/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/NeuralAgentManager.test.ts","mappings":"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","names":[],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/tests/unit/services/NeuralAgentManager.test.ts"],"sourcesContent":["/**\n * Comprehensive Unit Tests for NeuralAgentManager\n * Target: 95%+ coverage for neural agent lifecycle and operations\n */\n\nimport { EventEmitter } from 'events';\nimport { NeuralAgentManager } from '../../../src/services/NeuralAgentManager';\nimport { AgentState } from '../../../src/types/neural';\n\n// Mock performance for testing\nconst mockPerformance = {\n  now: jest.fn(() => Date.now()),\n};\nglobal.performance = mockPerformance as any;\n\n// Mock WebAssembly for testing\nglobal.WebAssembly = {\n  compile: jest.fn(),\n  instantiate: jest.fn(),\n  validate: jest.fn(() => true),\n} as any;\n\ndescribe('NeuralAgentManager - Comprehensive Unit Tests', () => {\n  let manager: NeuralAgentManager;\n  let mockConfig: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockPerformance.now.mockReturnValue(1000);\n    \n    mockConfig = {\n      maxAgents: 5,\n      memoryLimitPerAgent: 10 * 1024 * 1024, // 10MB for testing\n      inferenceTimeout: 50,\n      simdEnabled: true,\n      crossLearningEnabled: true,\n      persistenceEnabled: false, // Disable for unit tests\n      performanceMonitoring: true,\n      wasmModulePath: '/test/neural.wasm'\n    };\n    \n    manager = new NeuralAgentManager(mockConfig);\n  });\n\n  afterEach(async () => {\n    if (manager) {\n      await manager.cleanup();\n    }\n  });\n\n  describe('Initialization', () => {\n    test('should initialize with default configuration', () => {\n      const defaultManager = new NeuralAgentManager();\n      expect(defaultManager).toBeInstanceOf(EventEmitter);\n    });\n\n    test('should initialize with custom configuration', () => {\n      const customConfig = {\n        maxAgents: 10,\n        memoryLimitPerAgent: 100 * 1024 * 1024,\n        inferenceTimeout: 200\n      };\n      const customManager = new NeuralAgentManager(customConfig);\n      expect(customManager).toBeInstanceOf(EventEmitter);\n    });\n\n    test('should emit initialized event after successful initialization', (done) => {\n      const testManager = new NeuralAgentManager(mockConfig);\n      \n      testManager.on('initialized', (event) => {\n        expect(event.config).toBeDefined();\n        expect(event.timestamp).toBeDefined();\n        done();\n      });\n    });\n\n    test('should handle initialization errors gracefully', (done) => {\n      const errorConfig = {\n        ...mockConfig,\n        wasmModulePath: '/invalid/path.wasm'\n      };\n      \n      const errorManager = new NeuralAgentManager(errorConfig);\n      \n      errorManager.on('error', (error) => {\n        expect(error).toBeDefined();\n        done();\n      });\n    });\n  });\n\n  describe('Agent Spawning', () => {\n    beforeEach(async () => {\n      // Wait for initialization\n      await new Promise(resolve => setTimeout(resolve, 100));\n    });\n\n    test('should spawn agent with valid configuration', async () => {\n      const agentConfig = {\n        type: 'mlp',\n        architecture: [10, 5, 1],\n        learningRate: 0.001\n      };\n\n      mockPerformance.now.mockReturnValueOnce(1000).mockReturnValueOnce(1075);\n      \n      const agentId = await manager.spawnAgent(agentConfig);\n      \n      expect(agentId).toBeDefined();\n      expect(typeof agentId).toBe('string');\n      expect(agentId).toMatch(/^agent_\\d+_[a-z0-9]+$/);\n    });\n\n    test('should emit agentSpawned event', (done) => {\n      const agentConfig = {\n        type: 'mlp',\n        architecture: [10, 5, 1]\n      };\n\n      manager.on('agentSpawned', (event) => {\n        expect(event.agentId).toBeDefined();\n        expect(event.spawnTime).toBeDefined();\n        expect(event.config).toEqual(agentConfig);\n        expect(event.memoryUsage).toBeDefined();\n        done();\n      });\n\n      manager.spawnAgent(agentConfig);\n    });\n\n    test('should reject spawning when max agents reached', async () => {\n      const agentConfig = { type: 'mlp', architecture: [5, 1] };\n      \n      // Spawn max agents\n      for (let i = 0; i < mockConfig.maxAgents; i++) {\n        await manager.spawnAgent(agentConfig);\n      }\n      \n      // Try to spawn one more\n      await expect(manager.spawnAgent(agentConfig))\n        .rejects.toThrow('Maximum agents limit reached: 5');\n    });\n\n    test('should reject spawning when not initialized', async () => {\n      const uninitializedManager = new NeuralAgentManager(mockConfig);\n      const agentConfig = { type: 'mlp', architecture: [5, 1] };\n      \n      await expect(uninitializedManager.spawnAgent(agentConfig))\n        .rejects.toThrow('Neural Agent Manager not initialized');\n    });\n\n    test('should track performance metrics during spawning', async () => {\n      mockPerformance.now.mockReturnValueOnce(1000).mockReturnValueOnce(1080);\n      \n      const agentConfig = { type: 'mlp', architecture: [10, 5, 1] };\n      await manager.spawnAgent(agentConfig);\n      \n      const metrics = manager.getPerformanceMetrics();\n      expect(metrics.totalAgentsSpawned).toBe(1);\n      expect(metrics.averageSpawnTime).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Neural Inference', () => {\n    let agentId: string;\n\n    beforeEach(async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      const agentConfig = { type: 'mlp', architecture: [3, 2, 1] };\n      agentId = await manager.spawnAgent(agentConfig);\n    });\n\n    test('should run inference successfully', async () => {\n      const inputs = [0.1, 0.5, 0.9];\n      mockPerformance.now.mockReturnValueOnce(2000).mockReturnValueOnce(2030);\n      \n      const outputs = await manager.runInference(agentId, inputs);\n      \n      expect(outputs).toBeDefined();\n      expect(Array.isArray(outputs)).toBe(true);\n      expect(outputs.length).toBeGreaterThan(0);\n    });\n\n    test('should emit inferenceComplete event', (done) => {\n      const inputs = [0.1, 0.5, 0.9];\n      \n      manager.on('inferenceComplete', (event) => {\n        expect(event.agentId).toBe(agentId);\n        expect(event.inferenceTime).toBeDefined();\n        expect(event.inputSize).toBe(inputs.length);\n        expect(event.outputSize).toBeGreaterThan(0);\n        done();\n      });\n\n      manager.runInference(agentId, inputs);\n    });\n\n    test('should reject inference for non-existent agent', async () => {\n      const inputs = [0.1, 0.5, 0.9];\n      \n      await expect(manager.runInference('invalid-agent-id', inputs))\n        .rejects.toThrow('Agent not found: invalid-agent-id');\n    });\n\n    test('should handle inference timeout', async () => {\n      const inputs = [0.1, 0.5, 0.9];\n      \n      // Mock a slow inference that exceeds timeout\n      const slowManager = new NeuralAgentManager({\n        ...mockConfig,\n        inferenceTimeout: 1 // 1ms timeout\n      });\n      \n      await new Promise(resolve => setTimeout(resolve, 100));\n      const slowAgentId = await slowManager.spawnAgent({ type: 'mlp', architecture: [3, 1] });\n      \n      await expect(slowManager.runInference(slowAgentId, inputs))\n        .rejects.toThrow('Inference timeout');\n    });\n\n    test('should update agent statistics after inference', async () => {\n      const inputs = [0.1, 0.5, 0.9];\n      \n      await manager.runInference(agentId, inputs);\n      \n      const agent = manager.getAgentState(agentId);\n      expect(agent).toBeDefined();\n      expect(agent!.totalInferences).toBe(1);\n      expect(agent!.averageInferenceTime).toBeGreaterThan(0);\n      expect(agent!.lastActive).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Agent Training', () => {\n    let agentId: string;\n\n    beforeEach(async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      const agentConfig = { type: 'mlp', architecture: [2, 3, 1] };\n      agentId = await manager.spawnAgent(agentConfig);\n    });\n\n    test('should train agent successfully', async () => {\n      const trainingData = [\n        { inputs: [0, 0], outputs: [0] },\n        { inputs: [0, 1], outputs: [1] },\n        { inputs: [1, 0], outputs: [1] },\n        { inputs: [1, 1], outputs: [0] }\n      ];\n      \n      mockPerformance.now.mockReturnValueOnce(3000).mockReturnValueOnce(3500);\n      \n      const session = await manager.trainAgent(agentId, trainingData, 10);\n      \n      expect(session).toBeDefined();\n      expect(session.sessionId).toBeDefined();\n      expect(session.agentId).toBe(agentId);\n      expect(session.epochs).toBe(10);\n      expect(session.finalAccuracy).toBeGreaterThan(0);\n      expect(session.dataPoints).toBe(4);\n    });\n\n    test('should emit learningComplete event', (done) => {\n      const trainingData = [\n        { inputs: [0.1, 0.2], outputs: [0.3] }\n      ];\n      \n      manager.on('learningComplete', (session) => {\n        expect(session.sessionId).toBeDefined();\n        expect(session.agentId).toBe(agentId);\n        expect(session.finalAccuracy).toBeGreaterThan(0);\n        done();\n      });\n\n      manager.trainAgent(agentId, trainingData, 5);\n    });\n\n    test('should update agent state during training', async () => {\n      const trainingData = [{ inputs: [0.1], outputs: [0.2] }];\n      \n      // Check state changes during training\n      const trainingPromise = manager.trainAgent(agentId, trainingData, 5);\n      \n      // Give training a moment to start\n      await new Promise(resolve => setTimeout(resolve, 10));\n      \n      const agentDuringTraining = manager.getAgentState(agentId);\n      expect(agentDuringTraining!.state).toBe(AgentState.LEARNING);\n      \n      await trainingPromise;\n      \n      const agentAfterTraining = manager.getAgentState(agentId);\n      expect(agentAfterTraining!.state).toBe(AgentState.ACTIVE);\n      expect(agentAfterTraining!.learningProgress).toBeGreaterThan(0);\n    });\n\n    test('should handle training errors gracefully', async () => {\n      const invalidTrainingData: any = null;\n      \n      await expect(manager.trainAgent(agentId, invalidTrainingData, 10))\n        .rejects.toThrow();\n      \n      // Agent should return to active state after error\n      const agent = manager.getAgentState(agentId);\n      expect(agent!.state).toBe(AgentState.ACTIVE);\n    });\n  });\n\n  describe('Knowledge Sharing', () => {\n    let sourceAgentId: string;\n    let targetAgentId: string;\n\n    beforeEach(async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      const agentConfig = { type: 'mlp', architecture: [3, 2, 1] };\n      sourceAgentId = await manager.spawnAgent(agentConfig);\n      targetAgentId = await manager.spawnAgent(agentConfig);\n    });\n\n    test('should share knowledge between agents', async () => {\n      await expect(manager.shareKnowledge(sourceAgentId, [targetAgentId]))\n        .resolves.not.toThrow();\n    });\n\n    test('should emit knowledgeShared event', (done) => {\n      manager.on('knowledgeShared', (event) => {\n        expect(event.sourceAgentId).toBe(sourceAgentId);\n        expect(event.targetAgentIds).toContain(targetAgentId);\n        expect(event.timestamp).toBeDefined();\n        done();\n      });\n\n      manager.shareKnowledge(sourceAgentId, [targetAgentId]);\n    });\n\n    test('should reject sharing when cross-learning disabled', async () => {\n      const noCrossLearningManager = new NeuralAgentManager({\n        ...mockConfig,\n        crossLearningEnabled: false\n      });\n      \n      await expect(noCrossLearningManager.shareKnowledge('agent1', ['agent2']))\n        .rejects.toThrow('Cross-learning is disabled');\n    });\n\n    test('should reject sharing from non-existent source agent', async () => {\n      await expect(manager.shareKnowledge('invalid-source', [targetAgentId]))\n        .rejects.toThrow('Source agent not found: invalid-source');\n    });\n\n    test('should handle non-existent target agents gracefully', async () => {\n      await expect(manager.shareKnowledge(sourceAgentId, ['invalid-target']))\n        .resolves.not.toThrow();\n    });\n  });\n\n  describe('Agent Management', () => {\n    let agentId: string;\n\n    beforeEach(async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      const agentConfig = { type: 'mlp', architecture: [2, 1] };\n      agentId = await manager.spawnAgent(agentConfig);\n    });\n\n    test('should get agent state', () => {\n      const agent = manager.getAgentState(agentId);\n      \n      expect(agent).toBeDefined();\n      expect(agent!.id).toBe(agentId);\n      expect(agent!.state).toBe(AgentState.ACTIVE);\n      expect(agent!.config).toBeDefined();\n      expect(agent!.createdAt).toBeDefined();\n    });\n\n    test('should return null for non-existent agent', () => {\n      const agent = manager.getAgentState('invalid-id');\n      expect(agent).toBeNull();\n    });\n\n    test('should get active agents', () => {\n      const activeAgents = manager.getActiveAgents();\n      \n      expect(Array.isArray(activeAgents)).toBe(true);\n      expect(activeAgents.length).toBeGreaterThan(0);\n      expect(activeAgents[0].state).toBe(AgentState.ACTIVE);\n    });\n\n    test('should terminate agent successfully', async () => {\n      await manager.terminateAgent(agentId);\n      \n      const agent = manager.getAgentState(agentId);\n      expect(agent).toBeNull();\n    });\n\n    test('should emit agentTerminated event', (done) => {\n      manager.on('agentTerminated', (event) => {\n        expect(event.agentId).toBe(agentId);\n        done();\n      });\n\n      manager.terminateAgent(agentId);\n    });\n\n    test('should handle terminating non-existent agent gracefully', async () => {\n      await expect(manager.terminateAgent('invalid-id'))\n        .resolves.not.toThrow();\n    });\n  });\n\n  describe('Network Topology', () => {\n    beforeEach(async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      // Spawn multiple agents for topology testing\n      const agentConfig = { type: 'mlp', architecture: [2, 1] };\n      await manager.spawnAgent(agentConfig);\n      await manager.spawnAgent(agentConfig);\n      await manager.spawnAgent(agentConfig);\n    });\n\n    test('should get network topology', () => {\n      const topology = manager.getNetworkTopology();\n      \n      expect(topology).toBeDefined();\n      expect(topology.nodes).toBeDefined();\n      expect(topology.connections).toBeDefined();\n      expect(topology.totalNodes).toBe(3);\n      expect(topology.activeConnections).toBeGreaterThan(0);\n      expect(topology.networkHealth).toBeGreaterThan(0);\n    });\n\n    test('should include correct node information', () => {\n      const topology = manager.getNetworkTopology();\n      \n      topology.nodes.forEach(node => {\n        expect(node.id).toBeDefined();\n        expect(node.type).toBeDefined();\n        expect(node.state).toBe(AgentState.ACTIVE);\n        expect(typeof node.performance).toBe('number');\n        expect(typeof node.memoryUsage).toBe('number');\n      });\n    });\n\n    test('should calculate network connections correctly', () => {\n      const topology = manager.getNetworkTopology();\n      const expectedConnections = (3 * (3 - 1)) / 2; // n*(n-1)/2 for full mesh\n      \n      expect(topology.connections.length).toBe(expectedConnections);\n      \n      topology.connections.forEach(connection => {\n        expect(connection).toHaveLength(3); // [source, target, strength]\n        expect(typeof connection[2]).toBe('number'); // strength\n      });\n    });\n  });\n\n  describe('Performance Metrics', () => {\n    test('should provide performance metrics', () => {\n      const metrics = manager.getPerformanceMetrics();\n      \n      expect(metrics).toBeDefined();\n      expect(typeof metrics.totalAgentsSpawned).toBe('number');\n      expect(typeof metrics.averageSpawnTime).toBe('number');\n      expect(typeof metrics.averageInferenceTime).toBe('number');\n      expect(typeof metrics.memoryUsage).toBe('number');\n      expect(typeof metrics.activeLearningTasks).toBe('number');\n      expect(typeof metrics.systemHealthScore).toBe('number');\n    });\n\n    test('should calculate system health correctly', async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const metrics = manager.getPerformanceMetrics();\n      expect(metrics.systemHealthScore).toBeGreaterThanOrEqual(0);\n      expect(metrics.systemHealthScore).toBeLessThanOrEqual(100);\n    });\n\n    test('should update metrics after operations', async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const initialMetrics = manager.getPerformanceMetrics();\n      \n      const agentConfig = { type: 'mlp', architecture: [2, 1] };\n      await manager.spawnAgent(agentConfig);\n      \n      const updatedMetrics = manager.getPerformanceMetrics();\n      expect(updatedMetrics.totalAgentsSpawned).toBeGreaterThan(initialMetrics.totalAgentsSpawned);\n    });\n  });\n\n  describe('Cleanup', () => {\n    test('should cleanup all resources', async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // Spawn some agents\n      const agentConfig = { type: 'mlp', architecture: [2, 1] };\n      await manager.spawnAgent(agentConfig);\n      await manager.spawnAgent(agentConfig);\n      \n      expect(manager.getActiveAgents().length).toBe(2);\n      \n      await manager.cleanup();\n      \n      expect(manager.getActiveAgents().length).toBe(0);\n    });\n\n    test('should emit cleanup event', (done) => {\n      manager.on('cleanup', () => {\n        done();\n      });\n\n      manager.cleanup();\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle WASM initialization failure', async () => {\n      // Mock WebAssembly to throw error\n      const originalWebAssembly = global.WebAssembly;\n      global.WebAssembly = {\n        instantiate: jest.fn().mockRejectedValue(new Error('WASM load failed'))\n      } as any;\n\n      const errorManager = new NeuralAgentManager(mockConfig);\n      \n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // Restore WebAssembly\n      global.WebAssembly = originalWebAssembly;\n    });\n\n    test('should handle memory allocation errors', async () => {\n      // Test with very small memory limit\n      const smallMemoryManager = new NeuralAgentManager({\n        ...mockConfig,\n        memoryLimitPerAgent: 1 // 1 byte - too small\n      });\n      \n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const agentConfig = { type: 'mlp', architecture: [1000, 1000, 1000] }; // Large network\n      \n      // Should not throw but may emit warnings\n      await expect(smallMemoryManager.spawnAgent(agentConfig))\n        .resolves.toBeDefined();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle empty training data', async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const agentConfig = { type: 'mlp', architecture: [2, 1] };\n      const agentId = await manager.spawnAgent(agentConfig);\n      \n      await expect(manager.trainAgent(agentId, [], 10))\n        .rejects.toThrow();\n    });\n\n    test('should handle zero epochs training', async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const agentConfig = { type: 'mlp', architecture: [2, 1] };\n      const agentId = await manager.spawnAgent(agentConfig);\n      const trainingData = [{ inputs: [0.1, 0.2], outputs: [0.3] }];\n      \n      const session = await manager.trainAgent(agentId, trainingData, 0);\n      expect(session.epochs).toBe(0);\n    });\n\n    test('should handle large input arrays', async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const agentConfig = { type: 'mlp', architecture: [1000, 1] };\n      const agentId = await manager.spawnAgent(agentConfig);\n      \n      const largeInputs = new Array(1000).fill(0).map(() => Math.random());\n      \n      await expect(manager.runInference(agentId, largeInputs))\n        .resolves.toBeDefined();\n    });\n  });\n});"],"version":3}