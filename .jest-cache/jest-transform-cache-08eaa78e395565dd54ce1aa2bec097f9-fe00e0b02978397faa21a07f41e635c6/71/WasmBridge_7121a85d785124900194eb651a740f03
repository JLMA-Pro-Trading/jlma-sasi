3a07e7e692d4ef2cabc23fc1b9967852
/* istanbul ignore next */
function cov_2qdymefdzp() {
  var path = "/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts";
  var hash = "fb77f84cac25f66e08c29a99cecfda23e85bc6f7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 14,
          column: 11
        }
      },
      "1": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "2": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "3": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "4": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "5": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "6": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "7": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 81
        }
      },
      "8": {
        start: {
          line: 53,
          column: 34
        },
        end: {
          line: 53,
          column: 63
        }
      },
      "9": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 65
        }
      },
      "10": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "11": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 62
        }
      },
      "12": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 66
        }
      },
      "13": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 42
        }
      },
      "14": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 92
        }
      },
      "15": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 28
        }
      },
      "16": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 25
        }
      },
      "17": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 73
        }
      },
      "18": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 25
        }
      },
      "19": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "20": {
        start: {
          line: 76,
          column: 29
        },
        end: {
          line: 81,
          column: 14
        }
      },
      "21": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 62
        }
      },
      "22": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 24
        }
      },
      "23": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 25
        }
      },
      "24": {
        start: {
          line: 95,
          column: 23
        },
        end: {
          line: 95,
          column: 62
        }
      },
      "25": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 157,
          column: 10
        }
      },
      "26": {
        start: {
          line: 100,
          column: 35
        },
        end: {
          line: 100,
          column: 85
        }
      },
      "27": {
        start: {
          line: 101,
          column: 36
        },
        end: {
          line: 101,
          column: 88
        }
      },
      "28": {
        start: {
          line: 103,
          column: 34
        },
        end: {
          line: 103,
          column: 51
        }
      },
      "29": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 107,
          column: 17
        }
      },
      "30": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 30
        }
      },
      "31": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 106,
          column: 68
        }
      },
      "32": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 79
        }
      },
      "33": {
        start: {
          line: 111,
          column: 40
        },
        end: {
          line: 111,
          column: 94
        }
      },
      "34": {
        start: {
          line: 113,
          column: 34
        },
        end: {
          line: 113,
          column: 51
        }
      },
      "35": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "36": {
        start: {
          line: 114,
          column: 29
        },
        end: {
          line: 114,
          column: 30
        }
      },
      "37": {
        start: {
          line: 116,
          column: 39
        },
        end: {
          line: 116,
          column: 66
        }
      },
      "38": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 99
        }
      },
      "39": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 79
        }
      },
      "40": {
        start: {
          line: 122,
          column: 35
        },
        end: {
          line: 122,
          column: 84
        }
      },
      "41": {
        start: {
          line: 124,
          column: 34
        },
        end: {
          line: 124,
          column: 51
        }
      },
      "42": {
        start: {
          line: 125,
          column: 33
        },
        end: {
          line: 125,
          column: 34
        }
      },
      "43": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 130,
          column: 17
        }
      },
      "44": {
        start: {
          line: 126,
          column: 29
        },
        end: {
          line: 126,
          column: 30
        }
      },
      "45": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 129,
          column: 21
        }
      },
      "46": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 37
        }
      },
      "47": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 79
        }
      },
      "48": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "49": {
        start: {
          line: 135,
          column: 36
        },
        end: {
          line: 135,
          column: 88
        }
      },
      "50": {
        start: {
          line: 136,
          column: 37
        },
        end: {
          line: 136,
          column: 91
        }
      },
      "51": {
        start: {
          line: 138,
          column: 34
        },
        end: {
          line: 138,
          column: 51
        }
      },
      "52": {
        start: {
          line: 139,
          column: 36
        },
        end: {
          line: 139,
          column: 37
        }
      },
      "53": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 142,
          column: 17
        }
      },
      "54": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 140,
          column: 30
        }
      },
      "55": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 141,
          column: 52
        }
      },
      "56": {
        start: {
          line: 143,
          column: 34
        },
        end: {
          line: 143,
          column: 35
        }
      },
      "57": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "58": {
        start: {
          line: 144,
          column: 29
        },
        end: {
          line: 144,
          column: 30
        }
      },
      "59": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 51
        }
      },
      "60": {
        start: {
          line: 147,
          column: 35
        },
        end: {
          line: 147,
          column: 87
        }
      },
      "61": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 79
        }
      },
      "62": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 34
        }
      },
      "63": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 65
        }
      },
      "64": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 48
        }
      },
      "65": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "66": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 59
        }
      },
      "67": {
        start: {
          line: 166,
          column: 26
        },
        end: {
          line: 166,
          column: 39
        }
      },
      "68": {
        start: {
          line: 167,
          column: 27
        },
        end: {
          line: 167,
          column: 36
        }
      },
      "69": {
        start: {
          line: 169,
          column: 25
        },
        end: {
          line: 169,
          column: 59
        }
      },
      "70": {
        start: {
          line: 170,
          column: 26
        },
        end: {
          line: 170,
          column: 61
        }
      },
      "71": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "72": {
        start: {
          line: 173,
          column: 30
        },
        end: {
          line: 173,
          column: 90
        }
      },
      "73": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 34
        }
      },
      "74": {
        start: {
          line: 176,
          column: 30
        },
        end: {
          line: 176,
          column: 47
        }
      },
      "75": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 96
        }
      },
      "76": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 178,
          column: 45
        }
      },
      "77": {
        start: {
          line: 180,
          column: 31
        },
        end: {
          line: 180,
          column: 93
        }
      },
      "78": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 55
        }
      },
      "79": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 65
        }
      },
      "80": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 76
        }
      },
      "81": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 90
        }
      },
      "82": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 26
        }
      },
      "83": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 38
        }
      },
      "84": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 39
        }
      },
      "85": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "86": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 59
        }
      },
      "87": {
        start: {
          line: 201,
          column: 22
        },
        end: {
          line: 201,
          column: 40
        }
      },
      "88": {
        start: {
          line: 202,
          column: 31
        },
        end: {
          line: 202,
          column: 61
        }
      },
      "89": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "90": {
        start: {
          line: 205,
          column: 36
        },
        end: {
          line: 205,
          column: 98
        }
      },
      "91": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 45
        }
      },
      "92": {
        start: {
          line: 208,
          column: 30
        },
        end: {
          line: 208,
          column: 47
        }
      },
      "93": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 75
        }
      },
      "94": {
        start: {
          line: 210,
          column: 28
        },
        end: {
          line: 210,
          column: 45
        }
      },
      "95": {
        start: {
          line: 212,
          column: 27
        },
        end: {
          line: 212,
          column: 60
        }
      },
      "96": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 65
        }
      },
      "97": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 72
        }
      },
      "98": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 26
        }
      },
      "99": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 44
        }
      },
      "100": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "101": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 59
        }
      },
      "102": {
        start: {
          line: 229,
          column: 22
        },
        end: {
          line: 229,
          column: 35
        }
      },
      "103": {
        start: {
          line: 230,
          column: 26
        },
        end: {
          line: 230,
          column: 56
        }
      },
      "104": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "105": {
        start: {
          line: 233,
          column: 31
        },
        end: {
          line: 233,
          column: 88
        }
      },
      "106": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 35
        }
      },
      "107": {
        start: {
          line: 236,
          column: 30
        },
        end: {
          line: 236,
          column: 47
        }
      },
      "108": {
        start: {
          line: 237,
          column: 30
        },
        end: {
          line: 237,
          column: 98
        }
      },
      "109": {
        start: {
          line: 238,
          column: 28
        },
        end: {
          line: 238,
          column: 45
        }
      },
      "110": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 65
        }
      },
      "111": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 29
        }
      },
      "112": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 39
        }
      },
      "113": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "114": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 59
        }
      },
      "115": {
        start: {
          line: 254,
          column: 28
        },
        end: {
          line: 254,
          column: 42
        }
      },
      "116": {
        start: {
          line: 255,
          column: 29
        },
        end: {
          line: 255,
          column: 44
        }
      },
      "117": {
        start: {
          line: 256,
          column: 27
        },
        end: {
          line: 256,
          column: 63
        }
      },
      "118": {
        start: {
          line: 257,
          column: 28
        },
        end: {
          line: 257,
          column: 65
        }
      },
      "119": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "120": {
        start: {
          line: 260,
          column: 32
        },
        end: {
          line: 260,
          column: 96
        }
      },
      "121": {
        start: {
          line: 261,
          column: 33
        },
        end: {
          line: 261,
          column: 99
        }
      },
      "122": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 37
        }
      },
      "123": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 39
        }
      },
      "124": {
        start: {
          line: 265,
          column: 30
        },
        end: {
          line: 265,
          column: 47
        }
      },
      "125": {
        start: {
          line: 266,
          column: 31
        },
        end: {
          line: 266,
          column: 120
        }
      },
      "126": {
        start: {
          line: 267,
          column: 28
        },
        end: {
          line: 267,
          column: 45
        }
      },
      "127": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 65
        }
      },
      "128": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 30
        }
      },
      "129": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 40
        }
      },
      "130": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 41
        }
      },
      "131": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "132": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 74
        }
      },
      "133": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 39
        }
      },
      "134": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 34
        }
      },
      "135": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 49
        }
      },
      "136": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 51
        }
      },
      "137": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 27
        }
      },
      "138": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 33
        }
      },
      "139": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 35
        }
      },
      "140": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 327,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 23
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 44
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 29
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 73
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 38
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 93
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 41
          },
          end: {
            line: 99,
            column: 42
          }
        },
        loc: {
          start: {
            line: 99,
            column: 85
          },
          end: {
            line: 109,
            column: 13
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 110,
            column: 34
          },
          end: {
            line: 110,
            column: 35
          }
        },
        loc: {
          start: {
            line: 110,
            column: 74
          },
          end: {
            line: 120,
            column: 13
          }
        },
        line: 110
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 121,
            column: 33
          },
          end: {
            line: 121,
            column: 34
          }
        },
        loc: {
          start: {
            line: 121,
            column: 75
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 121
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 134,
            column: 39
          },
          end: {
            line: 134,
            column: 40
          }
        },
        loc: {
          start: {
            line: 134,
            column: 87
          },
          end: {
            line: 150,
            column: 13
          }
        },
        line: 134
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 151,
            column: 28
          },
          end: {
            line: 151,
            column: 29
          }
        },
        loc: {
          start: {
            line: 151,
            column: 34
          },
          end: {
            line: 153,
            column: 13
          }
        },
        line: 151
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 154,
            column: 30
          },
          end: {
            line: 154,
            column: 31
          }
        },
        loc: {
          start: {
            line: 154,
            column: 36
          },
          end: {
            line: 156,
            column: 13
          }
        },
        line: 154
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 162
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 37
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 197
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 46
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 225
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 47
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 250
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 28
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 280
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 24
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 289
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 22
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 295
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 301,
            column: 5
          }
        },
        loc: {
          start: {
            line: 301,
            column: 25
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 301
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 20
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 309
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 317,
            column: 4
          },
          end: {
            line: 317,
            column: 5
          }
        },
        loc: {
          start: {
            line: 317,
            column: 14
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 317
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "2": {
        loc: {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "3": {
        loc: {
          start: {
            line: 152,
            column: 23
          },
          end: {
            line: 152,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 59
          },
          end: {
            line: 152,
            column: 60
          }
        }, {
          start: {
            line: 152,
            column: 63
          },
          end: {
            line: 152,
            column: 64
          }
        }],
        line: 152
      },
      "4": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "5": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 31
          }
        }, {
          start: {
            line: 163,
            column: 35
          },
          end: {
            line: 163,
            column: 47
          }
        }],
        line: 163
      },
      "6": {
        loc: {
          start: {
            line: 185,
            column: 42
          },
          end: {
            line: 185,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 78
          },
          end: {
            line: 185,
            column: 82
          }
        }, {
          start: {
            line: 185,
            column: 85
          },
          end: {
            line: 185,
            column: 89
          }
        }],
        line: 185
      },
      "7": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "8": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 31
          }
        }, {
          start: {
            line: 198,
            column: 35
          },
          end: {
            line: 198,
            column: 47
          }
        }],
        line: 198
      },
      "9": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "10": {
        loc: {
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 226,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 226,
            column: 31
          }
        }, {
          start: {
            line: 226,
            column: 35
          },
          end: {
            line: 226,
            column: 47
          }
        }],
        line: 226
      },
      "11": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "12": {
        loc: {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 251,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 251,
            column: 31
          }
        }, {
          start: {
            line: 251,
            column: 35
          },
          end: {
            line: 251,
            column: 47
          }
        }],
        line: 251
      },
      "13": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts"],
      sourcesContent: ["/**\n * WASM Bridge for Performance-Critical Neural Operations\n * \n * This module provides a bridge to WebAssembly modules for accelerated\n * neural mesh computations, including SIMD-optimized operations.\n */\n\nexport interface WasmModule {\n  memory: WebAssembly.Memory\n  calculate_neural_activation: (inputs: number, inputsPtr: number, outputs: number, outputsPtr: number) => void\n  optimize_connections: (connections: number, connectionsPtr: number, count: number) => void\n  process_spike_train: (spikes: number, spikesPtr: number, count: number, windowSize: number) => number\n  calculate_mesh_efficiency: (neurons: number, neuronsPtr: number, synapses: number, synapsesPtr: number) => number\n  simd_supported: () => number\n  get_memory_usage: () => number\n}\n\nexport interface WasmPerformanceMetrics {\n  executionTime: number\n  memoryUsage: number\n  simdAcceleration: boolean\n  throughput: number\n  efficiency: number\n}\n\nexport class WasmBridge {\n  private module: WasmModule | null = null\n  private isInitialized = false\n  private memoryBuffer: ArrayBuffer | null = null\n  private performance: WasmPerformanceMetrics\n\n  constructor() {\n    this.performance = {\n      executionTime: 0,\n      memoryUsage: 0,\n      simdAcceleration: false,\n      throughput: 0,\n      efficiency: 0\n    }\n  }\n\n  /**\n   * Initialize WASM module\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      // In a real implementation, this would load the actual WASM module\n      // from the synaptic-mesh project. For now, we'll simulate it.\n      \n      // Check if WebAssembly is supported\n      if (typeof WebAssembly === 'undefined') {\n        throw new Error('WebAssembly not supported in this environment')\n      }\n\n      // Check for SIMD support\n      const simdSupported = await this.checkSIMDSupport()\n      \n      // Create simulated WASM module\n      this.module = await this.createSimulatedWasmModule()\n      \n      if (this.module) {\n        this.memoryBuffer = this.module.memory.buffer\n        this.performance.simdAcceleration = simdSupported\n        this.isInitialized = true\n        \n        console.log('\uD83D\uDE80 WASM Bridge initialized with SIMD support:', simdSupported)\n        return true\n      }\n      \n      return false\n    } catch (error) {\n      console.error('\u274C WASM Bridge initialization failed:', error)\n      return false\n    }\n  }\n\n  /**\n   * Check if SIMD is supported\n   */\n  private async checkSIMDSupport(): Promise<boolean> {\n    try {\n      // Create a simple WASM module that uses SIMD instructions\n      const wasmCode = new Uint8Array([\n        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,\n        0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7b,\n        0x03, 0x02, 0x01, 0x00,\n        0x0a, 0x0a, 0x01, 0x08, 0x00, 0x41, 0x00, 0xfd, 0x0f, 0x0b\n      ])\n      \n      const module = await WebAssembly.compile(wasmCode)\n      return true\n    } catch (error) {\n      // SIMD not supported\n      return false\n    }\n  }\n\n  /**\n   * Create simulated WASM module for development\n   */\n  private async createSimulatedWasmModule(): Promise<WasmModule> {\n    // Create memory (1MB)\n    const memory = new WebAssembly.Memory({ initial: 16 })\n    \n    // Simulate WASM module functions\n    return {\n      memory,\n      \n      calculate_neural_activation: (inputs: number, inputsPtr: number, outputs: number, outputsPtr: number) => {\n        const inputArray = new Float32Array(memory.buffer, inputsPtr, inputs)\n        const outputArray = new Float32Array(memory.buffer, outputsPtr, outputs)\n        \n        // Simulate neural activation calculation with SIMD optimization\n        const startTime = performance.now()\n        \n        for (let i = 0; i < Math.min(inputs, outputs); i++) {\n          // Simulate tanh activation function\n          outputArray[i] = Math.tanh(inputArray[i] * 0.5)\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n      },\n      \n      optimize_connections: (connections: number, connectionsPtr: number, count: number) => {\n        const connectionArray = new Float32Array(memory.buffer, connectionsPtr, count)\n        \n        // Simulate connection weight optimization\n        const startTime = performance.now()\n        \n        for (let i = 0; i < count; i++) {\n          // Apply small random adjustments with bounds\n          const adjustment = (Math.random() - 0.5) * 0.1\n          connectionArray[i] = Math.min(1, Math.max(0, connectionArray[i] + adjustment))\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n      },\n      \n      process_spike_train: (spikes: number, spikesPtr: number, count: number, windowSize: number): number => {\n        const spikeArray = new Float32Array(memory.buffer, spikesPtr, count)\n        \n        // Calculate spike rate within window\n        const startTime = performance.now()\n        \n        let spikeCount = 0\n        for (let i = 0; i < count; i++) {\n          if (spikeArray[i] > 0.1) {\n            spikeCount++\n          }\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n        return spikeCount / (windowSize / 1000) // Hz\n      },\n      \n      calculate_mesh_efficiency: (neurons: number, neuronsPtr: number, synapses: number, synapsesPtr: number): number => {\n        const neuronArray = new Float32Array(memory.buffer, neuronsPtr, neurons)\n        const synapseArray = new Float32Array(memory.buffer, synapsesPtr, synapses)\n        \n        // Calculate overall mesh efficiency\n        const startTime = performance.now()\n        \n        let totalActivity = 0\n        for (let i = 0; i < neurons; i++) {\n          totalActivity += neuronArray[i]\n        }\n        \n        let totalWeight = 0\n        for (let i = 0; i < synapses; i++) {\n          totalWeight += synapseArray[i]\n        }\n        \n        const efficiency = (totalActivity / neurons) * (totalWeight / synapses)\n        \n        this.performance.executionTime = performance.now() - startTime\n        return efficiency\n      },\n      \n      simd_supported: (): number => {\n        return this.performance.simdAcceleration ? 1 : 0\n      },\n      \n      get_memory_usage: (): number => {\n        return memory.buffer.byteLength\n      }\n    }\n  }\n\n  /**\n   * Calculate neural activation using WASM\n   */\n  calculateNeuralActivation(inputs: Float32Array): Float32Array {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const inputSize = inputs.length\n    const outputSize = inputSize\n    \n    // Allocate memory for inputs and outputs\n    const inputPtr = this.allocateMemory(inputSize * 4) // 4 bytes per float\n    const outputPtr = this.allocateMemory(outputSize * 4)\n    \n    try {\n      // Copy input data to WASM memory\n      const inputView = new Float32Array(this.memoryBuffer!, inputPtr / 4, inputSize)\n      inputView.set(inputs)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      this.module.calculate_neural_activation(inputSize, inputPtr, outputSize, outputPtr)\n      const endTime = performance.now()\n      \n      // Copy output data from WASM memory\n      const outputView = new Float32Array(this.memoryBuffer!, outputPtr / 4, outputSize)\n      const result = new Float32Array(outputView)\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      this.performance.throughput = inputSize / (endTime - startTime)\n      this.performance.efficiency = this.performance.simdAcceleration ? 0.95 : 0.75\n      \n      return result\n    } finally {\n      // Free allocated memory\n      this.freeMemory(inputPtr)\n      this.freeMemory(outputPtr)\n    }\n  }\n\n  /**\n   * Optimize connection weights using WASM\n   */\n  optimizeConnections(connections: Float32Array): Float32Array {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const count = connections.length\n    const connectionsPtr = this.allocateMemory(count * 4)\n    \n    try {\n      // Copy connection data to WASM memory\n      const connectionsView = new Float32Array(this.memoryBuffer!, connectionsPtr / 4, count)\n      connectionsView.set(connections)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      this.module.optimize_connections(count, connectionsPtr, count)\n      const endTime = performance.now()\n      \n      // Copy optimized data back\n      const result = new Float32Array(connectionsView)\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      this.performance.throughput = count / (endTime - startTime)\n      \n      return result\n    } finally {\n      this.freeMemory(connectionsPtr)\n    }\n  }\n\n  /**\n   * Process spike train data using WASM\n   */\n  processSpikeTrainData(spikes: Float32Array, windowSize: number): number {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const count = spikes.length\n    const spikesPtr = this.allocateMemory(count * 4)\n    \n    try {\n      // Copy spike data to WASM memory\n      const spikesView = new Float32Array(this.memoryBuffer!, spikesPtr / 4, count)\n      spikesView.set(spikes)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      const spikeRate = this.module.process_spike_train(count, spikesPtr, count, windowSize)\n      const endTime = performance.now()\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      \n      return spikeRate\n    } finally {\n      this.freeMemory(spikesPtr)\n    }\n  }\n\n  /**\n   * Calculate mesh efficiency using WASM\n   */\n  calculateMeshEfficiency(neurons: Float32Array, synapses: Float32Array): number {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const neuronCount = neurons.length\n    const synapseCount = synapses.length\n    const neuronsPtr = this.allocateMemory(neuronCount * 4)\n    const synapsesPtr = this.allocateMemory(synapseCount * 4)\n    \n    try {\n      // Copy data to WASM memory\n      const neuronsView = new Float32Array(this.memoryBuffer!, neuronsPtr / 4, neuronCount)\n      const synapsesView = new Float32Array(this.memoryBuffer!, synapsesPtr / 4, synapseCount)\n      \n      neuronsView.set(neurons)\n      synapsesView.set(synapses)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      const efficiency = this.module.calculate_mesh_efficiency(neuronCount, neuronsPtr, synapseCount, synapsesPtr)\n      const endTime = performance.now()\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      \n      return efficiency\n    } finally {\n      this.freeMemory(neuronsPtr)\n      this.freeMemory(synapsesPtr)\n    }\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics(): WasmPerformanceMetrics {\n    if (this.module) {\n      this.performance.memoryUsage = this.module.get_memory_usage()\n    }\n    return { ...this.performance }\n  }\n\n  /**\n   * Check if WASM module is initialized\n   */\n  isWasmInitialized(): boolean {\n    return this.isInitialized\n  }\n\n  /**\n   * Check if SIMD is supported\n   */\n  isSIMDSupported(): boolean {\n    return this.performance.simdAcceleration\n  }\n\n  /**\n   * Allocate memory in WASM module (simplified simulation)\n   */\n  private allocateMemory(size: number): number {\n    // In a real implementation, this would use a proper memory allocator\n    // For simulation, we'll return a pseudo-pointer\n    return Math.floor(Math.random() * 1000000)\n  }\n\n  /**\n   * Free memory in WASM module (simplified simulation)\n   */\n  private freeMemory(ptr: number): void {\n    // In a real implementation, this would free the memory\n    // For simulation, we'll just log it\n    // console.log('Memory freed at:', ptr)\n  }\n\n  /**\n   * Cleanup WASM module\n   */\n  cleanup(): void {\n    this.module = null\n    this.memoryBuffer = null\n    this.isInitialized = false\n    this.performance = {\n      executionTime: 0,\n      memoryUsage: 0,\n      simdAcceleration: false,\n      throughput: 0,\n      efficiency: 0\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fb77f84cac25f66e08c29a99cecfda23e85bc6f7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qdymefdzp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qdymefdzp();
/**
 * WASM Bridge for Performance-Critical Neural Operations
 *
 * This module provides a bridge to WebAssembly modules for accelerated
 * neural mesh computations, including SIMD-optimized operations.
 */
export class WasmBridge {
  constructor() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[0]++;
    cov_2qdymefdzp().s[0]++;
    Object.defineProperty(this, "module", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_2qdymefdzp().s[1]++;
    Object.defineProperty(this, "isInitialized", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    /* istanbul ignore next */
    cov_2qdymefdzp().s[2]++;
    Object.defineProperty(this, "memoryBuffer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    /* istanbul ignore next */
    cov_2qdymefdzp().s[3]++;
    Object.defineProperty(this, "performance", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    /* istanbul ignore next */
    cov_2qdymefdzp().s[4]++;
    this.performance = {
      executionTime: 0,
      memoryUsage: 0,
      simdAcceleration: false,
      throughput: 0,
      efficiency: 0
    };
  }
  /**
   * Initialize WASM module
   */
  async initialize() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[1]++;
    cov_2qdymefdzp().s[5]++;
    try {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[6]++;
      // In a real implementation, this would load the actual WASM module
      // from the synaptic-mesh project. For now, we'll simulate it.
      // Check if WebAssembly is supported
      if (typeof WebAssembly === 'undefined') {
        /* istanbul ignore next */
        cov_2qdymefdzp().b[0][0]++;
        cov_2qdymefdzp().s[7]++;
        throw new Error('WebAssembly not supported in this environment');
      } else
      /* istanbul ignore next */
      {
        cov_2qdymefdzp().b[0][1]++;
      }
      // Check for SIMD support
      const simdSupported =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[8]++, await this.checkSIMDSupport());
      // Create simulated WASM module
      /* istanbul ignore next */
      cov_2qdymefdzp().s[9]++;
      this.module = await this.createSimulatedWasmModule();
      /* istanbul ignore next */
      cov_2qdymefdzp().s[10]++;
      if (this.module) {
        /* istanbul ignore next */
        cov_2qdymefdzp().b[1][0]++;
        cov_2qdymefdzp().s[11]++;
        this.memoryBuffer = this.module.memory.buffer;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[12]++;
        this.performance.simdAcceleration = simdSupported;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[13]++;
        this.isInitialized = true;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[14]++;
        console.log('🚀 WASM Bridge initialized with SIMD support:', simdSupported);
        /* istanbul ignore next */
        cov_2qdymefdzp().s[15]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_2qdymefdzp().b[1][1]++;
      }
      cov_2qdymefdzp().s[16]++;
      return false;
    } catch (error) {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[17]++;
      console.error('❌ WASM Bridge initialization failed:', error);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[18]++;
      return false;
    }
  }
  /**
   * Check if SIMD is supported
   */
  async checkSIMDSupport() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[2]++;
    cov_2qdymefdzp().s[19]++;
    try {
      // Create a simple WASM module that uses SIMD instructions
      const wasmCode =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[20]++, new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7b, 0x03, 0x02, 0x01, 0x00, 0x0a, 0x0a, 0x01, 0x08, 0x00, 0x41, 0x00, 0xfd, 0x0f, 0x0b]));
      const module =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[21]++, await WebAssembly.compile(wasmCode));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[22]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[23]++;
      // SIMD not supported
      return false;
    }
  }
  /**
   * Create simulated WASM module for development
   */
  async createSimulatedWasmModule() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[3]++;
    // Create memory (1MB)
    const memory =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[24]++, new WebAssembly.Memory({
      initial: 16
    }));
    // Simulate WASM module functions
    /* istanbul ignore next */
    cov_2qdymefdzp().s[25]++;
    return {
      memory,
      calculate_neural_activation: (inputs, inputsPtr, outputs, outputsPtr) => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[4]++;
        const inputArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[26]++, new Float32Array(memory.buffer, inputsPtr, inputs));
        const outputArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[27]++, new Float32Array(memory.buffer, outputsPtr, outputs));
        // Simulate neural activation calculation with SIMD optimization
        const startTime =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[28]++, performance.now());
        /* istanbul ignore next */
        cov_2qdymefdzp().s[29]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[30]++, 0); i < Math.min(inputs, outputs); i++) {
          /* istanbul ignore next */
          cov_2qdymefdzp().s[31]++;
          // Simulate tanh activation function
          outputArray[i] = Math.tanh(inputArray[i] * 0.5);
        }
        /* istanbul ignore next */
        cov_2qdymefdzp().s[32]++;
        this.performance.executionTime = performance.now() - startTime;
      },
      optimize_connections: (connections, connectionsPtr, count) => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[5]++;
        const connectionArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[33]++, new Float32Array(memory.buffer, connectionsPtr, count));
        // Simulate connection weight optimization
        const startTime =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[34]++, performance.now());
        /* istanbul ignore next */
        cov_2qdymefdzp().s[35]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[36]++, 0); i < count; i++) {
          // Apply small random adjustments with bounds
          const adjustment =
          /* istanbul ignore next */
          (cov_2qdymefdzp().s[37]++, (Math.random() - 0.5) * 0.1);
          /* istanbul ignore next */
          cov_2qdymefdzp().s[38]++;
          connectionArray[i] = Math.min(1, Math.max(0, connectionArray[i] + adjustment));
        }
        /* istanbul ignore next */
        cov_2qdymefdzp().s[39]++;
        this.performance.executionTime = performance.now() - startTime;
      },
      process_spike_train: (spikes, spikesPtr, count, windowSize) => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[6]++;
        const spikeArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[40]++, new Float32Array(memory.buffer, spikesPtr, count));
        // Calculate spike rate within window
        const startTime =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[41]++, performance.now());
        let spikeCount =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[42]++, 0);
        /* istanbul ignore next */
        cov_2qdymefdzp().s[43]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[44]++, 0); i < count; i++) {
          /* istanbul ignore next */
          cov_2qdymefdzp().s[45]++;
          if (spikeArray[i] > 0.1) {
            /* istanbul ignore next */
            cov_2qdymefdzp().b[2][0]++;
            cov_2qdymefdzp().s[46]++;
            spikeCount++;
          } else
          /* istanbul ignore next */
          {
            cov_2qdymefdzp().b[2][1]++;
          }
        }
        /* istanbul ignore next */
        cov_2qdymefdzp().s[47]++;
        this.performance.executionTime = performance.now() - startTime;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[48]++;
        return spikeCount / (windowSize / 1000); // Hz
      },
      calculate_mesh_efficiency: (neurons, neuronsPtr, synapses, synapsesPtr) => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[7]++;
        const neuronArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[49]++, new Float32Array(memory.buffer, neuronsPtr, neurons));
        const synapseArray =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[50]++, new Float32Array(memory.buffer, synapsesPtr, synapses));
        // Calculate overall mesh efficiency
        const startTime =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[51]++, performance.now());
        let totalActivity =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[52]++, 0);
        /* istanbul ignore next */
        cov_2qdymefdzp().s[53]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[54]++, 0); i < neurons; i++) {
          /* istanbul ignore next */
          cov_2qdymefdzp().s[55]++;
          totalActivity += neuronArray[i];
        }
        let totalWeight =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[56]++, 0);
        /* istanbul ignore next */
        cov_2qdymefdzp().s[57]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[58]++, 0); i < synapses; i++) {
          /* istanbul ignore next */
          cov_2qdymefdzp().s[59]++;
          totalWeight += synapseArray[i];
        }
        const efficiency =
        /* istanbul ignore next */
        (cov_2qdymefdzp().s[60]++, totalActivity / neurons * (totalWeight / synapses));
        /* istanbul ignore next */
        cov_2qdymefdzp().s[61]++;
        this.performance.executionTime = performance.now() - startTime;
        /* istanbul ignore next */
        cov_2qdymefdzp().s[62]++;
        return efficiency;
      },
      simd_supported: () => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[8]++;
        cov_2qdymefdzp().s[63]++;
        return this.performance.simdAcceleration ?
        /* istanbul ignore next */
        (cov_2qdymefdzp().b[3][0]++, 1) :
        /* istanbul ignore next */
        (cov_2qdymefdzp().b[3][1]++, 0);
      },
      get_memory_usage: () => {
        /* istanbul ignore next */
        cov_2qdymefdzp().f[9]++;
        cov_2qdymefdzp().s[64]++;
        return memory.buffer.byteLength;
      }
    };
  }
  /**
   * Calculate neural activation using WASM
   */
  calculateNeuralActivation(inputs) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[10]++;
    cov_2qdymefdzp().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[5][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[5][1]++, !this.module)) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[4][0]++;
      cov_2qdymefdzp().s[66]++;
      throw new Error('WASM module not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[4][1]++;
    }
    const inputSize =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[67]++, inputs.length);
    const outputSize =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[68]++, inputSize);
    // Allocate memory for inputs and outputs
    const inputPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[69]++, this.allocateMemory(inputSize * 4)); // 4 bytes per float
    const outputPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[70]++, this.allocateMemory(outputSize * 4));
    /* istanbul ignore next */
    cov_2qdymefdzp().s[71]++;
    try {
      // Copy input data to WASM memory
      const inputView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[72]++, new Float32Array(this.memoryBuffer, inputPtr / 4, inputSize));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[73]++;
      inputView.set(inputs);
      // Call WASM function
      const startTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[74]++, performance.now());
      /* istanbul ignore next */
      cov_2qdymefdzp().s[75]++;
      this.module.calculate_neural_activation(inputSize, inputPtr, outputSize, outputPtr);
      const endTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[76]++, performance.now());
      // Copy output data from WASM memory
      const outputView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[77]++, new Float32Array(this.memoryBuffer, outputPtr / 4, outputSize));
      const result =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[78]++, new Float32Array(outputView));
      // Update performance metrics
      /* istanbul ignore next */
      cov_2qdymefdzp().s[79]++;
      this.performance.executionTime = endTime - startTime;
      /* istanbul ignore next */
      cov_2qdymefdzp().s[80]++;
      this.performance.throughput = inputSize / (endTime - startTime);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[81]++;
      this.performance.efficiency = this.performance.simdAcceleration ?
      /* istanbul ignore next */
      (cov_2qdymefdzp().b[6][0]++, 0.95) :
      /* istanbul ignore next */
      (cov_2qdymefdzp().b[6][1]++, 0.75);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[82]++;
      return result;
    } finally {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[83]++;
      // Free allocated memory
      this.freeMemory(inputPtr);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[84]++;
      this.freeMemory(outputPtr);
    }
  }
  /**
   * Optimize connection weights using WASM
   */
  optimizeConnections(connections) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[11]++;
    cov_2qdymefdzp().s[85]++;
    if (
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[8][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[8][1]++, !this.module)) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[7][0]++;
      cov_2qdymefdzp().s[86]++;
      throw new Error('WASM module not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[7][1]++;
    }
    const count =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[87]++, connections.length);
    const connectionsPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[88]++, this.allocateMemory(count * 4));
    /* istanbul ignore next */
    cov_2qdymefdzp().s[89]++;
    try {
      // Copy connection data to WASM memory
      const connectionsView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[90]++, new Float32Array(this.memoryBuffer, connectionsPtr / 4, count));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[91]++;
      connectionsView.set(connections);
      // Call WASM function
      const startTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[92]++, performance.now());
      /* istanbul ignore next */
      cov_2qdymefdzp().s[93]++;
      this.module.optimize_connections(count, connectionsPtr, count);
      const endTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[94]++, performance.now());
      // Copy optimized data back
      const result =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[95]++, new Float32Array(connectionsView));
      // Update performance metrics
      /* istanbul ignore next */
      cov_2qdymefdzp().s[96]++;
      this.performance.executionTime = endTime - startTime;
      /* istanbul ignore next */
      cov_2qdymefdzp().s[97]++;
      this.performance.throughput = count / (endTime - startTime);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[98]++;
      return result;
    } finally {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[99]++;
      this.freeMemory(connectionsPtr);
    }
  }
  /**
   * Process spike train data using WASM
   */
  processSpikeTrainData(spikes, windowSize) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[12]++;
    cov_2qdymefdzp().s[100]++;
    if (
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[10][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[10][1]++, !this.module)) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[9][0]++;
      cov_2qdymefdzp().s[101]++;
      throw new Error('WASM module not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[9][1]++;
    }
    const count =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[102]++, spikes.length);
    const spikesPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[103]++, this.allocateMemory(count * 4));
    /* istanbul ignore next */
    cov_2qdymefdzp().s[104]++;
    try {
      // Copy spike data to WASM memory
      const spikesView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[105]++, new Float32Array(this.memoryBuffer, spikesPtr / 4, count));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[106]++;
      spikesView.set(spikes);
      // Call WASM function
      const startTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[107]++, performance.now());
      const spikeRate =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[108]++, this.module.process_spike_train(count, spikesPtr, count, windowSize));
      const endTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[109]++, performance.now());
      // Update performance metrics
      /* istanbul ignore next */
      cov_2qdymefdzp().s[110]++;
      this.performance.executionTime = endTime - startTime;
      /* istanbul ignore next */
      cov_2qdymefdzp().s[111]++;
      return spikeRate;
    } finally {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[112]++;
      this.freeMemory(spikesPtr);
    }
  }
  /**
   * Calculate mesh efficiency using WASM
   */
  calculateMeshEfficiency(neurons, synapses) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[13]++;
    cov_2qdymefdzp().s[113]++;
    if (
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[12][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_2qdymefdzp().b[12][1]++, !this.module)) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[11][0]++;
      cov_2qdymefdzp().s[114]++;
      throw new Error('WASM module not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[11][1]++;
    }
    const neuronCount =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[115]++, neurons.length);
    const synapseCount =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[116]++, synapses.length);
    const neuronsPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[117]++, this.allocateMemory(neuronCount * 4));
    const synapsesPtr =
    /* istanbul ignore next */
    (cov_2qdymefdzp().s[118]++, this.allocateMemory(synapseCount * 4));
    /* istanbul ignore next */
    cov_2qdymefdzp().s[119]++;
    try {
      // Copy data to WASM memory
      const neuronsView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[120]++, new Float32Array(this.memoryBuffer, neuronsPtr / 4, neuronCount));
      const synapsesView =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[121]++, new Float32Array(this.memoryBuffer, synapsesPtr / 4, synapseCount));
      /* istanbul ignore next */
      cov_2qdymefdzp().s[122]++;
      neuronsView.set(neurons);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[123]++;
      synapsesView.set(synapses);
      // Call WASM function
      const startTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[124]++, performance.now());
      const efficiency =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[125]++, this.module.calculate_mesh_efficiency(neuronCount, neuronsPtr, synapseCount, synapsesPtr));
      const endTime =
      /* istanbul ignore next */
      (cov_2qdymefdzp().s[126]++, performance.now());
      // Update performance metrics
      /* istanbul ignore next */
      cov_2qdymefdzp().s[127]++;
      this.performance.executionTime = endTime - startTime;
      /* istanbul ignore next */
      cov_2qdymefdzp().s[128]++;
      return efficiency;
    } finally {
      /* istanbul ignore next */
      cov_2qdymefdzp().s[129]++;
      this.freeMemory(neuronsPtr);
      /* istanbul ignore next */
      cov_2qdymefdzp().s[130]++;
      this.freeMemory(synapsesPtr);
    }
  }
  /**
   * Get current performance metrics
   */
  getPerformanceMetrics() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[14]++;
    cov_2qdymefdzp().s[131]++;
    if (this.module) {
      /* istanbul ignore next */
      cov_2qdymefdzp().b[13][0]++;
      cov_2qdymefdzp().s[132]++;
      this.performance.memoryUsage = this.module.get_memory_usage();
    } else
    /* istanbul ignore next */
    {
      cov_2qdymefdzp().b[13][1]++;
    }
    cov_2qdymefdzp().s[133]++;
    return {
      ...this.performance
    };
  }
  /**
   * Check if WASM module is initialized
   */
  isWasmInitialized() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[15]++;
    cov_2qdymefdzp().s[134]++;
    return this.isInitialized;
  }
  /**
   * Check if SIMD is supported
   */
  isSIMDSupported() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[16]++;
    cov_2qdymefdzp().s[135]++;
    return this.performance.simdAcceleration;
  }
  /**
   * Allocate memory in WASM module (simplified simulation)
   */
  allocateMemory(size) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[17]++;
    cov_2qdymefdzp().s[136]++;
    // In a real implementation, this would use a proper memory allocator
    // For simulation, we'll return a pseudo-pointer
    return Math.floor(Math.random() * 1000000);
  }
  /**
   * Free memory in WASM module (simplified simulation)
   */
  freeMemory(ptr) {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[18]++;
  } // In a real implementation, this would free the memory
  // For simulation, we'll just log it
  // console.log('Memory freed at:', ptr)
  /**
   * Cleanup WASM module
   */
  cleanup() {
    /* istanbul ignore next */
    cov_2qdymefdzp().f[19]++;
    cov_2qdymefdzp().s[137]++;
    this.module = null;
    /* istanbul ignore next */
    cov_2qdymefdzp().s[138]++;
    this.memoryBuffer = null;
    /* istanbul ignore next */
    cov_2qdymefdzp().s[139]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_2qdymefdzp().s[140]++;
    this.performance = {
      executionTime: 0,
      memoryUsage: 0,
      simdAcceleration: false,
      throughput: 0,
      efficiency: 0
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXYXNtQnJpZGdlIiwiY29uc3RydWN0b3IiLCJjb3ZfMnFkeW1lZmR6cCIsImYiLCJzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwZXJmb3JtYW5jZSIsImV4ZWN1dGlvblRpbWUiLCJtZW1vcnlVc2FnZSIsInNpbWRBY2NlbGVyYXRpb24iLCJ0aHJvdWdocHV0IiwiZWZmaWNpZW5jeSIsImluaXRpYWxpemUiLCJXZWJBc3NlbWJseSIsImIiLCJFcnJvciIsInNpbWRTdXBwb3J0ZWQiLCJjaGVja1NJTURTdXBwb3J0IiwibW9kdWxlIiwiY3JlYXRlU2ltdWxhdGVkV2FzbU1vZHVsZSIsIm1lbW9yeUJ1ZmZlciIsIm1lbW9yeSIsImJ1ZmZlciIsImlzSW5pdGlhbGl6ZWQiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJ3YXNtQ29kZSIsIlVpbnQ4QXJyYXkiLCJjb21waWxlIiwiTWVtb3J5IiwiaW5pdGlhbCIsImNhbGN1bGF0ZV9uZXVyYWxfYWN0aXZhdGlvbiIsImlucHV0cyIsImlucHV0c1B0ciIsIm91dHB1dHMiLCJvdXRwdXRzUHRyIiwiaW5wdXRBcnJheSIsIkZsb2F0MzJBcnJheSIsIm91dHB1dEFycmF5Iiwic3RhcnRUaW1lIiwibm93IiwiaSIsIk1hdGgiLCJtaW4iLCJ0YW5oIiwib3B0aW1pemVfY29ubmVjdGlvbnMiLCJjb25uZWN0aW9ucyIsImNvbm5lY3Rpb25zUHRyIiwiY291bnQiLCJjb25uZWN0aW9uQXJyYXkiLCJhZGp1c3RtZW50IiwicmFuZG9tIiwibWF4IiwicHJvY2Vzc19zcGlrZV90cmFpbiIsInNwaWtlcyIsInNwaWtlc1B0ciIsIndpbmRvd1NpemUiLCJzcGlrZUFycmF5Iiwic3Bpa2VDb3VudCIsImNhbGN1bGF0ZV9tZXNoX2VmZmljaWVuY3kiLCJuZXVyb25zIiwibmV1cm9uc1B0ciIsInN5bmFwc2VzIiwic3luYXBzZXNQdHIiLCJuZXVyb25BcnJheSIsInN5bmFwc2VBcnJheSIsInRvdGFsQWN0aXZpdHkiLCJ0b3RhbFdlaWdodCIsInNpbWRfc3VwcG9ydGVkIiwiZ2V0X21lbW9yeV91c2FnZSIsImJ5dGVMZW5ndGgiLCJjYWxjdWxhdGVOZXVyYWxBY3RpdmF0aW9uIiwiaW5wdXRTaXplIiwibGVuZ3RoIiwib3V0cHV0U2l6ZSIsImlucHV0UHRyIiwiYWxsb2NhdGVNZW1vcnkiLCJvdXRwdXRQdHIiLCJpbnB1dFZpZXciLCJzZXQiLCJlbmRUaW1lIiwib3V0cHV0VmlldyIsInJlc3VsdCIsImZyZWVNZW1vcnkiLCJvcHRpbWl6ZUNvbm5lY3Rpb25zIiwiY29ubmVjdGlvbnNWaWV3IiwicHJvY2Vzc1NwaWtlVHJhaW5EYXRhIiwic3Bpa2VzVmlldyIsInNwaWtlUmF0ZSIsImNhbGN1bGF0ZU1lc2hFZmZpY2llbmN5IiwibmV1cm9uQ291bnQiLCJzeW5hcHNlQ291bnQiLCJuZXVyb25zVmlldyIsInN5bmFwc2VzVmlldyIsImdldFBlcmZvcm1hbmNlTWV0cmljcyIsImlzV2FzbUluaXRpYWxpemVkIiwiaXNTSU1EU3VwcG9ydGVkIiwic2l6ZSIsImZsb29yIiwicHRyIiwiY2xlYW51cCJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2FnZW50aXN0cy1xdWlja3N0YXJ0LXdvcmtzcGFjZS1iYXNpYy9zYXNpL3NyYy91dGlscy9XYXNtQnJpZGdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV0FTTSBCcmlkZ2UgZm9yIFBlcmZvcm1hbmNlLUNyaXRpY2FsIE5ldXJhbCBPcGVyYXRpb25zXG4gKiBcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGEgYnJpZGdlIHRvIFdlYkFzc2VtYmx5IG1vZHVsZXMgZm9yIGFjY2VsZXJhdGVkXG4gKiBuZXVyYWwgbWVzaCBjb21wdXRhdGlvbnMsIGluY2x1ZGluZyBTSU1ELW9wdGltaXplZCBvcGVyYXRpb25zLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FzbU1vZHVsZSB7XG4gIG1lbW9yeTogV2ViQXNzZW1ibHkuTWVtb3J5XG4gIGNhbGN1bGF0ZV9uZXVyYWxfYWN0aXZhdGlvbjogKGlucHV0czogbnVtYmVyLCBpbnB1dHNQdHI6IG51bWJlciwgb3V0cHV0czogbnVtYmVyLCBvdXRwdXRzUHRyOiBudW1iZXIpID0+IHZvaWRcbiAgb3B0aW1pemVfY29ubmVjdGlvbnM6IChjb25uZWN0aW9uczogbnVtYmVyLCBjb25uZWN0aW9uc1B0cjogbnVtYmVyLCBjb3VudDogbnVtYmVyKSA9PiB2b2lkXG4gIHByb2Nlc3Nfc3Bpa2VfdHJhaW46IChzcGlrZXM6IG51bWJlciwgc3Bpa2VzUHRyOiBudW1iZXIsIGNvdW50OiBudW1iZXIsIHdpbmRvd1NpemU6IG51bWJlcikgPT4gbnVtYmVyXG4gIGNhbGN1bGF0ZV9tZXNoX2VmZmljaWVuY3k6IChuZXVyb25zOiBudW1iZXIsIG5ldXJvbnNQdHI6IG51bWJlciwgc3luYXBzZXM6IG51bWJlciwgc3luYXBzZXNQdHI6IG51bWJlcikgPT4gbnVtYmVyXG4gIHNpbWRfc3VwcG9ydGVkOiAoKSA9PiBudW1iZXJcbiAgZ2V0X21lbW9yeV91c2FnZTogKCkgPT4gbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FzbVBlcmZvcm1hbmNlTWV0cmljcyB7XG4gIGV4ZWN1dGlvblRpbWU6IG51bWJlclxuICBtZW1vcnlVc2FnZTogbnVtYmVyXG4gIHNpbWRBY2NlbGVyYXRpb246IGJvb2xlYW5cbiAgdGhyb3VnaHB1dDogbnVtYmVyXG4gIGVmZmljaWVuY3k6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgV2FzbUJyaWRnZSB7XG4gIHByaXZhdGUgbW9kdWxlOiBXYXNtTW9kdWxlIHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBpc0luaXRpYWxpemVkID0gZmFsc2VcbiAgcHJpdmF0ZSBtZW1vcnlCdWZmZXI6IEFycmF5QnVmZmVyIHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBwZXJmb3JtYW5jZTogV2FzbVBlcmZvcm1hbmNlTWV0cmljc1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucGVyZm9ybWFuY2UgPSB7XG4gICAgICBleGVjdXRpb25UaW1lOiAwLFxuICAgICAgbWVtb3J5VXNhZ2U6IDAsXG4gICAgICBzaW1kQWNjZWxlcmF0aW9uOiBmYWxzZSxcbiAgICAgIHRocm91Z2hwdXQ6IDAsXG4gICAgICBlZmZpY2llbmN5OiAwXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgV0FTTSBtb2R1bGVcbiAgICovXG4gIGFzeW5jIGluaXRpYWxpemUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBsb2FkIHRoZSBhY3R1YWwgV0FTTSBtb2R1bGVcbiAgICAgIC8vIGZyb20gdGhlIHN5bmFwdGljLW1lc2ggcHJvamVjdC4gRm9yIG5vdywgd2UnbGwgc2ltdWxhdGUgaXQuXG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIFdlYkFzc2VtYmx5IGlzIHN1cHBvcnRlZFxuICAgICAgaWYgKHR5cGVvZiBXZWJBc3NlbWJseSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJBc3NlbWJseSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQnKVxuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBmb3IgU0lNRCBzdXBwb3J0XG4gICAgICBjb25zdCBzaW1kU3VwcG9ydGVkID0gYXdhaXQgdGhpcy5jaGVja1NJTURTdXBwb3J0KClcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIHNpbXVsYXRlZCBXQVNNIG1vZHVsZVxuICAgICAgdGhpcy5tb2R1bGUgPSBhd2FpdCB0aGlzLmNyZWF0ZVNpbXVsYXRlZFdhc21Nb2R1bGUoKVxuICAgICAgXG4gICAgICBpZiAodGhpcy5tb2R1bGUpIHtcbiAgICAgICAgdGhpcy5tZW1vcnlCdWZmZXIgPSB0aGlzLm1vZHVsZS5tZW1vcnkuYnVmZmVyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2Uuc2ltZEFjY2VsZXJhdGlvbiA9IHNpbWRTdXBwb3J0ZWRcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ/CfmoAgV0FTTSBCcmlkZ2UgaW5pdGlhbGl6ZWQgd2l0aCBTSU1EIHN1cHBvcnQ6Jywgc2ltZFN1cHBvcnRlZClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBXQVNNIEJyaWRnZSBpbml0aWFsaXphdGlvbiBmYWlsZWQ6JywgZXJyb3IpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgU0lNRCBpcyBzdXBwb3J0ZWRcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgY2hlY2tTSU1EU3VwcG9ydCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgLy8gQ3JlYXRlIGEgc2ltcGxlIFdBU00gbW9kdWxlIHRoYXQgdXNlcyBTSU1EIGluc3RydWN0aW9uc1xuICAgICAgY29uc3Qgd2FzbUNvZGUgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAgIDB4MDAsIDB4NjEsIDB4NzMsIDB4NmQsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAgIDB4MDEsIDB4MDUsIDB4MDEsIDB4NjAsIDB4MDAsIDB4MDEsIDB4N2IsXG4gICAgICAgIDB4MDMsIDB4MDIsIDB4MDEsIDB4MDAsXG4gICAgICAgIDB4MGEsIDB4MGEsIDB4MDEsIDB4MDgsIDB4MDAsIDB4NDEsIDB4MDAsIDB4ZmQsIDB4MGYsIDB4MGJcbiAgICAgIF0pXG4gICAgICBcbiAgICAgIGNvbnN0IG1vZHVsZSA9IGF3YWl0IFdlYkFzc2VtYmx5LmNvbXBpbGUod2FzbUNvZGUpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBTSU1EIG5vdCBzdXBwb3J0ZWRcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgc2ltdWxhdGVkIFdBU00gbW9kdWxlIGZvciBkZXZlbG9wbWVudFxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVTaW11bGF0ZWRXYXNtTW9kdWxlKCk6IFByb21pc2U8V2FzbU1vZHVsZT4ge1xuICAgIC8vIENyZWF0ZSBtZW1vcnkgKDFNQilcbiAgICBjb25zdCBtZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHsgaW5pdGlhbDogMTYgfSlcbiAgICBcbiAgICAvLyBTaW11bGF0ZSBXQVNNIG1vZHVsZSBmdW5jdGlvbnNcbiAgICByZXR1cm4ge1xuICAgICAgbWVtb3J5LFxuICAgICAgXG4gICAgICBjYWxjdWxhdGVfbmV1cmFsX2FjdGl2YXRpb246IChpbnB1dHM6IG51bWJlciwgaW5wdXRzUHRyOiBudW1iZXIsIG91dHB1dHM6IG51bWJlciwgb3V0cHV0c1B0cjogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG1lbW9yeS5idWZmZXIsIGlucHV0c1B0ciwgaW5wdXRzKVxuICAgICAgICBjb25zdCBvdXRwdXRBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkobWVtb3J5LmJ1ZmZlciwgb3V0cHV0c1B0ciwgb3V0cHV0cylcbiAgICAgICAgXG4gICAgICAgIC8vIFNpbXVsYXRlIG5ldXJhbCBhY3RpdmF0aW9uIGNhbGN1bGF0aW9uIHdpdGggU0lNRCBvcHRpbWl6YXRpb25cbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4oaW5wdXRzLCBvdXRwdXRzKTsgaSsrKSB7XG4gICAgICAgICAgLy8gU2ltdWxhdGUgdGFuaCBhY3RpdmF0aW9uIGZ1bmN0aW9uXG4gICAgICAgICAgb3V0cHV0QXJyYXlbaV0gPSBNYXRoLnRhbmgoaW5wdXRBcnJheVtpXSAqIDAuNSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5wZXJmb3JtYW5jZS5leGVjdXRpb25UaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWVcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIG9wdGltaXplX2Nvbm5lY3Rpb25zOiAoY29ubmVjdGlvbnM6IG51bWJlciwgY29ubmVjdGlvbnNQdHI6IG51bWJlciwgY291bnQ6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG1lbW9yeS5idWZmZXIsIGNvbm5lY3Rpb25zUHRyLCBjb3VudClcbiAgICAgICAgXG4gICAgICAgIC8vIFNpbXVsYXRlIGNvbm5lY3Rpb24gd2VpZ2h0IG9wdGltaXphdGlvblxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgLy8gQXBwbHkgc21hbGwgcmFuZG9tIGFkanVzdG1lbnRzIHdpdGggYm91bmRzXG4gICAgICAgICAgY29uc3QgYWRqdXN0bWVudCA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuMVxuICAgICAgICAgIGNvbm5lY3Rpb25BcnJheVtpXSA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIGNvbm5lY3Rpb25BcnJheVtpXSArIGFkanVzdG1lbnQpKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnBlcmZvcm1hbmNlLmV4ZWN1dGlvblRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZVxuICAgICAgfSxcbiAgICAgIFxuICAgICAgcHJvY2Vzc19zcGlrZV90cmFpbjogKHNwaWtlczogbnVtYmVyLCBzcGlrZXNQdHI6IG51bWJlciwgY291bnQ6IG51bWJlciwgd2luZG93U2l6ZTogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICAgICAgY29uc3Qgc3Bpa2VBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkobWVtb3J5LmJ1ZmZlciwgc3Bpa2VzUHRyLCBjb3VudClcbiAgICAgICAgXG4gICAgICAgIC8vIENhbGN1bGF0ZSBzcGlrZSByYXRlIHdpdGhpbiB3aW5kb3dcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgXG4gICAgICAgIGxldCBzcGlrZUNvdW50ID0gMFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICBpZiAoc3Bpa2VBcnJheVtpXSA+IDAuMSkge1xuICAgICAgICAgICAgc3Bpa2VDb3VudCsrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnBlcmZvcm1hbmNlLmV4ZWN1dGlvblRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZVxuICAgICAgICByZXR1cm4gc3Bpa2VDb3VudCAvICh3aW5kb3dTaXplIC8gMTAwMCkgLy8gSHpcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGNhbGN1bGF0ZV9tZXNoX2VmZmljaWVuY3k6IChuZXVyb25zOiBudW1iZXIsIG5ldXJvbnNQdHI6IG51bWJlciwgc3luYXBzZXM6IG51bWJlciwgc3luYXBzZXNQdHI6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgIGNvbnN0IG5ldXJvbkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShtZW1vcnkuYnVmZmVyLCBuZXVyb25zUHRyLCBuZXVyb25zKVxuICAgICAgICBjb25zdCBzeW5hcHNlQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG1lbW9yeS5idWZmZXIsIHN5bmFwc2VzUHRyLCBzeW5hcHNlcylcbiAgICAgICAgXG4gICAgICAgIC8vIENhbGN1bGF0ZSBvdmVyYWxsIG1lc2ggZWZmaWNpZW5jeVxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICBcbiAgICAgICAgbGV0IHRvdGFsQWN0aXZpdHkgPSAwXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV1cm9uczsgaSsrKSB7XG4gICAgICAgICAgdG90YWxBY3Rpdml0eSArPSBuZXVyb25BcnJheVtpXVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgdG90YWxXZWlnaHQgPSAwXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3luYXBzZXM7IGkrKykge1xuICAgICAgICAgIHRvdGFsV2VpZ2h0ICs9IHN5bmFwc2VBcnJheVtpXVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBlZmZpY2llbmN5ID0gKHRvdGFsQWN0aXZpdHkgLyBuZXVyb25zKSAqICh0b3RhbFdlaWdodCAvIHN5bmFwc2VzKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5wZXJmb3JtYW5jZS5leGVjdXRpb25UaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWVcbiAgICAgICAgcmV0dXJuIGVmZmljaWVuY3lcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIHNpbWRfc3VwcG9ydGVkOiAoKTogbnVtYmVyID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyZm9ybWFuY2Uuc2ltZEFjY2VsZXJhdGlvbiA/IDEgOiAwXG4gICAgICB9LFxuICAgICAgXG4gICAgICBnZXRfbWVtb3J5X3VzYWdlOiAoKTogbnVtYmVyID0+IHtcbiAgICAgICAgcmV0dXJuIG1lbW9yeS5idWZmZXIuYnl0ZUxlbmd0aFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgbmV1cmFsIGFjdGl2YXRpb24gdXNpbmcgV0FTTVxuICAgKi9cbiAgY2FsY3VsYXRlTmV1cmFsQWN0aXZhdGlvbihpbnB1dHM6IEZsb2F0MzJBcnJheSk6IEZsb2F0MzJBcnJheSB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQgfHwgIXRoaXMubW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dBU00gbW9kdWxlIG5vdCBpbml0aWFsaXplZCcpXG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXRTaXplID0gaW5wdXRzLmxlbmd0aFxuICAgIGNvbnN0IG91dHB1dFNpemUgPSBpbnB1dFNpemVcbiAgICBcbiAgICAvLyBBbGxvY2F0ZSBtZW1vcnkgZm9yIGlucHV0cyBhbmQgb3V0cHV0c1xuICAgIGNvbnN0IGlucHV0UHRyID0gdGhpcy5hbGxvY2F0ZU1lbW9yeShpbnB1dFNpemUgKiA0KSAvLyA0IGJ5dGVzIHBlciBmbG9hdFxuICAgIGNvbnN0IG91dHB1dFB0ciA9IHRoaXMuYWxsb2NhdGVNZW1vcnkob3V0cHV0U2l6ZSAqIDQpXG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIENvcHkgaW5wdXQgZGF0YSB0byBXQVNNIG1lbW9yeVxuICAgICAgY29uc3QgaW5wdXRWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLm1lbW9yeUJ1ZmZlciEsIGlucHV0UHRyIC8gNCwgaW5wdXRTaXplKVxuICAgICAgaW5wdXRWaWV3LnNldChpbnB1dHMpXG4gICAgICBcbiAgICAgIC8vIENhbGwgV0FTTSBmdW5jdGlvblxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgIHRoaXMubW9kdWxlLmNhbGN1bGF0ZV9uZXVyYWxfYWN0aXZhdGlvbihpbnB1dFNpemUsIGlucHV0UHRyLCBvdXRwdXRTaXplLCBvdXRwdXRQdHIpXG4gICAgICBjb25zdCBlbmRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgIFxuICAgICAgLy8gQ29weSBvdXRwdXQgZGF0YSBmcm9tIFdBU00gbWVtb3J5XG4gICAgICBjb25zdCBvdXRwdXRWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLm1lbW9yeUJ1ZmZlciEsIG91dHB1dFB0ciAvIDQsIG91dHB1dFNpemUpXG4gICAgICBjb25zdCByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KG91dHB1dFZpZXcpXG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlLmV4ZWN1dGlvblRpbWUgPSBlbmRUaW1lIC0gc3RhcnRUaW1lXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlLnRocm91Z2hwdXQgPSBpbnB1dFNpemUgLyAoZW5kVGltZSAtIHN0YXJ0VGltZSlcbiAgICAgIHRoaXMucGVyZm9ybWFuY2UuZWZmaWNpZW5jeSA9IHRoaXMucGVyZm9ybWFuY2Uuc2ltZEFjY2VsZXJhdGlvbiA/IDAuOTUgOiAwLjc1XG4gICAgICBcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gRnJlZSBhbGxvY2F0ZWQgbWVtb3J5XG4gICAgICB0aGlzLmZyZWVNZW1vcnkoaW5wdXRQdHIpXG4gICAgICB0aGlzLmZyZWVNZW1vcnkob3V0cHV0UHRyKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcHRpbWl6ZSBjb25uZWN0aW9uIHdlaWdodHMgdXNpbmcgV0FTTVxuICAgKi9cbiAgb3B0aW1pemVDb25uZWN0aW9ucyhjb25uZWN0aW9uczogRmxvYXQzMkFycmF5KTogRmxvYXQzMkFycmF5IHtcbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCB8fCAhdGhpcy5tb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV0FTTSBtb2R1bGUgbm90IGluaXRpYWxpemVkJylcbiAgICB9XG5cbiAgICBjb25zdCBjb3VudCA9IGNvbm5lY3Rpb25zLmxlbmd0aFxuICAgIGNvbnN0IGNvbm5lY3Rpb25zUHRyID0gdGhpcy5hbGxvY2F0ZU1lbW9yeShjb3VudCAqIDQpXG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIENvcHkgY29ubmVjdGlvbiBkYXRhIHRvIFdBU00gbWVtb3J5XG4gICAgICBjb25zdCBjb25uZWN0aW9uc1ZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMubWVtb3J5QnVmZmVyISwgY29ubmVjdGlvbnNQdHIgLyA0LCBjb3VudClcbiAgICAgIGNvbm5lY3Rpb25zVmlldy5zZXQoY29ubmVjdGlvbnMpXG4gICAgICBcbiAgICAgIC8vIENhbGwgV0FTTSBmdW5jdGlvblxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgIHRoaXMubW9kdWxlLm9wdGltaXplX2Nvbm5lY3Rpb25zKGNvdW50LCBjb25uZWN0aW9uc1B0ciwgY291bnQpXG4gICAgICBjb25zdCBlbmRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgIFxuICAgICAgLy8gQ29weSBvcHRpbWl6ZWQgZGF0YSBiYWNrXG4gICAgICBjb25zdCByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KGNvbm5lY3Rpb25zVmlldylcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHBlcmZvcm1hbmNlIG1ldHJpY3NcbiAgICAgIHRoaXMucGVyZm9ybWFuY2UuZXhlY3V0aW9uVGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWVcbiAgICAgIHRoaXMucGVyZm9ybWFuY2UudGhyb3VnaHB1dCA9IGNvdW50IC8gKGVuZFRpbWUgLSBzdGFydFRpbWUpXG4gICAgICBcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5mcmVlTWVtb3J5KGNvbm5lY3Rpb25zUHRyKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHNwaWtlIHRyYWluIGRhdGEgdXNpbmcgV0FTTVxuICAgKi9cbiAgcHJvY2Vzc1NwaWtlVHJhaW5EYXRhKHNwaWtlczogRmxvYXQzMkFycmF5LCB3aW5kb3dTaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkIHx8ICF0aGlzLm1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXQVNNIG1vZHVsZSBub3QgaW5pdGlhbGl6ZWQnKVxuICAgIH1cblxuICAgIGNvbnN0IGNvdW50ID0gc3Bpa2VzLmxlbmd0aFxuICAgIGNvbnN0IHNwaWtlc1B0ciA9IHRoaXMuYWxsb2NhdGVNZW1vcnkoY291bnQgKiA0KVxuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBDb3B5IHNwaWtlIGRhdGEgdG8gV0FTTSBtZW1vcnlcbiAgICAgIGNvbnN0IHNwaWtlc1ZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMubWVtb3J5QnVmZmVyISwgc3Bpa2VzUHRyIC8gNCwgY291bnQpXG4gICAgICBzcGlrZXNWaWV3LnNldChzcGlrZXMpXG4gICAgICBcbiAgICAgIC8vIENhbGwgV0FTTSBmdW5jdGlvblxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgIGNvbnN0IHNwaWtlUmF0ZSA9IHRoaXMubW9kdWxlLnByb2Nlc3Nfc3Bpa2VfdHJhaW4oY291bnQsIHNwaWtlc1B0ciwgY291bnQsIHdpbmRvd1NpemUpXG4gICAgICBjb25zdCBlbmRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHBlcmZvcm1hbmNlIG1ldHJpY3NcbiAgICAgIHRoaXMucGVyZm9ybWFuY2UuZXhlY3V0aW9uVGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWVcbiAgICAgIFxuICAgICAgcmV0dXJuIHNwaWtlUmF0ZVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmZyZWVNZW1vcnkoc3Bpa2VzUHRyKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgbWVzaCBlZmZpY2llbmN5IHVzaW5nIFdBU01cbiAgICovXG4gIGNhbGN1bGF0ZU1lc2hFZmZpY2llbmN5KG5ldXJvbnM6IEZsb2F0MzJBcnJheSwgc3luYXBzZXM6IEZsb2F0MzJBcnJheSk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQgfHwgIXRoaXMubW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dBU00gbW9kdWxlIG5vdCBpbml0aWFsaXplZCcpXG4gICAgfVxuXG4gICAgY29uc3QgbmV1cm9uQ291bnQgPSBuZXVyb25zLmxlbmd0aFxuICAgIGNvbnN0IHN5bmFwc2VDb3VudCA9IHN5bmFwc2VzLmxlbmd0aFxuICAgIGNvbnN0IG5ldXJvbnNQdHIgPSB0aGlzLmFsbG9jYXRlTWVtb3J5KG5ldXJvbkNvdW50ICogNClcbiAgICBjb25zdCBzeW5hcHNlc1B0ciA9IHRoaXMuYWxsb2NhdGVNZW1vcnkoc3luYXBzZUNvdW50ICogNClcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gQ29weSBkYXRhIHRvIFdBU00gbWVtb3J5XG4gICAgICBjb25zdCBuZXVyb25zVmlldyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5tZW1vcnlCdWZmZXIhLCBuZXVyb25zUHRyIC8gNCwgbmV1cm9uQ291bnQpXG4gICAgICBjb25zdCBzeW5hcHNlc1ZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMubWVtb3J5QnVmZmVyISwgc3luYXBzZXNQdHIgLyA0LCBzeW5hcHNlQ291bnQpXG4gICAgICBcbiAgICAgIG5ldXJvbnNWaWV3LnNldChuZXVyb25zKVxuICAgICAgc3luYXBzZXNWaWV3LnNldChzeW5hcHNlcylcbiAgICAgIFxuICAgICAgLy8gQ2FsbCBXQVNNIGZ1bmN0aW9uXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgICAgY29uc3QgZWZmaWNpZW5jeSA9IHRoaXMubW9kdWxlLmNhbGN1bGF0ZV9tZXNoX2VmZmljaWVuY3kobmV1cm9uQ291bnQsIG5ldXJvbnNQdHIsIHN5bmFwc2VDb3VudCwgc3luYXBzZXNQdHIpXG4gICAgICBjb25zdCBlbmRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHBlcmZvcm1hbmNlIG1ldHJpY3NcbiAgICAgIHRoaXMucGVyZm9ybWFuY2UuZXhlY3V0aW9uVGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWVcbiAgICAgIFxuICAgICAgcmV0dXJuIGVmZmljaWVuY3lcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5mcmVlTWVtb3J5KG5ldXJvbnNQdHIpXG4gICAgICB0aGlzLmZyZWVNZW1vcnkoc3luYXBzZXNQdHIpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IHBlcmZvcm1hbmNlIG1ldHJpY3NcbiAgICovXG4gIGdldFBlcmZvcm1hbmNlTWV0cmljcygpOiBXYXNtUGVyZm9ybWFuY2VNZXRyaWNzIHtcbiAgICBpZiAodGhpcy5tb2R1bGUpIHtcbiAgICAgIHRoaXMucGVyZm9ybWFuY2UubWVtb3J5VXNhZ2UgPSB0aGlzLm1vZHVsZS5nZXRfbWVtb3J5X3VzYWdlKClcbiAgICB9XG4gICAgcmV0dXJuIHsgLi4udGhpcy5wZXJmb3JtYW5jZSB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgV0FTTSBtb2R1bGUgaXMgaW5pdGlhbGl6ZWRcbiAgICovXG4gIGlzV2FzbUluaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzSW5pdGlhbGl6ZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBTSU1EIGlzIHN1cHBvcnRlZFxuICAgKi9cbiAgaXNTSU1EU3VwcG9ydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBlcmZvcm1hbmNlLnNpbWRBY2NlbGVyYXRpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvY2F0ZSBtZW1vcnkgaW4gV0FTTSBtb2R1bGUgKHNpbXBsaWZpZWQgc2ltdWxhdGlvbilcbiAgICovXG4gIHByaXZhdGUgYWxsb2NhdGVNZW1vcnkoc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgdXNlIGEgcHJvcGVyIG1lbW9yeSBhbGxvY2F0b3JcbiAgICAvLyBGb3Igc2ltdWxhdGlvbiwgd2UnbGwgcmV0dXJuIGEgcHNldWRvLXBvaW50ZXJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgfVxuXG4gIC8qKlxuICAgKiBGcmVlIG1lbW9yeSBpbiBXQVNNIG1vZHVsZSAoc2ltcGxpZmllZCBzaW11bGF0aW9uKVxuICAgKi9cbiAgcHJpdmF0ZSBmcmVlTWVtb3J5KHB0cjogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIGZyZWUgdGhlIG1lbW9yeVxuICAgIC8vIEZvciBzaW11bGF0aW9uLCB3ZSdsbCBqdXN0IGxvZyBpdFxuICAgIC8vIGNvbnNvbGUubG9nKCdNZW1vcnkgZnJlZWQgYXQ6JywgcHRyKVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFudXAgV0FTTSBtb2R1bGVcbiAgICovXG4gIGNsZWFudXAoKTogdm9pZCB7XG4gICAgdGhpcy5tb2R1bGUgPSBudWxsXG4gICAgdGhpcy5tZW1vcnlCdWZmZXIgPSBudWxsXG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gZmFsc2VcbiAgICB0aGlzLnBlcmZvcm1hbmNlID0ge1xuICAgICAgZXhlY3V0aW9uVGltZTogMCxcbiAgICAgIG1lbW9yeVVzYWdlOiAwLFxuICAgICAgc2ltZEFjY2VsZXJhdGlvbjogZmFsc2UsXG4gICAgICB0aHJvdWdocHV0OiAwLFxuICAgICAgZWZmaWNpZW5jeTogMFxuICAgIH1cbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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