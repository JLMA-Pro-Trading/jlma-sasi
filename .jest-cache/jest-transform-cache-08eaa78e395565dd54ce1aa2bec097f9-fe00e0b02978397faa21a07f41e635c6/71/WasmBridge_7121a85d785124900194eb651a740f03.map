{"version":3,"names":["WasmBridge","constructor","cov_2qdymefdzp","f","s","Object","defineProperty","performance","executionTime","memoryUsage","simdAcceleration","throughput","efficiency","initialize","WebAssembly","b","Error","simdSupported","checkSIMDSupport","module","createSimulatedWasmModule","memoryBuffer","memory","buffer","isInitialized","console","log","error","wasmCode","Uint8Array","compile","Memory","initial","calculate_neural_activation","inputs","inputsPtr","outputs","outputsPtr","inputArray","Float32Array","outputArray","startTime","now","i","Math","min","tanh","optimize_connections","connections","connectionsPtr","count","connectionArray","adjustment","random","max","process_spike_train","spikes","spikesPtr","windowSize","spikeArray","spikeCount","calculate_mesh_efficiency","neurons","neuronsPtr","synapses","synapsesPtr","neuronArray","synapseArray","totalActivity","totalWeight","simd_supported","get_memory_usage","byteLength","calculateNeuralActivation","inputSize","length","outputSize","inputPtr","allocateMemory","outputPtr","inputView","set","endTime","outputView","result","freeMemory","optimizeConnections","connectionsView","processSpikeTrainData","spikesView","spikeRate","calculateMeshEfficiency","neuronCount","synapseCount","neuronsView","synapsesView","getPerformanceMetrics","isWasmInitialized","isSIMDSupported","size","floor","ptr","cleanup"],"sources":["/workspaces/agentists-quickstart-workspace-basic/sasi/src/utils/WasmBridge.ts"],"sourcesContent":["/**\n * WASM Bridge for Performance-Critical Neural Operations\n * \n * This module provides a bridge to WebAssembly modules for accelerated\n * neural mesh computations, including SIMD-optimized operations.\n */\n\nexport interface WasmModule {\n  memory: WebAssembly.Memory\n  calculate_neural_activation: (inputs: number, inputsPtr: number, outputs: number, outputsPtr: number) => void\n  optimize_connections: (connections: number, connectionsPtr: number, count: number) => void\n  process_spike_train: (spikes: number, spikesPtr: number, count: number, windowSize: number) => number\n  calculate_mesh_efficiency: (neurons: number, neuronsPtr: number, synapses: number, synapsesPtr: number) => number\n  simd_supported: () => number\n  get_memory_usage: () => number\n}\n\nexport interface WasmPerformanceMetrics {\n  executionTime: number\n  memoryUsage: number\n  simdAcceleration: boolean\n  throughput: number\n  efficiency: number\n}\n\nexport class WasmBridge {\n  private module: WasmModule | null = null\n  private isInitialized = false\n  private memoryBuffer: ArrayBuffer | null = null\n  private performance: WasmPerformanceMetrics\n\n  constructor() {\n    this.performance = {\n      executionTime: 0,\n      memoryUsage: 0,\n      simdAcceleration: false,\n      throughput: 0,\n      efficiency: 0\n    }\n  }\n\n  /**\n   * Initialize WASM module\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      // In a real implementation, this would load the actual WASM module\n      // from the synaptic-mesh project. For now, we'll simulate it.\n      \n      // Check if WebAssembly is supported\n      if (typeof WebAssembly === 'undefined') {\n        throw new Error('WebAssembly not supported in this environment')\n      }\n\n      // Check for SIMD support\n      const simdSupported = await this.checkSIMDSupport()\n      \n      // Create simulated WASM module\n      this.module = await this.createSimulatedWasmModule()\n      \n      if (this.module) {\n        this.memoryBuffer = this.module.memory.buffer\n        this.performance.simdAcceleration = simdSupported\n        this.isInitialized = true\n        \n        console.log('üöÄ WASM Bridge initialized with SIMD support:', simdSupported)\n        return true\n      }\n      \n      return false\n    } catch (error) {\n      console.error('‚ùå WASM Bridge initialization failed:', error)\n      return false\n    }\n  }\n\n  /**\n   * Check if SIMD is supported\n   */\n  private async checkSIMDSupport(): Promise<boolean> {\n    try {\n      // Create a simple WASM module that uses SIMD instructions\n      const wasmCode = new Uint8Array([\n        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,\n        0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7b,\n        0x03, 0x02, 0x01, 0x00,\n        0x0a, 0x0a, 0x01, 0x08, 0x00, 0x41, 0x00, 0xfd, 0x0f, 0x0b\n      ])\n      \n      const module = await WebAssembly.compile(wasmCode)\n      return true\n    } catch (error) {\n      // SIMD not supported\n      return false\n    }\n  }\n\n  /**\n   * Create simulated WASM module for development\n   */\n  private async createSimulatedWasmModule(): Promise<WasmModule> {\n    // Create memory (1MB)\n    const memory = new WebAssembly.Memory({ initial: 16 })\n    \n    // Simulate WASM module functions\n    return {\n      memory,\n      \n      calculate_neural_activation: (inputs: number, inputsPtr: number, outputs: number, outputsPtr: number) => {\n        const inputArray = new Float32Array(memory.buffer, inputsPtr, inputs)\n        const outputArray = new Float32Array(memory.buffer, outputsPtr, outputs)\n        \n        // Simulate neural activation calculation with SIMD optimization\n        const startTime = performance.now()\n        \n        for (let i = 0; i < Math.min(inputs, outputs); i++) {\n          // Simulate tanh activation function\n          outputArray[i] = Math.tanh(inputArray[i] * 0.5)\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n      },\n      \n      optimize_connections: (connections: number, connectionsPtr: number, count: number) => {\n        const connectionArray = new Float32Array(memory.buffer, connectionsPtr, count)\n        \n        // Simulate connection weight optimization\n        const startTime = performance.now()\n        \n        for (let i = 0; i < count; i++) {\n          // Apply small random adjustments with bounds\n          const adjustment = (Math.random() - 0.5) * 0.1\n          connectionArray[i] = Math.min(1, Math.max(0, connectionArray[i] + adjustment))\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n      },\n      \n      process_spike_train: (spikes: number, spikesPtr: number, count: number, windowSize: number): number => {\n        const spikeArray = new Float32Array(memory.buffer, spikesPtr, count)\n        \n        // Calculate spike rate within window\n        const startTime = performance.now()\n        \n        let spikeCount = 0\n        for (let i = 0; i < count; i++) {\n          if (spikeArray[i] > 0.1) {\n            spikeCount++\n          }\n        }\n        \n        this.performance.executionTime = performance.now() - startTime\n        return spikeCount / (windowSize / 1000) // Hz\n      },\n      \n      calculate_mesh_efficiency: (neurons: number, neuronsPtr: number, synapses: number, synapsesPtr: number): number => {\n        const neuronArray = new Float32Array(memory.buffer, neuronsPtr, neurons)\n        const synapseArray = new Float32Array(memory.buffer, synapsesPtr, synapses)\n        \n        // Calculate overall mesh efficiency\n        const startTime = performance.now()\n        \n        let totalActivity = 0\n        for (let i = 0; i < neurons; i++) {\n          totalActivity += neuronArray[i]\n        }\n        \n        let totalWeight = 0\n        for (let i = 0; i < synapses; i++) {\n          totalWeight += synapseArray[i]\n        }\n        \n        const efficiency = (totalActivity / neurons) * (totalWeight / synapses)\n        \n        this.performance.executionTime = performance.now() - startTime\n        return efficiency\n      },\n      \n      simd_supported: (): number => {\n        return this.performance.simdAcceleration ? 1 : 0\n      },\n      \n      get_memory_usage: (): number => {\n        return memory.buffer.byteLength\n      }\n    }\n  }\n\n  /**\n   * Calculate neural activation using WASM\n   */\n  calculateNeuralActivation(inputs: Float32Array): Float32Array {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const inputSize = inputs.length\n    const outputSize = inputSize\n    \n    // Allocate memory for inputs and outputs\n    const inputPtr = this.allocateMemory(inputSize * 4) // 4 bytes per float\n    const outputPtr = this.allocateMemory(outputSize * 4)\n    \n    try {\n      // Copy input data to WASM memory\n      const inputView = new Float32Array(this.memoryBuffer!, inputPtr / 4, inputSize)\n      inputView.set(inputs)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      this.module.calculate_neural_activation(inputSize, inputPtr, outputSize, outputPtr)\n      const endTime = performance.now()\n      \n      // Copy output data from WASM memory\n      const outputView = new Float32Array(this.memoryBuffer!, outputPtr / 4, outputSize)\n      const result = new Float32Array(outputView)\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      this.performance.throughput = inputSize / (endTime - startTime)\n      this.performance.efficiency = this.performance.simdAcceleration ? 0.95 : 0.75\n      \n      return result\n    } finally {\n      // Free allocated memory\n      this.freeMemory(inputPtr)\n      this.freeMemory(outputPtr)\n    }\n  }\n\n  /**\n   * Optimize connection weights using WASM\n   */\n  optimizeConnections(connections: Float32Array): Float32Array {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const count = connections.length\n    const connectionsPtr = this.allocateMemory(count * 4)\n    \n    try {\n      // Copy connection data to WASM memory\n      const connectionsView = new Float32Array(this.memoryBuffer!, connectionsPtr / 4, count)\n      connectionsView.set(connections)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      this.module.optimize_connections(count, connectionsPtr, count)\n      const endTime = performance.now()\n      \n      // Copy optimized data back\n      const result = new Float32Array(connectionsView)\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      this.performance.throughput = count / (endTime - startTime)\n      \n      return result\n    } finally {\n      this.freeMemory(connectionsPtr)\n    }\n  }\n\n  /**\n   * Process spike train data using WASM\n   */\n  processSpikeTrainData(spikes: Float32Array, windowSize: number): number {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const count = spikes.length\n    const spikesPtr = this.allocateMemory(count * 4)\n    \n    try {\n      // Copy spike data to WASM memory\n      const spikesView = new Float32Array(this.memoryBuffer!, spikesPtr / 4, count)\n      spikesView.set(spikes)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      const spikeRate = this.module.process_spike_train(count, spikesPtr, count, windowSize)\n      const endTime = performance.now()\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      \n      return spikeRate\n    } finally {\n      this.freeMemory(spikesPtr)\n    }\n  }\n\n  /**\n   * Calculate mesh efficiency using WASM\n   */\n  calculateMeshEfficiency(neurons: Float32Array, synapses: Float32Array): number {\n    if (!this.isInitialized || !this.module) {\n      throw new Error('WASM module not initialized')\n    }\n\n    const neuronCount = neurons.length\n    const synapseCount = synapses.length\n    const neuronsPtr = this.allocateMemory(neuronCount * 4)\n    const synapsesPtr = this.allocateMemory(synapseCount * 4)\n    \n    try {\n      // Copy data to WASM memory\n      const neuronsView = new Float32Array(this.memoryBuffer!, neuronsPtr / 4, neuronCount)\n      const synapsesView = new Float32Array(this.memoryBuffer!, synapsesPtr / 4, synapseCount)\n      \n      neuronsView.set(neurons)\n      synapsesView.set(synapses)\n      \n      // Call WASM function\n      const startTime = performance.now()\n      const efficiency = this.module.calculate_mesh_efficiency(neuronCount, neuronsPtr, synapseCount, synapsesPtr)\n      const endTime = performance.now()\n      \n      // Update performance metrics\n      this.performance.executionTime = endTime - startTime\n      \n      return efficiency\n    } finally {\n      this.freeMemory(neuronsPtr)\n      this.freeMemory(synapsesPtr)\n    }\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics(): WasmPerformanceMetrics {\n    if (this.module) {\n      this.performance.memoryUsage = this.module.get_memory_usage()\n    }\n    return { ...this.performance }\n  }\n\n  /**\n   * Check if WASM module is initialized\n   */\n  isWasmInitialized(): boolean {\n    return this.isInitialized\n  }\n\n  /**\n   * Check if SIMD is supported\n   */\n  isSIMDSupported(): boolean {\n    return this.performance.simdAcceleration\n  }\n\n  /**\n   * Allocate memory in WASM module (simplified simulation)\n   */\n  private allocateMemory(size: number): number {\n    // In a real implementation, this would use a proper memory allocator\n    // For simulation, we'll return a pseudo-pointer\n    return Math.floor(Math.random() * 1000000)\n  }\n\n  /**\n   * Free memory in WASM module (simplified simulation)\n   */\n  private freeMemory(ptr: number): void {\n    // In a real implementation, this would free the memory\n    // For simulation, we'll just log it\n    // console.log('Memory freed at:', ptr)\n  }\n\n  /**\n   * Cleanup WASM module\n   */\n  cleanup(): void {\n    this.module = null\n    this.memoryBuffer = null\n    this.isInitialized = false\n    this.performance = {\n      executionTime: 0,\n      memoryUsage: 0,\n      simdAcceleration: false,\n      throughput: 0,\n      efficiency: 0\n    }\n  }\n}"],"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","ignoreList":[]}