77bf86beaadd38e6fdf39a41d61dc37e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
require("../styles/AgentList.css");
const AgentList = ({ agents }) => {
    const [sortBy, setSortBy] = (0, react_1.useState)('efficiency');
    const [filterType, setFilterType] = (0, react_1.useState)('all');
    const [filterStatus, setFilterStatus] = (0, react_1.useState)('all');
    const filteredAndSortedAgents = agents
        .filter(agent => (filterType === 'all' || agent.type === filterType) &&
        (filterStatus === 'all' || agent.status === filterStatus))
        .sort((a, b) => {
        switch (sortBy) {
            case 'type':
                return a.type.localeCompare(b.type);
            case 'status':
                return a.status.localeCompare(b.status);
            case 'efficiency':
                return b.efficiency - a.efficiency;
            case 'tasks':
                return b.completedTasks - a.completedTasks;
            default:
                return 0;
        }
    });
    const getStatusIcon = (status) => {
        switch (status) {
            case 'active': return '🟢';
            case 'processing': return '🟡';
            case 'idle': return '⚪';
            case 'completed': return '🔵';
            default: return '⚫';
        }
    };
    const getTypeIcon = (type) => {
        switch (type) {
            case 'researcher': return '🔬';
            case 'coder': return '💻';
            case 'tester': return '🧪';
            case 'reviewer': return '👁️';
            case 'debugger': return '🐛';
            default: return '🤖';
        }
    };
    const getEfficiencyColor = (efficiency) => {
        if (efficiency >= 80)
            return 'var(--success-text)';
        if (efficiency >= 60)
            return 'var(--accent-text)';
        if (efficiency >= 40)
            return 'var(--secondary-text)';
        return 'var(--warning-text)';
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "agent-list", children: [(0, jsx_runtime_1.jsxs)("div", { className: "list-header", children: [(0, jsx_runtime_1.jsx)("h2", { className: "list-title", children: "Active Agents" }), (0, jsx_runtime_1.jsxs)("div", { className: "agent-count", children: [filteredAndSortedAgents.length, " of ", agents.length, " agents"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "list-controls", children: [(0, jsx_runtime_1.jsxs)("div", { className: "filter-group", children: [(0, jsx_runtime_1.jsx)("label", { children: "Filter by Type:" }), (0, jsx_runtime_1.jsxs)("select", { value: filterType, onChange: (e) => setFilterType(e.target.value), className: "filter-select", children: [(0, jsx_runtime_1.jsx)("option", { value: "all", children: "All Types" }), (0, jsx_runtime_1.jsx)("option", { value: "researcher", children: "Researcher" }), (0, jsx_runtime_1.jsx)("option", { value: "coder", children: "Coder" }), (0, jsx_runtime_1.jsx)("option", { value: "tester", children: "Tester" }), (0, jsx_runtime_1.jsx)("option", { value: "reviewer", children: "Reviewer" }), (0, jsx_runtime_1.jsx)("option", { value: "debugger", children: "Debugger" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "filter-group", children: [(0, jsx_runtime_1.jsx)("label", { children: "Filter by Status:" }), (0, jsx_runtime_1.jsxs)("select", { value: filterStatus, onChange: (e) => setFilterStatus(e.target.value), className: "filter-select", children: [(0, jsx_runtime_1.jsx)("option", { value: "all", children: "All Status" }), (0, jsx_runtime_1.jsx)("option", { value: "active", children: "Active" }), (0, jsx_runtime_1.jsx)("option", { value: "processing", children: "Processing" }), (0, jsx_runtime_1.jsx)("option", { value: "idle", children: "Idle" }), (0, jsx_runtime_1.jsx)("option", { value: "completed", children: "Completed" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "filter-group", children: [(0, jsx_runtime_1.jsx)("label", { children: "Sort by:" }), (0, jsx_runtime_1.jsxs)("select", { value: sortBy, onChange: (e) => setSortBy(e.target.value), className: "filter-select", children: [(0, jsx_runtime_1.jsx)("option", { value: "efficiency", children: "Efficiency" }), (0, jsx_runtime_1.jsx)("option", { value: "tasks", children: "Completed Tasks" }), (0, jsx_runtime_1.jsx)("option", { value: "type", children: "Type" }), (0, jsx_runtime_1.jsx)("option", { value: "status", children: "Status" })] })] })] }), (0, jsx_runtime_1.jsx)("div", { className: "agent-grid", children: filteredAndSortedAgents.map(agent => ((0, jsx_runtime_1.jsxs)("div", { className: "agent-card", children: [(0, jsx_runtime_1.jsxs)("div", { className: "agent-header", children: [(0, jsx_runtime_1.jsxs)("div", { className: "agent-type", children: [(0, jsx_runtime_1.jsx)("span", { className: "type-icon", children: getTypeIcon(agent.type) }), (0, jsx_runtime_1.jsx)("span", { className: "type-name", children: agent.type })] }), (0, jsx_runtime_1.jsxs)("div", { className: "agent-status", children: [(0, jsx_runtime_1.jsx)("span", { className: "status-icon", children: getStatusIcon(agent.status) }), (0, jsx_runtime_1.jsx)("span", { className: "status-name", children: agent.status })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "agent-info", children: [(0, jsx_runtime_1.jsxs)("div", { className: "info-item", children: [(0, jsx_runtime_1.jsx)("span", { className: "info-label", children: "Owner:" }), (0, jsx_runtime_1.jsx)("span", { className: "info-value", children: agent.owner })] }), (0, jsx_runtime_1.jsxs)("div", { className: "info-item", children: [(0, jsx_runtime_1.jsx)("span", { className: "info-label", children: "Repository:" }), (0, jsx_runtime_1.jsx)("span", { className: "info-value", children: agent.repository })] }), (0, jsx_runtime_1.jsxs)("div", { className: "info-item", children: [(0, jsx_runtime_1.jsx)("span", { className: "info-label", children: "Branch:" }), (0, jsx_runtime_1.jsx)("span", { className: "info-value", children: agent.branch })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "agent-task", children: [(0, jsx_runtime_1.jsx)("span", { className: "task-label", children: "Current Task:" }), (0, jsx_runtime_1.jsx)("p", { className: "task-description", children: agent.currentTask })] }), (0, jsx_runtime_1.jsxs)("div", { className: "agent-metrics", children: [(0, jsx_runtime_1.jsxs)("div", { className: "metric", children: [(0, jsx_runtime_1.jsx)("span", { className: "metric-label", children: "Efficiency" }), (0, jsx_runtime_1.jsx)("div", { className: "metric-bar", children: (0, jsx_runtime_1.jsx)("div", { className: "metric-fill", style: {
                                                    width: `${agent.efficiency}%`,
                                                    backgroundColor: getEfficiencyColor(agent.efficiency)
                                                } }) }), (0, jsx_runtime_1.jsxs)("span", { className: "metric-value", style: { color: getEfficiencyColor(agent.efficiency) }, children: [agent.efficiency.toFixed(1), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "metric", children: [(0, jsx_runtime_1.jsx)("span", { className: "metric-label", children: "Completed Tasks" }), (0, jsx_runtime_1.jsx)("span", { className: "metric-number", children: agent.completedTasks })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "agent-actions", children: [(0, jsx_runtime_1.jsx)("button", { className: "action-btn monitor", children: "\uD83D\uDCCA Monitor" }), (0, jsx_runtime_1.jsx)("button", { className: "action-btn pause", children: "\u23F8\uFE0F Pause" }), (0, jsx_runtime_1.jsx)("button", { className: "action-btn details", children: "\u2139\uFE0F Details" })] })] }, agent.id))) }), filteredAndSortedAgents.length === 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "empty-state", children: [(0, jsx_runtime_1.jsx)("h3", { children: "No agents found" }), (0, jsx_runtime_1.jsx)("p", { children: "Try adjusting your filters or spawn new agents." })] }))] }));
};
exports.default = AgentList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,