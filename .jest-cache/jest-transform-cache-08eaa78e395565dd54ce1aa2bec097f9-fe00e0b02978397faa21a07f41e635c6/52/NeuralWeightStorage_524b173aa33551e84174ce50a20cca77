6413cc59e08c9e3e22d1be9110939c06
"use strict";
/**
 * Neural Weight Storage Manager - Phase 2A Implementation
 * Handles neural network weight serialization, compression, and persistence
 *
 * Performance Requirements:
 * - Weight save/load: <30ms
 * - Compression ratio: >50%
 * - Data integrity: 100% with checksums
 * - Memory usage: <10MB during operations
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeuralWeightStorage = void 0;
const crypto = __importStar(require("crypto"));
const zlib_1 = require("zlib");
const perf_hooks_1 = require("perf_hooks");
class NeuralWeightStorage {
    constructor(persistenceManager) {
        Object.defineProperty(this, "persistence", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "compressionEnabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "checksumValidation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "compressionThreshold", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1024
        }); // Compress if data > 1KB
        this.persistence = persistenceManager;
    }
    /**
     * Save neural weights for an agent with compression and validation
     * Performance target: <30ms
     */
    async saveNeuralWeights(agentId, networkLayers, weights, biases) {
        const startTime = perf_hooks_1.performance.now();
        try {
            if (weights.length !== biases.length) {
                throw new Error('Weights and biases arrays must have the same length');
            }
            if (weights.length !== networkLayers.length - 1) {
                throw new Error('Weight layers must match network architecture');
            }
            // Process each layer
            for (let layerIndex = 0; layerIndex < weights.length; layerIndex++) {
                const compressedData = await this.compressLayerData(weights[layerIndex], biases[layerIndex]);
                // Save to database via persistence manager
                // This would call a method we'll add to AgentPersistenceManager
                await this.saveLayerWeights(agentId, layerIndex, compressedData);
            }
            const saveTime = perf_hooks_1.performance.now() - startTime;
            if (saveTime > 30) {
                console.warn(`‚ö†Ô∏è Neural weight save time exceeded target: ${saveTime.toFixed(2)}ms`);
            }
            console.log(`üíæ Saved neural weights for agent ${agentId} (${saveTime.toFixed(2)}ms)`);
        }
        catch (error) {
            const saveTime = perf_hooks_1.performance.now() - startTime;
            console.error(`‚ùå Failed to save neural weights for ${agentId} (${saveTime.toFixed(2)}ms):`, error.message);
            throw error;
        }
    }
    /**
     * Load neural weights for an agent with decompression and validation
     * Performance target: <30ms
     */
    async loadNeuralWeights(agentId) {
        const startTime = perf_hooks_1.performance.now();
        try {
            // Load weight records from database
            const weightRecords = await this.getAgentWeightRecords(agentId);
            if (weightRecords.length === 0) {
                throw new Error(`No neural weights found for agent ${agentId}`);
            }
            const weights = [];
            const biases = [];
            // Process each layer in order
            for (const record of weightRecords.sort((a, b) => a.layerIndex - b.layerIndex)) {
                // Validate checksum if enabled
                if (this.checksumValidation) {
                    const expectedChecksum = this.generateChecksum(record.weightData, record.biasData);
                    if (expectedChecksum !== record.checksum) {
                        throw new Error(`Weight corruption detected for agent ${agentId}, layer ${record.layerIndex}`);
                    }
                }
                // Decompress and deserialize
                const layerWeights = await this.decompressWeights(record.weightData, record.compressionType);
                const layerBiases = await this.decompressBiases(record.biasData, record.compressionType);
                weights.push(layerWeights);
                biases.push(layerBiases);
            }
            const loadTime = perf_hooks_1.performance.now() - startTime;
            if (loadTime > 30) {
                console.warn(`‚ö†Ô∏è Neural weight load time exceeded target: ${loadTime.toFixed(2)}ms`);
            }
            console.log(`üì• Loaded neural weights for agent ${agentId} (${loadTime.toFixed(2)}ms)`);
            return { weights, biases };
        }
        catch (error) {
            const loadTime = perf_hooks_1.performance.now() - startTime;
            console.error(`‚ùå Failed to load neural weights for ${agentId} (${loadTime.toFixed(2)}ms):`, error.message);
            throw error;
        }
    }
    /**
     * Compress weight and bias data for a single layer
     */
    async compressLayerData(weights, biases) {
        const startTime = perf_hooks_1.performance.now();
        try {
            // Convert to buffers
            const weightBuffer = Buffer.from(weights.buffer);
            const biasBuffer = Buffer.from(biases.buffer);
            const originalSize = weightBuffer.length + biasBuffer.length;
            let compressedWeights;
            let compressedBiases;
            let compressionType = 'none';
            // Apply compression if data is large enough
            if (originalSize > this.compressionThreshold && this.compressionEnabled) {
                compressedWeights = (0, zlib_1.gzipSync)(weightBuffer);
                compressedBiases = (0, zlib_1.gzipSync)(biasBuffer);
                compressionType = 'gzip';
            }
            else {
                compressedWeights = weightBuffer;
                compressedBiases = biasBuffer;
            }
            const compressedSize = compressedWeights.length + compressedBiases.length;
            const compressionRatio = compressedSize / originalSize;
            // Generate checksum for integrity validation
            const checksum = this.generateChecksum(compressedWeights, compressedBiases);
            const compressionTime = perf_hooks_1.performance.now() - startTime;
            console.log(`üóúÔ∏è Compressed layer data: ${originalSize} ‚Üí ${compressedSize} bytes (${(compressionRatio * 100).toFixed(1)}%) in ${compressionTime.toFixed(2)}ms`);
            return {
                weightData: compressedWeights,
                biasData: compressedBiases,
                compressionType,
                originalSize,
                compressedSize,
                compressionRatio,
                checksum
            };
        }
        catch (error) {
            console.error('‚ùå Failed to compress layer data:', error.message);
            throw error;
        }
    }
    /**
     * Decompress weight data
     */
    async decompressWeights(data, compressionType) {
        try {
            let decompressedBuffer;
            if (compressionType === 'gzip') {
                decompressedBuffer = (0, zlib_1.gunzipSync)(data);
            }
            else {
                decompressedBuffer = data;
            }
            // Convert back to Float32Array
            return new Float32Array(decompressedBuffer.buffer.slice(decompressedBuffer.byteOffset, decompressedBuffer.byteOffset + decompressedBuffer.byteLength));
        }
        catch (error) {
            console.error('‚ùå Failed to decompress weights:', error.message);
            throw error;
        }
    }
    /**
     * Decompress bias data
     */
    async decompressBiases(data, compressionType) {
        try {
            let decompressedBuffer;
            if (compressionType === 'gzip') {
                decompressedBuffer = (0, zlib_1.gunzipSync)(data);
            }
            else {
                decompressedBuffer = data;
            }
            // Convert back to Float32Array
            return new Float32Array(decompressedBuffer.buffer.slice(decompressedBuffer.byteOffset, decompressedBuffer.byteOffset + decompressedBuffer.byteLength));
        }
        catch (error) {
            console.error('‚ùå Failed to decompress biases:', error.message);
            throw error;
        }
    }
    /**
     * Generate checksum for data integrity validation
     */
    generateChecksum(weightData, biasData) {
        const hash = crypto.createHash('sha256');
        hash.update(weightData);
        hash.update(biasData);
        return hash.digest('hex');
    }
    /**
     * Save compressed layer weights to database
     * This method will call the persistence manager
     */
    async saveLayerWeights(agentId, layerIndex, compressedData) {
        // This would call a method we need to add to AgentPersistenceManager
        // For now, we'll implement a placeholder that shows the interface
        try {
            // The AgentPersistenceManager would need a method like this:
            // await this.persistence.saveNeuralWeightRecord({
            //   agentId,
            //   layerIndex,
            //   weightData: compressedData.weightData,
            //   biasData: compressedData.biasData,
            //   updatedAt: Date.now(),
            //   checksum: compressedData.checksum,
            //   compressionType: compressedData.compressionType
            // });
            console.log(`üíæ Saved layer ${layerIndex} weights for agent ${agentId}`);
        }
        catch (error) {
            console.error(`‚ùå Failed to save layer weights:`, error.message);
            throw error;
        }
    }
    /**
     * Get agent weight records from database
     * This method will call the persistence manager
     */
    async getAgentWeightRecords(agentId) {
        // This would call a method we need to add to AgentPersistenceManager
        // For now, we'll return an empty array to show the interface
        try {
            // The AgentPersistenceManager would need a method like this:
            // return await this.persistence.getNeuralWeightRecords(agentId);
            console.log(`üì• Loading weight records for agent ${agentId}`);
            return []; // Placeholder
        }
        catch (error) {
            console.error(`‚ùå Failed to load weight records:`, error.message);
            throw error;
        }
    }
    /**
     * Get compression statistics
     */
    getCompressionStats() {
        return {
            compressionEnabled: this.compressionEnabled,
            checksumValidation: this.checksumValidation,
            compressionThreshold: this.compressionThreshold
        };
    }
    /**
     * Configure compression settings
     */
    configureCompression(options) {
        if (options.enabled !== undefined) {
            this.compressionEnabled = options.enabled;
        }
        if (options.threshold !== undefined) {
            this.compressionThreshold = options.threshold;
        }
        if (options.validation !== undefined) {
            this.checksumValidation = options.validation;
        }
        console.log('‚öôÔ∏è Neural weight storage configuration updated:', {
            compressionEnabled: this.compressionEnabled,
            compressionThreshold: this.compressionThreshold,
            checksumValidation: this.checksumValidation
        });
    }
}
exports.NeuralWeightStorage = NeuralWeightStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,