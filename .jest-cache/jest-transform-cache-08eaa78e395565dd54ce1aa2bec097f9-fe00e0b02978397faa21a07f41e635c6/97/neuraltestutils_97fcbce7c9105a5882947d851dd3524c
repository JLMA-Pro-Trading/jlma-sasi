4fef5142f4d9010ff1b6091ece49c1d2
"use strict";
/**
 * Neural Testing Utilities
 * Comprehensive utilities for testing neural agent functionality
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeuralAssertions = exports.TestDataGenerator = exports.PerformanceTestUtils = exports.MockNeuralMeshService = exports.NeuralAgentFactory = void 0;
/**
 * Factory for creating mock neural agents
 */
class NeuralAgentFactory {
    static createMockAgent(overrides = {}) {
        return {
            id: `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            name: `TestAgent-${Math.random().toString(36).substr(2, 4)}`,
            type: 'neural',
            status: 'active',
            currentTask: 'Test task execution',
            repository: 'test-repo',
            branch: 'main',
            completedTasks: Math.floor(Math.random() * 10),
            efficiency: Math.floor(Math.random() * 40) + 60,
            progress: Math.random(),
            position: {
                x: (Math.random() - 0.5) * 100,
                y: (Math.random() - 0.5) * 100,
                z: (Math.random() - 0.5) * 100
            },
            owner: 'Test Suite',
            neuralId: `neuron_${Math.random().toString(36).substr(2, 9)}`,
            meshConnection: {
                connected: true,
                meshId: `mesh_${Math.random().toString(36).substr(2, 9)}`,
                nodeType: 'inter',
                layer: Math.floor(Math.random() * 6) + 1,
                synapses: Math.floor(Math.random() * 50) + 10,
                activation: Math.random(),
                lastSpike: new Date()
            },
            realtime: {
                cpuUsage: Math.random() * 50 + 20,
                memoryUsage: Math.random() * 60 + 30,
                networkLatency: Math.random() * 10 + 1,
                wasmPerformance: 2.8
            },
            ...overrides
        };
    }
    static createMockNeuralAgent(overrides = {}) {
        const baseAgent = this.createMockAgent();
        return {
            ...baseAgent,
            type: 'neural',
            neuralProperties: {
                neuronId: `neuron_${Math.random().toString(36).substr(2, 9)}`,
                meshId: `mesh_${Math.random().toString(36).substr(2, 9)}`,
                nodeType: 'inter',
                layer: Math.floor(Math.random() * 6) + 1,
                threshold: 0.5 + (Math.random() - 0.5) * 0.4,
                activation: Math.random(),
                connections: Array.from({ length: 5 }, () => Math.random().toString(36).substr(2, 9)),
                spikeHistory: Array.from({ length: 10 }, () => Math.random()),
                lastSpike: new Date()
            },
            wasmMetrics: {
                executionTime: Math.random() * 50 + 5,
                memoryUsage: Math.random() * 1024 * 1024,
                simdAcceleration: true,
                performanceScore: Math.floor(Math.random() * 20) + 80
            },
            ...overrides
        };
    }
    static createMockMeshConnection(overrides = {}) {
        return {
            id: `conn_${Date.now()}`,
            status: 'connected',
            meshId: `mesh_${Math.random().toString(36).substr(2, 9)}`,
            nodeCount: Math.floor(Math.random() * 100) + 50,
            synapseCount: Math.floor(Math.random() * 500) + 200,
            lastActivity: new Date(),
            ...overrides
        };
    }
}
exports.NeuralAgentFactory = NeuralAgentFactory;
/**
 * Mock Neural Mesh Service for testing
 */
class MockNeuralMeshService {
    constructor() {
        Object.defineProperty(this, "eventListeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "connection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "agents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "sharedMeshId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.connection = NeuralAgentFactory.createMockMeshConnection();
        this.sharedMeshId = this.connection.meshId;
    }
    // Mock all public methods from NeuralMeshService
    async initialize() {
        if (this.connection) {
            this.connection.status = 'connected';
            this.emit('connected', this.connection);
        }
        return true;
    }
    async createNeuralAgent(type, config) {
        const neuronId = `neuron_${Math.random().toString(36).substr(2, 9)}`;
        const agent = NeuralAgentFactory.createMockNeuralAgent({
            type,
            neuralId: neuronId, // Ensure consistency between neuralId and neuralProperties.neuronId
            meshConnection: {
                connected: true,
                meshId: this.sharedMeshId,
                nodeType: 'inter',
                layer: Math.floor(Math.random() * 6) + 1,
                synapses: Math.floor(Math.random() * 50) + 10,
                activation: Math.random(),
                lastSpike: new Date()
            },
            neuralProperties: {
                neuronId: neuronId, // Same as neuralId for consistency
                meshId: this.sharedMeshId, // Ensure same mesh ID
                nodeType: 'inter',
                layer: Math.floor(Math.random() * 6) + 1,
                threshold: 0.5 + (Math.random() - 0.5) * 0.4,
                activation: Math.random(),
                connections: Array.from({ length: 5 }, () => Math.random().toString(36).substr(2, 9)),
                spikeHistory: Array.from({ length: 10 }, () => Math.random()),
                lastSpike: new Date()
            }
        });
        this.agents.set(agent.id, agent);
        this.emit('agent_created', agent);
        return agent;
    }
    async updateNeuralAgent(agent) {
        // Simulate neural activity update
        agent.neuralProperties.activation = Math.random();
        agent.neuralProperties.spikeHistory.push(agent.neuralProperties.activation);
        if (agent.neuralProperties.spikeHistory.length > 10) {
            agent.neuralProperties.spikeHistory.shift();
        }
        this.agents.set(agent.id, agent);
        this.emit('agent_updated', agent);
        return agent;
    }
    async getMeshStatus() {
        return {
            nodeCount: this.connection?.nodeCount || 0,
            synapseCount: this.connection?.synapseCount || 0,
            activity: Math.random(),
            connectivity: Math.random() * 0.5 + 0.3,
            efficiency: Math.random() * 0.3 + 0.7
        };
    }
    async trainMesh(patterns) {
        // Simulate training delay
        await new Promise(resolve => setTimeout(resolve, 10));
        this.emit('mesh_trained', { patterns: patterns.length, accuracy: Math.random() * 0.2 + 0.8 });
        return true;
    }
    getConnectionStatus() {
        return this.connection;
    }
    isWasmEnabled() {
        return true;
    }
    async disconnect() {
        if (this.connection) {
            this.connection.status = 'disconnected';
            this.emit('disconnected', this.connection);
        }
        this.eventListeners.clear();
    }
    // Event system
    on(event, callback) {
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        this.eventListeners.get(event).push(callback);
    }
    once(event, callback) {
        const wrapper = (...args) => {
            this.off(event, wrapper);
            callback(...args);
        };
        this.on(event, wrapper);
    }
    off(event, callback) {
        const listeners = this.eventListeners.get(event);
        if (listeners) {
            const index = listeners.indexOf(callback);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        }
    }
    emit(event, data) {
        const listeners = this.eventListeners.get(event);
        if (listeners) {
            // Use setTimeout to make events asynchronous but immediate
            setTimeout(() => {
                listeners.forEach(callback => callback(data));
            }, 0);
        }
    }
    // Test utilities
    getAgent(id) {
        return this.agents.get(id);
    }
    getAllAgents() {
        return Array.from(this.agents.values());
    }
    clearAgents() {
        this.agents.clear();
    }
}
exports.MockNeuralMeshService = MockNeuralMeshService;
/**
 * Performance testing utilities
 */
class PerformanceTestUtils {
    /**
     * Test neural computation performance
     */
    static async testNeuralPerformance(service, iterations = 100, maxTimeMs = 50) {
        const times = [];
        const agent = await service.createNeuralAgent('neural');
        if (!agent) {
            throw new Error('Failed to create test agent');
        }
        for (let i = 0; i < iterations; i++) {
            const start = performance.now();
            await service.updateNeuralAgent(agent);
            const end = performance.now();
            times.push(end - start);
        }
        const averageTime = times.reduce((a, b) => a + b, 0) / times.length;
        const maxTime = Math.max(...times);
        const passed = maxTime <= maxTimeMs;
        return { averageTime, maxTime, passed };
    }
    /**
     * Test mesh coordination performance
     */
    static async testMeshCoordination(service, agentCount = 10, maxTimeMs = 100) {
        // Test mesh setup performance
        const setupStart = performance.now();
        const agents = [];
        for (let i = 0; i < agentCount; i++) {
            const agent = await service.createNeuralAgent('neural');
            if (agent)
                agents.push(agent);
        }
        const setupEnd = performance.now();
        const setupTime = setupEnd - setupStart;
        // Test coordination update performance
        const updateStart = performance.now();
        await Promise.all(agents.map(agent => service.updateNeuralAgent(agent)));
        const updateEnd = performance.now();
        const updateTime = updateEnd - updateStart;
        const passed = setupTime <= maxTimeMs && updateTime <= maxTimeMs;
        return { setupTime, updateTime, passed };
    }
    /**
     * Memory leak detection utility
     */
    static createMemoryLeakDetector() {
        const initialMemory = process.memoryUsage();
        let measurements = [initialMemory];
        return {
            measure: () => {
                measurements.push(process.memoryUsage());
            },
            analyze: (threshold = 50 * 1024 * 1024) => {
                if (measurements.length < 2) {
                    return { leaked: false, growth: 0 };
                }
                const latest = measurements[measurements.length - 1];
                const growth = latest.heapUsed - initialMemory.heapUsed;
                return {
                    leaked: growth > threshold,
                    growth
                };
            },
            reset: () => {
                measurements = [process.memoryUsage()];
            }
        };
    }
}
exports.PerformanceTestUtils = PerformanceTestUtils;
/**
 * Test data generators
 */
class TestDataGenerator {
    /**
     * Generate neural training patterns
     */
    static generateTrainingPatterns(count = 100) {
        return Array.from({ length: count }, (_, i) => ({
            id: i,
            input: Array.from({ length: 10 }, () => Math.random()),
            output: Array.from({ length: 5 }, () => Math.random()),
            weight: Math.random()
        }));
    }
    /**
     * Generate synthetic neural spikes
     */
    static generateSpikeData(duration = 1000, frequency = 50) {
        const spikes = [];
        const interval = 1000 / frequency; // ms between spikes
        for (let t = 0; t < duration; t += interval) {
            spikes.push(Math.random() > 0.3 ? 1 : 0); // 70% spike probability
        }
        return spikes;
    }
    /**
     * Generate mesh topology data
     */
    static generateMeshTopology(nodeCount = 50) {
        const nodes = Array.from({ length: nodeCount }, (_, i) => ({
            id: i,
            type: ['sensory', 'motor', 'inter', 'pyramidal', 'purkinje'][i % 5],
            layer: Math.floor(i / 10) + 1,
            position: {
                x: Math.random() * 100,
                y: Math.random() * 100,
                z: Math.random() * 100
            }
        }));
        const connections = [];
        for (let i = 0; i < nodeCount; i++) {
            const connectionCount = Math.floor(Math.random() * 8) + 2;
            for (let j = 0; j < connectionCount; j++) {
                const target = Math.floor(Math.random() * nodeCount);
                if (target !== i) {
                    connections.push({
                        from: i,
                        to: target,
                        weight: Math.random() * 2 - 1,
                        delay: Math.random() * 5
                    });
                }
            }
        }
        return { nodes, connections };
    }
}
exports.TestDataGenerator = TestDataGenerator;
/**
 * Assertion helpers for neural testing
 */
class NeuralAssertions {
    /**
     * Assert agent has valid neural properties
     */
    static assertValidNeuralAgent(agent) {
        expect(agent).toBeDefined();
        expect(agent.neuralProperties).toBeDefined();
        expect(agent.wasmMetrics).toBeDefined();
        expect(agent.neuralProperties.neuronId).toMatch(/^neuron_/);
        expect(agent.neuralProperties.layer).toBeGreaterThan(0);
        expect(agent.neuralProperties.layer).toBeLessThanOrEqual(6);
        expect(agent.neuralProperties.threshold).toBeGreaterThan(0);
        expect(agent.neuralProperties.threshold).toBeLessThanOrEqual(1);
        expect(agent.wasmMetrics.performanceScore).toBeGreaterThan(0);
        expect(agent.wasmMetrics.performanceScore).toBeLessThanOrEqual(100);
    }
    /**
     * Assert mesh connection is valid
     */
    static assertValidMeshConnection(connection) {
        expect(connection).toBeDefined();
        expect(connection.id).toMatch(/^conn_/);
        expect(connection.status).toMatch(/^(connecting|connected|disconnected|error)$/);
        expect(connection.nodeCount).toBeGreaterThanOrEqual(0);
        expect(connection.synapseCount).toBeGreaterThanOrEqual(0);
        expect(connection.lastActivity).toBeInstanceOf(Date);
    }
    /**
     * Assert performance metrics meet thresholds
     */
    static assertPerformanceThresholds(metrics, thresholds) {
        expect(metrics.averageTime).toBeLessThanOrEqual(thresholds.averageMs);
        expect(metrics.maxTime).toBeLessThanOrEqual(thresholds.maxMs);
    }
    /**
     * Assert no memory leaks
     */
    static assertNoMemoryLeaks(detector) {
        const analysis = detector.analyze();
        expect(analysis.leaked).toBe(false);
        if (analysis.leaked) {
            console.warn(`Memory leak detected: ${analysis.growth} bytes`);
        }
    }
}
exports.NeuralAssertions = NeuralAssertions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,